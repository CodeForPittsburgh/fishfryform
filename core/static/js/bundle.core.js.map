{"version":3,"sources":["node_modules/.pnpm/registry.npmjs.org/browser-pack/6.1.0/node_modules/browser-pack/_prelude.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/dist/js/npm.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/affix.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/alert.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/button.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/carousel.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/collapse.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/dropdown.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/modal.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/popover.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/scrollspy.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/tab.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/tooltip.js","node_modules/.pnpm/registry.npmjs.org/bootstrap/3.4.1/node_modules/bootstrap/js/transition.js","node_modules/.pnpm/registry.npmjs.org/jquery/3.4.1/node_modules/jquery/dist/jquery.js","src/js/core.js","src/js/utils.js"],"names":[],"mappings":"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","file":"bundle.core.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// This file is autogenerated via the `commonjs` Grunt task. You can require() this file in a CommonJS environment.\nrequire('../../js/transition.js')\nrequire('../../js/alert.js')\nrequire('../../js/button.js')\nrequire('../../js/carousel.js')\nrequire('../../js/collapse.js')\nrequire('../../js/dropdown.js')\nrequire('../../js/modal.js')\nrequire('../../js/tooltip.js')\nrequire('../../js/popover.js')\nrequire('../../js/scrollspy.js')\nrequire('../../js/tab.js')\nrequire('../../js/affix.js')","/* ========================================================================\n * Bootstrap: affix.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#affix\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function (element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options)\n\n    var target = this.options.target === Affix.DEFAULTS.target ? $(this.options.target) : $(document).find(this.options.target)\n\n    this.$target = target\n      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))\n      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))\n\n    this.$element     = $(element)\n    this.affixed      = null\n    this.unpin        = null\n    this.pinnedOffset = null\n\n    this.checkPosition()\n  }\n\n  Affix.VERSION  = '3.4.1'\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  }\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop    = this.$target.scrollTop()\n    var position     = this.$element.offset()\n    var targetHeight = this.$target.height()\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n    }\n\n    var initializing   = this.affixed == null\n    var colliderTop    = initializing ? scrollTop : position.top\n    var colliderHeight = initializing ? targetHeight : height\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n    return false\n  }\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset\n    this.$element.removeClass(Affix.RESET).addClass('affix')\n    var scrollTop = this.$target.scrollTop()\n    var position  = this.$element.offset()\n    return (this.pinnedOffset = position.top - scrollTop)\n  }\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1)\n  }\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return\n\n    var height       = this.$element.height()\n    var offset       = this.options.offset\n    var offsetTop    = offset.top\n    var offsetBottom = offset.bottom\n    var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n    if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '')\n\n      var affixType = 'affix' + (affix ? '-' + affix : '')\n      var e         = $.Event(affixType + '.bs.affix')\n\n      this.$element.trigger(e)\n\n      if (e.isDefaultPrevented()) return\n\n      this.affixed = affix\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n      this.$element\n        .removeClass(Affix.RESET)\n        .addClass(affixType)\n        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      })\n    }\n  }\n\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.affix')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.affix\n\n  $.fn.affix             = Plugin\n  $.fn.affix.Constructor = Affix\n\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old\n    return this\n  }\n\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this)\n      var data = $spy.data()\n\n      data.offset = data.offset || {}\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom\n      if (data.offsetTop    != null) data.offset.top    = data.offsetTop\n\n      Plugin.call($spy, data)\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: alert.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]'\n  var Alert   = function (el) {\n    $(el).on('click', dismiss, this.close)\n  }\n\n  Alert.VERSION = '3.4.1'\n\n  Alert.TRANSITION_DURATION = 150\n\n  Alert.prototype.close = function (e) {\n    var $this    = $(this)\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    selector    = selector === '#' ? [] : selector\n    var $parent = $(document).find(selector)\n\n    if (e) e.preventDefault()\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert')\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'))\n\n    if (e.isDefaultPrevented()) return\n\n    $parent.removeClass('in')\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove()\n    }\n\n    $.support.transition && $parent.hasClass('fade') ?\n      $parent\n        .one('bsTransitionEnd', removeElement)\n        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :\n      removeElement()\n  }\n\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.alert')\n\n      if (!data) $this.data('bs.alert', (data = new Alert(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.alert\n\n  $.fn.alert             = Plugin\n  $.fn.alert.Constructor = Alert\n\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old\n    return this\n  }\n\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: button.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function (element, options) {\n    this.$element  = $(element)\n    this.options   = $.extend({}, Button.DEFAULTS, options)\n    this.isLoading = false\n  }\n\n  Button.VERSION  = '3.4.1'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n  Button.prototype.setState = function (state) {\n    var d    = 'disabled'\n    var $el  = this.$element\n    var val  = $el.is('input') ? 'val' : 'html'\n    var data = $el.data()\n\n    state += 'Text'\n\n    if (data.resetText == null) $el.data('resetText', $el[val]())\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state])\n\n      if (state == 'loadingText') {\n        this.isLoading = true\n        $el.addClass(d).attr(d, d).prop(d, true)\n      } else if (this.isLoading) {\n        this.isLoading = false\n        $el.removeClass(d).removeAttr(d).prop(d, false)\n      }\n    }, this), 0)\n  }\n\n  Button.prototype.toggle = function () {\n    var changed = true\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n    if ($parent.length) {\n      var $input = this.$element.find('input')\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false\n        $parent.find('.active').removeClass('active')\n        this.$element.addClass('active')\n      } else if ($input.prop('type') == 'checkbox') {\n        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n        this.$element.toggleClass('active')\n      }\n      $input.prop('checked', this.$element.hasClass('active'))\n      if (changed) $input.trigger('change')\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n      this.$element.toggleClass('active')\n    }\n  }\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.button', (data = new Button(this, options)))\n\n      if (option == 'toggle') data.toggle()\n      else if (option) data.setState(option)\n    })\n  }\n\n  var old = $.fn.button\n\n  $.fn.button             = Plugin\n  $.fn.button.Constructor = Button\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old\n    return this\n  }\n\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document)\n    .on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      var $btn = $(e.target).closest('.btn')\n      Plugin.call($btn, 'toggle')\n      if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n        e.preventDefault()\n        // The target component still receive the focus\n        if ($btn.is('input,button')) $btn.trigger('focus')\n        else $btn.find('input:visible,button:visible').first().trigger('focus')\n      }\n    })\n    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))\n    })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: carousel.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function (element, options) {\n    this.$element    = $(element)\n    this.$indicators = this.$element.find('.carousel-indicators')\n    this.options     = options\n    this.paused      = null\n    this.sliding     = null\n    this.interval    = null\n    this.$active     = null\n    this.$items      = null\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element\n      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))\n      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))\n  }\n\n  Carousel.VERSION  = '3.4.1'\n\n  Carousel.TRANSITION_DURATION = 600\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  }\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return\n    switch (e.which) {\n      case 37: this.prev(); break\n      case 39: this.next(); break\n      default: return\n    }\n\n    e.preventDefault()\n  }\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false)\n\n    this.interval && clearInterval(this.interval)\n\n    this.options.interval\n      && !this.paused\n      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))\n\n    return this\n  }\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item')\n    return this.$items.index(item || this.$active)\n  }\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active)\n    var willWrap = (direction == 'prev' && activeIndex === 0)\n                || (direction == 'next' && activeIndex == (this.$items.length - 1))\n    if (willWrap && !this.options.wrap) return active\n    var delta = direction == 'prev' ? -1 : 1\n    var itemIndex = (activeIndex + delta) % this.$items.length\n    return this.$items.eq(itemIndex)\n  }\n\n  Carousel.prototype.to = function (pos) {\n    var that        = this\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))\n\n    if (pos > (this.$items.length - 1) || pos < 0) return\n\n    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle()\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))\n  }\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true)\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end)\n      this.cycle(true)\n    }\n\n    this.interval = clearInterval(this.interval)\n\n    return this\n  }\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return\n    return this.slide('next')\n  }\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return\n    return this.slide('prev')\n  }\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active   = this.$element.find('.item.active')\n    var $next     = next || this.getItemForDirection(type, $active)\n    var isCycling = this.interval\n    var direction = type == 'next' ? 'left' : 'right'\n    var that      = this\n\n    if ($next.hasClass('active')) return (this.sliding = false)\n\n    var relatedTarget = $next[0]\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    })\n    this.$element.trigger(slideEvent)\n    if (slideEvent.isDefaultPrevented()) return\n\n    this.sliding = true\n\n    isCycling && this.pause()\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active')\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])\n      $nextIndicator && $nextIndicator.addClass('active')\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type)\n      if (typeof $next === 'object' && $next.length) {\n        $next[0].offsetWidth // force reflow\n      }\n      $active.addClass(direction)\n      $next.addClass(direction)\n      $active\n        .one('bsTransitionEnd', function () {\n          $next.removeClass([type, direction].join(' ')).addClass('active')\n          $active.removeClass(['active', direction].join(' '))\n          that.sliding = false\n          setTimeout(function () {\n            that.$element.trigger(slidEvent)\n          }, 0)\n        })\n        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)\n    } else {\n      $active.removeClass('active')\n      $next.addClass('active')\n      this.sliding = false\n      this.$element.trigger(slidEvent)\n    }\n\n    isCycling && this.cycle()\n\n    return this\n  }\n\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.carousel')\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)\n      var action  = typeof option == 'string' ? option : options.slide\n\n      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))\n      if (typeof option == 'number') data.to(option)\n      else if (action) data[action]()\n      else if (options.interval) data.pause().cycle()\n    })\n  }\n\n  var old = $.fn.carousel\n\n  $.fn.carousel             = Plugin\n  $.fn.carousel.Constructor = Carousel\n\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old\n    return this\n  }\n\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function (e) {\n    var $this   = $(this)\n    var href    = $this.attr('href')\n    if (href) {\n      href = href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n    }\n\n    var target  = $this.attr('data-target') || href\n    var $target = $(document).find(target)\n\n    if (!$target.hasClass('carousel')) return\n\n    var options = $.extend({}, $target.data(), $this.data())\n    var slideIndex = $this.attr('data-slide-to')\n    if (slideIndex) options.interval = false\n\n    Plugin.call($target, options)\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex)\n    }\n\n    e.preventDefault()\n  }\n\n  $(document)\n    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)\n    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this)\n      Plugin.call($carousel, $carousel.data())\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: collapse.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function (element, options) {\n    this.$element      = $(element)\n    this.options       = $.extend({}, Collapse.DEFAULTS, options)\n    this.$trigger      = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' +\n                           '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')\n    this.transitioning = null\n\n    if (this.options.parent) {\n      this.$parent = this.getParent()\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger)\n    }\n\n    if (this.options.toggle) this.toggle()\n  }\n\n  Collapse.VERSION  = '3.4.1'\n\n  Collapse.TRANSITION_DURATION = 350\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  }\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width')\n    return hasWidth ? 'width' : 'height'\n  }\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return\n\n    var activesData\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse')\n      if (activesData && activesData.transitioning) return\n    }\n\n    var startEvent = $.Event('show.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide')\n      activesData || actives.data('bs.collapse', null)\n    }\n\n    var dimension = this.dimension()\n\n    this.$element\n      .removeClass('collapse')\n      .addClass('collapsing')[dimension](0)\n      .attr('aria-expanded', true)\n\n    this.$trigger\n      .removeClass('collapsed')\n      .attr('aria-expanded', true)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse in')[dimension]('')\n      this.transitioning = 0\n      this.$element\n        .trigger('shown.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'))\n\n    this.$element\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])\n  }\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return\n\n    var startEvent = $.Event('hide.bs.collapse')\n    this.$element.trigger(startEvent)\n    if (startEvent.isDefaultPrevented()) return\n\n    var dimension = this.dimension()\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight\n\n    this.$element\n      .addClass('collapsing')\n      .removeClass('collapse in')\n      .attr('aria-expanded', false)\n\n    this.$trigger\n      .addClass('collapsed')\n      .attr('aria-expanded', false)\n\n    this.transitioning = 1\n\n    var complete = function () {\n      this.transitioning = 0\n      this.$element\n        .removeClass('collapsing')\n        .addClass('collapse')\n        .trigger('hidden.bs.collapse')\n    }\n\n    if (!$.support.transition) return complete.call(this)\n\n    this.$element\n      [dimension](0)\n      .one('bsTransitionEnd', $.proxy(complete, this))\n      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)\n  }\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']()\n  }\n\n  Collapse.prototype.getParent = function () {\n    return $(document).find(this.options.parent)\n      .find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]')\n      .each($.proxy(function (i, element) {\n        var $element = $(element)\n        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)\n      }, this))\n      .end()\n  }\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in')\n\n    $element.attr('aria-expanded', isOpen)\n    $trigger\n      .toggleClass('collapsed', !isOpen)\n      .attr('aria-expanded', isOpen)\n  }\n\n  function getTargetFromTrigger($trigger) {\n    var href\n    var target = $trigger.attr('data-target')\n      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '') // strip for ie7\n\n    return $(document).find(target)\n  }\n\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.collapse')\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false\n      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.collapse\n\n  $.fn.collapse             = Plugin\n  $.fn.collapse.Constructor = Collapse\n\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old\n    return this\n  }\n\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this   = $(this)\n\n    if (!$this.attr('data-target')) e.preventDefault()\n\n    var $target = getTargetFromTrigger($this)\n    var data    = $target.data('bs.collapse')\n    var option  = data ? 'toggle' : $this.data()\n\n    Plugin.call($target, option)\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: dropdown.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop'\n  var toggle   = '[data-toggle=\"dropdown\"]'\n  var Dropdown = function (element) {\n    $(element).on('click.bs.dropdown', this.toggle)\n  }\n\n  Dropdown.VERSION = '3.4.1'\n\n  function getParent($this) {\n    var selector = $this.attr('data-target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    var $parent = selector !== '#' ? $(document).find(selector) : null\n\n    return $parent && $parent.length ? $parent : $this.parent()\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return\n    $(backdrop).remove()\n    $(toggle).each(function () {\n      var $this         = $(this)\n      var $parent       = getParent($this)\n      var relatedTarget = { relatedTarget: this }\n\n      if (!$parent.hasClass('open')) return\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this.attr('aria-expanded', 'false')\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))\n    })\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this)\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    clearMenus()\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div'))\n          .addClass('dropdown-backdrop')\n          .insertAfter($(this))\n          .on('click', clearMenus)\n      }\n\n      var relatedTarget = { relatedTarget: this }\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))\n\n      if (e.isDefaultPrevented()) return\n\n      $this\n        .trigger('focus')\n        .attr('aria-expanded', 'true')\n\n      $parent\n        .toggleClass('open')\n        .trigger($.Event('shown.bs.dropdown', relatedTarget))\n    }\n\n    return false\n  }\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return\n\n    var $this = $(this)\n\n    e.preventDefault()\n    e.stopPropagation()\n\n    if ($this.is('.disabled, :disabled')) return\n\n    var $parent  = getParent($this)\n    var isActive = $parent.hasClass('open')\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus')\n      return $this.trigger('click')\n    }\n\n    var desc = ' li:not(.disabled):visible a'\n    var $items = $parent.find('.dropdown-menu' + desc)\n\n    if (!$items.length) return\n\n    var index = $items.index(e.target)\n\n    if (e.which == 38 && index > 0)                 index--         // up\n    if (e.which == 40 && index < $items.length - 1) index++         // down\n    if (!~index)                                    index = 0\n\n    $items.eq(index).trigger('focus')\n  }\n\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.dropdown')\n\n      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))\n      if (typeof option == 'string') data[option].call($this)\n    })\n  }\n\n  var old = $.fn.dropdown\n\n  $.fn.dropdown             = Plugin\n  $.fn.dropdown.Constructor = Dropdown\n\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old\n    return this\n  }\n\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document)\n    .on('click.bs.dropdown.data-api', clearMenus)\n    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })\n    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)\n    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)\n    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: modal.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#modals\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function (element, options) {\n    this.options = options\n    this.$body = $(document.body)\n    this.$element = $(element)\n    this.$dialog = this.$element.find('.modal-dialog')\n    this.$backdrop = null\n    this.isShown = null\n    this.originalBodyPad = null\n    this.scrollbarWidth = 0\n    this.ignoreBackdropClick = false\n    this.fixedContent = '.navbar-fixed-top, .navbar-fixed-bottom'\n\n    if (this.options.remote) {\n      this.$element\n        .find('.modal-content')\n        .load(this.options.remote, $.proxy(function () {\n          this.$element.trigger('loaded.bs.modal')\n        }, this))\n    }\n  }\n\n  Modal.VERSION = '3.4.1'\n\n  Modal.TRANSITION_DURATION = 300\n  Modal.BACKDROP_TRANSITION_DURATION = 150\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  }\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget)\n  }\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this\n    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })\n\n    this.$element.trigger(e)\n\n    if (this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = true\n\n    this.checkScrollbar()\n    this.setScrollbar()\n    this.$body.addClass('modal-open')\n\n    this.escape()\n    this.resize()\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this))\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true\n      })\n    })\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade')\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body) // don't move modals dom position\n      }\n\n      that.$element\n        .show()\n        .scrollTop(0)\n\n      that.adjustDialog()\n\n      if (transition) {\n        that.$element[0].offsetWidth // force reflow\n      }\n\n      that.$element.addClass('in')\n\n      that.enforceFocus()\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })\n\n      transition ?\n        that.$dialog // wait for modal to slide in\n          .one('bsTransitionEnd', function () {\n            that.$element.trigger('focus').trigger(e)\n          })\n          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n        that.$element.trigger('focus').trigger(e)\n    })\n  }\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault()\n\n    e = $.Event('hide.bs.modal')\n\n    this.$element.trigger(e)\n\n    if (!this.isShown || e.isDefaultPrevented()) return\n\n    this.isShown = false\n\n    this.escape()\n    this.resize()\n\n    $(document).off('focusin.bs.modal')\n\n    this.$element\n      .removeClass('in')\n      .off('click.dismiss.bs.modal')\n      .off('mouseup.dismiss.bs.modal')\n\n    this.$dialog.off('mousedown.dismiss.bs.modal')\n\n    $.support.transition && this.$element.hasClass('fade') ?\n      this.$element\n        .one('bsTransitionEnd', $.proxy(this.hideModal, this))\n        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :\n      this.hideModal()\n  }\n\n  Modal.prototype.enforceFocus = function () {\n    $(document)\n      .off('focusin.bs.modal') // guard against infinite focus loop\n      .on('focusin.bs.modal', $.proxy(function (e) {\n        if (document !== e.target &&\n          this.$element[0] !== e.target &&\n          !this.$element.has(e.target).length) {\n          this.$element.trigger('focus')\n        }\n      }, this))\n  }\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide()\n      }, this))\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal')\n    }\n  }\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))\n    } else {\n      $(window).off('resize.bs.modal')\n    }\n  }\n\n  Modal.prototype.hideModal = function () {\n    var that = this\n    this.$element.hide()\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open')\n      that.resetAdjustments()\n      that.resetScrollbar()\n      that.$element.trigger('hidden.bs.modal')\n    })\n  }\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove()\n    this.$backdrop = null\n  }\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this\n    var animate = this.$element.hasClass('fade') ? 'fade' : ''\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate\n\n      this.$backdrop = $(document.createElement('div'))\n        .addClass('modal-backdrop ' + animate)\n        .appendTo(this.$body)\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false\n          return\n        }\n        if (e.target !== e.currentTarget) return\n        this.options.backdrop == 'static'\n          ? this.$element[0].focus()\n          : this.hide()\n      }, this))\n\n      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow\n\n      this.$backdrop.addClass('in')\n\n      if (!callback) return\n\n      doAnimate ?\n        this.$backdrop\n          .one('bsTransitionEnd', callback)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callback()\n\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in')\n\n      var callbackRemove = function () {\n        that.removeBackdrop()\n        callback && callback()\n      }\n      $.support.transition && this.$element.hasClass('fade') ?\n        this.$backdrop\n          .one('bsTransitionEnd', callbackRemove)\n          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :\n        callbackRemove()\n\n    } else if (callback) {\n      callback()\n    }\n  }\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog()\n  }\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight\n\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    })\n  }\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    })\n  }\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth\n    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect()\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth\n    this.scrollbarWidth = this.measureScrollbar()\n  }\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)\n    this.originalBodyPad = document.body.style.paddingRight || ''\n    var scrollbarWidth = this.scrollbarWidth\n    if (this.bodyIsOverflowing) {\n      this.$body.css('padding-right', bodyPad + scrollbarWidth)\n      $(this.fixedContent).each(function (index, element) {\n        var actualPadding = element.style.paddingRight\n        var calculatedPadding = $(element).css('padding-right')\n        $(element)\n          .data('padding-right', actualPadding)\n          .css('padding-right', parseFloat(calculatedPadding) + scrollbarWidth + 'px')\n      })\n    }\n  }\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad)\n    $(this.fixedContent).each(function (index, element) {\n      var padding = $(element).data('padding-right')\n      $(element).removeData('padding-right')\n      element.style.paddingRight = padding ? padding : ''\n    })\n  }\n\n  Modal.prototype.measureScrollbar = function () { // thx walsh\n    var scrollDiv = document.createElement('div')\n    scrollDiv.className = 'modal-scrollbar-measure'\n    this.$body.append(scrollDiv)\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth\n    this.$body[0].removeChild(scrollDiv)\n    return scrollbarWidth\n  }\n\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this = $(this)\n      var data = $this.data('bs.modal')\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)\n\n      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))\n      if (typeof option == 'string') data[option](_relatedTarget)\n      else if (options.show) data.show(_relatedTarget)\n    })\n  }\n\n  var old = $.fn.modal\n\n  $.fn.modal = Plugin\n  $.fn.modal.Constructor = Modal\n\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old\n    return this\n  }\n\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this = $(this)\n    var href = $this.attr('href')\n    var target = $this.attr('data-target') ||\n      (href && href.replace(/.*(?=#[^\\s]+$)/, '')) // strip for ie7\n\n    var $target = $(document).find(target)\n    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())\n\n    if ($this.is('a')) e.preventDefault()\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus')\n      })\n    })\n    Plugin.call($target, option, this)\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: popover.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function (element, options) {\n    this.init('popover', element, options)\n  }\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')\n\n  Popover.VERSION  = '3.4.1'\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)\n\n  Popover.prototype.constructor = Popover\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS\n  }\n\n  Popover.prototype.setContent = function () {\n    var $tip    = this.tip()\n    var title   = this.getTitle()\n    var content = this.getContent()\n\n    if (this.options.html) {\n      var typeContent = typeof content\n\n      if (this.options.sanitize) {\n        title = this.sanitizeHtml(title)\n\n        if (typeContent === 'string') {\n          content = this.sanitizeHtml(content)\n        }\n      }\n\n      $tip.find('.popover-title').html(title)\n      $tip.find('.popover-content').children().detach().end()[\n        typeContent === 'string' ? 'html' : 'append'\n      ](content)\n    } else {\n      $tip.find('.popover-title').text(title)\n      $tip.find('.popover-content').children().detach().end().text(content)\n    }\n\n    $tip.removeClass('fade top bottom left right in')\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n  }\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent()\n  }\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element\n    var o  = this.options\n\n    return $e.attr('data-content')\n      || (typeof o.content == 'function' ?\n        o.content.call($e[0]) :\n        o.content)\n  }\n\n  Popover.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n  }\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover\n\n  $.fn.popover             = Plugin\n  $.fn.popover.Constructor = Popover\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  }\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: scrollspy.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body          = $(document.body)\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)\n    this.selector       = (this.options.target || '') + ' .nav li > a'\n    this.offsets        = []\n    this.targets        = []\n    this.activeTarget   = null\n    this.scrollHeight   = 0\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))\n    this.refresh()\n    this.process()\n  }\n\n  ScrollSpy.VERSION  = '3.4.1'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n  }\n\n  ScrollSpy.prototype.refresh = function () {\n    var that          = this\n    var offsetMethod  = 'offset'\n    var offsetBase    = 0\n\n    this.offsets      = []\n    this.targets      = []\n    this.scrollHeight = this.getScrollHeight()\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position'\n      offsetBase   = this.$scrollElement.scrollTop()\n    }\n\n    this.$body\n      .find(this.selector)\n      .map(function () {\n        var $el   = $(this)\n        var href  = $el.data('target') || $el.attr('href')\n        var $href = /^#./.test(href) && $(href)\n\n        return ($href\n          && $href.length\n          && $href.is(':visible')\n          && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n      })\n      .sort(function (a, b) { return a[0] - b[0] })\n      .each(function () {\n        that.offsets.push(this[0])\n        that.targets.push(this[1])\n      })\n  }\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n    var scrollHeight = this.getScrollHeight()\n    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n    var offsets      = this.offsets\n    var targets      = this.targets\n    var activeTarget = this.activeTarget\n    var i\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh()\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null\n      return this.clear()\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i]\n        && scrollTop >= offsets[i]\n        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n        && this.activate(targets[i])\n    }\n  }\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target\n\n    this.clear()\n\n    var selector = this.selector +\n      '[data-target=\"' + target + '\"],' +\n      this.selector + '[href=\"' + target + '\"]'\n\n    var active = $(selector)\n      .parents('li')\n      .addClass('active')\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active\n        .closest('li.dropdown')\n        .addClass('active')\n    }\n\n    active.trigger('activate.bs.scrollspy')\n  }\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector)\n      .parentsUntil(this.options.target, '.active')\n      .removeClass('active')\n  }\n\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.scrollspy\n\n  $.fn.scrollspy             = Plugin\n  $.fn.scrollspy.Constructor = ScrollSpy\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old\n    return this\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: tab.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function (element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element)\n    // jscs:enable requireDollarBeforejQueryAssignment\n  }\n\n  Tab.VERSION = '3.4.1'\n\n  Tab.TRANSITION_DURATION = 150\n\n  Tab.prototype.show = function () {\n    var $this    = this.element\n    var $ul      = $this.closest('ul:not(.dropdown-menu)')\n    var selector = $this.data('target')\n\n    if (!selector) {\n      selector = $this.attr('href')\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, '') // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return\n\n    var $previous = $ul.find('.active:last a')\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    })\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    })\n\n    $previous.trigger(hideEvent)\n    $this.trigger(showEvent)\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return\n\n    var $target = $(document).find(selector)\n\n    this.activate($this.closest('li'), $ul)\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      })\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      })\n    })\n  }\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active    = container.find('> .active')\n    var transition = callback\n      && $.support.transition\n      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)\n\n    function next() {\n      $active\n        .removeClass('active')\n        .find('> .dropdown-menu > .active')\n        .removeClass('active')\n        .end()\n        .find('[data-toggle=\"tab\"]')\n        .attr('aria-expanded', false)\n\n      element\n        .addClass('active')\n        .find('[data-toggle=\"tab\"]')\n        .attr('aria-expanded', true)\n\n      if (transition) {\n        element[0].offsetWidth // reflow for transition\n        element.addClass('in')\n      } else {\n        element.removeClass('fade')\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element\n          .closest('li.dropdown')\n          .addClass('active')\n          .end()\n          .find('[data-toggle=\"tab\"]')\n          .attr('aria-expanded', true)\n      }\n\n      callback && callback()\n    }\n\n    $active.length && transition ?\n      $active\n        .one('bsTransitionEnd', next)\n        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :\n      next()\n\n    $active.removeClass('in')\n  }\n\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this)\n      var data  = $this.data('bs.tab')\n\n      if (!data) $this.data('bs.tab', (data = new Tab(this)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tab\n\n  $.fn.tab             = Plugin\n  $.fn.tab.Constructor = Tab\n\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old\n    return this\n  }\n\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function (e) {\n    e.preventDefault()\n    Plugin.call($(this), 'show')\n  }\n\n  $(document)\n    .on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler)\n    .on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler)\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: tooltip.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn']\n\n  var uriAttrs = [\n    'background',\n    'cite',\n    'href',\n    'itemtype',\n    'longdesc',\n    'poster',\n    'src',\n    'xlink:href'\n  ]\n\n  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\n  var DefaultWhitelist = {\n    // Global attributes allowed on any supplied element below.\n    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n    a: ['target', 'href', 'title', 'rel'],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: ['src', 'alt', 'title', 'width', 'height'],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n  }\n\n  /**\n   * A pattern that recognizes a commonly useful subset of URLs that are safe.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi\n\n  /**\n   * A pattern that matches safe data URLs. Only matches image, video and audio types.\n   *\n   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts\n   */\n  var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i\n\n  function allowedAttribute(attr, allowedAttributeList) {\n    var attrName = attr.nodeName.toLowerCase()\n\n    if ($.inArray(attrName, allowedAttributeList) !== -1) {\n      if ($.inArray(attrName, uriAttrs) !== -1) {\n        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN))\n      }\n\n      return true\n    }\n\n    var regExp = $(allowedAttributeList).filter(function (index, value) {\n      return value instanceof RegExp\n    })\n\n    // Check if a regular expression validates the attribute.\n    for (var i = 0, l = regExp.length; i < l; i++) {\n      if (attrName.match(regExp[i])) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {\n    if (unsafeHtml.length === 0) {\n      return unsafeHtml\n    }\n\n    if (sanitizeFn && typeof sanitizeFn === 'function') {\n      return sanitizeFn(unsafeHtml)\n    }\n\n    // IE 8 and below don't support createHTMLDocument\n    if (!document.implementation || !document.implementation.createHTMLDocument) {\n      return unsafeHtml\n    }\n\n    var createdDocument = document.implementation.createHTMLDocument('sanitization')\n    createdDocument.body.innerHTML = unsafeHtml\n\n    var whitelistKeys = $.map(whiteList, function (el, i) { return i })\n    var elements = $(createdDocument.body).find('*')\n\n    for (var i = 0, len = elements.length; i < len; i++) {\n      var el = elements[i]\n      var elName = el.nodeName.toLowerCase()\n\n      if ($.inArray(elName, whitelistKeys) === -1) {\n        el.parentNode.removeChild(el)\n\n        continue\n      }\n\n      var attributeList = $.map(el.attributes, function (el) { return el })\n      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || [])\n\n      for (var j = 0, len2 = attributeList.length; j < len2; j++) {\n        if (!allowedAttribute(attributeList[j], whitelistedAttributes)) {\n          el.removeAttribute(attributeList[j].nodeName)\n        }\n      }\n    }\n\n    return createdDocument.body.innerHTML\n  }\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function (element, options) {\n    this.type       = null\n    this.options    = null\n    this.enabled    = null\n    this.timeout    = null\n    this.hoverState = null\n    this.$element   = null\n    this.inState    = null\n\n    this.init('tooltip', element, options)\n  }\n\n  Tooltip.VERSION  = '3.4.1'\n\n  Tooltip.TRANSITION_DURATION = 150\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    },\n    sanitize : true,\n    sanitizeFn : null,\n    whiteList : DefaultWhitelist\n  }\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled   = true\n    this.type      = type\n    this.$element  = $(element)\n    this.options   = this.getOptions(options)\n    this.$viewport = this.options.viewport && $(document).find($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))\n    this.inState   = { click: false, hover: false, focus: false }\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')\n    }\n\n    var triggers = this.options.trigger.split(' ')\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i]\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))\n      } else if (trigger != 'manual') {\n        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'\n\n        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))\n      }\n    }\n\n    this.options.selector ?\n      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :\n      this.fixTitle()\n  }\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS\n  }\n\n  Tooltip.prototype.getOptions = function (options) {\n    var dataAttributes = this.$element.data()\n\n    for (var dataAttr in dataAttributes) {\n      if (dataAttributes.hasOwnProperty(dataAttr) && $.inArray(dataAttr, DISALLOWED_ATTRIBUTES) !== -1) {\n        delete dataAttributes[dataAttr]\n      }\n    }\n\n    options = $.extend({}, this.getDefaults(), dataAttributes, options)\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      }\n    }\n\n    if (options.sanitize) {\n      options.template = sanitizeHtml(options.template, options.whiteList, options.sanitizeFn)\n    }\n\n    return options\n  }\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options  = {}\n    var defaults = this.getDefaults()\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value\n    })\n\n    return options\n  }\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in'\n      return\n    }\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'in'\n\n    if (!self.options.delay || !self.options.delay.show) return self.show()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show()\n    }, self.options.delay.show)\n  }\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true\n    }\n\n    return false\n  }\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ?\n      obj : $(obj.currentTarget).data('bs.' + this.type)\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())\n      $(obj.currentTarget).data('bs.' + this.type, self)\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false\n    }\n\n    if (self.isInStateTrue()) return\n\n    clearTimeout(self.timeout)\n\n    self.hoverState = 'out'\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide()\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide()\n    }, self.options.delay.hide)\n  }\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type)\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e)\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])\n      if (e.isDefaultPrevented() || !inDom) return\n      var that = this\n\n      var $tip = this.tip()\n\n      var tipId = this.getUID(this.type)\n\n      this.setContent()\n      $tip.attr('id', tipId)\n      this.$element.attr('aria-describedby', tipId)\n\n      if (this.options.animation) $tip.addClass('fade')\n\n      var placement = typeof this.options.placement == 'function' ?\n        this.options.placement.call(this, $tip[0], this.$element[0]) :\n        this.options.placement\n\n      var autoToken = /\\s?auto?\\s?/i\n      var autoPlace = autoToken.test(placement)\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'\n\n      $tip\n        .detach()\n        .css({ top: 0, left: 0, display: 'block' })\n        .addClass(placement)\n        .data('bs.' + this.type, this)\n\n      this.options.container ? $tip.appendTo($(document).find(this.options.container)) : $tip.insertAfter(this.$element)\n      this.$element.trigger('inserted.bs.' + this.type)\n\n      var pos          = this.getPosition()\n      var actualWidth  = $tip[0].offsetWidth\n      var actualHeight = $tip[0].offsetHeight\n\n      if (autoPlace) {\n        var orgPlacement = placement\n        var viewportDim = this.getPosition(this.$viewport)\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :\n                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :\n                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :\n                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :\n                    placement\n\n        $tip\n          .removeClass(orgPlacement)\n          .addClass(placement)\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)\n\n      this.applyPlacement(calculatedOffset, placement)\n\n      var complete = function () {\n        var prevHoverState = that.hoverState\n        that.$element.trigger('shown.bs.' + that.type)\n        that.hoverState = null\n\n        if (prevHoverState == 'out') that.leave(that)\n      }\n\n      $.support.transition && this.$tip.hasClass('fade') ?\n        $tip\n          .one('bsTransitionEnd', complete)\n          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n        complete()\n    }\n  }\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip   = this.tip()\n    var width  = $tip[0].offsetWidth\n    var height = $tip[0].offsetHeight\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10)\n    var marginLeft = parseInt($tip.css('margin-left'), 10)\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop))  marginTop  = 0\n    if (isNaN(marginLeft)) marginLeft = 0\n\n    offset.top  += marginTop\n    offset.left += marginLeft\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function (props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        })\n      }\n    }, offset), 0)\n\n    $tip.addClass('in')\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth  = $tip[0].offsetWidth\n    var actualHeight = $tip[0].offsetHeight\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)\n\n    if (delta.left) offset.left += delta.left\n    else offset.top += delta.top\n\n    var isVertical          = /top|bottom/.test(placement)\n    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'\n\n    $tip.offset(offset)\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)\n  }\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow()\n      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n      .css(isVertical ? 'top' : 'left', '')\n  }\n\n  Tooltip.prototype.setContent = function () {\n    var $tip  = this.tip()\n    var title = this.getTitle()\n\n    if (this.options.html) {\n      if (this.options.sanitize) {\n        title = sanitizeHtml(title, this.options.whiteList, this.options.sanitizeFn)\n      }\n\n      $tip.find('.tooltip-inner').html(title)\n    } else {\n      $tip.find('.tooltip-inner').text(title)\n    }\n\n    $tip.removeClass('fade in top bottom left right')\n  }\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this\n    var $tip = $(this.$tip)\n    var e    = $.Event('hide.bs.' + this.type)\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach()\n      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element\n          .removeAttr('aria-describedby')\n          .trigger('hidden.bs.' + that.type)\n      }\n      callback && callback()\n    }\n\n    this.$element.trigger(e)\n\n    if (e.isDefaultPrevented()) return\n\n    $tip.removeClass('in')\n\n    $.support.transition && $tip.hasClass('fade') ?\n      $tip\n        .one('bsTransitionEnd', complete)\n        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :\n      complete()\n\n    this.hoverState = null\n\n    return this\n  }\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')\n    }\n  }\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle()\n  }\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element   = $element || this.$element\n\n    var el     = $element[0]\n    var isBody = el.tagName == 'BODY'\n\n    var elRect    = el.getBoundingClientRect()\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })\n    }\n    var isSvg = window.SVGElement && el instanceof window.SVGElement\n    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())\n    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset)\n  }\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :\n           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }\n\n  }\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 }\n    if (!this.$viewport) return delta\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0\n    var viewportDimensions = this.getPosition(this.$viewport)\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight\n      if (topEdgeOffset < viewportDimensions.top) { // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset\n      }\n    } else {\n      var leftEdgeOffset  = pos.left - viewportPadding\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth\n      if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset\n      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset\n      }\n    }\n\n    return delta\n  }\n\n  Tooltip.prototype.getTitle = function () {\n    var title\n    var $e = this.$element\n    var o  = this.options\n\n    title = $e.attr('data-original-title')\n      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)\n\n    return title\n  }\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do prefix += ~~(Math.random() * 1000000)\n    while (document.getElementById(prefix))\n    return prefix\n  }\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template)\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')\n      }\n    }\n    return this.$tip\n  }\n\n  Tooltip.prototype.arrow = function () {\n    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))\n  }\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true\n  }\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false\n  }\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled\n  }\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type)\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions())\n        $(e.currentTarget).data('bs.' + this.type, self)\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click\n      if (self.isInStateTrue()) self.enter(self)\n      else self.leave(self)\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)\n    }\n  }\n\n  Tooltip.prototype.destroy = function () {\n    var that = this\n    clearTimeout(this.timeout)\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type)\n      if (that.$tip) {\n        that.$tip.detach()\n      }\n      that.$tip = null\n      that.$arrow = null\n      that.$viewport = null\n      that.$element = null\n    })\n  }\n\n  Tooltip.prototype.sanitizeHtml = function (unsafeHtml) {\n    return sanitizeHtml(unsafeHtml, this.options.whiteList, this.options.sanitizeFn)\n  }\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.tooltip')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.tooltip\n\n  $.fn.tooltip             = Plugin\n  $.fn.tooltip.Constructor = Tooltip\n\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old\n    return this\n  }\n\n}(jQuery);\n","/* ========================================================================\n * Bootstrap: transition.js v3.4.1\n * https://getbootstrap.com/docs/3.4/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2019 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: https://modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      WebkitTransition : 'webkitTransitionEnd',\n      MozTransition    : 'transitionend',\n      OTransition      : 'oTransitionEnd otransitionend',\n      transition       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // https://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false\n    var $el = this\n    $(this).one('bsTransitionEnd', function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n\n    if (!$.support.transition) return\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function (e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\n      }\n    }\n  })\n\n}(jQuery);\n","/*!\n * jQuery JavaScript Library v3.4.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2019-05-01T21:04Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.4.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.4\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2019-04-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t(nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\") ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 && rdescend.test( selector ) ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = (elem.ownerDocument || elem).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( typeof elem.contentDocument !== \"undefined\" ) {\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t// Support: IE 9-11 only\n\t// Also use offsetWidth/offsetHeight for when box sizing is unreliable\n\t// We use getClientRects() to check for hidden/disconnected.\n\t// In those cases, the computed value can be trusted to be border-box\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\t\tval === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url, options ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","// jQuery + Bootstrap\r\nvar $ = require('../../node_modules/jquery/dist/jquery')\r\nwindow.jQuery = $;\r\nwindow.$ = $;\r\nrequire(\"bootstrap\");","// usage: log('inside coolFunc', this, arguments);\r\n// paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\r\nwindow.log = function() {\r\n    log.history = log.history || []; // store logs to an array for reference\r\n    log.history.push(arguments);\r\n    if (this.console) {\r\n        arguments.callee = arguments.callee.caller;\r\n        var newarr = [].slice.call(arguments);\r\n        (typeof console.log === 'object' ? log.apply.call(console.log, console, newarr) : console.log.apply(console, newarr));\r\n    }\r\n};\r\n\r\n// make it safe to use console.log always\r\n(function(b) {\r\n    function c() {} for (var d = \"assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,timeStamp,profile,profileEnd,time,timeEnd,trace,warn\".split(\",\"), a; a = d.pop();) { b[a] = b[a] || c } })((function() {\r\n    try { console.log(); return window.console; } catch (err) { return window.console = {}; }\r\n})());"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}