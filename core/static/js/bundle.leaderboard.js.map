{"version":3,"sources":["node_modules/.registry.npmjs.org/browser-pack/6.1.0/node_modules/browser-pack/_prelude.js","node_modules/.registry.npmjs.org/chart.js/2.9.3/node_modules/chart.js/dist/Chart.js","node_modules/.registry.npmjs.org/jquery/3.4.1/node_modules/jquery/dist/node_modules/jquery/dist/jquery.js","node_modules/.registry.npmjs.org/moment/2.24.0/node_modules/moment/moment.js","src/js/leaderboard.js"],"names":[],"mappings":"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","file":"bundle.leaderboard.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * Chart.js v2.9.3\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :\ntypeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :\n(global = global || self, global.Chart = factory(global.moment));\n}(this, (function (moment) { 'use strict';\n\nmoment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n['default'] || n;\n}\n\nvar colorName = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\nvar conversions = createCommonjsModule(function (module) {\n/* MIT license */\n\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in colorName) {\n\tif (colorName.hasOwnProperty(key)) {\n\t\treverseKeywords[colorName[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in colorName) {\n\t\tif (colorName.hasOwnProperty(keyword)) {\n\t\t\tvar value = colorName[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn colorName[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n});\nvar conversions_1 = conversions.rgb;\nvar conversions_2 = conversions.hsl;\nvar conversions_3 = conversions.hsv;\nvar conversions_4 = conversions.hwb;\nvar conversions_5 = conversions.cmyk;\nvar conversions_6 = conversions.xyz;\nvar conversions_7 = conversions.lab;\nvar conversions_8 = conversions.lch;\nvar conversions_9 = conversions.hex;\nvar conversions_10 = conversions.keyword;\nvar conversions_11 = conversions.ansi16;\nvar conversions_12 = conversions.ansi256;\nvar conversions_13 = conversions.hcg;\nvar conversions_14 = conversions.apple;\nvar conversions_15 = conversions.gray;\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nvar route = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nvar colorConvert = convert;\n\nvar colorName$1 = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\n/* MIT license */\n\n\nvar colorString = {\n   getRgba: getRgba,\n   getHsla: getHsla,\n   getRgb: getRgb,\n   getHsl: getHsl,\n   getHwb: getHwb,\n   getAlpha: getAlpha,\n\n   hexString: hexString,\n   rgbString: rgbString,\n   rgbaString: rgbaString,\n   percentString: percentString,\n   percentaString: percentaString,\n   hslString: hslString,\n   hslaString: hslaString,\n   hwbString: hwbString,\n   keyword: keyword\n};\n\nfunction getRgba(string) {\n   if (!string) {\n      return;\n   }\n   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,\n       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       keyword = /(\\w+)/;\n\n   var rgb = [0, 0, 0],\n       a = 1,\n       match = string.match(abbr),\n       hexAlpha = \"\";\n   if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i + 1]);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n         return [0, 0, 0, 0];\n      }\n      rgb = colorName$1[match[1]];\n      if (!rgb) {\n         return;\n      }\n   }\n\n   for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n   }\n   if (!a && a != 0) {\n      a = 1;\n   }\n   else {\n      a = scale(a, 0, 1);\n   }\n   rgb[3] = a;\n   return rgb;\n}\n\nfunction getHsla(string) {\n   if (!string) {\n      return;\n   }\n   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hsl);\n   if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n   }\n}\n\nfunction getHwb(string) {\n   if (!string) {\n      return;\n   }\n   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hwb);\n   if (match) {\n    var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n   }\n}\n\nfunction getRgb(string) {\n   var rgba = getRgba(string);\n   return rgba && rgba.slice(0, 3);\n}\n\nfunction getHsl(string) {\n  var hsla = getHsla(string);\n  return hsla && hsla.slice(0, 3);\n}\n\nfunction getAlpha(string) {\n   var vals = getRgba(string);\n   if (vals) {\n      return vals[3];\n   }\n   else if (vals = getHsla(string)) {\n      return vals[3];\n   }\n   else if (vals = getHwb(string)) {\n      return vals[3];\n   }\n}\n\n// generators\nfunction hexString(rgba, a) {\n   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];\n   return \"#\" + hexDouble(rgba[0]) \n              + hexDouble(rgba[1])\n              + hexDouble(rgba[2])\n              + (\n                 (a >= 0 && a < 1)\n                 ? hexDouble(Math.round(a * 255))\n                 : \"\"\n              );\n}\n\nfunction rgbString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return rgbaString(rgba, alpha);\n   }\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n}\n\nfunction rgbaString(rgba, alpha) {\n   if (alpha === undefined) {\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\n   }\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\n           + \", \" + alpha + \")\";\n}\n\nfunction percentString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return percentaString(rgba, alpha);\n   }\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n}\n\nfunction percentaString(rgba, alpha) {\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n}\n\nfunction hslString(hsla, alpha) {\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\n      return hslaString(hsla, alpha);\n   }\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n}\n\nfunction hslaString(hsla, alpha) {\n   if (alpha === undefined) {\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\n   }\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\n           + alpha + \")\";\n}\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\nfunction hwbString(hwb, alpha) {\n   if (alpha === undefined) {\n      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\n   }\n   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\n           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n}\n\nfunction keyword(rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n}\n\n// helpers\nfunction scale(num, min, max) {\n   return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return (str.length < 2) ? \"0\" + str : str;\n}\n\n\n//create a list of reverse color names\nvar reverseNames = {};\nfor (var name in colorName$1) {\n   reverseNames[colorName$1[name]] = name;\n}\n\n/* MIT license */\n\n\n\nvar Color = function (obj) {\n\tif (obj instanceof Color) {\n\t\treturn obj;\n\t}\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj);\n\t}\n\n\tthis.valid = false;\n\tthis.values = {\n\t\trgb: [0, 0, 0],\n\t\thsl: [0, 0, 0],\n\t\thsv: [0, 0, 0],\n\t\thwb: [0, 0, 0],\n\t\tcmyk: [0, 0, 0, 0],\n\t\talpha: 1\n\t};\n\n\t// parse Color() argument\n\tvar vals;\n\tif (typeof obj === 'string') {\n\t\tvals = colorString.getRgba(obj);\n\t\tif (vals) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals = colorString.getHsla(obj)) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals = colorString.getHwb(obj)) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t}\n\t} else if (typeof obj === 'object') {\n\t\tvals = obj;\n\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\tthis.setValues('hsv', vals);\n\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\tthis.setValues('cmyk', vals);\n\t\t}\n\t}\n};\n\nColor.prototype = {\n\tisValid: function () {\n\t\treturn this.valid;\n\t},\n\trgb: function () {\n\t\treturn this.setSpace('rgb', arguments);\n\t},\n\thsl: function () {\n\t\treturn this.setSpace('hsl', arguments);\n\t},\n\thsv: function () {\n\t\treturn this.setSpace('hsv', arguments);\n\t},\n\thwb: function () {\n\t\treturn this.setSpace('hwb', arguments);\n\t},\n\tcmyk: function () {\n\t\treturn this.setSpace('cmyk', arguments);\n\t},\n\n\trgbArray: function () {\n\t\treturn this.values.rgb;\n\t},\n\thslArray: function () {\n\t\treturn this.values.hsl;\n\t},\n\thsvArray: function () {\n\t\treturn this.values.hsv;\n\t},\n\thwbArray: function () {\n\t\tvar values = this.values;\n\t\tif (values.alpha !== 1) {\n\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t}\n\t\treturn values.hwb;\n\t},\n\tcmykArray: function () {\n\t\treturn this.values.cmyk;\n\t},\n\trgbaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.rgb.concat([values.alpha]);\n\t},\n\thslaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.hsl.concat([values.alpha]);\n\t},\n\talpha: function (val) {\n\t\tif (val === undefined) {\n\t\t\treturn this.values.alpha;\n\t\t}\n\t\tthis.setValues('alpha', val);\n\t\treturn this;\n\t},\n\n\tred: function (val) {\n\t\treturn this.setChannel('rgb', 0, val);\n\t},\n\tgreen: function (val) {\n\t\treturn this.setChannel('rgb', 1, val);\n\t},\n\tblue: function (val) {\n\t\treturn this.setChannel('rgb', 2, val);\n\t},\n\thue: function (val) {\n\t\tif (val) {\n\t\t\tval %= 360;\n\t\t\tval = val < 0 ? 360 + val : val;\n\t\t}\n\t\treturn this.setChannel('hsl', 0, val);\n\t},\n\tsaturation: function (val) {\n\t\treturn this.setChannel('hsl', 1, val);\n\t},\n\tlightness: function (val) {\n\t\treturn this.setChannel('hsl', 2, val);\n\t},\n\tsaturationv: function (val) {\n\t\treturn this.setChannel('hsv', 1, val);\n\t},\n\twhiteness: function (val) {\n\t\treturn this.setChannel('hwb', 1, val);\n\t},\n\tblackness: function (val) {\n\t\treturn this.setChannel('hwb', 2, val);\n\t},\n\tvalue: function (val) {\n\t\treturn this.setChannel('hsv', 2, val);\n\t},\n\tcyan: function (val) {\n\t\treturn this.setChannel('cmyk', 0, val);\n\t},\n\tmagenta: function (val) {\n\t\treturn this.setChannel('cmyk', 1, val);\n\t},\n\tyellow: function (val) {\n\t\treturn this.setChannel('cmyk', 2, val);\n\t},\n\tblack: function (val) {\n\t\treturn this.setChannel('cmyk', 3, val);\n\t},\n\n\thexString: function () {\n\t\treturn colorString.hexString(this.values.rgb);\n\t},\n\trgbString: function () {\n\t\treturn colorString.rgbString(this.values.rgb, this.values.alpha);\n\t},\n\trgbaString: function () {\n\t\treturn colorString.rgbaString(this.values.rgb, this.values.alpha);\n\t},\n\tpercentString: function () {\n\t\treturn colorString.percentString(this.values.rgb, this.values.alpha);\n\t},\n\thslString: function () {\n\t\treturn colorString.hslString(this.values.hsl, this.values.alpha);\n\t},\n\thslaString: function () {\n\t\treturn colorString.hslaString(this.values.hsl, this.values.alpha);\n\t},\n\thwbString: function () {\n\t\treturn colorString.hwbString(this.values.hwb, this.values.alpha);\n\t},\n\tkeyword: function () {\n\t\treturn colorString.keyword(this.values.rgb, this.values.alpha);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.values.rgb;\n\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.values.rgb;\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.values.rgb;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = [];\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t}\n\t\tthis.setValues('rgb', rgb);\n\t\treturn this;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] += hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] -= hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] += hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] -= hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[1] += hwb[1] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[2] += hwb[2] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tgreyscale: function () {\n\t\tvar rgb = this.values.rgb;\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\tthis.setValues('rgb', [val, val, val]);\n\t\treturn this;\n\t},\n\n\tclearer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\treturn this;\n\t},\n\n\topaquer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\treturn this;\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.values.hsl;\n\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */\n\tmix: function (mixinColor, weight) {\n\t\tvar color1 = this;\n\t\tvar color2 = mixinColor;\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn this\n\t\t\t.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t)\n\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n\n\ttoJSON: function () {\n\t\treturn this.rgb();\n\t},\n\n\tclone: function () {\n\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t// except 'alpha' which is a number.\n\t\tvar result = new Color();\n\t\tvar source = this.values;\n\t\tvar target = result.values;\n\t\tvar value, type;\n\n\t\tfor (var prop in source) {\n\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\tvalue = source[prop];\n\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\nColor.prototype.spaces = {\n\trgb: ['red', 'green', 'blue'],\n\thsl: ['hue', 'saturation', 'lightness'],\n\thsv: ['hue', 'saturation', 'value'],\n\thwb: ['hue', 'whiteness', 'blackness'],\n\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n};\n\nColor.prototype.maxes = {\n\trgb: [255, 255, 255],\n\thsl: [360, 100, 100],\n\thsv: [360, 100, 100],\n\thwb: [360, 100, 100],\n\tcmyk: [100, 100, 100, 100]\n};\n\nColor.prototype.getValues = function (space) {\n\tvar values = this.values;\n\tvar vals = {};\n\n\tfor (var i = 0; i < space.length; i++) {\n\t\tvals[space.charAt(i)] = values[space][i];\n\t}\n\n\tif (values.alpha !== 1) {\n\t\tvals.a = values.alpha;\n\t}\n\n\t// {r: 255, g: 255, b: 255, a: 0.4}\n\treturn vals;\n};\n\nColor.prototype.setValues = function (space, vals) {\n\tvar values = this.values;\n\tvar spaces = this.spaces;\n\tvar maxes = this.maxes;\n\tvar alpha = 1;\n\tvar i;\n\n\tthis.valid = true;\n\n\tif (space === 'alpha') {\n\t\talpha = vals;\n\t} else if (vals.length) {\n\t\t// [10, 10, 10]\n\t\tvalues[space] = vals.slice(0, space.length);\n\t\talpha = vals[space.length];\n\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t// {r: 10, g: 10, b: 10}\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t}\n\n\t\talpha = vals.a;\n\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t// {red: 10, green: 10, blue: 10}\n\t\tvar chans = spaces[space];\n\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t}\n\n\t\talpha = vals.alpha;\n\t}\n\n\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\n\tif (space === 'alpha') {\n\t\treturn false;\n\t}\n\n\tvar capped;\n\n\t// cap values of the space prior converting all values\n\tfor (i = 0; i < space.length; i++) {\n\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\tvalues[space][i] = Math.round(capped);\n\t}\n\n\t// convert to all the other color spaces\n\tfor (var sname in spaces) {\n\t\tif (sname !== space) {\n\t\t\tvalues[sname] = colorConvert[space][sname](values[space]);\n\t\t}\n\t}\n\n\treturn true;\n};\n\nColor.prototype.setSpace = function (space, args) {\n\tvar vals = args[0];\n\n\tif (vals === undefined) {\n\t\t// color.rgb()\n\t\treturn this.getValues(space);\n\t}\n\n\t// color.rgb(10, 10, 10)\n\tif (typeof vals === 'number') {\n\t\tvals = Array.prototype.slice.call(args);\n\t}\n\n\tthis.setValues(space, vals);\n\treturn this;\n};\n\nColor.prototype.setChannel = function (space, index, val) {\n\tvar svalues = this.values[space];\n\tif (val === undefined) {\n\t\t// color.red()\n\t\treturn svalues[index];\n\t} else if (val === svalues[index]) {\n\t\t// color.red(color.red())\n\t\treturn this;\n\t}\n\n\t// color.red(100)\n\tsvalues[index] = val;\n\tthis.setValues(space, svalues);\n\n\treturn this;\n};\n\nif (typeof window !== 'undefined') {\n\twindow.Color = Color;\n}\n\nvar chartjsColor = Color;\n\n/**\n * @namespace Chart.helpers\n */\nvar helpers = {\n\t/**\n\t * An empty function that can be used, for example, for optional callback.\n\t */\n\tnoop: function() {},\n\n\t/**\n\t * Returns a unique id, sequentially generated from a global variable.\n\t * @returns {number}\n\t * @function\n\t */\n\tuid: (function() {\n\t\tvar id = 0;\n\t\treturn function() {\n\t\t\treturn id++;\n\t\t};\n\t}()),\n\n\t/**\n\t * Returns true if `value` is neither null nor undefined, else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisNullOrUndef: function(value) {\n\t\treturn value === null || typeof value === 'undefined';\n\t},\n\n\t/**\n\t * Returns true if `value` is an array (including typed arrays), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @function\n\t */\n\tisArray: function(value) {\n\t\tif (Array.isArray && Array.isArray(value)) {\n\t\t\treturn true;\n\t\t}\n\t\tvar type = Object.prototype.toString.call(value);\n\t\tif (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Returns true if `value` is an object (excluding null), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisObject: function(value) {\n\t\treturn value !== null && Object.prototype.toString.call(value) === '[object Object]';\n\t},\n\n\t/**\n\t * Returns true if `value` is a finite number, else returns false\n\t * @param {*} value  - The value to test.\n\t * @returns {boolean}\n\t */\n\tisFinite: function(value) {\n\t\treturn (typeof value === 'number' || value instanceof Number) && isFinite(value);\n\t},\n\n\t/**\n\t * Returns `value` if defined, else returns `defaultValue`.\n\t * @param {*} value - The value to return if defined.\n\t * @param {*} defaultValue - The value to return if `value` is undefined.\n\t * @returns {*}\n\t */\n\tvalueOrDefault: function(value, defaultValue) {\n\t\treturn typeof value === 'undefined' ? defaultValue : value;\n\t},\n\n\t/**\n\t * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n\t * @param {Array} value - The array to lookup for value at `index`.\n\t * @param {number} index - The index in `value` to lookup for value.\n\t * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n\t * @returns {*}\n\t */\n\tvalueAtIndexOrDefault: function(value, index, defaultValue) {\n\t\treturn helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n\t},\n\n\t/**\n\t * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n\t * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n\t * @param {function} fn - The function to call.\n\t * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @returns {*}\n\t */\n\tcallback: function(fn, args, thisArg) {\n\t\tif (fn && typeof fn.call === 'function') {\n\t\t\treturn fn.apply(thisArg, args);\n\t\t}\n\t},\n\n\t/**\n\t * Note(SB) for performance sake, this method should only be used when loopable type\n\t * is unknown or in none intensive code (not called often and small loopable). Else\n\t * it's preferable to use a regular for() loop and save extra function calls.\n\t * @param {object|Array} loopable - The object or array to be iterated.\n\t * @param {function} fn - The function to call for each item.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n\t */\n\teach: function(loopable, fn, thisArg, reverse) {\n\t\tvar i, len, keys;\n\t\tif (helpers.isArray(loopable)) {\n\t\t\tlen = loopable.length;\n\t\t\tif (reverse) {\n\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (helpers.isObject(loopable)) {\n\t\t\tkeys = Object.keys(loopable);\n\t\t\tlen = keys.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tfn.call(thisArg, loopable[keys[i]], keys[i]);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n\t * @see https://stackoverflow.com/a/14853974\n\t * @param {Array} a0 - The array to compare\n\t * @param {Array} a1 - The array to compare\n\t * @returns {boolean}\n\t */\n\tarrayEquals: function(a0, a1) {\n\t\tvar i, ilen, v0, v1;\n\n\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, ilen = a0.length; i < ilen; ++i) {\n\t\t\tv0 = a0[i];\n\t\t\tv1 = a1[i];\n\n\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (v0 !== v1) {\n\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns a deep copy of `source` without keeping references on objects and arrays.\n\t * @param {*} source - The value to clone.\n\t * @returns {*}\n\t */\n\tclone: function(source) {\n\t\tif (helpers.isArray(source)) {\n\t\t\treturn source.map(helpers.clone);\n\t\t}\n\n\t\tif (helpers.isObject(source)) {\n\t\t\tvar target = {};\n\t\t\tvar keys = Object.keys(source);\n\t\t\tvar klen = keys.length;\n\t\t\tvar k = 0;\n\n\t\t\tfor (; k < klen; ++k) {\n\t\t\t\ttarget[keys[k]] = helpers.clone(source[keys[k]]);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn source;\n\t},\n\n\t/**\n\t * The default merger when Chart.helpers.merge is called without merger option.\n\t * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n\t * @private\n\t */\n\t_merger: function(key, target, source, options) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.merge(tval, sval, options);\n\t\t} else {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Merges source[key] in target[key] only if target[key] is undefined.\n\t * @private\n\t */\n\t_mergerIf: function(key, target, source) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.mergeIf(tval, sval);\n\t\t} else if (!target.hasOwnProperty(key)) {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` with the given `options`.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @param {object} [options] - Merging options:\n\t * @param {function} [options.merger] - The merge method (key, target, source, options)\n\t * @returns {object} The `target` object.\n\t */\n\tmerge: function(target, source, options) {\n\t\tvar sources = helpers.isArray(source) ? source : [source];\n\t\tvar ilen = sources.length;\n\t\tvar merge, i, keys, klen, k;\n\n\t\tif (!helpers.isObject(target)) {\n\t\t\treturn target;\n\t\t}\n\n\t\toptions = options || {};\n\t\tmerge = options.merger || helpers._merger;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!helpers.isObject(source)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeys = Object.keys(source);\n\t\t\tfor (k = 0, klen = keys.length; k < klen; ++k) {\n\t\t\t\tmerge(keys[k], target, source, options);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @returns {object} The `target` object.\n\t */\n\tmergeIf: function(target, source) {\n\t\treturn helpers.merge(target, source, {merger: helpers._mergerIf});\n\t},\n\n\t/**\n\t * Applies the contents of two or more objects together into the first object.\n\t * @param {object} target - The target object in which all objects are merged into.\n\t * @param {object} arg1 - Object containing additional properties to merge in target.\n\t * @param {object} argN - Additional objects containing properties to merge in target.\n\t * @returns {object} The `target` object.\n\t */\n\textend: Object.assign || function(target) {\n\t\treturn helpers.merge(target, [].slice.call(arguments, 1), {\n\t\t\tmerger: function(key, dst, src) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Basic javascript inheritance based on the model created in Backbone.js\n\t */\n\tinherits: function(extensions) {\n\t\tvar me = this;\n\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\treturn me.apply(this, arguments);\n\t\t};\n\n\t\tvar Surrogate = function() {\n\t\t\tthis.constructor = ChartElement;\n\t\t};\n\n\t\tSurrogate.prototype = me.prototype;\n\t\tChartElement.prototype = new Surrogate();\n\t\tChartElement.extend = helpers.inherits;\n\n\t\tif (extensions) {\n\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t}\n\n\t\tChartElement.__super__ = me.prototype;\n\t\treturn ChartElement;\n\t},\n\n\t_deprecated: function(scope, value, previous, current) {\n\t\tif (value !== undefined) {\n\t\t\tconsole.warn(scope + ': \"' + previous +\n\t\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n\t\t}\n\t}\n};\n\nvar helpers_core = helpers;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.callback instead.\n * @function Chart.helpers.callCallback\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\nhelpers.callCallback = helpers.callback;\n\n/**\n * Provided for backward compatibility, use Array.prototype.indexOf instead.\n * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n * @function Chart.helpers.indexOf\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.indexOf = function(array, item, fromIndex) {\n\treturn Array.prototype.indexOf.call(array, item, fromIndex);\n};\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n * @function Chart.helpers.getValueOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueOrDefault = helpers.valueOrDefault;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n * @function Chart.helpers.getValueAtIndexOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easingEffects\n * @see http://www.robertpenner.com/easing/\n */\nvar effects = {\n\tlinear: function(t) {\n\t\treturn t;\n\t},\n\n\teaseInQuad: function(t) {\n\t\treturn t * t;\n\t},\n\n\teaseOutQuad: function(t) {\n\t\treturn -t * (t - 2);\n\t},\n\n\teaseInOutQuad: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t;\n\t\t}\n\t\treturn -0.5 * ((--t) * (t - 2) - 1);\n\t},\n\n\teaseInCubic: function(t) {\n\t\treturn t * t * t;\n\t},\n\n\teaseOutCubic: function(t) {\n\t\treturn (t = t - 1) * t * t + 1;\n\t},\n\n\teaseInOutCubic: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t + 2);\n\t},\n\n\teaseInQuart: function(t) {\n\t\treturn t * t * t * t;\n\t},\n\n\teaseOutQuart: function(t) {\n\t\treturn -((t = t - 1) * t * t * t - 1);\n\t},\n\n\teaseInOutQuart: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t;\n\t\t}\n\t\treturn -0.5 * ((t -= 2) * t * t * t - 2);\n\t},\n\n\teaseInQuint: function(t) {\n\t\treturn t * t * t * t * t;\n\t},\n\n\teaseOutQuint: function(t) {\n\t\treturn (t = t - 1) * t * t * t * t + 1;\n\t},\n\n\teaseInOutQuint: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t * t * t + 2);\n\t},\n\n\teaseInSine: function(t) {\n\t\treturn -Math.cos(t * (Math.PI / 2)) + 1;\n\t},\n\n\teaseOutSine: function(t) {\n\t\treturn Math.sin(t * (Math.PI / 2));\n\t},\n\n\teaseInOutSine: function(t) {\n\t\treturn -0.5 * (Math.cos(Math.PI * t) - 1);\n\t},\n\n\teaseInExpo: function(t) {\n\t\treturn (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));\n\t},\n\n\teaseOutExpo: function(t) {\n\t\treturn (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;\n\t},\n\n\teaseInOutExpo: function(t) {\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * Math.pow(2, 10 * (t - 1));\n\t\t}\n\t\treturn 0.5 * (-Math.pow(2, -10 * --t) + 2);\n\t},\n\n\teaseInCirc: function(t) {\n\t\tif (t >= 1) {\n\t\t\treturn t;\n\t\t}\n\t\treturn -(Math.sqrt(1 - t * t) - 1);\n\t},\n\n\teaseOutCirc: function(t) {\n\t\treturn Math.sqrt(1 - (t = t - 1) * t);\n\t},\n\n\teaseInOutCirc: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn -0.5 * (Math.sqrt(1 - t * t) - 1);\n\t\t}\n\t\treturn 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t},\n\n\teaseInElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t},\n\n\teaseOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n\t},\n\n\teaseInOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ((t /= 0.5) === 2) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.45;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\tif (t < 1) {\n\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t\t}\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t},\n\teaseInBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn t * t * ((s + 1) * t - s);\n\t},\n\n\teaseOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn (t = t - 1) * t * ((s + 1) * t + s) + 1;\n\t},\n\n\teaseInOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t},\n\n\teaseInBounce: function(t) {\n\t\treturn 1 - effects.easeOutBounce(1 - t);\n\t},\n\n\teaseOutBounce: function(t) {\n\t\tif (t < (1 / 2.75)) {\n\t\t\treturn 7.5625 * t * t;\n\t\t}\n\t\tif (t < (2 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;\n\t\t}\n\t\tif (t < (2.5 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;\n\t\t}\n\t\treturn 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;\n\t},\n\n\teaseInOutBounce: function(t) {\n\t\tif (t < 0.5) {\n\t\t\treturn effects.easeInBounce(t * 2) * 0.5;\n\t\t}\n\t\treturn effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n\t}\n};\n\nvar helpers_easing = {\n\teffects: effects\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n * @function Chart.helpers.easingEffects\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.easingEffects = effects;\n\nvar PI = Math.PI;\nvar RAD_PER_DEG = PI / 180;\nvar DOUBLE_PI = PI * 2;\nvar HALF_PI = PI / 2;\nvar QUARTER_PI = PI / 4;\nvar TWO_THIRDS_PI = PI * 2 / 3;\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports$1 = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {number} width - The rectangle's width.\n\t * @param {number} height - The rectangle's height.\n\t * @param {number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\tvar r = Math.min(radius, height / 2, width / 2);\n\t\t\tvar left = x + r;\n\t\t\tvar top = y + r;\n\t\t\tvar right = x + width - r;\n\t\t\tvar bottom = y + height - r;\n\n\t\t\tctx.moveTo(x, top);\n\t\t\tif (left < right && top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, -HALF_PI);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, 0);\n\t\t\t\tctx.arc(right, bottom, r, 0, HALF_PI);\n\t\t\t\tctx.arc(left, bottom, r, HALF_PI, PI);\n\t\t\t} else if (left < right) {\n\t\t\t\tctx.moveTo(left, y);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, HALF_PI);\n\t\t\t\tctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n\t\t\t} else if (top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, 0);\n\t\t\t\tctx.arc(left, bottom, r, 0, PI);\n\t\t\t} else {\n\t\t\t\tctx.arc(left, top, r, -PI, PI);\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t\tctx.moveTo(x, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y, rotation) {\n\t\tvar type, xOffset, yOffset, size, cornerRadius;\n\t\tvar rad = (rotation || 0) * RAD_PER_DEG;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(x, y);\n\t\t\t\tctx.rotate(rad);\n\t\t\t\tctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n\t\t\t\tctx.restore();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.beginPath();\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.arc(x, y, radius, 0, DOUBLE_PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\t// NOTE: the rounded rect implementation changed to use `arc` instead of\n\t\t\t// `quadraticCurveTo` since it generates better results when rect is\n\t\t\t// almost a circle. 0.516 (instead of 0.5) produces results with visually\n\t\t\t// closer proportion to the previous impl and it is inscribed in the\n\t\t\t// circle with `radius`. For more details, see the following PRs:\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5597\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5858\n\t\t\tcornerRadius = radius * 0.516;\n\t\t\tsize = radius - cornerRadius;\n\t\t\txOffset = Math.cos(rad + QUARTER_PI) * size;\n\t\t\tyOffset = Math.sin(rad + QUARTER_PI) * size;\n\t\t\tctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n\t\t\tctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n\t\t\tctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n\t\t\tctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tif (!rotation) {\n\t\t\t\tsize = Math.SQRT1_2 * radius;\n\t\t\t\tctx.rect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'rectRot':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'cross':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\trad += QUARTER_PI;\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.fill();\n\t\tctx.stroke();\n\t},\n\n\t/**\n\t * Returns true if the point is inside the rectangle\n\t * @param {object} point - The point to test\n\t * @param {object} area - The rectangle\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isPointInArea: function(point, area) {\n\t\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n\t\treturn point.x > area.left - epsilon && point.x < area.right + epsilon &&\n\t\t\tpoint.y > area.top - epsilon && point.y < area.bottom + epsilon;\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tvar stepped = target.steppedLine;\n\t\tif (stepped) {\n\t\t\tif (stepped === 'middle') {\n\t\t\t\tvar midpoint = (previous.x + target.x) / 2.0;\n\t\t\t\tctx.lineTo(midpoint, flip ? target.y : previous.y);\n\t\t\t\tctx.lineTo(midpoint, flip ? previous.y : target.y);\n\t\t\t} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\nvar helpers_canvas = exports$1;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.clear = exports$1.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports$1.roundedRect.apply(exports$1, arguments);\n};\n\nvar defaults = {\n\t/**\n\t * @private\n\t */\n\t_set: function(scope, values) {\n\t\treturn helpers_core.merge(this[scope] || (this[scope] = {}), values);\n\t}\n};\n\n// TODO(v3): remove 'global' from namespace.  all default are global and\n// there's inconsistency around which options are under 'global'\ndefaults._set('global', {\n\tdefaultColor: 'rgba(0,0,0,0.1)',\n\tdefaultFontColor: '#666',\n\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\tdefaultFontSize: 12,\n\tdefaultFontStyle: 'normal',\n\tdefaultLineHeight: 1.2,\n\tshowLines: true\n});\n\nvar core_defaults = defaults;\n\nvar valueOrDefault = helpers_core.valueOrDefault;\n\n/**\n * Converts the given font object into a CSS font string.\n * @param {object} font - A font object.\n * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nfunction toFontString(font) {\n\tif (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n\t\treturn null;\n\t}\n\n\treturn (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\nvar helpers_options = {\n\t/**\n\t * Converts the given line height `value` in pixels for a specific font `size`.\n\t * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n\t * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n\t * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n\t * @since 2.7.0\n\t */\n\ttoLineHeight: function(value, size) {\n\t\tvar matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\t\tif (!matches || matches[1] === 'normal') {\n\t\t\treturn size * 1.2;\n\t\t}\n\n\t\tvalue = +matches[2];\n\n\t\tswitch (matches[3]) {\n\t\tcase 'px':\n\t\t\treturn value;\n\t\tcase '%':\n\t\t\tvalue /= 100;\n\t\t\tbreak;\n\t\t}\n\n\t\treturn size * value;\n\t},\n\n\t/**\n\t * Converts the given value into a padding object with pre-computed width/height.\n\t * @param {number|object} value - If a number, set the value to all TRBL component,\n\t *  else, if and object, use defined properties and sets undefined ones to 0.\n\t * @returns {object} The padding values (top, right, bottom, left, width, height)\n\t * @since 2.7.0\n\t */\n\ttoPadding: function(value) {\n\t\tvar t, r, b, l;\n\n\t\tif (helpers_core.isObject(value)) {\n\t\t\tt = +value.top || 0;\n\t\t\tr = +value.right || 0;\n\t\t\tb = +value.bottom || 0;\n\t\t\tl = +value.left || 0;\n\t\t} else {\n\t\t\tt = r = b = l = +value || 0;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: t,\n\t\t\tright: r,\n\t\t\tbottom: b,\n\t\t\tleft: l,\n\t\t\theight: t + b,\n\t\t\twidth: l + r\n\t\t};\n\t},\n\n\t/**\n\t * Parses font options and returns the font object.\n\t * @param {object} options - A object that contains font options to be parsed.\n\t * @return {object} The font object.\n\t * @todo Support font.* options and renamed to toFont().\n\t * @private\n\t */\n\t_parseFont: function(options) {\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\tvar font = {\n\t\t\tfamily: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\tlineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n\t\t\tsize: size,\n\t\t\tstyle: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\tweight: null,\n\t\t\tstring: ''\n\t\t};\n\n\t\tfont.string = toFontString(font);\n\t\treturn font;\n\t},\n\n\t/**\n\t * Evaluates the given `inputs` sequentially and returns the first defined value.\n\t * @param {Array} inputs - An array of values, falling back to the last value.\n\t * @param {object} [context] - If defined and the current value is a function, the value\n\t * is called with `context` as first argument and the result becomes the new input.\n\t * @param {number} [index] - If defined and the current value is an array, the value\n\t * at `index` become the new input.\n\t * @param {object} [info] - object to return information about resolution in\n\t * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.\n\t * @since 2.7.0\n\t */\n\tresolve: function(inputs, context, index, info) {\n\t\tvar cacheable = true;\n\t\tvar i, ilen, value;\n\n\t\tfor (i = 0, ilen = inputs.length; i < ilen; ++i) {\n\t\t\tvalue = inputs[i];\n\t\t\tif (value === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (context !== undefined && typeof value === 'function') {\n\t\t\t\tvalue = value(context);\n\t\t\t\tcacheable = false;\n\t\t\t}\n\t\t\tif (index !== undefined && helpers_core.isArray(value)) {\n\t\t\t\tvalue = value[index];\n\t\t\t\tcacheable = false;\n\t\t\t}\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (info && !cacheable) {\n\t\t\t\t\tinfo.cacheable = false;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */\nvar exports$2 = {\n\t/**\n\t * Returns an array of factors sorted from 1 to sqrt(value)\n\t * @private\n\t */\n\t_factorize: function(value) {\n\t\tvar result = [];\n\t\tvar sqrt = Math.sqrt(value);\n\t\tvar i;\n\n\t\tfor (i = 1; i < sqrt; i++) {\n\t\t\tif (value % i === 0) {\n\t\t\t\tresult.push(i);\n\t\t\t\tresult.push(value / i);\n\t\t\t}\n\t\t}\n\t\tif (sqrt === (sqrt | 0)) { // if value is a square number\n\t\t\tresult.push(sqrt);\n\t\t}\n\n\t\tresult.sort(function(a, b) {\n\t\t\treturn a - b;\n\t\t}).pop();\n\t\treturn result;\n\t},\n\n\tlog10: Math.log10 || function(x) {\n\t\tvar exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n\t\t// Check for whole powers of 10,\n\t\t// which due to floating point rounding error should be corrected.\n\t\tvar powerOf10 = Math.round(exponent);\n\t\tvar isPowerOf10 = x === Math.pow(10, powerOf10);\n\n\t\treturn isPowerOf10 ? powerOf10 : exponent;\n\t}\n};\n\nvar helpers_math = exports$2;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.math.log10 instead.\n * @namespace Chart.helpers.log10\n * @deprecated since version 2.9.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.log10 = exports$2.log10;\n\nvar getRtlAdapter = function(rectX, width) {\n\treturn {\n\t\tx: function(x) {\n\t\t\treturn rectX + rectX + width - x;\n\t\t},\n\t\tsetWidth: function(w) {\n\t\t\twidth = w;\n\t\t},\n\t\ttextAlign: function(align) {\n\t\t\tif (align === 'center') {\n\t\t\t\treturn align;\n\t\t\t}\n\t\t\treturn align === 'right' ? 'left' : 'right';\n\t\t},\n\t\txPlus: function(x, value) {\n\t\t\treturn x - value;\n\t\t},\n\t\tleftForLtr: function(x, itemWidth) {\n\t\t\treturn x - itemWidth;\n\t\t},\n\t};\n};\n\nvar getLtrAdapter = function() {\n\treturn {\n\t\tx: function(x) {\n\t\t\treturn x;\n\t\t},\n\t\tsetWidth: function(w) { // eslint-disable-line no-unused-vars\n\t\t},\n\t\ttextAlign: function(align) {\n\t\t\treturn align;\n\t\t},\n\t\txPlus: function(x, value) {\n\t\t\treturn x + value;\n\t\t},\n\t\tleftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars\n\t\t\treturn x;\n\t\t},\n\t};\n};\n\nvar getAdapter = function(rtl, rectX, width) {\n\treturn rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();\n};\n\nvar overrideTextDirection = function(ctx, direction) {\n\tvar style, original;\n\tif (direction === 'ltr' || direction === 'rtl') {\n\t\tstyle = ctx.canvas.style;\n\t\toriginal = [\n\t\t\tstyle.getPropertyValue('direction'),\n\t\t\tstyle.getPropertyPriority('direction'),\n\t\t];\n\n\t\tstyle.setProperty('direction', direction, 'important');\n\t\tctx.prevTextDirection = original;\n\t}\n};\n\nvar restoreTextDirection = function(ctx) {\n\tvar original = ctx.prevTextDirection;\n\tif (original !== undefined) {\n\t\tdelete ctx.prevTextDirection;\n\t\tctx.canvas.style.setProperty('direction', original[0], original[1]);\n\t}\n};\n\nvar helpers_rtl = {\n\tgetRtlAdapter: getAdapter,\n\toverrideTextDirection: overrideTextDirection,\n\trestoreTextDirection: restoreTextDirection,\n};\n\nvar helpers$1 = helpers_core;\nvar easing = helpers_easing;\nvar canvas = helpers_canvas;\nvar options = helpers_options;\nvar math = helpers_math;\nvar rtl = helpers_rtl;\nhelpers$1.easing = easing;\nhelpers$1.canvas = canvas;\nhelpers$1.options = options;\nhelpers$1.math = math;\nhelpers$1.rtl = rtl;\n\nfunction interpolate(start, view, model, ease) {\n\tvar keys = Object.keys(model);\n\tvar i, ilen, key, actual, origin, target, type, c0, c1;\n\n\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\tkey = keys[i];\n\n\t\ttarget = model[key];\n\n\t\t// if a value is added to the model after pivot() has been called, the view\n\t\t// doesn't contain it, so let's initialize the view to the target value.\n\t\tif (!view.hasOwnProperty(key)) {\n\t\t\tview[key] = target;\n\t\t}\n\n\t\tactual = view[key];\n\n\t\tif (actual === target || key[0] === '_') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!start.hasOwnProperty(key)) {\n\t\t\tstart[key] = actual;\n\t\t}\n\n\t\torigin = start[key];\n\n\t\ttype = typeof target;\n\n\t\tif (type === typeof origin) {\n\t\t\tif (type === 'string') {\n\t\t\t\tc0 = chartjsColor(origin);\n\t\t\t\tif (c0.valid) {\n\t\t\t\t\tc1 = chartjsColor(target);\n\t\t\t\t\tif (c1.valid) {\n\t\t\t\t\t\tview[key] = c1.mix(c0, ease).rgbString();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n\t\t\t\tview[key] = origin + (target - origin) * ease;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tview[key] = target;\n\t}\n}\n\nvar Element = function(configuration) {\n\thelpers$1.extend(this, configuration);\n\tthis.initialize.apply(this, arguments);\n};\n\nhelpers$1.extend(Element.prototype, {\n\t_type: undefined,\n\n\tinitialize: function() {\n\t\tthis.hidden = false;\n\t},\n\n\tpivot: function() {\n\t\tvar me = this;\n\t\tif (!me._view) {\n\t\t\tme._view = helpers$1.extend({}, me._model);\n\t\t}\n\t\tme._start = {};\n\t\treturn me;\n\t},\n\n\ttransition: function(ease) {\n\t\tvar me = this;\n\t\tvar model = me._model;\n\t\tvar start = me._start;\n\t\tvar view = me._view;\n\n\t\t// No animation -> No Transition\n\t\tif (!model || ease === 1) {\n\t\t\tme._view = helpers$1.extend({}, model);\n\t\t\tme._start = null;\n\t\t\treturn me;\n\t\t}\n\n\t\tif (!view) {\n\t\t\tview = me._view = {};\n\t\t}\n\n\t\tif (!start) {\n\t\t\tstart = me._start = {};\n\t\t}\n\n\t\tinterpolate(start, view, model, ease);\n\n\t\treturn me;\n\t},\n\n\ttooltipPosition: function() {\n\t\treturn {\n\t\t\tx: this._model.x,\n\t\t\ty: this._model.y\n\t\t};\n\t},\n\n\thasValue: function() {\n\t\treturn helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n\t}\n});\n\nElement.extend = helpers$1.inherits;\n\nvar core_element = Element;\n\nvar exports$3 = core_element.extend({\n\tchart: null, // the animation associated chart instance\n\tcurrentStep: 0, // the current animation step\n\tnumSteps: 60, // default number of steps\n\teasing: '', // the easing to use for this animation\n\trender: null, // render function used by the animation service\n\n\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n});\n\nvar core_animation = exports$3;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.Animation instead\n * @prop Chart.Animation#animationObject\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$3.prototype, 'animationObject', {\n\tget: function() {\n\t\treturn this;\n\t}\n});\n\n/**\n * Provided for backward compatibility, use Chart.Animation#chart instead\n * @prop Chart.Animation#chartInstance\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$3.prototype, 'chartInstance', {\n\tget: function() {\n\t\treturn this.chart;\n\t},\n\tset: function(value) {\n\t\tthis.chart = value;\n\t}\n});\n\ncore_defaults._set('global', {\n\tanimation: {\n\t\tduration: 1000,\n\t\teasing: 'easeOutQuart',\n\t\tonProgress: helpers$1.noop,\n\t\tonComplete: helpers$1.noop\n\t}\n});\n\nvar core_animations = {\n\tanimations: [],\n\trequest: null,\n\n\t/**\n\t * @param {Chart} chart - The chart to animate.\n\t * @param {Chart.Animation} animation - The animation that we will animate.\n\t * @param {number} duration - The animation duration in ms.\n\t * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n\t */\n\taddAnimation: function(chart, animation, duration, lazy) {\n\t\tvar animations = this.animations;\n\t\tvar i, ilen;\n\n\t\tanimation.chart = chart;\n\t\tanimation.startTime = Date.now();\n\t\tanimation.duration = duration;\n\n\t\tif (!lazy) {\n\t\t\tchart.animating = true;\n\t\t}\n\n\t\tfor (i = 0, ilen = animations.length; i < ilen; ++i) {\n\t\t\tif (animations[i].chart === chart) {\n\t\t\t\tanimations[i] = animation;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tanimations.push(animation);\n\n\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\tif (animations.length === 1) {\n\t\t\tthis.requestAnimationFrame();\n\t\t}\n\t},\n\n\tcancelAnimation: function(chart) {\n\t\tvar index = helpers$1.findIndex(this.animations, function(animation) {\n\t\t\treturn animation.chart === chart;\n\t\t});\n\n\t\tif (index !== -1) {\n\t\t\tthis.animations.splice(index, 1);\n\t\t\tchart.animating = false;\n\t\t}\n\t},\n\n\trequestAnimationFrame: function() {\n\t\tvar me = this;\n\t\tif (me.request === null) {\n\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\tme.request = helpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tme.request = null;\n\t\t\t\tme.startDigest();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tstartDigest: function() {\n\t\tvar me = this;\n\n\t\tme.advance();\n\n\t\t// Do we have more stuff to animate?\n\t\tif (me.animations.length > 0) {\n\t\t\tme.requestAnimationFrame();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tadvance: function() {\n\t\tvar animations = this.animations;\n\t\tvar animation, chart, numSteps, nextStep;\n\t\tvar i = 0;\n\n\t\t// 1 animation per chart, so we are looping charts here\n\t\twhile (i < animations.length) {\n\t\t\tanimation = animations[i];\n\t\t\tchart = animation.chart;\n\t\t\tnumSteps = animation.numSteps;\n\n\t\t\t// Make sure that currentStep starts at 1\n\t\t\t// https://github.com/chartjs/Chart.js/issues/6104\n\t\t\tnextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n\t\t\tanimation.currentStep = Math.min(nextStep, numSteps);\n\n\t\t\thelpers$1.callback(animation.render, [chart, animation], chart);\n\t\t\thelpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n\t\t\tif (animation.currentStep >= numSteps) {\n\t\t\t\thelpers$1.callback(animation.onAnimationComplete, [animation], chart);\n\t\t\t\tchart.animating = false;\n\t\t\t\tanimations.splice(i, 1);\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar resolve = helpers$1.options.resolve;\n\nvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n */\nfunction listenArrayEvents(array, listener) {\n\tif (array._chartjs) {\n\t\tarray._chartjs.listeners.push(listener);\n\t\treturn;\n\t}\n\n\tObject.defineProperty(array, '_chartjs', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tvalue: {\n\t\t\tlisteners: [listener]\n\t\t}\n\t});\n\n\tarrayEvents.forEach(function(key) {\n\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\tvar base = array[key];\n\n\t\tObject.defineProperty(array, key, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tvar res = base.apply(this, args);\n\n\t\t\t\thelpers$1.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nfunction unlistenArrayEvents(array, listener) {\n\tvar stub = array._chartjs;\n\tif (!stub) {\n\t\treturn;\n\t}\n\n\tvar listeners = stub.listeners;\n\tvar index = listeners.indexOf(listener);\n\tif (index !== -1) {\n\t\tlisteners.splice(index, 1);\n\t}\n\n\tif (listeners.length > 0) {\n\t\treturn;\n\t}\n\n\tarrayEvents.forEach(function(key) {\n\t\tdelete array[key];\n\t});\n\n\tdelete array._chartjs;\n}\n\n// Base class for all dataset controllers (line, bar, etc)\nvar DatasetController = function(chart, datasetIndex) {\n\tthis.initialize(chart, datasetIndex);\n};\n\nhelpers$1.extend(DatasetController.prototype, {\n\n\t/**\n\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t * @type {Chart.core.element}\n\t */\n\tdatasetElementType: null,\n\n\t/**\n\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t * @type {Chart.core.element}\n\t */\n\tdataElementType: null,\n\n\t/**\n\t * Dataset element option keys to be resolved in _resolveDatasetElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderCapStyle',\n\t\t'borderColor',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'borderWidth'\n\t],\n\n\t/**\n\t * Data element option keys to be resolved in _resolveDataElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'pointStyle'\n\t],\n\n\tinitialize: function(chart, datasetIndex) {\n\t\tvar me = this;\n\t\tme.chart = chart;\n\t\tme.index = datasetIndex;\n\t\tme.linkScales();\n\t\tme.addElements();\n\t\tme._type = me.getMeta().type;\n\t},\n\n\tupdateIndex: function(datasetIndex) {\n\t\tthis.index = datasetIndex;\n\t},\n\n\tlinkScales: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar chart = me.chart;\n\t\tvar scales = chart.scales;\n\t\tvar dataset = me.getDataset();\n\t\tvar scalesOpts = chart.options.scales;\n\n\t\tif (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {\n\t\t\tmeta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;\n\t\t}\n\t\tif (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {\n\t\t\tmeta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;\n\t\t}\n\t},\n\n\tgetDataset: function() {\n\t\treturn this.chart.data.datasets[this.index];\n\t},\n\n\tgetMeta: function() {\n\t\treturn this.chart.getDatasetMeta(this.index);\n\t},\n\n\tgetScaleForId: function(scaleID) {\n\t\treturn this.chart.scales[scaleID];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScale: function() {\n\t\treturn this.getScaleForId(this._getValueScaleId());\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScale: function() {\n\t\treturn this.getScaleForId(this._getIndexScaleId());\n\t},\n\n\treset: function() {\n\t\tthis._update(true);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroy: function() {\n\t\tif (this._data) {\n\t\t\tunlistenArrayEvents(this._data, this);\n\t\t}\n\t},\n\n\tcreateMetaDataset: function() {\n\t\tvar me = this;\n\t\tvar type = me.datasetElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index\n\t\t});\n\t},\n\n\tcreateMetaData: function(index) {\n\t\tvar me = this;\n\t\tvar type = me.dataElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index\n\t\t});\n\t},\n\n\taddElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data || [];\n\t\tvar metaData = meta.data;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = data.length; i < ilen; ++i) {\n\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t}\n\n\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t},\n\n\taddElementAndReset: function(index) {\n\t\tvar element = this.createMetaData(index);\n\t\tthis.getMeta().data.splice(index, 0, element);\n\t\tthis.updateElement(element, index, true);\n\t},\n\n\tbuildOrUpdateElements: function() {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar data = dataset.data || (dataset.data = []);\n\n\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t// the internal meta data accordingly.\n\t\tif (me._data !== data) {\n\t\t\tif (me._data) {\n\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t}\n\n\t\t\tif (data && Object.isExtensible(data)) {\n\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t}\n\t\t\tme._data = data;\n\t\t}\n\n\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\tme.resyncElements();\n\t},\n\n\t/**\n\t * Returns the merged user-supplied and default dataset-level options\n\t * @private\n\t */\n\t_configure: function() {\n\t\tvar me = this;\n\t\tme._config = helpers$1.merge({}, [\n\t\t\tme.chart.options.datasets[me._type],\n\t\t\tme.getDataset(),\n\t\t], {\n\t\t\tmerger: function(key, target, source) {\n\t\t\t\tif (key !== '_meta' && key !== 'data') {\n\t\t\t\t\thelpers$1._merger(key, target, source);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t_update: function(reset) {\n\t\tvar me = this;\n\t\tme._configure();\n\t\tme._cachedDataOpts = null;\n\t\tme.update(reset);\n\t},\n\n\tupdate: helpers$1.noop,\n\n\ttransition: function(easingValue) {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].transition(easingValue);\n\t\t}\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.transition(easingValue);\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.draw();\n\t\t}\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].draw();\n\t\t}\n\t},\n\n\t/**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @return {IStyleInterface} style object\n\t */\n\tgetStyle: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = meta.dataset;\n\t\tvar style;\n\n\t\tme._configure();\n\t\tif (dataset && index === undefined) {\n\t\t\tstyle = me._resolveDatasetElementOptions(dataset || {});\n\t\t} else {\n\t\t\tindex = index || 0;\n\t\t\tstyle = me._resolveDataElementOptions(meta.data[index] || {}, index);\n\t\t}\n\n\t\tif (style.fill === false || style.fill === null) {\n\t\t\tstyle.backgroundColor = style.borderColor;\n\t\t}\n\n\t\treturn style;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function(element, hover) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasetOpts = me._config;\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements[me.datasetElementType.prototype._type] || {};\n\t\tvar elementOptions = me._datasetElementOptions;\n\t\tvar values = {};\n\t\tvar i, ilen, key, readKey;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataset: me.getDataset(),\n\t\t\tdatasetIndex: me.index,\n\t\t\thover: hover\n\t\t};\n\n\t\tfor (i = 0, ilen = elementOptions.length; i < ilen; ++i) {\n\t\t\tkey = elementOptions[i];\n\t\t\treadKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;\n\t\t\tvalues[key] = resolve([\n\t\t\t\tcustom[readKey],\n\t\t\t\tdatasetOpts[readKey],\n\t\t\t\toptions[readKey]\n\t\t\t], context);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar custom = element && element.custom;\n\t\tvar cached = me._cachedDataOpts;\n\t\tif (cached && !custom) {\n\t\t\treturn cached;\n\t\t}\n\t\tvar chart = me.chart;\n\t\tvar datasetOpts = me._config;\n\t\tvar options = chart.options.elements[me.dataElementType.prototype._type] || {};\n\t\tvar elementOptions = me._dataElementOptions;\n\t\tvar values = {};\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: me.getDataset(),\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\t// `resolve` sets cacheable to `false` if any option is indexed or scripted\n\t\tvar info = {cacheable: !custom};\n\n\t\tvar keys, i, ilen, key;\n\n\t\tcustom = custom || {};\n\n\t\tif (helpers$1.isArray(elementOptions)) {\n\t\t\tfor (i = 0, ilen = elementOptions.length; i < ilen; ++i) {\n\t\t\t\tkey = elementOptions[i];\n\t\t\t\tvalues[key] = resolve([\n\t\t\t\t\tcustom[key],\n\t\t\t\t\tdatasetOpts[key],\n\t\t\t\t\toptions[key]\n\t\t\t\t], context, index, info);\n\t\t\t}\n\t\t} else {\n\t\t\tkeys = Object.keys(elementOptions);\n\t\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\t\tkey = keys[i];\n\t\t\t\tvalues[key] = resolve([\n\t\t\t\t\tcustom[key],\n\t\t\t\t\tdatasetOpts[elementOptions[key]],\n\t\t\t\t\tdatasetOpts[key],\n\t\t\t\t\toptions[key]\n\t\t\t\t], context, index, info);\n\t\t\t}\n\t\t}\n\n\t\tif (info.cacheable) {\n\t\t\tme._cachedDataOpts = Object.freeze(values);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\tremoveHoverStyle: function(element) {\n\t\thelpers$1.merge(element._model, element.$previousStyle || {});\n\t\tdelete element.$previousStyle;\n\t},\n\n\tsetHoverStyle: function(element) {\n\t\tvar dataset = this.chart.data.datasets[element._datasetIndex];\n\t\tvar index = element._index;\n\t\tvar custom = element.custom || {};\n\t\tvar model = element._model;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\telement.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth\n\t\t};\n\n\t\tmodel.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n\t\tmodel.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n\t\tmodel.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_removeDatasetHoverStyle: function() {\n\t\tvar element = this.getMeta().dataset;\n\n\t\tif (element) {\n\t\t\tthis.removeHoverStyle(element);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_setDatasetHoverStyle: function() {\n\t\tvar element = this.getMeta().dataset;\n\t\tvar prev = {};\n\t\tvar i, ilen, key, keys, hoverOptions, model;\n\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel = element._model;\n\t\thoverOptions = this._resolveDatasetElementOptions(element, true);\n\n\t\tkeys = Object.keys(hoverOptions);\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tprev[key] = model[key];\n\t\t\tmodel[key] = hoverOptions[key];\n\t\t}\n\n\t\telement.$previousStyle = prev;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tresyncElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data;\n\t\tvar numMeta = meta.data.length;\n\t\tvar numData = data.length;\n\n\t\tif (numData < numMeta) {\n\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t} else if (numData > numMeta) {\n\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinsertElements: function(start, count) {\n\t\tfor (var i = 0; i < count; ++i) {\n\t\t\tthis.addElementAndReset(start + i);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPush: function() {\n\t\tvar count = arguments.length;\n\t\tthis.insertElements(this.getDataset().data.length - count, count);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPop: function() {\n\t\tthis.getMeta().data.pop();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataShift: function() {\n\t\tthis.getMeta().data.shift();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataSplice: function(start, count) {\n\t\tthis.getMeta().data.splice(start, count);\n\t\tthis.insertElements(start, arguments.length - 2);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataUnshift: function() {\n\t\tthis.insertElements(0, arguments.length);\n\t}\n});\n\nDatasetController.extend = helpers$1.inherits;\n\nvar core_datasetController = DatasetController;\n\nvar TAU = Math.PI * 2;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tarc: {\n\t\t\tbackgroundColor: core_defaults.global.defaultColor,\n\t\t\tborderColor: '#fff',\n\t\t\tborderWidth: 2,\n\t\t\tborderAlign: 'center'\n\t\t}\n\t}\n});\n\nfunction clipArc(ctx, arc) {\n\tvar startAngle = arc.startAngle;\n\tvar endAngle = arc.endAngle;\n\tvar pixelMargin = arc.pixelMargin;\n\tvar angleMargin = pixelMargin / arc.outerRadius;\n\tvar x = arc.x;\n\tvar y = arc.y;\n\n\t// Draw an inner border by cliping the arc and drawing a double-width border\n\t// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\tctx.beginPath();\n\tctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\tif (arc.innerRadius > pixelMargin) {\n\t\tangleMargin = pixelMargin / arc.innerRadius;\n\t\tctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);\n\t} else {\n\t\tctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);\n\t}\n\tctx.closePath();\n\tctx.clip();\n}\n\nfunction drawFullCircleBorders(ctx, vm, arc, inner) {\n\tvar endAngle = arc.endAngle;\n\tvar i;\n\n\tif (inner) {\n\t\tarc.endAngle = arc.startAngle + TAU;\n\t\tclipArc(ctx, arc);\n\t\tarc.endAngle = endAngle;\n\t\tif (arc.endAngle === arc.startAngle && arc.fullCircles) {\n\t\t\tarc.endAngle += TAU;\n\t\t\tarc.fullCircles--;\n\t\t}\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);\n\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\tctx.stroke();\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);\n\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\tctx.stroke();\n\t}\n}\n\nfunction drawBorder(ctx, vm, arc) {\n\tvar inner = vm.borderAlign === 'inner';\n\n\tif (inner) {\n\t\tctx.lineWidth = vm.borderWidth * 2;\n\t\tctx.lineJoin = 'round';\n\t} else {\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tctx.lineJoin = 'bevel';\n\t}\n\n\tif (arc.fullCircles) {\n\t\tdrawFullCircleBorders(ctx, vm, arc, inner);\n\t}\n\n\tif (inner) {\n\t\tclipArc(ctx, arc);\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);\n\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\tctx.closePath();\n\tctx.stroke();\n}\n\nvar element_arc = core_element.extend({\n\t_type: 'arc',\n\n\tinLabelRange: function(mouseX) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t}\n\t\treturn false;\n\t},\n\n\tinRange: function(chartX, chartY) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\tvar pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});\n\t\t\tvar angle = pointRelativePosition.angle;\n\t\t\tvar distance = pointRelativePosition.distance;\n\n\t\t\t// Sanitise angle range\n\t\t\tvar startAngle = vm.startAngle;\n\t\t\tvar endAngle = vm.endAngle;\n\t\t\twhile (endAngle < startAngle) {\n\t\t\t\tendAngle += TAU;\n\t\t\t}\n\t\t\twhile (angle > endAngle) {\n\t\t\t\tangle -= TAU;\n\t\t\t}\n\t\t\twhile (angle < startAngle) {\n\t\t\t\tangle += TAU;\n\t\t\t}\n\n\t\t\t// Check if within the range of the open/close angle\n\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle);\n\t\t\tvar withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\treturn {\n\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);\n\t\tvar rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\n\t\treturn {\n\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;\n\t\tvar arc = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tinnerRadius: vm.innerRadius,\n\t\t\touterRadius: Math.max(vm.outerRadius - pixelMargin, 0),\n\t\t\tpixelMargin: pixelMargin,\n\t\t\tstartAngle: vm.startAngle,\n\t\t\tendAngle: vm.endAngle,\n\t\t\tfullCircles: Math.floor(vm.circumference / TAU)\n\t\t};\n\t\tvar i;\n\n\t\tctx.save();\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\n\t\tif (arc.fullCircles) {\n\t\t\tarc.endAngle = arc.startAngle + TAU;\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);\n\t\t\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\t\t\tctx.closePath();\n\t\t\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t\tarc.endAngle = arc.startAngle + vm.circumference % TAU;\n\t\t}\n\n\t\tctx.beginPath();\n\t\tctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);\n\t\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth) {\n\t\t\tdrawBorder(ctx, vm, arc);\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$1 = helpers$1.valueOrDefault;\n\nvar defaultColor = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tline: {\n\t\t\ttension: 0.4,\n\t\t\tbackgroundColor: defaultColor,\n\t\t\tborderWidth: 3,\n\t\t\tborderColor: defaultColor,\n\t\t\tborderCapStyle: 'butt',\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: 'miter',\n\t\t\tcapBezierPoints: true,\n\t\t\tfill: true, // do we fill in the area between the line and its base axis\n\t\t}\n\t}\n});\n\nvar element_line = core_element.extend({\n\t_type: 'line',\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar vm = me._view;\n\t\tvar ctx = me._chart.ctx;\n\t\tvar spanGaps = vm.spanGaps;\n\t\tvar points = me._children.slice(); // clone array\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\tvar lastDrawnIndex = -1;\n\t\tvar closePath = me._loop;\n\t\tvar index, previous, currentVM;\n\n\t\tif (!points.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (me._loop) {\n\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\tprevious = helpers$1.previousItem(points, index);\n\t\t\t\t// If the line has an open path, shift the point array\n\t\t\t\tif (!points[index]._view.skip && previous._view.skip) {\n\t\t\t\t\tpoints = points.slice(index).concat(points.slice(0, index));\n\t\t\t\t\tclosePath = spanGaps;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the line has a close path, add the first point again\n\t\t\tif (closePath) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\t\t}\n\n\t\tctx.save();\n\n\t\t// Stroke Line Options\n\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\n\t\t// IE 9 and 10 do not support line dash\n\t\tif (ctx.setLineDash) {\n\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t}\n\n\t\tctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\tctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\n\t\t// Stroke Line\n\t\tctx.beginPath();\n\n\t\t// First point moves to it's starting position no matter what\n\t\tcurrentVM = points[0]._view;\n\t\tif (!currentVM.skip) {\n\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\tlastDrawnIndex = 0;\n\t\t}\n\n\t\tfor (index = 1; index < points.length; ++index) {\n\t\t\tcurrentVM = points[index]._view;\n\t\t\tprevious = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];\n\n\t\t\tif (!currentVM.skip) {\n\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t} else {\n\t\t\t\t\t// Line to next point\n\t\t\t\t\thelpers$1.canvas.lineTo(ctx, previous._view, currentVM);\n\t\t\t\t}\n\t\t\t\tlastDrawnIndex = index;\n\t\t\t}\n\t\t}\n\n\t\tif (closePath) {\n\t\t\tctx.closePath();\n\t\t}\n\n\t\tctx.stroke();\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$2 = helpers$1.valueOrDefault;\n\nvar defaultColor$1 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 3,\n\t\t\tpointStyle: 'circle',\n\t\t\tbackgroundColor: defaultColor$1,\n\t\t\tborderColor: defaultColor$1,\n\t\t\tborderWidth: 1,\n\t\t\t// Hover\n\t\t\thitRadius: 1,\n\t\t\thoverRadius: 4,\n\t\t\thoverBorderWidth: 1\n\t\t}\n\t}\n});\n\nfunction xRange(mouseX) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;\n}\n\nfunction yRange(mouseY) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;\n}\n\nvar element_point = core_element.extend({\n\t_type: 'point',\n\n\tinRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t},\n\n\tinLabelRange: xRange,\n\tinXRange: xRange,\n\tinYRange: yRange,\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t};\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar vm = this._view;\n\t\tvar ctx = this._chart.ctx;\n\t\tvar pointStyle = vm.pointStyle;\n\t\tvar rotation = vm.rotation;\n\t\tvar radius = vm.radius;\n\t\tvar x = vm.x;\n\t\tvar y = vm.y;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n\t\tif (vm.skip) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clipping for Points.\n\t\tif (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\tctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\t\t\thelpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n\t\t}\n\t}\n});\n\nvar defaultColor$2 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\trectangle: {\n\t\t\tbackgroundColor: defaultColor$2,\n\t\t\tborderColor: defaultColor$2,\n\t\t\tborderSkipped: 'bottom',\n\t\t\tborderWidth: 0\n\t\t}\n\t}\n});\n\nfunction isVertical(vm) {\n\treturn vm && vm.width !== undefined;\n}\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param bar {Chart.Element.Rectangle} the bar\n * @return {Bounds} bounds of the bar\n * @private\n */\nfunction getBarBounds(vm) {\n\tvar x1, x2, y1, y2, half;\n\n\tif (isVertical(vm)) {\n\t\thalf = vm.width / 2;\n\t\tx1 = vm.x - half;\n\t\tx2 = vm.x + half;\n\t\ty1 = Math.min(vm.y, vm.base);\n\t\ty2 = Math.max(vm.y, vm.base);\n\t} else {\n\t\thalf = vm.height / 2;\n\t\tx1 = Math.min(vm.x, vm.base);\n\t\tx2 = Math.max(vm.x, vm.base);\n\t\ty1 = vm.y - half;\n\t\ty2 = vm.y + half;\n\t}\n\n\treturn {\n\t\tleft: x1,\n\t\ttop: y1,\n\t\tright: x2,\n\t\tbottom: y2\n\t};\n}\n\nfunction swap(orig, v1, v2) {\n\treturn orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction parseBorderSkipped(vm) {\n\tvar edge = vm.borderSkipped;\n\tvar res = {};\n\n\tif (!edge) {\n\t\treturn res;\n\t}\n\n\tif (vm.horizontal) {\n\t\tif (vm.base > vm.x) {\n\t\t\tedge = swap(edge, 'left', 'right');\n\t\t}\n\t} else if (vm.base < vm.y) {\n\t\tedge = swap(edge, 'bottom', 'top');\n\t}\n\n\tres[edge] = true;\n\treturn res;\n}\n\nfunction parseBorderWidth(vm, maxW, maxH) {\n\tvar value = vm.borderWidth;\n\tvar skip = parseBorderSkipped(vm);\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = +value.top || 0;\n\t\tr = +value.right || 0;\n\t\tb = +value.bottom || 0;\n\t\tl = +value.left || 0;\n\t} else {\n\t\tt = r = b = l = +value || 0;\n\t}\n\n\treturn {\n\t\tt: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,\n\t\tr: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,\n\t\tb: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,\n\t\tl: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l\n\t};\n}\n\nfunction boundingRects(vm) {\n\tvar bounds = getBarBounds(vm);\n\tvar width = bounds.right - bounds.left;\n\tvar height = bounds.bottom - bounds.top;\n\tvar border = parseBorderWidth(vm, width / 2, height / 2);\n\n\treturn {\n\t\touter: {\n\t\t\tx: bounds.left,\n\t\t\ty: bounds.top,\n\t\t\tw: width,\n\t\t\th: height\n\t\t},\n\t\tinner: {\n\t\t\tx: bounds.left + border.l,\n\t\t\ty: bounds.top + border.t,\n\t\t\tw: width - border.l - border.r,\n\t\t\th: height - border.t - border.b\n\t\t}\n\t};\n}\n\nfunction inRange(vm, x, y) {\n\tvar skipX = x === null;\n\tvar skipY = y === null;\n\tvar bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);\n\n\treturn bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nvar element_rectangle = core_element.extend({\n\t_type: 'rectangle',\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar rects = boundingRects(vm);\n\t\tvar outer = rects.outer;\n\t\tvar inner = rects.inner;\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n\t\tif (outer.w === inner.w && outer.h === inner.h) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(outer.x, outer.y, outer.w, outer.h);\n\t\tctx.clip();\n\t\tctx.fillStyle = vm.borderColor;\n\t\tctx.rect(inner.x, inner.y, inner.w, inner.h);\n\t\tctx.fill('evenodd');\n\t\tctx.restore();\n\t},\n\n\theight: function() {\n\t\tvar vm = this._view;\n\t\treturn vm.base - vm.y;\n\t},\n\n\tinRange: function(mouseX, mouseY) {\n\t\treturn inRange(this._view, mouseX, mouseY);\n\t},\n\n\tinLabelRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn isVertical(vm)\n\t\t\t? inRange(vm, mouseX, null)\n\t\t\t: inRange(vm, null, mouseY);\n\t},\n\n\tinXRange: function(mouseX) {\n\t\treturn inRange(this._view, mouseX, null);\n\t},\n\n\tinYRange: function(mouseY) {\n\t\treturn inRange(this._view, null, mouseY);\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar x, y;\n\t\tif (isVertical(vm)) {\n\t\t\tx = vm.x;\n\t\t\ty = (vm.y + vm.base) / 2;\n\t\t} else {\n\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\ty = vm.y;\n\t\t}\n\n\t\treturn {x: x, y: y};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\n\t\treturn isVertical(vm)\n\t\t\t? vm.width * Math.abs(vm.y - vm.base)\n\t\t\t: vm.height * Math.abs(vm.x - vm.base);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t}\n});\n\nvar elements = {};\nvar Arc = element_arc;\nvar Line = element_line;\nvar Point = element_point;\nvar Rectangle = element_rectangle;\nelements.Arc = Arc;\nelements.Line = Line;\nelements.Point = Point;\nelements.Rectangle = Rectangle;\n\nvar deprecated = helpers$1._deprecated;\nvar valueOrDefault$3 = helpers$1.valueOrDefault;\n\ncore_defaults._set('bar', {\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'linear'\n\t\t}]\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\tbar: {\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9\n\t\t}\n\t}\n});\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(scale, pixels) {\n\tvar min = scale._length;\n\tvar prev, curr, i, ilen;\n\n\tfor (i = 1, ilen = pixels.length; i < ilen; ++i) {\n\t\tmin = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n\t}\n\n\tfor (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {\n\t\tcurr = scale.getPixelForTick(i);\n\t\tmin = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;\n\t\tprev = curr;\n\t}\n\n\treturn min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options) {\n\tvar thickness = options.barThickness;\n\tvar count = ruler.stackCount;\n\tvar curr = ruler.pixels[index];\n\tvar min = helpers$1.isNullOrUndef(thickness)\n\t\t? computeMinSampleSize(ruler.scale, ruler.pixels)\n\t\t: -1;\n\tvar size, ratio;\n\n\tif (helpers$1.isNullOrUndef(thickness)) {\n\t\tsize = min * options.categoryPercentage;\n\t\tratio = options.barPercentage;\n\t} else {\n\t\t// When bar thickness is enforced, category and bar percentages are ignored.\n\t\t// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n\t\t// and deprecate barPercentage since this value is ignored when thickness is absolute.\n\t\tsize = thickness * count;\n\t\tratio = 1;\n\t}\n\n\treturn {\n\t\tchunk: size / count,\n\t\tratio: ratio,\n\t\tstart: curr - (size / 2)\n\t};\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options) {\n\tvar pixels = ruler.pixels;\n\tvar curr = pixels[index];\n\tvar prev = index > 0 ? pixels[index - 1] : null;\n\tvar next = index < pixels.length - 1 ? pixels[index + 1] : null;\n\tvar percent = options.categoryPercentage;\n\tvar start, size;\n\n\tif (prev === null) {\n\t\t// first data: its size is double based on the next point or,\n\t\t// if it's also the last data, we use the scale size.\n\t\tprev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n\t}\n\n\tif (next === null) {\n\t\t// last data: its size is also double based on the previous point.\n\t\tnext = curr + curr - prev;\n\t}\n\n\tstart = curr - (curr - Math.min(prev, next)) / 2 * percent;\n\tsize = Math.abs(next - prev) / 2 * percent;\n\n\treturn {\n\t\tchunk: size / ruler.stackCount,\n\t\tratio: options.barPercentage,\n\t\tstart: start\n\t};\n}\n\nvar controller_bar = core_datasetController.extend({\n\n\tdataElementType: elements.Rectangle,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderSkipped',\n\t\t'borderWidth',\n\t\t'barPercentage',\n\t\t'barThickness',\n\t\t'categoryPercentage',\n\t\t'maxBarThickness',\n\t\t'minBarLength'\n\t],\n\n\tinitialize: function() {\n\t\tvar me = this;\n\t\tvar meta, scaleOpts;\n\n\t\tcore_datasetController.prototype.initialize.apply(me, arguments);\n\n\t\tmeta = me.getMeta();\n\t\tmeta.stack = me.getDataset().stack;\n\t\tmeta.bar = true;\n\n\t\tscaleOpts = me._getIndexScale().options;\n\t\tdeprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');\n\t\tdeprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');\n\t\tdeprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');\n\t\tdeprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');\n\t\tdeprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar rects = me.getMeta().data;\n\t\tvar i, ilen;\n\n\t\tme._ruler = me.getRuler();\n\n\t\tfor (i = 0, ilen = rects.length; i < ilen; ++i) {\n\t\t\tme.updateElement(rects[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\t\tvar options = me._resolveDataElementOptions(rectangle, index);\n\n\t\trectangle._xScale = me.getScaleForId(meta.xAxisID);\n\t\trectangle._yScale = me.getScaleForId(meta.yAxisID);\n\t\trectangle._datasetIndex = me.index;\n\t\trectangle._index = index;\n\t\trectangle._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderSkipped: options.borderSkipped,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\tdatasetLabel: dataset.label,\n\t\t\tlabel: me.chart.data.labels[index]\n\t\t};\n\n\t\tif (helpers$1.isArray(dataset.data[index])) {\n\t\t\trectangle._model.borderSkipped = null;\n\t\t}\n\n\t\tme._updateElementGeometry(rectangle, index, reset, options);\n\n\t\trectangle.pivot();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateElementGeometry: function(rectangle, index, reset, options) {\n\t\tvar me = this;\n\t\tvar model = rectangle._model;\n\t\tvar vscale = me._getValueScale();\n\t\tvar base = vscale.getBasePixel();\n\t\tvar horizontal = vscale.isHorizontal();\n\t\tvar ruler = me._ruler || me.getRuler();\n\t\tvar vpixels = me.calculateBarValuePixels(me.index, index, options);\n\t\tvar ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);\n\n\t\tmodel.horizontal = horizontal;\n\t\tmodel.base = reset ? base : vpixels.base;\n\t\tmodel.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n\t\tmodel.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n\t\tmodel.height = horizontal ? ipixels.size : undefined;\n\t\tmodel.width = horizontal ? undefined : ipixels.size;\n\t},\n\n\t/**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n\t_getStacks: function(last) {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar metasets = scale._getMatchingVisibleMetas(me._type);\n\t\tvar stacked = scale.options.stacked;\n\t\tvar ilen = metasets.length;\n\t\tvar stacks = [];\n\t\tvar i, meta;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = metasets[i];\n\t\t\t// stacked   | meta.stack\n\t\t\t//           | found | not found | undefined\n\t\t\t// false     |   x   |     x     |     x\n\t\t\t// true      |       |     x     |\n\t\t\t// undefined |       |     x     |     x\n\t\t\tif (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n\t\t\t\tstacks.push(meta.stack);\n\t\t\t}\n\t\t\tif (meta.index === last) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn stacks;\n\t},\n\n\t/**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n\tgetStackCount: function() {\n\t\treturn this._getStacks().length;\n\t},\n\n\t/**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n\t * @returns {number} The stack index\n\t * @private\n\t */\n\tgetStackIndex: function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetRuler: function() {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar pixels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n\t\t\tpixels.push(scale.getPixelForValue(null, i, me.index));\n\t\t}\n\n\t\treturn {\n\t\t\tpixels: pixels,\n\t\t\tstart: scale._startPixel,\n\t\t\tend: scale._endPixel,\n\t\t\tstackCount: me.getStackCount(),\n\t\t\tscale: scale\n\t\t};\n\t},\n\n\t/**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n\tcalculateBarValuePixels: function(datasetIndex, index, options) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar datasets = chart.data.datasets;\n\t\tvar metasets = scale._getMatchingVisibleMetas(me._type);\n\t\tvar value = scale._parseValue(datasets[datasetIndex].data[index]);\n\t\tvar minBarLength = options.minBarLength;\n\t\tvar stacked = scale.options.stacked;\n\t\tvar stack = me.getMeta().stack;\n\t\tvar start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;\n\t\tvar length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;\n\t\tvar ilen = metasets.length;\n\t\tvar i, imeta, ivalue, base, head, size, stackLength;\n\n\t\tif (stacked || (stacked === undefined && stack !== undefined)) {\n\t\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\t\timeta = metasets[i];\n\n\t\t\t\tif (imeta.index === datasetIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (imeta.stack === stack) {\n\t\t\t\t\tstackLength = scale._parseValue(datasets[imeta.index].data[index]);\n\t\t\t\t\tivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;\n\n\t\t\t\t\tif ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {\n\t\t\t\t\t\tstart += ivalue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbase = scale.getPixelForValue(start);\n\t\thead = scale.getPixelForValue(start + length);\n\t\tsize = head - base;\n\n\t\tif (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n\t\t\tsize = minBarLength;\n\t\t\tif (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {\n\t\t\t\thead = base - minBarLength;\n\t\t\t} else {\n\t\t\t\thead = base + minBarLength;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsize: size,\n\t\t\tbase: base,\n\t\t\thead: head,\n\t\t\tcenter: head + size / 2\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\tcalculateBarIndexPixels: function(datasetIndex, index, ruler, options) {\n\t\tvar me = this;\n\t\tvar range = options.barThickness === 'flex'\n\t\t\t? computeFlexCategoryTraits(index, ruler, options)\n\t\t\t: computeFitCategoryTraits(index, ruler, options);\n\n\t\tvar stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n\t\tvar center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n\t\tvar size = Math.min(\n\t\t\tvalueOrDefault$3(options.maxBarThickness, Infinity),\n\t\t\trange.chunk * range.ratio);\n\n\t\treturn {\n\t\t\tbase: center - size / 2,\n\t\t\thead: center + size / 2,\n\t\t\tcenter: center,\n\t\t\tsize: size\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar rects = me.getMeta().data;\n\t\tvar dataset = me.getDataset();\n\t\tvar ilen = rects.length;\n\t\tvar i = 0;\n\n\t\thelpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tvar val = scale._parseValue(dataset.data[i]);\n\t\t\tif (!isNaN(val.min) && !isNaN(val.max)) {\n\t\t\t\trects[i].draw();\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function() {\n\t\tvar me = this;\n\t\tvar values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));\n\t\tvar indexOpts = me._getIndexScale().options;\n\t\tvar valueOpts = me._getValueScale().options;\n\n\t\tvalues.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);\n\t\tvalues.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);\n\t\tvalues.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);\n\t\tvalues.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);\n\t\tvalues.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);\n\n\t\treturn values;\n\t}\n\n});\n\nvar valueOrDefault$4 = helpers$1.valueOrDefault;\nvar resolve$1 = helpers$1.options.resolve;\n\ncore_defaults._set('bubble', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\tposition: 'bottom',\n\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\tvar datasetLabel = data.datasets[item.datasetIndex].label || '';\n\t\t\t\tvar dataPoint = data.datasets[item.datasetIndex].data[item.index];\n\t\t\t\treturn datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_bubble = core_datasetController.extend({\n\t/**\n\t * @protected\n\t */\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t\t'hoverRadius',\n\t\t'hitRadius',\n\t\t'pointStyle',\n\t\t'rotation'\n\t],\n\n\t/**\n\t * @protected\n\t */\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data;\n\n\t\t// Update Points\n\t\thelpers$1.each(points, function(point, index) {\n\t\t\tme.updateElement(point, index, reset);\n\t\t});\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\t\tvar data = me.getDataset().data[index];\n\t\tvar dsIndex = me.index;\n\n\t\tvar x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n\t\tvar y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = dsIndex;\n\t\tpoint._index = index;\n\t\tpoint._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\thitRadius: options.hitRadius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tradius: reset ? 0 : options.radius,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t};\n\n\t\tpoint.pivot();\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = options.radius + options.hoverRadius;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function(point, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = point.custom || {};\n\t\tvar data = dataset.data[index] || {};\n\t\tvar values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\t// In case values were cached (and thus frozen), we need to clone the values\n\t\tif (me._cachedDataOpts === values) {\n\t\t\tvalues = helpers$1.extend({}, values);\n\t\t}\n\n\t\t// Custom radius resolution\n\t\tvalues.radius = resolve$1([\n\t\t\tcustom.radius,\n\t\t\tdata.r,\n\t\t\tme._config.radius,\n\t\t\tchart.options.elements.point.radius\n\t\t], context, index);\n\n\t\treturn values;\n\t}\n});\n\nvar valueOrDefault$5 = helpers$1.valueOrDefault;\n\nvar PI$1 = Math.PI;\nvar DOUBLE_PI$1 = PI$1 * 2;\nvar HALF_PI$1 = PI$1 / 2;\n\ncore_defaults._set('doughnut', {\n\tanimation: {\n\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate: true,\n\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale: false\n\t},\n\thover: {\n\t\tmode: 'single'\n\t},\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\t\tif (datasets.length) {\n\t\t\tfor (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {\n\t\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\t\tlistItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\tlistItem.appendChild(document.createTextNode(labels[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar style = meta.controller.getStyle(i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\t\thidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t// toggle visibility of index if exists\n\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// The percentage of the chart that we cut out of the middle.\n\tcutoutPercentage: 50,\n\n\t// The rotation of the chart, where the first data arc begins.\n\trotation: -HALF_PI$1,\n\n\t// The total circumference of the chart.\n\tcircumference: DOUBLE_PI$1,\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\tif (helpers$1.isArray(dataLabel)) {\n\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t} else {\n\t\t\t\t\tdataLabel += value;\n\t\t\t\t}\n\n\t\t\t\treturn dataLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_doughnut = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'borderAlign',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t],\n\n\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\tgetRingIndex: function(datasetIndex) {\n\t\tvar ringIndex = 0;\n\n\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t++ringIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn ringIndex;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar ratioX = 1;\n\t\tvar ratioY = 1;\n\t\tvar offsetX = 0;\n\t\tvar offsetY = 0;\n\t\tvar meta = me.getMeta();\n\t\tvar arcs = meta.data;\n\t\tvar cutout = opts.cutoutPercentage / 100 || 0;\n\t\tvar circumference = opts.circumference;\n\t\tvar chartWeight = me._getRingWeight(me.index);\n\t\tvar maxWidth, maxHeight, i, ilen;\n\n\t\t// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n\t\tif (circumference < DOUBLE_PI$1) {\n\t\t\tvar startAngle = opts.rotation % DOUBLE_PI$1;\n\t\t\tstartAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;\n\t\t\tvar endAngle = startAngle + circumference;\n\t\t\tvar startX = Math.cos(startAngle);\n\t\t\tvar startY = Math.sin(startAngle);\n\t\t\tvar endX = Math.cos(endAngle);\n\t\t\tvar endY = Math.sin(endAngle);\n\t\t\tvar contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;\n\t\t\tvar contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;\n\t\t\tvar contains180 = startAngle === -PI$1 || endAngle >= PI$1;\n\t\t\tvar contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;\n\t\t\tvar minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);\n\t\t\tvar minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);\n\t\t\tvar maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);\n\t\t\tvar maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);\n\t\t\tratioX = (maxX - minX) / 2;\n\t\t\tratioY = (maxY - minY) / 2;\n\t\t\toffsetX = -(maxX + minX) / 2;\n\t\t\toffsetY = -(maxY + minY) / 2;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveDataElementOptions(arcs[i], i);\n\t\t}\n\n\t\tchart.borderWidth = me.getMaxBorderWidth();\n\t\tmaxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;\n\t\tmaxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;\n\t\tchart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n\t\tchart.innerRadius = Math.max(chart.outerRadius * cutout, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n\t\tchart.offsetX = offsetX * chart.outerRadius;\n\t\tchart.offsetY = offsetY * chart.outerRadius;\n\n\t\tmeta.total = me.calculateTotal();\n\n\t\tme.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar centerX = (chartArea.left + chartArea.right) / 2;\n\t\tvar centerY = (chartArea.top + chartArea.bottom) / 2;\n\t\tvar startAngle = opts.rotation; // non reset case handled later\n\t\tvar endAngle = opts.rotation; // non reset case handled later\n\t\tvar dataset = me.getDataset();\n\t\tvar circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);\n\t\tvar innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n\t\tvar outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\tstartAngle: startAngle,\n\t\t\t\tendAngle: endAngle,\n\t\t\t\tcircumference: circumference,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t}\n\t\t});\n\n\t\tvar model = arc._model;\n\n\t\t// Set correct angles if not resetting\n\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\tif (index === 0) {\n\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t} else {\n\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t}\n\n\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t}\n\n\t\tarc.pivot();\n\t},\n\n\tcalculateTotal: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar total = 0;\n\t\tvar value;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tvalue = dataset.data[index];\n\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\ttotal += Math.abs(value);\n\t\t\t}\n\t\t});\n\n\t\t/* if (total === 0) {\n\t\t\ttotal = NaN;\n\t\t}*/\n\n\t\treturn total;\n\t},\n\n\tcalculateCircumference: function(value) {\n\t\tvar total = this.getMeta().total;\n\t\tif (total > 0 && !isNaN(value)) {\n\t\t\treturn DOUBLE_PI$1 * (Math.abs(value) / total);\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// gets the max border or hover width to properly scale pie charts\n\tgetMaxBorderWidth: function(arcs) {\n\t\tvar me = this;\n\t\tvar max = 0;\n\t\tvar chart = me.chart;\n\t\tvar i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n\t\tif (!arcs) {\n\t\t\t// Find the outmost visible dataset\n\t\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\tarcs = meta.data;\n\t\t\t\t\tif (i !== me.index) {\n\t\t\t\t\t\tcontroller = meta.controller;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!arcs) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarc = arcs[i];\n\t\t\tif (controller) {\n\t\t\t\tcontroller._configure();\n\t\t\t\toptions = controller._resolveDataElementOptions(arc, i);\n\t\t\t} else {\n\t\t\t\toptions = arc._options;\n\t\t\t}\n\t\t\tif (options.borderAlign !== 'inner') {\n\t\t\t\tborderWidth = options.borderWidth;\n\t\t\t\thoverWidth = options.hoverBorderWidth;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n\t_getRingWeightOffset: function(datasetIndex) {\n\t\tvar ringWeightOffset = 0;\n\n\t\tfor (var i = 0; i < datasetIndex; ++i) {\n\t\t\tif (this.chart.isDatasetVisible(i)) {\n\t\t\t\tringWeightOffset += this._getRingWeight(i);\n\t\t\t}\n\t\t}\n\n\t\treturn ringWeightOffset;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getRingWeight: function(dataSetIndex) {\n\t\treturn Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n\t},\n\n\t/**\n\t * Returns the sum of all visibile data set weights.  This value can be 0.\n\t * @private\n\t */\n\t_getVisibleDatasetWeightTotal: function() {\n\t\treturn this._getRingWeightOffset(this.chart.data.datasets.length);\n\t}\n});\n\ncore_defaults._set('horizontalBar', {\n\thover: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'bottom'\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'category',\n\t\t\tposition: 'left',\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}]\n\t},\n\n\telements: {\n\t\trectangle: {\n\t\t\tborderSkipped: 'left'\n\t\t}\n\t},\n\n\ttooltips: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\thorizontalBar: {\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9\n\t\t}\n\t}\n});\n\nvar controller_horizontalBar = controller_bar.extend({\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t}\n});\n\nvar valueOrDefault$6 = helpers$1.valueOrDefault;\nvar resolve$2 = helpers$1.options.resolve;\nvar isPointInArea = helpers$1.canvas._isPointInArea;\n\ncore_defaults._set('line', {\n\tshowLines: true,\n\tspanGaps: false,\n\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tid: 'x-axis-0'\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t}\n});\n\nfunction scaleClip(scale, halfBorderWidth) {\n\tvar tickOpts = scale && scale.options.ticks || {};\n\tvar reverse = tickOpts.reverse;\n\tvar min = tickOpts.min === undefined ? halfBorderWidth : 0;\n\tvar max = tickOpts.max === undefined ? halfBorderWidth : 0;\n\treturn {\n\t\tstart: reverse ? max : min,\n\t\tend: reverse ? min : max\n\t};\n}\n\nfunction defaultClip(xScale, yScale, borderWidth) {\n\tvar halfBorderWidth = borderWidth / 2;\n\tvar x = scaleClip(xScale, halfBorderWidth);\n\tvar y = scaleClip(yScale, halfBorderWidth);\n\n\treturn {\n\t\ttop: y.end,\n\t\tright: x.end,\n\t\tbottom: y.start,\n\t\tleft: x.start\n\t};\n}\n\nfunction toClip(value) {\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = value.top;\n\t\tr = value.right;\n\t\tb = value.bottom;\n\t\tl = value.left;\n\t} else {\n\t\tt = r = b = l = value;\n\t}\n\n\treturn {\n\t\ttop: t,\n\t\tright: r,\n\t\tbottom: b,\n\t\tleft: l\n\t};\n}\n\n\nvar controller_line = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderCapStyle',\n\t\t'borderColor',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'borderWidth',\n\t\t'cubicInterpolationMode',\n\t\t'fill'\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: {\n\t\tbackgroundColor: 'pointBackgroundColor',\n\t\tborderColor: 'pointBorderColor',\n\t\tborderWidth: 'pointBorderWidth',\n\t\thitRadius: 'pointHitRadius',\n\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\thoverRadius: 'pointHoverRadius',\n\t\tpointStyle: 'pointStyle',\n\t\tradius: 'pointRadius',\n\t\trotation: 'pointRotation'\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar options = me.chart.options;\n\t\tvar config = me._config;\n\t\tvar showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);\n\t\tvar i, ilen;\n\n\t\tme._xScale = me.getScaleForId(meta.xAxisID);\n\t\tme._yScale = me.getScaleForId(meta.yAxisID);\n\n\t\t// Update Line\n\t\tif (showLine) {\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif (config.tension !== undefined && config.lineTension === undefined) {\n\t\t\t\tconfig.lineTension = config.tension;\n\t\t\t}\n\n\t\t\t// Utility\n\t\t\tline._scale = me._yScale;\n\t\t\tline._datasetIndex = me.index;\n\t\t\t// Data\n\t\t\tline._children = points;\n\t\t\t// Model\n\t\t\tline._model = me._resolveDatasetElementOptions(line);\n\n\t\t\tline.pivot();\n\t\t}\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\tif (showLine && line._model.tension !== 0) {\n\t\t\tme.updateBezierControlPoints();\n\t\t}\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar datasetIndex = me.index;\n\t\tvar value = dataset.data[index];\n\t\tvar xScale = me._xScale;\n\t\tvar yScale = me._yScale;\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar x, y;\n\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\n\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\n\t\t// Utility\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = datasetIndex;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n\t\t\tsteppedLine: lineModel ? lineModel.steppedLine : false,\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function(element) {\n\t\tvar me = this;\n\t\tvar config = me._config;\n\t\tvar custom = element.custom || {};\n\t\tvar options = me.chart.options;\n\t\tvar lineOptions = options.elements.line;\n\t\tvar values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);\n\n\t\t// The default behavior of lines is to break at null values, according\n\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t// This option gives lines the ability to span gaps\n\t\tvalues.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);\n\t\tvalues.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);\n\t\tvalues.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));\n\n\t\treturn values;\n\t},\n\n\tcalculatePointY: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar yScale = me._yScale;\n\t\tvar sumPos = 0;\n\t\tvar sumNeg = 0;\n\t\tvar i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;\n\n\t\tif (yScale.options.stacked) {\n\t\t\trightValue = +yScale.getRightValue(value);\n\t\t\tmetasets = chart._getSortedVisibleDatasetMetas();\n\t\t\tilen = metasets.length;\n\n\t\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\t\tdsMeta = metasets[i];\n\t\t\t\tif (dsMeta.index === datasetIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tds = chart.data.datasets[dsMeta.index];\n\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {\n\t\t\t\t\tstackedRightValue = +yScale.getRightValue(ds.data[index]);\n\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rightValue < 0) {\n\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t}\n\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t}\n\t\treturn yScale.getPixelForValue(value);\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar area = chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (lineModel.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tif (lineModel.cubicInterpolationMode === 'monotone') {\n\t\t\thelpers$1.splineCurveMonotone(points);\n\t\t} else {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\t\thelpers$1.previousItem(points, i)._model,\n\t\t\t\t\tmodel,\n\t\t\t\t\thelpers$1.nextItem(points, i)._model,\n\t\t\t\t\tlineModel.tension\n\t\t\t\t);\n\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t}\n\t\t}\n\n\t\tif (chart.options.elements.line.capBezierPoints) {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tif (isPointInArea(model, area)) {\n\t\t\t\t\tif (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t\tif (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data || [];\n\t\tvar area = chart.chartArea;\n\t\tvar canvas = chart.canvas;\n\t\tvar i = 0;\n\t\tvar ilen = points.length;\n\t\tvar clip;\n\n\t\tif (me._showLine) {\n\t\t\tclip = meta.dataset._model.clip;\n\n\t\t\thelpers$1.canvas.clipArea(chart.ctx, {\n\t\t\t\tleft: clip.left === false ? 0 : area.left - clip.left,\n\t\t\t\tright: clip.right === false ? canvas.width : area.right + clip.right,\n\t\t\t\ttop: clip.top === false ? 0 : area.top - clip.top,\n\t\t\t\tbottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom\n\t\t\t});\n\n\t\t\tmeta.dataset.draw();\n\n\t\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t\t}\n\n\t\t// Draw the points\n\t\tfor (; i < ilen; ++i) {\n\t\t\tpoints[i].draw(area);\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n\t},\n});\n\nvar resolve$3 = helpers$1.options.resolve;\n\ncore_defaults._set('polarArea', {\n\tscale: {\n\t\ttype: 'radialLinear',\n\t\tangleLines: {\n\t\t\tdisplay: false\n\t\t},\n\t\tgridLines: {\n\t\t\tcircular: true\n\t\t},\n\t\tpointLabels: {\n\t\t\tdisplay: false\n\t\t},\n\t\tticks: {\n\t\t\tbeginAtZero: true\n\t\t}\n\t},\n\n\t// Boolean - Whether to animate the rotation of the chart\n\tanimation: {\n\t\tanimateRotate: true,\n\t\tanimateScale: true\n\t},\n\n\tstartAngle: -0.5 * Math.PI,\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\t\tif (datasets.length) {\n\t\t\tfor (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {\n\t\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\t\tlistItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\tlistItem.appendChild(document.createTextNode(labels[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar style = meta.controller.getStyle(i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\t\thidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\treturn data.labels[item.index] + ': ' + item.yLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_polarArea = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'borderAlign',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\t\tvar start = me.chart.options.startAngle || 0;\n\t\tvar starts = me._starts = [];\n\t\tvar angles = me._angles = [];\n\t\tvar arcs = meta.data;\n\t\tvar i, ilen, angle;\n\n\t\tme._updateRadius();\n\n\t\tmeta.count = me.countVisibleElements();\n\n\t\tfor (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n\t\t\tstarts[i] = start;\n\t\t\tangle = me._computeAngle(i);\n\t\t\tangles[i] = angle;\n\t\t\tstart += angle;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveDataElementOptions(arcs[i], i);\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateRadius: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n\t\tchart.outerRadius = Math.max(minSize / 2, 0);\n\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\n\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar scale = chart.scale;\n\t\tvar labels = chart.data.labels;\n\n\t\tvar centerX = scale.xCenter;\n\t\tvar centerY = scale.yCenter;\n\n\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\tvar datasetStartAngle = opts.startAngle;\n\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar startAngle = me._starts[index];\n\t\tvar endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n\n\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\t\t\t_scale: scale,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX,\n\t\t\t\ty: centerY,\n\t\t\t\tinnerRadius: 0,\n\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t}\n\t\t});\n\n\t\tarc.pivot();\n\t},\n\n\tcountVisibleElements: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar count = 0;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\treturn count;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\t\tvar valueOrDefault = helpers$1.valueOrDefault;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeAngle: function(index) {\n\t\tvar me = this;\n\t\tvar count = this.getMeta().count;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\n\t\tif (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: me.chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\treturn resolve$3([\n\t\t\tme.chart.options.elements.arc.angle,\n\t\t\t(2 * Math.PI) / count\n\t\t], context, index);\n\t}\n});\n\ncore_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\ncore_defaults._set('pie', {\n\tcutoutPercentage: 0\n});\n\n// Pie charts are Doughnut chart with different defaults\nvar controller_pie = controller_doughnut;\n\nvar valueOrDefault$7 = helpers$1.valueOrDefault;\n\ncore_defaults._set('radar', {\n\tspanGaps: false,\n\tscale: {\n\t\ttype: 'radialLinear'\n\t},\n\telements: {\n\t\tline: {\n\t\t\tfill: 'start',\n\t\t\ttension: 0 // no bezier in radar\n\t\t}\n\t}\n});\n\nvar controller_radar = core_datasetController.extend({\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderWidth',\n\t\t'borderColor',\n\t\t'borderCapStyle',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'fill'\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: {\n\t\tbackgroundColor: 'pointBackgroundColor',\n\t\tborderColor: 'pointBorderColor',\n\t\tborderWidth: 'pointBorderWidth',\n\t\thitRadius: 'pointHitRadius',\n\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\thoverRadius: 'pointHoverRadius',\n\t\tpointStyle: 'pointStyle',\n\t\tradius: 'pointRadius',\n\t\trotation: 'pointRotation'\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.chart.scale;\n\t\tvar config = me._config;\n\t\tvar i, ilen;\n\n\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\tif (config.tension !== undefined && config.lineTension === undefined) {\n\t\t\tconfig.lineTension = config.tension;\n\t\t}\n\n\t\t// Utility\n\t\tline._scale = scale;\n\t\tline._datasetIndex = me.index;\n\t\t// Data\n\t\tline._children = points;\n\t\tline._loop = true;\n\t\t// Model\n\t\tline._model = me._resolveDatasetElementOptions(line);\n\n\t\tline.pivot();\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\t// Update bezier control points\n\t\tme.updateBezierControlPoints();\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar scale = me.chart.scale;\n\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\t\tvar lineModel = me.getMeta().dataset._model;\n\t\tvar x = reset ? scale.xCenter : pointPosition.x;\n\t\tvar y = reset ? scale.yCenter : pointPosition.y;\n\n\t\t// Utility\n\t\tpoint._scale = scale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = me.index;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),\n\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function() {\n\t\tvar me = this;\n\t\tvar config = me._config;\n\t\tvar options = me.chart.options;\n\t\tvar values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);\n\n\t\tvalues.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);\n\n\t\treturn values;\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar area = me.chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (meta.dataset._model.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tmodel = points[i]._model;\n\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\thelpers$1.previousItem(points, i, true)._model,\n\t\t\t\tmodel,\n\t\t\t\thelpers$1.nextItem(points, i, true)._model,\n\t\t\t\tmodel.tension\n\t\t\t);\n\n\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\tmodel.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n\t\t\tmodel.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n\t\t\tmodel.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n\t\t\tmodel.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n\t\t}\n\t},\n\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$7(options.hoverRadius, options.radius);\n\t}\n});\n\ncore_defaults._set('scatter', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\tid: 'x-axis-1',    // need an ID so datasets can reference the scale\n\t\t\ttype: 'linear',    // scatter should not use a category axis\n\t\t\tposition: 'bottom'\n\t\t}],\n\t\tyAxes: [{\n\t\t\tid: 'y-axis-1',\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';     // doesn't make sense for scatter since data are formatted as a point\n\t\t\t},\n\t\t\tlabel: function(item) {\n\t\t\t\treturn '(' + item.xLabel + ', ' + item.yLabel + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\tscatter: {\n\t\t\tshowLine: false\n\t\t}\n\t}\n});\n\n// Scatter charts use line controllers\nvar controller_scatter = controller_line;\n\n// NOTE export a map in which the key represents the controller type, not\n// the class, and so must be CamelCase in order to be correctly retrieved\n// by the controller in core.controller.js (`controllers[meta.type]`).\n\nvar controllers = {\n\tbar: controller_bar,\n\tbubble: controller_bubble,\n\tdoughnut: controller_doughnut,\n\thorizontalBar: controller_horizontalBar,\n\tline: controller_line,\n\tpolarArea: controller_polarArea,\n\tpie: controller_pie,\n\tradar: controller_radar,\n\tscatter: controller_scatter\n};\n\n/**\n * Helper function to get relative position for an event\n * @param {Event|IEvent} event - The event to get the position for\n * @param {Chart} chart - The chart\n * @returns {object} the event position\n */\nfunction getRelativePosition(e, chart) {\n\tif (e.native) {\n\t\treturn {\n\t\t\tx: e.x,\n\t\t\ty: e.y\n\t\t};\n\t}\n\n\treturn helpers$1.getRelativePosition(e, chart);\n}\n\n/**\n * Helper function to traverse all of the visible elements in the chart\n * @param {Chart} chart - the chart\n * @param {function} handler - the callback to execute for each visible item\n */\nfunction parseVisibleItems(chart, handler) {\n\tvar metasets = chart._getSortedVisibleDatasetMetas();\n\tvar metadata, i, j, ilen, jlen, element;\n\n\tfor (i = 0, ilen = metasets.length; i < ilen; ++i) {\n\t\tmetadata = metasets[i].data;\n\t\tfor (j = 0, jlen = metadata.length; j < jlen; ++j) {\n\t\t\telement = metadata[j];\n\t\t\tif (!element._view.skip) {\n\t\t\t\thandler(element);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {ChartElement[]} items - elements to filter\n * @param {object} position - the point to be nearest to\n * @return {ChartElement[]} the nearest items\n */\nfunction getIntersectItems(chart, position) {\n\tvar elements = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (element.inRange(position.x, position.y)) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in teh chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {object} position - the point to be nearest to\n * @param {boolean} intersect - if true, only consider items that intersect the position\n * @param {function} distanceMetric - function to provide the distance between points\n * @return {ChartElement[]} the nearest items\n */\nfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\tvar minDistance = Number.POSITIVE_INFINITY;\n\tvar nearestItems = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar center = element.getCenterPoint();\n\t\tvar distance = distanceMetric(position, center);\n\t\tif (distance < minDistance) {\n\t\t\tnearestItems = [element];\n\t\t\tminDistance = distance;\n\t\t} else if (distance === minDistance) {\n\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\tnearestItems.push(element);\n\t\t}\n\t});\n\n\treturn nearestItems;\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy\n */\nfunction getDistanceMetricForAxis(axis) {\n\tvar useX = axis.indexOf('x') !== -1;\n\tvar useY = axis.indexOf('y') !== -1;\n\n\treturn function(pt1, pt2) {\n\t\tvar deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n\t\tvar deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n\t\treturn Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\t};\n}\n\nfunction indexMode(chart, e, options) {\n\tvar position = getRelativePosition(e, chart);\n\t// Default axis for index mode is 'x' to match old behaviour\n\toptions.axis = options.axis || 'x';\n\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\tvar elements = [];\n\n\tif (!items.length) {\n\t\treturn [];\n\t}\n\n\tchart._getSortedVisibleDatasetMetas().forEach(function(meta) {\n\t\tvar element = meta.data[items[0]._index];\n\n\t\t// don't count items that are skipped (null data)\n\t\tif (element && !element._view.skip) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * @interface IInteractionOptions\n */\n/**\n * If true, only consider items that intersect the point\n * @name IInterfaceOptions#boolean\n * @type Boolean\n */\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nvar core_interaction = {\n\t// Helper function for different modes\n\tmodes: {\n\t\tsingle: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar elements = [];\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t\treturn elements;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn elements.slice(0, 1);\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.label\n\t\t * @deprecated since version 2.4.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tlabel: indexMode,\n\n\t\t/**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tindex: indexMode,\n\n\t\t/**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tdataset: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n\t\t\tif (items.length > 0) {\n\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t}\n\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.x-axis\n\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\t'x-axis': function(chart, e) {\n\t\t\treturn indexMode(chart, e, {intersect: false});\n\t\t},\n\n\t\t/**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tpoint: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\treturn getIntersectItems(chart, position);\n\t\t},\n\n\t\t/**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tnearest: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\treturn getNearestItems(chart, position, options.intersect, distanceMetric);\n\t\t},\n\n\t\t/**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tx: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\ty: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n};\n\nvar extend = helpers$1.extend;\n\nfunction filterByPosition(array, position) {\n\treturn helpers$1.where(array, function(v) {\n\t\treturn v.pos === position;\n\t});\n}\n\nfunction sortByWeight(array, reverse) {\n\treturn array.sort(function(a, b) {\n\t\tvar v0 = reverse ? b : a;\n\t\tvar v1 = reverse ? a : b;\n\t\treturn v0.weight === v1.weight ?\n\t\t\tv0.index - v1.index :\n\t\t\tv0.weight - v1.weight;\n\t});\n}\n\nfunction wrapBoxes(boxes) {\n\tvar layoutBoxes = [];\n\tvar i, ilen, box;\n\n\tfor (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n\t\tbox = boxes[i];\n\t\tlayoutBoxes.push({\n\t\t\tindex: i,\n\t\t\tbox: box,\n\t\t\tpos: box.position,\n\t\t\thorizontal: box.isHorizontal(),\n\t\t\tweight: box.weight\n\t\t});\n\t}\n\treturn layoutBoxes;\n}\n\nfunction setLayoutDims(layouts, params) {\n\tvar i, ilen, layout;\n\tfor (i = 0, ilen = layouts.length; i < ilen; ++i) {\n\t\tlayout = layouts[i];\n\t\t// store width used instead of chartArea.w in fitBoxes\n\t\tlayout.width = layout.horizontal\n\t\t\t? layout.box.fullWidth && params.availableWidth\n\t\t\t: params.vBoxMaxWidth;\n\t\t// store height used instead of chartArea.h in fitBoxes\n\t\tlayout.height = layout.horizontal && params.hBoxMaxHeight;\n\t}\n}\n\nfunction buildLayoutBoxes(boxes) {\n\tvar layoutBoxes = wrapBoxes(boxes);\n\tvar left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n\tvar right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n\tvar top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n\tvar bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n\n\treturn {\n\t\tleftAndTop: left.concat(top),\n\t\trightAndBottom: right.concat(bottom),\n\t\tchartArea: filterByPosition(layoutBoxes, 'chartArea'),\n\t\tvertical: left.concat(right),\n\t\thorizontal: top.concat(bottom)\n\t};\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n\treturn Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateDims(chartArea, params, layout) {\n\tvar box = layout.box;\n\tvar maxPadding = chartArea.maxPadding;\n\tvar newWidth, newHeight;\n\n\tif (layout.size) {\n\t\t// this layout was already counted for, lets first reduce old size\n\t\tchartArea[layout.pos] -= layout.size;\n\t}\n\tlayout.size = layout.horizontal ? box.height : box.width;\n\tchartArea[layout.pos] += layout.size;\n\n\tif (box.getPadding) {\n\t\tvar boxPadding = box.getPadding();\n\t\tmaxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n\t\tmaxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n\t\tmaxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n\t\tmaxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n\t}\n\n\tnewWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');\n\tnewHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');\n\n\tif (newWidth !== chartArea.w || newHeight !== chartArea.h) {\n\t\tchartArea.w = newWidth;\n\t\tchartArea.h = newHeight;\n\n\t\t// return true if chart area changed in layout's direction\n\t\treturn layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;\n\t}\n}\n\nfunction handleMaxPadding(chartArea) {\n\tvar maxPadding = chartArea.maxPadding;\n\n\tfunction updatePos(pos) {\n\t\tvar change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n\t\tchartArea[pos] += change;\n\t\treturn change;\n\t}\n\tchartArea.y += updatePos('top');\n\tchartArea.x += updatePos('left');\n\tupdatePos('right');\n\tupdatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n\tvar maxPadding = chartArea.maxPadding;\n\n\tfunction marginForPositions(positions) {\n\t\tvar margin = {left: 0, top: 0, right: 0, bottom: 0};\n\t\tpositions.forEach(function(pos) {\n\t\t\tmargin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n\t\t});\n\t\treturn margin;\n\t}\n\n\treturn horizontal\n\t\t? marginForPositions(['left', 'right'])\n\t\t: marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params) {\n\tvar refitBoxes = [];\n\tvar i, ilen, layout, box, refit, changed;\n\n\tfor (i = 0, ilen = boxes.length; i < ilen; ++i) {\n\t\tlayout = boxes[i];\n\t\tbox = layout.box;\n\n\t\tbox.update(\n\t\t\tlayout.width || chartArea.w,\n\t\t\tlayout.height || chartArea.h,\n\t\t\tgetMargins(layout.horizontal, chartArea)\n\t\t);\n\t\tif (updateDims(chartArea, params, layout)) {\n\t\t\tchanged = true;\n\t\t\tif (refitBoxes.length) {\n\t\t\t\t// Dimensions changed and there were non full width boxes before this\n\t\t\t\t// -> we have to refit those\n\t\t\t\trefit = true;\n\t\t\t}\n\t\t}\n\t\tif (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case\n\t\t\trefitBoxes.push(layout);\n\t\t}\n\t}\n\n\treturn refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;\n}\n\nfunction placeBoxes(boxes, chartArea, params) {\n\tvar userPadding = params.padding;\n\tvar x = chartArea.x;\n\tvar y = chartArea.y;\n\tvar i, ilen, layout, box;\n\n\tfor (i = 0, ilen = boxes.length; i < ilen; ++i) {\n\t\tlayout = boxes[i];\n\t\tbox = layout.box;\n\t\tif (layout.horizontal) {\n\t\t\tbox.left = box.fullWidth ? userPadding.left : chartArea.left;\n\t\t\tbox.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;\n\t\t\tbox.top = y;\n\t\t\tbox.bottom = y + box.height;\n\t\t\tbox.width = box.right - box.left;\n\t\t\ty = box.bottom;\n\t\t} else {\n\t\t\tbox.left = x;\n\t\t\tbox.right = x + box.width;\n\t\t\tbox.top = chartArea.top;\n\t\t\tbox.bottom = chartArea.top + chartArea.h;\n\t\t\tbox.height = box.bottom - box.top;\n\t\t\tx = box.right;\n\t\t}\n\t}\n\n\tchartArea.x = x;\n\tchartArea.y = y;\n}\n\ncore_defaults._set('global', {\n\tlayout: {\n\t\tpadding: {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}\n\t}\n});\n\n/**\n * @interface ILayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} getPadding -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nvar core_layouts = {\n\tdefaults: {},\n\n\t/**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {ILayoutItem} item - the item to add to be layed out\n\t */\n\taddBox: function(chart, item) {\n\t\tif (!chart.boxes) {\n\t\t\tchart.boxes = [];\n\t\t}\n\n\t\t// initialize item with default values\n\t\titem.fullWidth = item.fullWidth || false;\n\t\titem.position = item.position || 'top';\n\t\titem.weight = item.weight || 0;\n\t\titem._layers = item._layers || function() {\n\t\t\treturn [{\n\t\t\t\tz: 0,\n\t\t\t\tdraw: function() {\n\t\t\t\t\titem.draw.apply(item, arguments);\n\t\t\t\t}\n\t\t\t}];\n\t\t};\n\n\t\tchart.boxes.push(item);\n\t},\n\n\t/**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {ILayoutItem} layoutItem - the item to remove from the layout\n\t */\n\tremoveBox: function(chart, layoutItem) {\n\t\tvar index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\t\tif (index !== -1) {\n\t\t\tchart.boxes.splice(index, 1);\n\t\t}\n\t},\n\n\t/**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {ILayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n\tconfigure: function(chart, item, options) {\n\t\tvar props = ['fullWidth', 'position', 'weight'];\n\t\tvar ilen = props.length;\n\t\tvar i = 0;\n\t\tvar prop;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tprop = props[i];\n\t\t\tif (options.hasOwnProperty(prop)) {\n\t\t\t\titem[prop] = options[prop];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n\t */\n\tupdate: function(chart, width, height) {\n\t\tif (!chart) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar layoutOptions = chart.options.layout || {};\n\t\tvar padding = helpers$1.options.toPadding(layoutOptions.padding);\n\n\t\tvar availableWidth = width - padding.width;\n\t\tvar availableHeight = height - padding.height;\n\t\tvar boxes = buildLayoutBoxes(chart.boxes);\n\t\tvar verticalBoxes = boxes.vertical;\n\t\tvar horizontalBoxes = boxes.horizontal;\n\n\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t// Our canvas looks like the following.\n\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t// B1 is the bottom axis\n\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t// an error will be thrown.\n\t\t//\n\t\t// |----------------------------------------------------|\n\t\t// |                  T1 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t// |    |    |                 T2                  |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    | C1 |                           | C2 |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    |                                     |    |\n\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t// |    |    |                                     |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    | C3 |                           | C4 |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    |                 B1                  |    |\n\t\t// |----------------------------------------------------|\n\t\t// |                  B2 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t//\n\n\t\tvar params = Object.freeze({\n\t\t\touterWidth: width,\n\t\t\touterHeight: height,\n\t\t\tpadding: padding,\n\t\t\tavailableWidth: availableWidth,\n\t\t\tvBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,\n\t\t\thBoxMaxHeight: availableHeight / 2\n\t\t});\n\t\tvar chartArea = extend({\n\t\t\tmaxPadding: extend({}, padding),\n\t\t\tw: availableWidth,\n\t\t\th: availableHeight,\n\t\t\tx: padding.left,\n\t\t\ty: padding.top\n\t\t}, padding);\n\n\t\tsetLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n\t\t// First fit vertical boxes\n\t\tfitBoxes(verticalBoxes, chartArea, params);\n\n\t\t// Then fit horizontal boxes\n\t\tif (fitBoxes(horizontalBoxes, chartArea, params)) {\n\t\t\t// if the area changed, re-fit vertical boxes\n\t\t\tfitBoxes(verticalBoxes, chartArea, params);\n\t\t}\n\n\t\thandleMaxPadding(chartArea);\n\n\t\t// Finally place the boxes to correct coordinates\n\t\tplaceBoxes(boxes.leftAndTop, chartArea, params);\n\n\t\t// Move to opposite side of chart\n\t\tchartArea.x += chartArea.w;\n\t\tchartArea.y += chartArea.h;\n\n\t\tplaceBoxes(boxes.rightAndBottom, chartArea, params);\n\n\t\tchart.chartArea = {\n\t\t\tleft: chartArea.left,\n\t\t\ttop: chartArea.top,\n\t\t\tright: chartArea.left + chartArea.w,\n\t\t\tbottom: chartArea.top + chartArea.h\n\t\t};\n\n\t\t// Finally update boxes in chartArea (radial scale for example)\n\t\thelpers$1.each(boxes.chartArea, function(layout) {\n\t\t\tvar box = layout.box;\n\t\t\textend(box, chart.chartArea);\n\t\t\tbox.update(chartArea.w, chartArea.h);\n\t\t});\n\t}\n};\n\n/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nvar platform_basic = {\n\tacquireContext: function(item) {\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\treturn item && item.getContext('2d') || null;\n\t}\n};\n\nvar platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n\nvar platform_dom$1 = /*#__PURE__*/Object.freeze({\n__proto__: null,\n'default': platform_dom\n});\n\nvar stylesheet = getCjsExportFromNamespace(platform_dom$1);\n\nvar EXPANDO_KEY = '$chartjs';\nvar CSS_PREFIX = 'chartjs-';\nvar CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\nvar CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\nvar CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\nvar ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nvar EVENT_TYPES = {\n\ttouchstart: 'mousedown',\n\ttouchmove: 'mousemove',\n\ttouchend: 'mouseup',\n\tpointerenter: 'mouseenter',\n\tpointerdown: 'mousedown',\n\tpointermove: 'mousemove',\n\tpointerup: 'mouseup',\n\tpointerleave: 'mouseout',\n\tpointerout: 'mouseout'\n};\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns {number} Size in pixels or undefined if unknown.\n */\nfunction readUsedSize(element, property) {\n\tvar value = helpers$1.getStyle(element, property);\n\tvar matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n\treturn matches ? Number(matches[1]) : undefined;\n}\n\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n */\nfunction initCanvas(canvas, config) {\n\tvar style = canvas.style;\n\n\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\tvar renderHeight = canvas.getAttribute('height');\n\tvar renderWidth = canvas.getAttribute('width');\n\n\t// Chart.js modifies some canvas values that we want to restore on destroy\n\tcanvas[EXPANDO_KEY] = {\n\t\tinitial: {\n\t\t\theight: renderHeight,\n\t\t\twidth: renderWidth,\n\t\t\tstyle: {\n\t\t\t\tdisplay: style.display,\n\t\t\t\theight: style.height,\n\t\t\t\twidth: style.width\n\t\t\t}\n\t\t}\n\t};\n\n\t// Force canvas to display as block to avoid extra space caused by inline\n\t// elements, which would interfere with the responsive resize process.\n\t// https://github.com/chartjs/Chart.js/issues/2538\n\tstyle.display = style.display || 'block';\n\n\tif (renderWidth === null || renderWidth === '') {\n\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\tif (displayWidth !== undefined) {\n\t\t\tcanvas.width = displayWidth;\n\t\t}\n\t}\n\n\tif (renderHeight === null || renderHeight === '') {\n\t\tif (canvas.style.height === '') {\n\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t} else {\n\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\tif (displayWidth !== undefined) {\n\t\t\t\tcanvas.height = displayHeight;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn canvas;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nvar supportsEventListenerOptions = (function() {\n\tvar supports = false;\n\ttry {\n\t\tvar options = Object.defineProperty({}, 'passive', {\n\t\t\t// eslint-disable-next-line getter-return\n\t\t\tget: function() {\n\t\t\t\tsupports = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('e', null, options);\n\t} catch (e) {\n\t\t// continue regardless of error\n\t}\n\treturn supports;\n}());\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nvar eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n\tnode.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(node, type, listener) {\n\tnode.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction createEvent(type, chart, x, y, nativeEvent) {\n\treturn {\n\t\ttype: type,\n\t\tchart: chart,\n\t\tnative: nativeEvent || null,\n\t\tx: x !== undefined ? x : null,\n\t\ty: y !== undefined ? y : null,\n\t};\n}\n\nfunction fromNativeEvent(event, chart) {\n\tvar type = EVENT_TYPES[event.type] || event.type;\n\tvar pos = helpers$1.getRelativePosition(event, chart);\n\treturn createEvent(type, chart, pos.x, pos.y, event);\n}\n\nfunction throttled(fn, thisArg) {\n\tvar ticking = false;\n\tvar args = [];\n\n\treturn function() {\n\t\targs = Array.prototype.slice.call(arguments);\n\t\tthisArg = thisArg || this;\n\n\t\tif (!ticking) {\n\t\t\tticking = true;\n\t\t\thelpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tticking = false;\n\t\t\t\tfn.apply(thisArg, args);\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction createDiv(cls) {\n\tvar el = document.createElement('div');\n\tel.className = cls || '';\n\treturn el;\n}\n\n// Implementation based on https://github.com/marcj/css-element-queries\nfunction createResizer(handler) {\n\tvar maxSize = 1000000;\n\n\t// NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n\t// https://github.com/chartjs/Chart.js/issues/5902\n\tvar resizer = createDiv(CSS_SIZE_MONITOR);\n\tvar expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n\tvar shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n\n\texpand.appendChild(createDiv());\n\tshrink.appendChild(createDiv());\n\n\tresizer.appendChild(expand);\n\tresizer.appendChild(shrink);\n\tresizer._reset = function() {\n\t\texpand.scrollLeft = maxSize;\n\t\texpand.scrollTop = maxSize;\n\t\tshrink.scrollLeft = maxSize;\n\t\tshrink.scrollTop = maxSize;\n\t};\n\n\tvar onScroll = function() {\n\t\tresizer._reset();\n\t\thandler();\n\t};\n\n\taddListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n\taddListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n\n\treturn resizer;\n}\n\n// https://davidwalsh.name/detect-node-insertion\nfunction watchForRender(node, handler) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\tvar proxy = expando.renderProxy = function(e) {\n\t\tif (e.animationName === CSS_RENDER_ANIMATION) {\n\t\t\thandler();\n\t\t}\n\t};\n\n\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\taddListener(node, type, proxy);\n\t});\n\n\t// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n\t// is removed then added back immediately (same animation frame?). Accessing the\n\t// `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n\t// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n\t// https://github.com/chartjs/Chart.js/issues/4737\n\texpando.reflow = !!node.offsetParent;\n\n\tnode.classList.add(CSS_RENDER_MONITOR);\n}\n\nfunction unwatchForRender(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar proxy = expando.renderProxy;\n\n\tif (proxy) {\n\t\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\t\tremoveListener(node, type, proxy);\n\t\t});\n\n\t\tdelete expando.renderProxy;\n\t}\n\n\tnode.classList.remove(CSS_RENDER_MONITOR);\n}\n\nfunction addResizeListener(node, listener, chart) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n\t// Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\tvar resizer = expando.resizer = createResizer(throttled(function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = chart.options.maintainAspectRatio && node.parentNode;\n\t\t\tvar w = container ? container.clientWidth : 0;\n\t\t\tlistener(createEvent('resize', chart));\n\t\t\tif (container && container.clientWidth < w && chart.canvas) {\n\t\t\t\t// If the container size shrank during chart resize, let's assume\n\t\t\t\t// scrollbar appeared. So we resize again with the scrollbar visible -\n\t\t\t\t// effectively making chart smaller and the scrollbar hidden again.\n\t\t\t\t// Because we are inside `throttled`, and currently `ticking`, scroll\n\t\t\t\t// events are ignored during this whole 2 resize process.\n\t\t\t\t// If we assumed wrong and something else happened, we are resizing\n\t\t\t\t// twice in a frame (potential performance issue)\n\t\t\t\tlistener(createEvent('resize', chart));\n\t\t\t}\n\t\t}\n\t}));\n\n\t// The resizer needs to be attached to the node parent, so we first need to be\n\t// sure that `node` is attached to the DOM before injecting the resizer element.\n\twatchForRender(node, function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = node.parentNode;\n\t\t\tif (container && container !== resizer.parentNode) {\n\t\t\t\tcontainer.insertBefore(resizer, container.firstChild);\n\t\t\t}\n\n\t\t\t// The container size might have changed, let's reset the resizer state.\n\t\t\tresizer._reset();\n\t\t}\n\t});\n}\n\nfunction removeResizeListener(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar resizer = expando.resizer;\n\n\tdelete expando.resizer;\n\tunwatchForRender(node);\n\n\tif (resizer && resizer.parentNode) {\n\t\tresizer.parentNode.removeChild(resizer);\n\t}\n}\n\n/**\n * Injects CSS styles inline if the styles are not already present.\n * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.\n * @param {string} css - the CSS to be injected.\n */\nfunction injectCSS(rootNode, css) {\n\t// https://stackoverflow.com/q/3922139\n\tvar expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});\n\tif (!expando.containsStyles) {\n\t\texpando.containsStyles = true;\n\t\tcss = '/* Chart.js */\\n' + css;\n\t\tvar style = document.createElement('style');\n\t\tstyle.setAttribute('type', 'text/css');\n\t\tstyle.appendChild(document.createTextNode(css));\n\t\trootNode.appendChild(style);\n\t}\n}\n\nvar platform_dom$2 = {\n\t/**\n\t * When `true`, prevents the automatic injection of the stylesheet required to\n\t * correctly detect when the chart is added to the DOM and then resized. This\n\t * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n\t * to be manually imported to make this library compatible with any CSP.\n\t * See https://github.com/chartjs/Chart.js/issues/5208\n\t */\n\tdisableCSSInjection: false,\n\n\t/**\n\t * This property holds whether this platform is enabled for the current environment.\n\t * Currently used by platform.js to select the proper implementation.\n\t * @private\n\t */\n\t_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n\t/**\n\t * Initializes resources that depend on platform options.\n\t * @param {HTMLCanvasElement} canvas - The Canvas element.\n\t * @private\n\t */\n\t_ensureLoaded: function(canvas) {\n\t\tif (!this.disableCSSInjection) {\n\t\t\t// If the canvas is in a shadow DOM, then the styles must also be inserted\n\t\t\t// into the same shadow DOM.\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5763\n\t\t\tvar root = canvas.getRootNode ? canvas.getRootNode() : document;\n\t\t\tvar targetNode = root.host ? root : document.head;\n\t\t\tinjectCSS(targetNode, stylesheet);\n\t\t}\n\t},\n\n\tacquireContext: function(item, config) {\n\t\tif (typeof item === 'string') {\n\t\t\titem = document.getElementById(item);\n\t\t} else if (item.length) {\n\t\t\t// Support for array based queries (such as jQuery)\n\t\t\titem = item[0];\n\t\t}\n\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\tvar context = item && item.getContext && item.getContext('2d');\n\n\t\t// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n\t\t// inside an iframe or when running in a protected environment. We could guess the\n\t\t// types from their toString() value but let's keep things flexible and assume it's\n\t\t// a sufficient condition if the item has a context2D which has item as `canvas`.\n\t\t// https://github.com/chartjs/Chart.js/issues/3887\n\t\t// https://github.com/chartjs/Chart.js/issues/4102\n\t\t// https://github.com/chartjs/Chart.js/issues/4152\n\t\tif (context && context.canvas === item) {\n\t\t\t// Load platform resources on first chart creation, to make it possible to\n\t\t\t// import the library before setting platform options.\n\t\t\tthis._ensureLoaded(item);\n\t\t\tinitCanvas(item, config);\n\t\t\treturn context;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\treleaseContext: function(context) {\n\t\tvar canvas = context.canvas;\n\t\tif (!canvas[EXPANDO_KEY]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar initial = canvas[EXPANDO_KEY].initial;\n\t\t['height', 'width'].forEach(function(prop) {\n\t\t\tvar value = initial[prop];\n\t\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t} else {\n\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(initial.style || {}, function(value, key) {\n\t\t\tcanvas.style[key] = value;\n\t\t});\n\n\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t// eslint-disable-next-line no-self-assign\n\t\tcanvas.width = canvas.width;\n\n\t\tdelete canvas[EXPANDO_KEY];\n\t},\n\n\taddEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\taddResizeListener(canvas, listener, chart);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n\t\tvar proxies = expando.proxies || (expando.proxies = {});\n\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\tlistener(fromNativeEvent(event, chart));\n\t\t};\n\n\t\taddListener(canvas, type, proxy);\n\t},\n\n\tremoveEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\tremoveResizeListener(canvas);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || {};\n\t\tvar proxies = expando.proxies || {};\n\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\tremoveListener(canvas, type, proxy);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use EventTarget.addEventListener instead.\n * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n * @function Chart.helpers.addEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.addEvent = addListener;\n\n/**\n * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n * @function Chart.helpers.removeEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.removeEvent = removeListener;\n\n// @TODO Make possible to select another platform at build time.\nvar implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n\n/**\n * @namespace Chart.platform\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n * @since 2.4.0\n */\nvar platform = helpers$1.extend({\n\t/**\n\t * @since 2.7.0\n\t */\n\tinitialize: function() {},\n\n\t/**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t * @param {object} options - The chart options\n\t * @returns {CanvasRenderingContext2D} context2d instance\n\t */\n\tacquireContext: function() {},\n\n\t/**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n\treleaseContext: function() {},\n\n\t/**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link IEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t */\n\taddEventListener: function() {},\n\n\t/**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link IEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n\tremoveEventListener: function() {}\n\n}, implementation);\n\ncore_defaults._set('global', {\n\tplugins: {}\n});\n\n/**\n * The plugin service singleton\n * @namespace Chart.plugins\n * @since 2.1.0\n */\nvar core_plugins = {\n\t/**\n\t * Globally registered plugins.\n\t * @private\n\t */\n\t_plugins: [],\n\n\t/**\n\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t * incremented and descriptors are regenerated during following API calls.\n\t * @private\n\t */\n\t_cacheId: 0,\n\n\t/**\n\t * Registers the given plugin(s) if not already registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\tp.push(plugin);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Unregisters the given plugin(s) only if registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tunregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tvar idx = p.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\tp.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Remove all registered plugins.\n\t * @since 2.1.5\n\t */\n\tclear: function() {\n\t\tthis._plugins = [];\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Returns the number of registered plugins?\n\t * @returns {number}\n\t * @since 2.1.5\n\t */\n\tcount: function() {\n\t\treturn this._plugins.length;\n\t},\n\n\t/**\n\t * Returns all registered plugin instances.\n\t * @returns {IPlugin[]} array of plugin objects.\n\t * @since 2.1.5\n\t */\n\tgetAll: function() {\n\t\treturn this._plugins;\n\t},\n\n\t/**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n\tnotify: function(chart, hook, args) {\n\t\tvar descriptors = this.descriptors(chart);\n\t\tvar ilen = descriptors.length;\n\t\tvar i, descriptor, plugin, params, method;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tdescriptor = descriptors[i];\n\t\t\tplugin = descriptor.plugin;\n\t\t\tmethod = plugin[hook];\n\t\t\tif (typeof method === 'function') {\n\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\tparams.push(descriptor.options);\n\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns descriptors of enabled plugins for the given chart.\n\t * @returns {object[]} [{ plugin, options }]\n\t * @private\n\t */\n\tdescriptors: function(chart) {\n\t\tvar cache = chart.$plugins || (chart.$plugins = {});\n\t\tif (cache.id === this._cacheId) {\n\t\t\treturn cache.descriptors;\n\t\t}\n\n\t\tvar plugins = [];\n\t\tvar descriptors = [];\n\t\tvar config = (chart && chart.config) || {};\n\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar id = plugin.id;\n\t\t\tvar opts = options[id];\n\t\t\tif (opts === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (opts === true) {\n\t\t\t\topts = helpers$1.clone(core_defaults.global.plugins[id]);\n\t\t\t}\n\n\t\t\tplugins.push(plugin);\n\t\t\tdescriptors.push({\n\t\t\t\tplugin: plugin,\n\t\t\t\toptions: opts || {}\n\t\t\t});\n\t\t});\n\n\t\tcache.descriptors = descriptors;\n\t\tcache.id = this._cacheId;\n\t\treturn descriptors;\n\t},\n\n\t/**\n\t * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n\t * but in some cases, this reference can be changed by the user when updating options.\n\t * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t * @private\n\t */\n\t_invalidate: function(chart) {\n\t\tdelete chart.$plugins;\n\t}\n};\n\nvar core_scaleService = {\n\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t// use the new chart options to grab the correct scale\n\tconstructors: {},\n\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t// old browsers\n\n\t// Scale config defaults\n\tdefaults: {},\n\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\tthis.constructors[type] = scaleConstructor;\n\t\tthis.defaults[type] = helpers$1.clone(scaleDefaults);\n\t},\n\tgetScaleConstructor: function(type) {\n\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t},\n\tgetScaleDefaults: function(type) {\n\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\treturn this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n\t},\n\tupdateScaleDefaults: function(type, additions) {\n\t\tvar me = this;\n\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\tme.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n\t\t}\n\t},\n\taddScalesToLayout: function(chart) {\n\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\thelpers$1.each(chart.scales, function(scale) {\n\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\tscale.position = scale.options.position;\n\t\t\tscale.weight = scale.options.weight;\n\t\t\tcore_layouts.addBox(chart, scale);\n\t\t});\n\t}\n};\n\nvar valueOrDefault$8 = helpers$1.valueOrDefault;\nvar getRtlHelper = helpers$1.rtl.getRtlAdapter;\n\ncore_defaults._set('global', {\n\ttooltips: {\n\t\tenabled: true,\n\t\tcustom: null,\n\t\tmode: 'nearest',\n\t\tposition: 'average',\n\t\tintersect: true,\n\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\ttitleFontStyle: 'bold',\n\t\ttitleSpacing: 2,\n\t\ttitleMarginBottom: 6,\n\t\ttitleFontColor: '#fff',\n\t\ttitleAlign: 'left',\n\t\tbodySpacing: 2,\n\t\tbodyFontColor: '#fff',\n\t\tbodyAlign: 'left',\n\t\tfooterFontStyle: 'bold',\n\t\tfooterSpacing: 2,\n\t\tfooterMarginTop: 6,\n\t\tfooterFontColor: '#fff',\n\t\tfooterAlign: 'left',\n\t\tyPadding: 6,\n\t\txPadding: 6,\n\t\tcaretPadding: 2,\n\t\tcaretSize: 5,\n\t\tcornerRadius: 6,\n\t\tmultiKeyBackground: '#fff',\n\t\tdisplayColors: true,\n\t\tborderColor: 'rgba(0,0,0,0)',\n\t\tborderWidth: 0,\n\t\tcallbacks: {\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeTitle: helpers$1.noop,\n\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\tvar title = '';\n\t\t\t\tvar labels = data.labels;\n\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\n\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\tvar item = tooltipItems[0];\n\t\t\t\t\tif (item.label) {\n\t\t\t\t\t\ttitle = item.label;\n\t\t\t\t\t} else if (item.xLabel) {\n\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\t\t\tafterTitle: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tbeforeLabel: helpers$1.noop,\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel += ': ';\n\t\t\t\t}\n\t\t\t\tif (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n\t\t\t\t\tlabel += tooltipItem.value;\n\t\t\t\t} else {\n\t\t\t\t\tlabel += tooltipItem.yLabel;\n\t\t\t\t}\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tlabelColor: function(tooltipItem, chart) {\n\t\t\t\tvar meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\tvar view = activeElement._view;\n\t\t\t\treturn {\n\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t};\n\t\t\t},\n\t\t\tlabelTextColor: function() {\n\t\t\t\treturn this._options.bodyFontColor;\n\t\t\t},\n\t\t\tafterLabel: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tafterBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeFooter: helpers$1.noop,\n\t\t\tfooter: helpers$1.noop,\n\t\t\tafterFooter: helpers$1.noop\n\t\t}\n\t}\n});\n\nvar positioners = {\n\t/**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t * @function Chart.Tooltip.positioners.average\n\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t * @returns {object} tooltip position\n\t */\n\taverage: function(elements) {\n\t\tif (!elements.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar i, len;\n\t\tvar x = 0;\n\t\tvar y = 0;\n\t\tvar count = 0;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\tx += pos.x;\n\t\t\t\ty += pos.y;\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tx: x / count,\n\t\t\ty: y / count\n\t\t};\n\t},\n\n\t/**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t * @function Chart.Tooltip.positioners.nearest\n\t * @param elements {Chart.Element[]} the tooltip elements\n\t * @param eventPosition {object} the position of the event in canvas coordinates\n\t * @returns {object} the tooltip position\n\t */\n\tnearest: function(elements, eventPosition) {\n\t\tvar x = eventPosition.x;\n\t\tvar y = eventPosition.y;\n\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\tvar i, len, nearestElement;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\tvar d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n\t\t\t\tif (d < minDistance) {\n\t\t\t\t\tminDistance = d;\n\t\t\t\t\tnearestElement = el;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (nearestElement) {\n\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\tx = tp.x;\n\t\t\ty = tp.y;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n\tif (toPush) {\n\t\tif (helpers$1.isArray(toPush)) {\n\t\t\t// base = base.concat(toPush);\n\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t} else {\n\t\t\tbase.push(toPush);\n\t\t}\n\t}\n\n\treturn base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {string} value - The value to split by newline.\n * @returns {string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n\tif ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n\t\treturn str.split('\\n');\n\t}\n\treturn str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param element - the chart element (point, arc, bar) to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(element) {\n\tvar xScale = element._xScale;\n\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\tvar index = element._index;\n\tvar datasetIndex = element._datasetIndex;\n\tvar controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\tvar indexScale = controller._getIndexScale();\n\tvar valueScale = controller._getValueScale();\n\n\treturn {\n\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tlabel: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tvalue: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tindex: index,\n\t\tdatasetIndex: datasetIndex,\n\t\tx: element._model.x,\n\t\ty: element._model.y\n\t};\n}\n\n/**\n * Helper to get the reset model for the tooltip\n * @param tooltipOpts {object} the tooltip options\n */\nfunction getBaseModel(tooltipOpts) {\n\tvar globalDefaults = core_defaults.global;\n\n\treturn {\n\t\t// Positioning\n\t\txPadding: tooltipOpts.xPadding,\n\t\tyPadding: tooltipOpts.yPadding,\n\t\txAlign: tooltipOpts.xAlign,\n\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t// Drawing direction and text direction\n\t\trtl: tooltipOpts.rtl,\n\t\ttextDirection: tooltipOpts.textDirection,\n\n\t\t// Body\n\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\tbodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t// Title\n\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\ttitleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t// Footer\n\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\tfooterFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t// Appearance\n\t\tcaretSize: tooltipOpts.caretSize,\n\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\topacity: 0,\n\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\tdisplayColors: tooltipOpts.displayColors,\n\t\tborderColor: tooltipOpts.borderColor,\n\t\tborderWidth: tooltipOpts.borderWidth\n\t};\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, model) {\n\tvar ctx = tooltip._chart.ctx;\n\n\tvar height = model.yPadding * 2; // Tooltip Padding\n\tvar width = 0;\n\n\t// Count of all lines in the body\n\tvar body = model.body;\n\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t}, 0);\n\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\n\tvar titleLineCount = model.title.length;\n\tvar footerLineCount = model.footer.length;\n\tvar titleFontSize = model.titleFontSize;\n\tvar bodyFontSize = model.bodyFontSize;\n\tvar footerFontSize = model.footerFontSize;\n\n\theight += titleLineCount * titleFontSize; // Title Lines\n\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\theight += footerLineCount * (footerFontSize); // Footer Lines\n\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\n\t// Title width\n\tvar widthPadding = 0;\n\tvar maxLineWidth = function(line) {\n\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t};\n\n\tctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\thelpers$1.each(model.title, maxLineWidth);\n\n\t// Body width\n\tctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\thelpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\n\t// Body lines may include some extra width due to the color box\n\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\thelpers$1.each(body, function(bodyItem) {\n\t\thelpers$1.each(bodyItem.before, maxLineWidth);\n\t\thelpers$1.each(bodyItem.lines, maxLineWidth);\n\t\thelpers$1.each(bodyItem.after, maxLineWidth);\n\t});\n\n\t// Reset back to 0\n\twidthPadding = 0;\n\n\t// Footer width\n\tctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\thelpers$1.each(model.footer, maxLineWidth);\n\n\t// Add padding\n\twidth += 2 * model.xPadding;\n\n\treturn {\n\t\twidth: width,\n\t\theight: height\n\t};\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(tooltip, size) {\n\tvar model = tooltip._model;\n\tvar chart = tooltip._chart;\n\tvar chartArea = tooltip._chart.chartArea;\n\tvar xAlign = 'center';\n\tvar yAlign = 'center';\n\n\tif (model.y < size.height) {\n\t\tyAlign = 'top';\n\t} else if (model.y > (chart.height - size.height)) {\n\t\tyAlign = 'bottom';\n\t}\n\n\tvar lf, rf; // functions to determine left, right alignment\n\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\tvar midX = (chartArea.left + chartArea.right) / 2;\n\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\n\tif (yAlign === 'center') {\n\t\tlf = function(x) {\n\t\t\treturn x <= midX;\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x > midX;\n\t\t};\n\t} else {\n\t\tlf = function(x) {\n\t\t\treturn x <= (size.width / 2);\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t};\n\t}\n\n\tolf = function(x) {\n\t\treturn x + size.width + model.caretSize + model.caretPadding > chart.width;\n\t};\n\torf = function(x) {\n\t\treturn x - size.width - model.caretSize - model.caretPadding < 0;\n\t};\n\tyf = function(y) {\n\t\treturn y <= midY ? 'top' : 'bottom';\n\t};\n\n\tif (lf(model.x)) {\n\t\txAlign = 'left';\n\n\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\tif (olf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t} else if (rf(model.x)) {\n\t\txAlign = 'right';\n\n\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\tif (orf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t}\n\n\tvar opts = tooltip._options;\n\treturn {\n\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t};\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(vm, size, alignment, chart) {\n\t// Background Position\n\tvar x = vm.x;\n\tvar y = vm.y;\n\n\tvar caretSize = vm.caretSize;\n\tvar caretPadding = vm.caretPadding;\n\tvar cornerRadius = vm.cornerRadius;\n\tvar xAlign = alignment.xAlign;\n\tvar yAlign = alignment.yAlign;\n\tvar paddingAndSize = caretSize + caretPadding;\n\tvar radiusAndPadding = cornerRadius + caretPadding;\n\n\tif (xAlign === 'right') {\n\t\tx -= size.width;\n\t} else if (xAlign === 'center') {\n\t\tx -= (size.width / 2);\n\t\tif (x + size.width > chart.width) {\n\t\t\tx = chart.width - size.width;\n\t\t}\n\t\tif (x < 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\n\tif (yAlign === 'top') {\n\t\ty += paddingAndSize;\n\t} else if (yAlign === 'bottom') {\n\t\ty -= size.height + paddingAndSize;\n\t} else {\n\t\ty -= (size.height / 2);\n\t}\n\n\tif (yAlign === 'center') {\n\t\tif (xAlign === 'left') {\n\t\t\tx += paddingAndSize;\n\t\t} else if (xAlign === 'right') {\n\t\t\tx -= paddingAndSize;\n\t\t}\n\t} else if (xAlign === 'left') {\n\t\tx -= radiusAndPadding;\n\t} else if (xAlign === 'right') {\n\t\tx += radiusAndPadding;\n\t}\n\n\treturn {\n\t\tx: x,\n\t\ty: y\n\t};\n}\n\nfunction getAlignedX(vm, align) {\n\treturn align === 'center'\n\t\t? vm.x + vm.width / 2\n\t\t: align === 'right'\n\t\t\t? vm.x + vm.width - vm.xPadding\n\t\t\t: vm.x + vm.xPadding;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n\treturn pushOrConcat([], splitNewlines(callback));\n}\n\nvar exports$4 = core_element.extend({\n\tinitialize: function() {\n\t\tthis._model = getBaseModel(this._options);\n\t\tthis._lastActive = [];\n\t},\n\n\t// Get the title\n\t// Args are: (tooltipItem, data)\n\tgetTitle: function() {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\t\tvar callbacks = opts.callbacks;\n\n\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n\t\tvar title = callbacks.title.apply(me, arguments);\n\t\tvar afterTitle = callbacks.afterTitle.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeTitle));\n\t\tlines = pushOrConcat(lines, splitNewlines(title));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n\t\treturn lines;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBeforeBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBody: function(tooltipItems, data) {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\t\tvar bodyItems = [];\n\n\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\tvar bodyItem = {\n\t\t\t\tbefore: [],\n\t\t\t\tlines: [],\n\t\t\t\tafter: []\n\t\t\t};\n\t\t\tpushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\tpushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n\n\t\t\tbodyItems.push(bodyItem);\n\t\t});\n\n\t\treturn bodyItems;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetAfterBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n\t},\n\n\t// Get the footer and beforeFooter and afterFooter lines\n\t// Args are: (tooltipItem, data)\n\tgetFooter: function() {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\n\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeFooter));\n\t\tlines = pushOrConcat(lines, splitNewlines(footer));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n\t\treturn lines;\n\t},\n\n\tupdate: function(changed) {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\n\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t// which breaks any animations.\n\t\tvar existingModel = me._model;\n\t\tvar model = me._model = getBaseModel(opts);\n\t\tvar active = me._active;\n\n\t\tvar data = me._data;\n\n\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\tvar alignment = {\n\t\t\txAlign: existingModel.xAlign,\n\t\t\tyAlign: existingModel.yAlign\n\t\t};\n\t\tvar backgroundPoint = {\n\t\t\tx: existingModel.x,\n\t\t\ty: existingModel.y\n\t\t};\n\t\tvar tooltipSize = {\n\t\t\twidth: existingModel.width,\n\t\t\theight: existingModel.height\n\t\t};\n\t\tvar tooltipPosition = {\n\t\t\tx: existingModel.caretX,\n\t\t\ty: existingModel.caretY\n\t\t};\n\n\t\tvar i, len;\n\n\t\tif (active.length) {\n\t\t\tmodel.opacity = 1;\n\n\t\t\tvar labelColors = [];\n\t\t\tvar labelTextColors = [];\n\t\t\ttooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n\n\t\t\tvar tooltipItems = [];\n\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t}\n\n\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\tif (opts.filter) {\n\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\tif (opts.itemSort) {\n\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Determine colors for boxes\n\t\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n\t\t\t\tlabelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n\t\t\t});\n\n\n\t\t\t// Build the Text Lines\n\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\n\t\t\t// Initial positioning and colors\n\t\t\tmodel.x = tooltipPosition.x;\n\t\t\tmodel.y = tooltipPosition.y;\n\t\t\tmodel.caretPadding = opts.caretPadding;\n\t\t\tmodel.labelColors = labelColors;\n\t\t\tmodel.labelTextColors = labelTextColors;\n\n\t\t\t// data points\n\t\t\tmodel.dataPoints = tooltipItems;\n\n\t\t\t// We need to determine alignment of the tooltip\n\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t// Final Size and Position\n\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n\t\t} else {\n\t\t\tmodel.opacity = 0;\n\t\t}\n\n\t\tmodel.xAlign = alignment.xAlign;\n\t\tmodel.yAlign = alignment.yAlign;\n\t\tmodel.x = backgroundPoint.x;\n\t\tmodel.y = backgroundPoint.y;\n\t\tmodel.width = tooltipSize.width;\n\t\tmodel.height = tooltipSize.height;\n\n\t\t// Point where the caret on the tooltip points to\n\t\tmodel.caretX = tooltipPosition.x;\n\t\tmodel.caretY = tooltipPosition.y;\n\n\t\tme._model = model;\n\n\t\tif (changed && opts.custom) {\n\t\t\topts.custom.call(me, model);\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdrawCaret: function(tooltipPoint, size) {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n\n\t\tctx.lineTo(caretPosition.x1, caretPosition.y1);\n\t\tctx.lineTo(caretPosition.x2, caretPosition.y2);\n\t\tctx.lineTo(caretPosition.x3, caretPosition.y3);\n\t},\n\tgetCaretPosition: function(tooltipPoint, size, vm) {\n\t\tvar x1, x2, x3, y1, y2, y3;\n\t\tvar caretSize = vm.caretSize;\n\t\tvar cornerRadius = vm.cornerRadius;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar ptX = tooltipPoint.x;\n\t\tvar ptY = tooltipPoint.y;\n\t\tvar width = size.width;\n\t\tvar height = size.height;\n\n\t\tif (yAlign === 'center') {\n\t\t\ty2 = ptY + (height / 2);\n\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx1 = ptX;\n\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 + caretSize;\n\t\t\t\ty3 = y2 - caretSize;\n\t\t\t} else {\n\t\t\t\tx1 = ptX + width;\n\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\ty3 = y2 + caretSize;\n\t\t\t}\n\t\t} else {\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx2 = ptX + cornerRadius + (caretSize);\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx2 = ptX + width - cornerRadius - caretSize;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else {\n\t\t\t\tx2 = vm.caretX;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t}\n\t\t\tif (yAlign === 'top') {\n\t\t\t\ty1 = ptY;\n\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t} else {\n\t\t\t\ty1 = ptY + height;\n\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t\t// invert drawing order\n\t\t\t\tvar tmp = x3;\n\t\t\t\tx3 = x1;\n\t\t\t\tx1 = tmp;\n\t\t\t}\n\t\t}\n\t\treturn {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};\n\t},\n\n\tdrawTitle: function(pt, vm, ctx) {\n\t\tvar title = vm.title;\n\t\tvar length = title.length;\n\t\tvar titleFontSize, titleSpacing, i;\n\n\t\tif (length) {\n\t\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\t\tpt.x = getAlignedX(vm, vm._titleAlign);\n\n\t\t\tctx.textAlign = rtlHelper.textAlign(vm._titleAlign);\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\ttitleFontSize = vm.titleFontSize;\n\t\t\ttitleSpacing = vm.titleSpacing;\n\n\t\t\tctx.fillStyle = vm.titleFontColor;\n\t\t\tctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\n\t\t\tfor (i = 0; i < length; ++i) {\n\t\t\t\tctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);\n\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n\t\t\t\tif (i + 1 === length) {\n\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBody: function(pt, vm, ctx) {\n\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\tvar bodySpacing = vm.bodySpacing;\n\t\tvar bodyAlign = vm._bodyAlign;\n\t\tvar body = vm.body;\n\t\tvar drawColorBoxes = vm.displayColors;\n\t\tvar xLinePadding = 0;\n\t\tvar colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n\n\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\tvar fillLineOfText = function(line) {\n\t\t\tctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);\n\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t};\n\n\t\tvar bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;\n\t\tvar bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n\n\t\tctx.textAlign = bodyAlign;\n\t\tctx.textBaseline = 'middle';\n\t\tctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\n\t\tpt.x = getAlignedX(vm, bodyAlignForCalculation);\n\n\t\t// Before body lines\n\t\tctx.fillStyle = vm.bodyFontColor;\n\t\thelpers$1.each(vm.beforeBody, fillLineOfText);\n\n\t\txLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'\n\t\t\t? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)\n\t\t\t: 0;\n\n\t\t// Draw body lines now\n\t\tfor (i = 0, ilen = body.length; i < ilen; ++i) {\n\t\t\tbodyItem = body[i];\n\t\t\ttextColor = vm.labelTextColors[i];\n\t\t\tlabelColors = vm.labelColors[i];\n\n\t\t\tctx.fillStyle = textColor;\n\t\t\thelpers$1.each(bodyItem.before, fillLineOfText);\n\n\t\t\tlines = bodyItem.lines;\n\t\t\tfor (j = 0, jlen = lines.length; j < jlen; ++j) {\n\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\tvar rtlColorX = rtlHelper.x(colorX);\n\n\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\tctx.fillStyle = vm.legendColorBackground;\n\t\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Border\n\t\t\t\t\tctx.lineWidth = 1;\n\t\t\t\t\tctx.strokeStyle = labelColors.borderColor;\n\t\t\t\t\tctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Inner square\n\t\t\t\t\tctx.fillStyle = labelColors.backgroundColor;\n\t\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t}\n\n\t\t\t\tfillLineOfText(lines[j]);\n\t\t\t}\n\n\t\t\thelpers$1.each(bodyItem.after, fillLineOfText);\n\t\t}\n\n\t\t// Reset back to 0 for after body\n\t\txLinePadding = 0;\n\n\t\t// After body lines\n\t\thelpers$1.each(vm.afterBody, fillLineOfText);\n\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t},\n\n\tdrawFooter: function(pt, vm, ctx) {\n\t\tvar footer = vm.footer;\n\t\tvar length = footer.length;\n\t\tvar footerFontSize, i;\n\n\t\tif (length) {\n\t\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\t\tpt.x = getAlignedX(vm, vm._footerAlign);\n\t\t\tpt.y += vm.footerMarginTop;\n\n\t\t\tctx.textAlign = rtlHelper.textAlign(vm._footerAlign);\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\tfooterFontSize = vm.footerFontSize;\n\n\t\t\tctx.fillStyle = vm.footerFontColor;\n\t\t\tctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\n\t\t\tfor (i = 0; i < length; ++i) {\n\t\t\t\tctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);\n\t\t\t\tpt.y += footerFontSize + vm.footerSpacing;\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBackground: function(pt, vm, ctx, tooltipSize) {\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar x = pt.x;\n\t\tvar y = pt.y;\n\t\tvar width = tooltipSize.width;\n\t\tvar height = tooltipSize.height;\n\t\tvar radius = vm.cornerRadius;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x + radius, y);\n\t\tif (yAlign === 'top') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width - radius, y);\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\tif (yAlign === 'center' && xAlign === 'right') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width, y + height - radius);\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\tif (yAlign === 'bottom') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + radius, y + height);\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\tif (yAlign === 'center' && xAlign === 'left') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x, y + radius);\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\tctx.closePath();\n\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth > 0) {\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\n\t\tif (vm.opacity === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tooltipSize = {\n\t\t\twidth: vm.width,\n\t\t\theight: vm.height\n\t\t};\n\t\tvar pt = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\n\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\n\t\t// Truthy/falsey value for empty tooltip\n\t\tvar hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n\t\tif (this._options.enabled && hasTooltipContent) {\n\t\t\tctx.save();\n\t\t\tctx.globalAlpha = opacity;\n\n\t\t\t// Draw Background\n\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize);\n\n\t\t\t// Draw Title, Body, and Footer\n\t\t\tpt.y += vm.yPadding;\n\n\t\t\thelpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);\n\n\t\t\t// Titles\n\t\t\tthis.drawTitle(pt, vm, ctx);\n\n\t\t\t// Body\n\t\t\tthis.drawBody(pt, vm, ctx);\n\n\t\t\t// Footer\n\t\t\tthis.drawFooter(pt, vm, ctx);\n\n\t\t\thelpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t * @returns {boolean} true if the tooltip changed\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me._options;\n\t\tvar changed = false;\n\n\t\tme._lastActive = me._lastActive || [];\n\n\t\t// Find Active Elements for tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme._active = [];\n\t\t} else {\n\t\t\tme._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n\t\t\tif (options.reverse) {\n\t\t\t\tme._active.reverse();\n\t\t\t}\n\t\t}\n\n\t\t// Remember Last Actives\n\t\tchanged = !helpers$1.arrayEquals(me._active, me._lastActive);\n\n\t\t// Only handle target event on tooltip change\n\t\tif (changed) {\n\t\t\tme._lastActive = me._active;\n\n\t\t\tif (options.enabled || options.custom) {\n\t\t\t\tme._eventPosition = {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\n\t\t\t\tme.update(true);\n\t\t\t\tme.pivot();\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * @namespace Chart.Tooltip.positioners\n */\nvar positioners_1 = positioners;\n\nvar core_tooltip = exports$4;\ncore_tooltip.positioners = positioners_1;\n\nvar valueOrDefault$9 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\telements: {},\n\tevents: [\n\t\t'mousemove',\n\t\t'mouseout',\n\t\t'click',\n\t\t'touchstart',\n\t\t'touchmove'\n\t],\n\thover: {\n\t\tonHover: null,\n\t\tmode: 'nearest',\n\t\tintersect: true,\n\t\tanimationDuration: 400\n\t},\n\tonClick: null,\n\tmaintainAspectRatio: true,\n\tresponsive: true,\n\tresponsiveAnimationDuration: 0\n});\n\n/**\n * Recursively merge the given config objects representing the `scales` option\n * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n * returns a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeScaleConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\tvar slen = source[key].length;\n\t\t\t\tvar i, type, scale;\n\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\ttarget[key] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < slen; ++i) {\n\t\t\t\t\tscale = source[key][i];\n\t\t\t\t\ttype = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n\t\t\t\t\tif (i >= target[key].length) {\n\t\t\t\t\t\ttarget[key].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {\n\t\t\t\t\t\t// new/untyped scale or type changed: let's apply the new defaults\n\t\t\t\t\t\t// then merge source scale to correctly overwrite the defaults.\n\t\t\t\t\t\thelpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// scales type are the same\n\t\t\t\t\t\thelpers$1.merge(target[key][i], scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Recursively merge the given config objects as the root options by handling\n * default scale options for the `scales` and `scale` properties, then returns\n * a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tvar tval = target[key] || {};\n\t\t\tvar sval = source[key];\n\n\t\t\tif (key === 'scales') {\n\t\t\t\t// scale config merging is complex. Add our own function here for that\n\t\t\t\ttarget[key] = mergeScaleConfig(tval, sval);\n\t\t\t} else if (key === 'scale') {\n\t\t\t\t// used in polar area & radar charts since there is only one scale\n\t\t\t\ttarget[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction initConfig(config) {\n\tconfig = config || {};\n\n\t// Do NOT use mergeConfig for the data object because this method merges arrays\n\t// and so would change references to labels and datasets, preventing data updates.\n\tvar data = config.data = config.data || {};\n\tdata.datasets = data.datasets || [];\n\tdata.labels = data.labels || [];\n\n\tconfig.options = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[config.type],\n\t\tconfig.options || {});\n\n\treturn config;\n}\n\nfunction updateConfig(chart) {\n\tvar newOptions = chart.options;\n\n\thelpers$1.each(chart.scales, function(scale) {\n\t\tcore_layouts.removeBox(chart, scale);\n\t});\n\n\tnewOptions = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[chart.config.type],\n\t\tnewOptions);\n\n\tchart.options = chart.config.options = newOptions;\n\tchart.ensureScalesHaveIDs();\n\tchart.buildOrUpdateScales();\n\n\t// Tooltip\n\tchart.tooltip._options = newOptions.tooltips;\n\tchart.tooltip.initialize();\n}\n\nfunction nextAvailableScaleId(axesOpts, prefix, index) {\n\tvar id;\n\tvar hasId = function(obj) {\n\t\treturn obj.id === id;\n\t};\n\n\tdo {\n\t\tid = prefix + index++;\n\t} while (helpers$1.findIndex(axesOpts, hasId) >= 0);\n\n\treturn id;\n}\n\nfunction positionIsHorizontal(position) {\n\treturn position === 'top' || position === 'bottom';\n}\n\nfunction compare2Level(l1, l2) {\n\treturn function(a, b) {\n\t\treturn a[l1] === b[l1]\n\t\t\t? a[l2] - b[l2]\n\t\t\t: a[l1] - b[l1];\n\t};\n}\n\nvar Chart = function(item, config) {\n\tthis.construct(item, config);\n\treturn this;\n};\n\nhelpers$1.extend(Chart.prototype, /** @lends Chart */ {\n\t/**\n\t * @private\n\t */\n\tconstruct: function(item, config) {\n\t\tvar me = this;\n\n\t\tconfig = initConfig(config);\n\n\t\tvar context = platform.acquireContext(item, config);\n\t\tvar canvas = context && context.canvas;\n\t\tvar height = canvas && canvas.height;\n\t\tvar width = canvas && canvas.width;\n\n\t\tme.id = helpers$1.uid();\n\t\tme.ctx = context;\n\t\tme.canvas = canvas;\n\t\tme.config = config;\n\t\tme.width = width;\n\t\tme.height = height;\n\t\tme.aspectRatio = height ? width / height : null;\n\t\tme.options = config.options;\n\t\tme._bufferedRender = false;\n\t\tme._layers = [];\n\n\t\t/**\n\t\t * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n\t\t * the \"instance\" still need to be defined since it might be called from plugins.\n\t\t * @prop Chart#chart\n\t\t * @deprecated since version 2.6.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tme.chart = me;\n\t\tme.controller = me; // chart.chart.controller #inception\n\n\t\t// Add the chart instance to the global namespace\n\t\tChart.instances[me.id] = me;\n\n\t\t// Define alias to the config data: `chart.data === chart.config.data`\n\t\tObject.defineProperty(me, 'data', {\n\t\t\tget: function() {\n\t\t\t\treturn me.config.data;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tme.config.data = value;\n\t\t\t}\n\t\t});\n\n\t\tif (!context || !canvas) {\n\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\treturn;\n\t\t}\n\n\t\tme.initialize();\n\t\tme.update();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinitialize: function() {\n\t\tvar me = this;\n\n\t\t// Before init plugin notification\n\t\tcore_plugins.notify(me, 'beforeInit');\n\n\t\thelpers$1.retinaScale(me, me.options.devicePixelRatio);\n\n\t\tme.bindEvents();\n\n\t\tif (me.options.responsive) {\n\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\tme.resize(true);\n\t\t}\n\n\t\tme.initToolTip();\n\n\t\t// After init plugin notification\n\t\tcore_plugins.notify(me, 'afterInit');\n\n\t\treturn me;\n\t},\n\n\tclear: function() {\n\t\thelpers$1.canvas.clear(this);\n\t\treturn this;\n\t},\n\n\tstop: function() {\n\t\t// Stops any current animation loop occurring\n\t\tcore_animations.cancelAnimation(this);\n\t\treturn this;\n\t},\n\n\tresize: function(silent) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar canvas = me.canvas;\n\t\tvar aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;\n\n\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\n\t\t// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\t\tvar newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n\t\tvar newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n\t\tif (me.width === newWidth && me.height === newHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvas.width = me.width = newWidth;\n\t\tcanvas.height = me.height = newHeight;\n\t\tcanvas.style.width = newWidth + 'px';\n\t\tcanvas.style.height = newHeight + 'px';\n\n\t\thelpers$1.retinaScale(me, options.devicePixelRatio);\n\n\t\tif (!silent) {\n\t\t\t// Notify any plugins about the resize\n\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\tcore_plugins.notify(me, 'resize', [newSize]);\n\n\t\t\t// Notify of resize\n\t\t\tif (options.onResize) {\n\t\t\t\toptions.onResize(me, newSize);\n\t\t\t}\n\n\t\t\tme.stop();\n\t\t\tme.update({\n\t\t\t\tduration: options.responsiveAnimationDuration\n\t\t\t});\n\t\t}\n\t},\n\n\tensureScalesHaveIDs: function() {\n\t\tvar options = this.options;\n\t\tvar scalesOptions = options.scales || {};\n\t\tvar scaleOptions = options.scale;\n\n\t\thelpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\tif (!xAxisOptions.id) {\n\t\t\t\txAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\tif (!yAxisOptions.id) {\n\t\t\t\tyAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);\n\t\t\t}\n\t\t});\n\n\t\tif (scaleOptions) {\n\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t}\n\t},\n\n\t/**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n\tbuildOrUpdateScales: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar scales = me.scales || {};\n\t\tvar items = [];\n\t\tvar updated = Object.keys(scales).reduce(function(obj, id) {\n\t\t\tobj[id] = false;\n\t\t\treturn obj;\n\t\t}, {});\n\n\t\tif (options.scales) {\n\t\t\titems = items.concat(\n\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};\n\t\t\t\t}),\n\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear', dposition: 'left'};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (options.scale) {\n\t\t\titems.push({\n\t\t\t\toptions: options.scale,\n\t\t\t\tdtype: 'radialLinear',\n\t\t\t\tisDefault: true,\n\t\t\t\tdposition: 'chartArea'\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(items, function(item) {\n\t\t\tvar scaleOptions = item.options;\n\t\t\tvar id = scaleOptions.id;\n\t\t\tvar scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);\n\n\t\t\tif (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n\t\t\t\tscaleOptions.position = item.dposition;\n\t\t\t}\n\n\t\t\tupdated[id] = true;\n\t\t\tvar scale = null;\n\t\t\tif (id in scales && scales[id].type === scaleType) {\n\t\t\t\tscale = scales[id];\n\t\t\t\tscale.options = scaleOptions;\n\t\t\t\tscale.ctx = me.ctx;\n\t\t\t\tscale.chart = me;\n\t\t\t} else {\n\t\t\t\tvar scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\t\t\t\tif (!scaleClass) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tscale = new scaleClass({\n\t\t\t\t\tid: id,\n\t\t\t\t\ttype: scaleType,\n\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\tctx: me.ctx,\n\t\t\t\t\tchart: me\n\t\t\t\t});\n\t\t\t\tscales[scale.id] = scale;\n\t\t\t}\n\n\t\t\tscale.mergeTicksOptions();\n\n\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\tif (item.isDefault) {\n\t\t\t\tme.scale = scale;\n\t\t\t}\n\t\t});\n\t\t// clear up discarded scales\n\t\thelpers$1.each(updated, function(hasUpdated, id) {\n\t\t\tif (!hasUpdated) {\n\t\t\t\tdelete scales[id];\n\t\t\t}\n\t\t});\n\n\t\tme.scales = scales;\n\n\t\tcore_scaleService.addScalesToLayout(this);\n\t},\n\n\tbuildOrUpdateControllers: function() {\n\t\tvar me = this;\n\t\tvar newControllers = [];\n\t\tvar datasets = me.data.datasets;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; i++) {\n\t\t\tvar dataset = datasets[i];\n\t\t\tvar meta = me.getDatasetMeta(i);\n\t\t\tvar type = dataset.type || me.config.type;\n\n\t\t\tif (meta.type && meta.type !== type) {\n\t\t\t\tme.destroyDatasetMeta(i);\n\t\t\t\tmeta = me.getDatasetMeta(i);\n\t\t\t}\n\t\t\tmeta.type = type;\n\t\t\tmeta.order = dataset.order || 0;\n\t\t\tmeta.index = i;\n\n\t\t\tif (meta.controller) {\n\t\t\t\tmeta.controller.updateIndex(i);\n\t\t\t\tmeta.controller.linkScales();\n\t\t\t} else {\n\t\t\t\tvar ControllerClass = controllers[meta.type];\n\t\t\t\tif (ControllerClass === undefined) {\n\t\t\t\t\tthrow new Error('\"' + meta.type + '\" is not a chart type.');\n\t\t\t\t}\n\n\t\t\t\tmeta.controller = new ControllerClass(me, i);\n\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t}\n\t\t}\n\n\t\treturn newControllers;\n\t},\n\n\t/**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n\tresetElements: function() {\n\t\tvar me = this;\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t}, me);\n\t},\n\n\t/**\n\t* Resets the chart back to it's state before the initial animation\n\t*/\n\treset: function() {\n\t\tthis.resetElements();\n\t\tthis.tooltip.initialize();\n\t},\n\n\tupdate: function(config) {\n\t\tvar me = this;\n\t\tvar i, ilen;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tupdateConfig(me);\n\n\t\t// plugins options references might have change, let's invalidate the cache\n\t\t// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t\tcore_plugins._invalidate(me);\n\n\t\tif (core_plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case the entire data object changed\n\t\tme.tooltip._data = me.data;\n\n\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\tvar newControllers = me.buildOrUpdateControllers();\n\n\t\t// Make sure all dataset controllers have correct meta data counts\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {\n\t\t\tme.getDatasetMeta(i).controller.buildOrUpdateElements();\n\t\t}\n\n\t\tme.updateLayout();\n\n\t\t// Can only reset the new controllers after the scales have been updated\n\t\tif (me.options.animation && me.options.animation.duration) {\n\t\t\thelpers$1.each(newControllers, function(controller) {\n\t\t\t\tcontroller.reset();\n\t\t\t});\n\t\t}\n\n\t\tme.updateDatasets();\n\n\t\t// Need to reset tooltip in case it is displayed with elements that are removed\n\t\t// after update.\n\t\tme.tooltip.initialize();\n\n\t\t// Last active contains items that were previously in the tooltip.\n\t\t// When we reset the tooltip, we need to clear it\n\t\tme.lastActive = [];\n\n\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\tcore_plugins.notify(me, 'afterUpdate');\n\n\t\tme._layers.sort(compare2Level('z', '_idx'));\n\n\t\tif (me._bufferedRender) {\n\t\t\tme._bufferedRequest = {\n\t\t\t\tduration: config.duration,\n\t\t\t\teasing: config.easing,\n\t\t\t\tlazy: config.lazy\n\t\t\t};\n\t\t} else {\n\t\t\tme.render(config);\n\t\t}\n\t},\n\n\t/**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n\tupdateLayout: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeLayout') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tcore_layouts.update(this, this.width, this.height);\n\n\t\tme._layers = [];\n\t\thelpers$1.each(me.boxes, function(box) {\n\t\t\t// _configure is called twice, once in core.scale.update and once here.\n\t\t\t// Here the boxes are fully updated and at their final positions.\n\t\t\tif (box._configure) {\n\t\t\t\tbox._configure();\n\t\t\t}\n\t\t\tme._layers.push.apply(me._layers, box._layers());\n\t\t}, me);\n\n\t\tme._layers.forEach(function(item, index) {\n\t\t\titem._idx = index;\n\t\t});\n\n\t\t/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tcore_plugins.notify(me, 'afterScaleUpdate');\n\t\tcore_plugins.notify(me, 'afterLayout');\n\t},\n\n\t/**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n\tupdateDatasets: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.updateDataset(i);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsUpdate');\n\t},\n\n\t/**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n\tupdateDataset: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller._update();\n\n\t\tcore_plugins.notify(me, 'afterDatasetUpdate', [args]);\n\t},\n\n\trender: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tvar animationOptions = me.options.animation;\n\t\tvar duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);\n\t\tvar lazy = config.lazy;\n\n\t\tif (core_plugins.notify(me, 'beforeRender') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar onComplete = function(animation) {\n\t\t\tcore_plugins.notify(me, 'afterRender');\n\t\t\thelpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n\t\t};\n\n\t\tif (animationOptions && duration) {\n\t\t\tvar animation = new core_animation({\n\t\t\t\tnumSteps: duration / 16.66, // 60 fps\n\t\t\t\teasing: config.easing || animationOptions.easing,\n\n\t\t\t\trender: function(chart, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers$1.easing.effects[animationObject.easing];\n\t\t\t\t\tvar currentStep = animationObject.currentStep;\n\t\t\t\t\tvar stepDecimal = currentStep / animationObject.numSteps;\n\n\t\t\t\t\tchart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n\t\t\t\t},\n\n\t\t\t\tonAnimationProgress: animationOptions.onProgress,\n\t\t\t\tonAnimationComplete: onComplete\n\t\t\t});\n\n\t\t\tcore_animations.addAnimation(me, animation, duration, lazy);\n\t\t} else {\n\t\t\tme.draw();\n\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/3781\n\t\t\tonComplete(new core_animation({numSteps: 0, chart: me}));\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdraw: function(easingValue) {\n\t\tvar me = this;\n\t\tvar i, layers;\n\n\t\tme.clear();\n\n\t\tif (helpers$1.isNullOrUndef(easingValue)) {\n\t\t\teasingValue = 1;\n\t\t}\n\n\t\tme.transition(easingValue);\n\n\t\tif (me.width <= 0 || me.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n\t\t// currently be part of layers. Instead, we draw\n\t\t// layers <= 0 before(default, backward compat), and the rest after\n\t\tlayers = me._layers;\n\t\tfor (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n\t\t\tlayers[i].draw(me.chartArea);\n\t\t}\n\n\t\tme.drawDatasets(easingValue);\n\n\t\t// Rest of layers\n\t\tfor (; i < layers.length; ++i) {\n\t\t\tlayers[i].draw(me.chartArea);\n\t\t}\n\n\t\tme._drawTooltip(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDraw', [easingValue]);\n\t},\n\n\t/**\n\t * @private\n\t */\n\ttransition: function(easingValue) {\n\t\tvar me = this;\n\n\t\tfor (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.getDatasetMeta(i).controller.transition(easingValue);\n\t\t\t}\n\t\t}\n\n\t\tme.tooltip.transition(easingValue);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getSortedDatasetMetas: function(filterVisible) {\n\t\tvar me = this;\n\t\tvar datasets = me.data.datasets || [];\n\t\tvar result = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\t\tif (!filterVisible || me.isDatasetVisible(i)) {\n\t\t\t\tresult.push(me.getDatasetMeta(i));\n\t\t\t}\n\t\t}\n\n\t\tresult.sort(compare2Level('order', 'index'));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getSortedVisibleDatasetMetas: function() {\n\t\treturn this._getSortedDatasetMetas(true);\n\t},\n\n\t/**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n\tdrawDatasets: function(easingValue) {\n\t\tvar me = this;\n\t\tvar metasets, i;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmetasets = me._getSortedVisibleDatasetMetas();\n\t\tfor (i = metasets.length - 1; i >= 0; --i) {\n\t\t\tme.drawDataset(metasets[i], easingValue);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t},\n\n\t/**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n\tdrawDataset: function(meta, easingValue) {\n\t\tvar me = this;\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: meta.index,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.draw(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDatasetDraw', [args]);\n\t},\n\n\t/**\n\t * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n\t * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n\t * @private\n\t */\n\t_drawTooltip: function(easingValue) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\t\tvar args = {\n\t\t\ttooltip: tooltip,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\ttooltip.draw();\n\n\t\tcore_plugins.notify(me, 'afterTooltipDraw', [args]);\n\t},\n\n\t/**\n\t * Get the single element that was clicked on\n\t * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t */\n\tgetElementAtEvent: function(e) {\n\t\treturn core_interaction.modes.single(this, e);\n\t},\n\n\tgetElementsAtEvent: function(e) {\n\t\treturn core_interaction.modes.label(this, e, {intersect: true});\n\t},\n\n\tgetElementsAtXAxis: function(e) {\n\t\treturn core_interaction.modes['x-axis'](this, e, {intersect: true});\n\t},\n\n\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\tvar method = core_interaction.modes[mode];\n\t\tif (typeof method === 'function') {\n\t\t\treturn method(this, e, options);\n\t\t}\n\n\t\treturn [];\n\t},\n\n\tgetDatasetAtEvent: function(e) {\n\t\treturn core_interaction.modes.dataset(this, e, {intersect: true});\n\t},\n\n\tgetDatasetMeta: function(datasetIndex) {\n\t\tvar me = this;\n\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\tif (!dataset._meta) {\n\t\t\tdataset._meta = {};\n\t\t}\n\n\t\tvar meta = dataset._meta[me.id];\n\t\tif (!meta) {\n\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\ttype: null,\n\t\t\t\tdata: [],\n\t\t\t\tdataset: null,\n\t\t\t\tcontroller: null,\n\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\txAxisID: null,\n\t\t\t\tyAxisID: null,\n\t\t\t\torder: dataset.order || 0,\n\t\t\t\tindex: datasetIndex\n\t\t\t};\n\t\t}\n\n\t\treturn meta;\n\t},\n\n\tgetVisibleDatasetCount: function() {\n\t\tvar count = 0;\n\t\tfor (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\n\tisDatasetVisible: function(datasetIndex) {\n\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\n\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\treturn typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t},\n\n\tgenerateLegend: function() {\n\t\treturn this.options.legendCallback(this);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroyDatasetMeta: function(datasetIndex) {\n\t\tvar id = this.id;\n\t\tvar dataset = this.data.datasets[datasetIndex];\n\t\tvar meta = dataset._meta && dataset._meta[id];\n\n\t\tif (meta) {\n\t\t\tmeta.controller.destroy();\n\t\t\tdelete dataset._meta[id];\n\t\t}\n\t},\n\n\tdestroy: function() {\n\t\tvar me = this;\n\t\tvar canvas = me.canvas;\n\t\tvar i, ilen;\n\n\t\tme.stop();\n\n\t\t// dataset controllers need to cleanup associated data\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.destroyDatasetMeta(i);\n\t\t}\n\n\t\tif (canvas) {\n\t\t\tme.unbindEvents();\n\t\t\thelpers$1.canvas.clear(me);\n\t\t\tplatform.releaseContext(me.ctx);\n\t\t\tme.canvas = null;\n\t\t\tme.ctx = null;\n\t\t}\n\n\t\tcore_plugins.notify(me, 'destroy');\n\n\t\tdelete Chart.instances[me.id];\n\t},\n\n\ttoBase64Image: function() {\n\t\treturn this.canvas.toDataURL.apply(this.canvas, arguments);\n\t},\n\n\tinitToolTip: function() {\n\t\tvar me = this;\n\t\tme.tooltip = new core_tooltip({\n\t\t\t_chart: me,\n\t\t\t_chartInstance: me, // deprecated, backward compatibility\n\t\t\t_data: me.data,\n\t\t\t_options: me.options.tooltips\n\t\t}, me);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners = {};\n\t\tvar listener = function() {\n\t\t\tme.eventHandler.apply(me, arguments);\n\t\t};\n\n\t\thelpers$1.each(me.options.events, function(type) {\n\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\tlisteners[type] = listener;\n\t\t});\n\n\t\t// Elements used to detect size change should not be injected for non responsive charts.\n\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\tif (me.options.responsive) {\n\t\t\tlistener = function() {\n\t\t\t\tme.resize();\n\t\t\t};\n\n\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\tlisteners.resize = listener;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tunbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners;\n\t\tif (!listeners) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete me._listeners;\n\t\thelpers$1.each(listeners, function(listener, type) {\n\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t});\n\t},\n\n\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\tvar prefix = enabled ? 'set' : 'remove';\n\t\tvar element, i, ilen;\n\n\t\tfor (i = 0, ilen = elements.length; i < ilen; ++i) {\n\t\t\telement = elements[i];\n\t\t\tif (element) {\n\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);\n\t\t\t}\n\t\t}\n\n\t\tif (mode === 'dataset') {\n\t\t\tthis.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\teventHandler: function(e) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\n\t\tif (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Buffer any update calls so that renders do not occur\n\t\tme._bufferedRender = true;\n\t\tme._bufferedRequest = null;\n\n\t\tvar changed = me.handleEvent(e);\n\t\t// for smooth tooltip animations issue #4989\n\t\t// the tooltip should be the source of change\n\t\t// Animation check workaround:\n\t\t// tooltip._start will be null when tooltip isn't animating\n\t\tif (tooltip) {\n\t\t\tchanged = tooltip._start\n\t\t\t\t? tooltip.handleEvent(e)\n\t\t\t\t: changed | tooltip.handleEvent(e);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterEvent', [e]);\n\n\t\tvar bufferedRequest = me._bufferedRequest;\n\t\tif (bufferedRequest) {\n\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\tme.render(bufferedRequest);\n\t\t} else if (changed && !me.animating) {\n\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\tme.stop();\n\n\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\tme.render({\n\t\t\t\tduration: me.options.hover.animationDuration,\n\t\t\t\tlazy: true\n\t\t\t});\n\t\t}\n\n\t\tme._bufferedRender = false;\n\t\tme._bufferedRequest = null;\n\n\t\treturn me;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event the event to handle\n\t * @return {boolean} true if the chart needs to re-render\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me.options || {};\n\t\tvar hoverOptions = options.hover;\n\t\tvar changed = false;\n\n\t\tme.lastActive = me.lastActive || [];\n\n\t\t// Find Active Elements for hover and tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme.active = [];\n\t\t} else {\n\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t}\n\n\t\t// Invoke onHover hook\n\t\t// Need to call with native event here to not break backwards compatibility\n\t\thelpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\tif (options.onClick) {\n\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t}\n\t\t}\n\n\t\t// Remove styling for last active (even if it may still be active)\n\t\tif (me.lastActive.length) {\n\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t}\n\n\t\t// Built in hover styling\n\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t}\n\n\t\tchanged = !helpers$1.arrayEquals(me.active, me.lastActive);\n\n\t\t// Remember Last Actives\n\t\tme.lastActive = me.active;\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * NOTE(SB) We actually don't use this container anymore but we need to keep it\n * for backward compatibility. Though, it can still be useful for plugins that\n * would need to work on multiple charts?!\n */\nChart.instances = {};\n\nvar core_controller = Chart;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart instead.\n * @class Chart.Controller\n * @deprecated since version 2.6\n * @todo remove at version 3\n * @private\n */\nChart.Controller = Chart;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\nChart.types = {};\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.configMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.configMerge = mergeConfig;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.scaleMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.scaleMerge = mergeScaleConfig;\n\nvar core_helpers = function() {\n\n\t// -- Basic js utility methods\n\n\thelpers$1.where = function(collection, filterCallback) {\n\t\tif (helpers$1.isArray(collection) && Array.prototype.filter) {\n\t\t\treturn collection.filter(filterCallback);\n\t\t}\n\t\tvar filtered = [];\n\n\t\thelpers$1.each(collection, function(item) {\n\t\t\tif (filterCallback(item)) {\n\t\t\t\tfiltered.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn filtered;\n\t};\n\thelpers$1.findIndex = Array.prototype.findIndex ?\n\t\tfunction(array, callback, scope) {\n\t\t\treturn array.findIndex(callback, scope);\n\t\t} :\n\t\tfunction(array, callback, scope) {\n\t\t\tscope = scope === undefined ? array : scope;\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to start of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = -1;\n\t\t}\n\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to end of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = arrayToSearch.length;\n\t\t}\n\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\n\t// -- Math methods\n\thelpers$1.isNumber = function(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t};\n\thelpers$1.almostEquals = function(x, y, epsilon) {\n\t\treturn Math.abs(x - y) < epsilon;\n\t};\n\thelpers$1.almostWhole = function(x, epsilon) {\n\t\tvar rounded = Math.round(x);\n\t\treturn ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n\t};\n\thelpers$1.max = function(array) {\n\t\treturn array.reduce(function(max, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.max(max, value);\n\t\t\t}\n\t\t\treturn max;\n\t\t}, Number.NEGATIVE_INFINITY);\n\t};\n\thelpers$1.min = function(array) {\n\t\treturn array.reduce(function(min, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.min(min, value);\n\t\t\t}\n\t\t\treturn min;\n\t\t}, Number.POSITIVE_INFINITY);\n\t};\n\thelpers$1.sign = Math.sign ?\n\t\tfunction(x) {\n\t\t\treturn Math.sign(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tx = +x; // convert to a number\n\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x > 0 ? 1 : -1;\n\t\t};\n\thelpers$1.toRadians = function(degrees) {\n\t\treturn degrees * (Math.PI / 180);\n\t};\n\thelpers$1.toDegrees = function(radians) {\n\t\treturn radians * (180 / Math.PI);\n\t};\n\n\t/**\n\t * Returns the number of decimal places\n\t * i.e. the number of digits after the decimal point, of the value of this Number.\n\t * @param {number} x - A number.\n\t * @returns {number} The number of decimal places.\n\t * @private\n\t */\n\thelpers$1._decimalPlaces = function(x) {\n\t\tif (!helpers$1.isFinite(x)) {\n\t\t\treturn;\n\t\t}\n\t\tvar e = 1;\n\t\tvar p = 0;\n\t\twhile (Math.round(x * e) / e !== x) {\n\t\t\te *= 10;\n\t\t\tp++;\n\t\t}\n\t\treturn p;\n\t};\n\n\t// Gets the angle from vertical upright to the point about a centre.\n\thelpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x;\n\t\tvar distanceFromYCenter = anglePoint.y - centrePoint.y;\n\t\tvar radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t}\n\n\t\treturn {\n\t\t\tangle: angle,\n\t\t\tdistance: radialDistanceFromCenter\n\t\t};\n\t};\n\thelpers$1.distanceBetweenPoints = function(pt1, pt2) {\n\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t};\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.helpers.aliasPixel\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\thelpers$1.aliasPixel = function(pixelWidth) {\n\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t};\n\n\t/**\n\t * Returns the aligned pixel value to avoid anti-aliasing blur\n\t * @param {Chart} chart - The chart instance.\n\t * @param {number} pixel - A pixel value.\n\t * @param {number} width - The width of the element.\n\t * @returns {number} The aligned pixel value.\n\t * @private\n\t */\n\thelpers$1._alignPixel = function(chart, pixel, width) {\n\t\tvar devicePixelRatio = chart.currentDevicePixelRatio;\n\t\tvar halfWidth = width / 2;\n\t\treturn Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n\t};\n\n\thelpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n\t\t// This function must also respect \"skipped\" points\n\n\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint;\n\t\tvar current = middlePoint;\n\t\tvar next = afterPoint.skip ? middlePoint : afterPoint;\n\n\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\n\t\tvar s01 = d01 / (d01 + d12);\n\t\tvar s12 = d12 / (d01 + d12);\n\n\t\t// If all points are the same, s01 & s02 will be inf\n\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\ts12 = isNaN(s12) ? 0 : s12;\n\n\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\tvar fb = t * s12;\n\n\t\treturn {\n\t\t\tprevious: {\n\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t}\n\t\t};\n\t};\n\thelpers$1.EPSILON = Number.EPSILON || 1e-14;\n\thelpers$1.splineCurveMonotone = function(points) {\n\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t// between the dataset discrete points due to the interpolation.\n\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\treturn {\n\t\t\t\tmodel: point._model,\n\t\t\t\tdeltaK: 0,\n\t\t\t\tmK: 0\n\t\t\t};\n\t\t});\n\n\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\tvar pointsLen = pointsWithTangents.length;\n\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\n\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t}\n\n\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\tpointCurrent.mK = 0;\n\t\t\t} else {\n\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust tangents to ensure monotonic properties\n\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t}\n\n\t\t// Compute control points\n\t\tvar deltaX;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.nextItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t}\n\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t};\n\thelpers$1.previousItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t}\n\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t};\n\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\thelpers$1.niceNum = function(range, round) {\n\t\tvar exponent = Math.floor(helpers$1.log10(range));\n\t\tvar fraction = range / Math.pow(10, exponent);\n\t\tvar niceFraction;\n\n\t\tif (round) {\n\t\t\tif (fraction < 1.5) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction < 3) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction < 7) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\t} else if (fraction <= 1.0) {\n\t\t\tniceFraction = 1;\n\t\t} else if (fraction <= 2) {\n\t\t\tniceFraction = 2;\n\t\t} else if (fraction <= 5) {\n\t\t\tniceFraction = 5;\n\t\t} else {\n\t\t\tniceFraction = 10;\n\t\t}\n\n\t\treturn niceFraction * Math.pow(10, exponent);\n\t};\n\t// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\thelpers$1.requestAnimFrame = (function() {\n\t\tif (typeof window === 'undefined') {\n\t\t\treturn function(callback) {\n\t\t\t\tcallback();\n\t\t\t};\n\t\t}\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t}());\n\t// -- DOM methods\n\thelpers$1.getRelativePosition = function(evt, chart) {\n\t\tvar mouseX, mouseY;\n\t\tvar e = evt.originalEvent || evt;\n\t\tvar canvas = evt.target || evt.srcElement;\n\t\tvar boundingRect = canvas.getBoundingClientRect();\n\n\t\tvar touches = e.touches;\n\t\tif (touches && touches.length > 0) {\n\t\t\tmouseX = touches[0].clientX;\n\t\t\tmouseY = touches[0].clientY;\n\n\t\t} else {\n\t\t\tmouseX = e.clientX;\n\t\t\tmouseY = e.clientY;\n\t\t}\n\n\t\t// Scale mouse coordinates into canvas coordinates\n\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\tvar paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n\t\tvar paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n\t\tvar paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n\t\tvar paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\n\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\n\t\treturn {\n\t\t\tx: mouseX,\n\t\t\ty: mouseY\n\t\t};\n\n\t};\n\n\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\tvar valueInPixels;\n\t\tif (typeof styleValue === 'string') {\n\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\n\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t// percentage * size in dimension\n\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t}\n\t\t} else {\n\t\t\tvalueInPixels = styleValue;\n\t\t}\n\n\t\treturn valueInPixels;\n\t}\n\n\t/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */\n\tfunction isConstrainedValue(value) {\n\t\treturn value !== undefined && value !== null && value !== 'none';\n\t}\n\n\t/**\n\t * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n\t * @param {HTMLElement} domNode - the node to check the constraint on\n\t * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n\t * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n\t * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n\t */\n\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\tvar view = document.defaultView;\n\t\tvar parentNode = helpers$1._getParentNode(domNode);\n\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\tvar infinity = Number.POSITIVE_INFINITY;\n\n\t\tif (hasCNode || hasCContainer) {\n\t\t\treturn Math.min(\n\t\t\t\thasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\thasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t}\n\n\t\treturn 'none';\n\t}\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintWidth = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t};\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintHeight = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t};\n\t/**\n\t * @private\n \t */\n\thelpers$1._calculatePadding = function(container, padding, parentDimension) {\n\t\tpadding = helpers$1.getStyle(container, padding);\n\n\t\treturn padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n\t};\n\t/**\n\t * @private\n\t */\n\thelpers$1._getParentNode = function(domNode) {\n\t\tvar parent = domNode.parentNode;\n\t\tif (parent && parent.toString() === '[object ShadowRoot]') {\n\t\t\tparent = parent.host;\n\t\t}\n\t\treturn parent;\n\t};\n\thelpers$1.getMaximumWidth = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientWidth;\n\t\t}\n\n\t\tvar clientWidth = container.clientWidth;\n\t\tvar paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\t\tvar paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n\t\tvar w = clientWidth - paddingLeft - paddingRight;\n\t\tvar cw = helpers$1.getConstraintWidth(domNode);\n\t\treturn isNaN(cw) ? w : Math.min(w, cw);\n\t};\n\thelpers$1.getMaximumHeight = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientHeight;\n\t\t}\n\n\t\tvar clientHeight = container.clientHeight;\n\t\tvar paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\t\tvar paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n\t\tvar h = clientHeight - paddingTop - paddingBottom;\n\t\tvar ch = helpers$1.getConstraintHeight(domNode);\n\t\treturn isNaN(ch) ? h : Math.min(h, ch);\n\t};\n\thelpers$1.getStyle = function(el, property) {\n\t\treturn el.currentStyle ?\n\t\t\tel.currentStyle[property] :\n\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t};\n\thelpers$1.retinaScale = function(chart, forceRatio) {\n\t\tvar pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\t\tif (pixelRatio === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar canvas = chart.canvas;\n\t\tvar height = chart.height;\n\t\tvar width = chart.width;\n\n\t\tcanvas.height = height * pixelRatio;\n\t\tcanvas.width = width * pixelRatio;\n\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\n\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\tif (!canvas.style.height && !canvas.style.width) {\n\t\t\tcanvas.style.height = height + 'px';\n\t\t\tcanvas.style.width = width + 'px';\n\t\t}\n\t};\n\t// -- Canvas methods\n\thelpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t};\n\thelpers$1.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\tcache = cache || {};\n\t\tvar data = cache.data = cache.data || {};\n\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\n\t\tif (cache.font !== font) {\n\t\t\tdata = cache.data = {};\n\t\t\tgc = cache.garbageCollect = [];\n\t\t\tcache.font = font;\n\t\t}\n\n\t\tctx.font = font;\n\t\tvar longest = 0;\n\t\tvar ilen = arrayOfThings.length;\n\t\tvar i, j, jlen, thing, nestedThing;\n\t\tfor (i = 0; i < ilen; i++) {\n\t\t\tthing = arrayOfThings[i];\n\n\t\t\t// Undefined strings and arrays should not be measured\n\t\t\tif (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, thing);\n\t\t\t} else if (helpers$1.isArray(thing)) {\n\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\tfor (j = 0, jlen = thing.length; j < jlen; j++) {\n\t\t\t\t\tnestedThing = thing[j];\n\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n\t\t\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar gcLen = gc.length / 2;\n\t\tif (gcLen > arrayOfThings.length) {\n\t\t\tfor (i = 0; i < gcLen; i++) {\n\t\t\t\tdelete data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.measureText = function(ctx, data, gc, longest, string) {\n\t\tvar textWidth = data[string];\n\t\tif (!textWidth) {\n\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\tgc.push(string);\n\t\t}\n\t\tif (textWidth > longest) {\n\t\t\tlongest = textWidth;\n\t\t}\n\t\treturn longest;\n\t};\n\n\t/**\n\t * @deprecated\n\t */\n\thelpers$1.numberOfLabelLines = function(arrayOfThings) {\n\t\tvar numberOfLines = 1;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\tif (helpers$1.isArray(thing)) {\n\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn numberOfLines;\n\t};\n\n\thelpers$1.color = !chartjsColor ?\n\t\tfunction(value) {\n\t\t\tconsole.error('Color.js not found!');\n\t\t\treturn value;\n\t\t} :\n\t\tfunction(value) {\n\t\t\t/* global CanvasGradient */\n\t\t\tif (value instanceof CanvasGradient) {\n\t\t\t\tvalue = core_defaults.global.defaultColor;\n\t\t\t}\n\n\t\t\treturn chartjsColor(value);\n\t\t};\n\n\thelpers$1.getHoverColor = function(colorValue) {\n\t\t/* global CanvasPattern */\n\t\treturn (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?\n\t\t\tcolorValue :\n\t\t\thelpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t};\n};\n\nfunction abstract() {\n\tthrow new Error(\n\t\t'This method is not implemented: either no adapter can ' +\n\t\t'be found or an incomplete integration was provided.'\n\t);\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n/**\n * Currently supported unit string values.\n * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n * @memberof Chart._adapters._date\n * @name Unit\n */\n\n/**\n * @class\n */\nfunction DateAdapter(options) {\n\tthis.options = options || {};\n}\n\nhelpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {\n\t/**\n\t * Returns a map of time formats for the supported formatting units defined\n\t * in Unit as well as 'datetime' representing a detailed date/time string.\n\t * @returns {{string: string}}\n\t */\n\tformats: abstract,\n\n\t/**\n\t * Parses the given `value` and return the associated timestamp.\n\t * @param {any} value - the value to parse (usually comes from the data)\n\t * @param {string} [format] - the expected data format\n\t * @returns {(number|null)}\n\t * @function\n\t */\n\tparse: abstract,\n\n\t/**\n\t * Returns the formatted date in the specified `format` for a given `timestamp`.\n\t * @param {number} timestamp - the timestamp to format\n\t * @param {string} format - the date/time token\n\t * @return {string}\n\t * @function\n\t */\n\tformat: abstract,\n\n\t/**\n\t * Adds the specified `amount` of `unit` to the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {number} amount - the amount to add\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tadd: abstract,\n\n\t/**\n\t * Returns the number of `unit` between the given timestamps.\n\t * @param {number} max - the input timestamp (reference)\n\t * @param {number} min - the timestamp to substract\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tdiff: abstract,\n\n\t/**\n\t * Returns start of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n\t * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n\t * @function\n\t */\n\tstartOf: abstract,\n\n\t/**\n\t * Returns end of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @function\n\t */\n\tendOf: abstract,\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility for scale.getValueForPixel(),\n\t * this method should be overridden only by the moment adapter.\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(value) {\n\t\treturn value;\n\t}\n});\n\nDateAdapter.override = function(members) {\n\thelpers$1.extend(DateAdapter.prototype, members);\n};\n\nvar _date = DateAdapter;\n\nvar core_adapters = {\n\t_date: _date\n};\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nvar core_ticks = {\n\t/**\n\t * Namespace to hold formatters for different types of ticks\n\t * @namespace Chart.Ticks.formatters\n\t */\n\tformatters: {\n\t\t/**\n\t\t * Formatter for value labels\n\t\t * @method Chart.Ticks.formatters.values\n\t\t * @param value the value to display\n\t\t * @return {string|string[]} the label to display\n\t\t */\n\t\tvalues: function(value) {\n\t\t\treturn helpers$1.isArray(value) ? value : '' + value;\n\t\t},\n\n\t\t/**\n\t\t * Formatter for linear numeric ticks\n\t\t * @method Chart.Ticks.formatters.linear\n\t\t * @param tickValue {number} the value to be formatted\n\t\t * @param index {number} the position of the tickValue parameter in the ticks array\n\t\t * @param ticks {number[]} the list of ticks being converted\n\t\t * @return {string} string representation of the tickValue parameter\n\t\t */\n\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t// not an integer\n\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar logDelta = helpers$1.log10(Math.abs(delta));\n\t\t\tvar tickString = '';\n\n\t\t\tif (tickValue !== 0) {\n\t\t\t\tvar maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\t\t\t\tif (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation\n\t\t\t\t\tvar logTick = helpers$1.log10(Math.abs(tickValue));\n\t\t\t\t\tvar numExponential = Math.floor(logTick) - Math.floor(logDelta);\n\t\t\t\t\tnumExponential = Math.max(Math.min(numExponential, 20), 0);\n\t\t\t\t\ttickString = tickValue.toExponential(numExponential);\n\t\t\t\t} else {\n\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t}\n\n\t\t\treturn tickString;\n\t\t},\n\n\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));\n\n\t\t\tif (tickValue === 0) {\n\t\t\t\treturn '0';\n\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\treturn tickValue.toExponential();\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n};\n\nvar isArray = helpers$1.isArray;\nvar isNullOrUndef = helpers$1.isNullOrUndef;\nvar valueOrDefault$a = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\ncore_defaults._set('scale', {\n\tdisplay: true,\n\tposition: 'left',\n\toffset: false,\n\n\t// grid line settings\n\tgridLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0,0,0,0.1)',\n\t\tlineWidth: 1,\n\t\tdrawBorder: true,\n\t\tdrawOnChartArea: true,\n\t\tdrawTicks: true,\n\t\ttickMarkLength: 10,\n\t\tzeroLineWidth: 1,\n\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\tzeroLineBorderDash: [],\n\t\tzeroLineBorderDashOffset: 0.0,\n\t\toffsetGridLines: false,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\t// scale label\n\tscaleLabel: {\n\t\t// display property\n\t\tdisplay: false,\n\n\t\t// actual label\n\t\tlabelString: '',\n\n\t\t// top/bottom padding\n\t\tpadding: {\n\t\t\ttop: 4,\n\t\t\tbottom: 4\n\t\t}\n\t},\n\n\t// label settings\n\tticks: {\n\t\tbeginAtZero: false,\n\t\tminRotation: 0,\n\t\tmaxRotation: 50,\n\t\tmirror: false,\n\t\tpadding: 0,\n\t\treverse: false,\n\t\tdisplay: true,\n\t\tautoSkip: true,\n\t\tautoSkipPadding: 0,\n\t\tlabelOffset: 0,\n\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\tcallback: core_ticks.formatters.values,\n\t\tminor: {},\n\t\tmajor: {}\n\t}\n});\n\n/** Returns a new array containing numItems from arr */\nfunction sample(arr, numItems) {\n\tvar result = [];\n\tvar increment = arr.length / numItems;\n\tvar i = 0;\n\tvar len = arr.length;\n\n\tfor (; i < len; i += increment) {\n\t\tresult.push(arr[Math.floor(i)]);\n\t}\n\treturn result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n\tvar length = scale.getTicks().length;\n\tvar validIndex = Math.min(index, length - 1);\n\tvar lineValue = scale.getPixelForTick(validIndex);\n\tvar start = scale._startPixel;\n\tvar end = scale._endPixel;\n\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\tvar offset;\n\n\tif (offsetGridLines) {\n\t\tif (length === 1) {\n\t\t\toffset = Math.max(lineValue - start, end - lineValue);\n\t\t} else if (index === 0) {\n\t\t\toffset = (scale.getPixelForTick(1) - lineValue) / 2;\n\t\t} else {\n\t\t\toffset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n\t\t}\n\t\tlineValue += validIndex < index ? offset : -offset;\n\n\t\t// Return undefined if the pixel is out of the range\n\t\tif (lineValue < start - epsilon || lineValue > end + epsilon) {\n\t\t\treturn;\n\t\t}\n\t}\n\treturn lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n\thelpers$1.each(caches, function(cache) {\n\t\tvar gc = cache.gc;\n\t\tvar gcLen = gc.length / 2;\n\t\tvar i;\n\t\tif (gcLen > length) {\n\t\t\tfor (i = 0; i < gcLen; ++i) {\n\t\t\t\tdelete cache.data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t});\n}\n\n/**\n * Returns {width, height, offset} objects for the first, last, widest, highest tick\n * labels where offset indicates the anchor point offset from the top in pixels.\n */\nfunction computeLabelSizes(ctx, tickFonts, ticks, caches) {\n\tvar length = ticks.length;\n\tvar widths = [];\n\tvar heights = [];\n\tvar offsets = [];\n\tvar i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;\n\n\tfor (i = 0; i < length; ++i) {\n\t\tlabel = ticks[i].label;\n\t\ttickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;\n\t\tctx.font = fontString = tickFont.string;\n\t\tcache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n\t\tlineHeight = tickFont.lineHeight;\n\t\twidth = height = 0;\n\t\t// Undefined labels and arrays should not be measured\n\t\tif (!isNullOrUndef(label) && !isArray(label)) {\n\t\t\twidth = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);\n\t\t\theight = lineHeight;\n\t\t} else if (isArray(label)) {\n\t\t\t// if it is an array let's measure each element\n\t\t\tfor (j = 0, jlen = label.length; j < jlen; ++j) {\n\t\t\t\tnestedLabel = label[j];\n\t\t\t\t// Undefined labels and arrays should not be measured\n\t\t\t\tif (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n\t\t\t\t\twidth = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n\t\t\t\t\theight += lineHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twidths.push(width);\n\t\theights.push(height);\n\t\toffsets.push(lineHeight / 2);\n\t}\n\tgarbageCollect(caches, length);\n\n\twidest = widths.indexOf(Math.max.apply(null, widths));\n\thighest = heights.indexOf(Math.max.apply(null, heights));\n\n\tfunction valueAt(idx) {\n\t\treturn {\n\t\t\twidth: widths[idx] || 0,\n\t\t\theight: heights[idx] || 0,\n\t\t\toffset: offsets[idx] || 0\n\t\t};\n\t}\n\n\treturn {\n\t\tfirst: valueAt(0),\n\t\tlast: valueAt(length - 1),\n\t\twidest: valueAt(widest),\n\t\thighest: valueAt(highest)\n\t};\n}\n\nfunction getTickMarkLength(options) {\n\treturn options.drawTicks ? options.tickMarkLength : 0;\n}\n\nfunction getScaleLabelHeight(options) {\n\tvar font, padding;\n\n\tif (!options.display) {\n\t\treturn 0;\n\t}\n\n\tfont = helpers$1.options._parseFont(options);\n\tpadding = helpers$1.options.toPadding(options.padding);\n\n\treturn font.lineHeight + padding.height;\n}\n\nfunction parseFontOptions(options, nestedOpts) {\n\treturn helpers$1.extend(helpers$1.options._parseFont({\n\t\tfontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),\n\t\tfontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),\n\t\tfontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),\n\t\tlineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)\n\t}), {\n\t\tcolor: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])\n\t});\n}\n\nfunction parseTickFontOptions(options) {\n\tvar minor = parseFontOptions(options, options.minor);\n\tvar major = options.major.enabled ? parseFontOptions(options, options.major) : minor;\n\n\treturn {minor: minor, major: major};\n}\n\nfunction nonSkipped(ticksToFilter) {\n\tvar filtered = [];\n\tvar item, index, len;\n\tfor (index = 0, len = ticksToFilter.length; index < len; ++index) {\n\t\titem = ticksToFilter[index];\n\t\tif (typeof item._index !== 'undefined') {\n\t\t\tfiltered.push(item);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nfunction getEvenSpacing(arr) {\n\tvar len = arr.length;\n\tvar i, diff;\n\n\tif (len < 2) {\n\t\treturn false;\n\t}\n\n\tfor (diff = arr[0], i = 1; i < len; ++i) {\n\t\tif (arr[i] - arr[i - 1] !== diff) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn diff;\n}\n\nfunction calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {\n\tvar evenMajorSpacing = getEvenSpacing(majorIndices);\n\tvar spacing = (ticks.length - 1) / ticksLimit;\n\tvar factors, factor, i, ilen;\n\n\t// If the major ticks are evenly spaced apart, place the minor ticks\n\t// so that they divide the major ticks into even chunks\n\tif (!evenMajorSpacing) {\n\t\treturn Math.max(spacing, 1);\n\t}\n\n\tfactors = helpers$1.math._factorize(evenMajorSpacing);\n\tfor (i = 0, ilen = factors.length - 1; i < ilen; i++) {\n\t\tfactor = factors[i];\n\t\tif (factor > spacing) {\n\t\t\treturn factor;\n\t\t}\n\t}\n\treturn Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n\tvar result = [];\n\tvar i, ilen;\n\tfor (i = 0, ilen = ticks.length; i < ilen; i++) {\n\t\tif (ticks[i].major) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction skipMajors(ticks, majorIndices, spacing) {\n\tvar count = 0;\n\tvar next = majorIndices[0];\n\tvar i, tick;\n\n\tspacing = Math.ceil(spacing);\n\tfor (i = 0; i < ticks.length; i++) {\n\t\ttick = ticks[i];\n\t\tif (i === next) {\n\t\t\ttick._index = i;\n\t\t\tcount++;\n\t\t\tnext = majorIndices[count * spacing];\n\t\t} else {\n\t\t\tdelete tick.label;\n\t\t}\n\t}\n}\n\nfunction skip(ticks, spacing, majorStart, majorEnd) {\n\tvar start = valueOrDefault$a(majorStart, 0);\n\tvar end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);\n\tvar count = 0;\n\tvar length, i, tick, next;\n\n\tspacing = Math.ceil(spacing);\n\tif (majorEnd) {\n\t\tlength = majorEnd - majorStart;\n\t\tspacing = length / Math.floor(length / spacing);\n\t}\n\n\tnext = start;\n\n\twhile (next < 0) {\n\t\tcount++;\n\t\tnext = Math.round(start + count * spacing);\n\t}\n\n\tfor (i = Math.max(start, 0); i < end; i++) {\n\t\ttick = ticks[i];\n\t\tif (i === next) {\n\t\t\ttick._index = i;\n\t\t\tcount++;\n\t\t\tnext = Math.round(start + count * spacing);\n\t\t} else {\n\t\t\tdelete tick.label;\n\t\t}\n\t}\n}\n\nvar Scale = core_element.extend({\n\n\tzeroLineIndex: 0,\n\n\t/**\n\t * Get the padding needed for the scale\n\t * @method getPadding\n\t * @private\n\t * @returns {Padding} the necessary padding\n\t */\n\tgetPadding: function() {\n\t\tvar me = this;\n\t\treturn {\n\t\t\tleft: me.paddingLeft || 0,\n\t\t\ttop: me.paddingTop || 0,\n\t\t\tright: me.paddingRight || 0,\n\t\t\tbottom: me.paddingBottom || 0\n\t\t};\n\t},\n\n\t/**\n\t * Returns the scale tick objects ({label, major})\n\t * @since 2.7\n\t */\n\tgetTicks: function() {\n\t\treturn this._ticks;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_getLabels: function() {\n\t\tvar data = this.chart.data;\n\t\treturn this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n\t},\n\n\t// These methods are ordered by lifecyle. Utilities then follow.\n\t// Any function defined here is inherited by all scale types.\n\t// Any function can be extended by the scale type\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.Scale.mergeTicksOptions\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\tmergeTicksOptions: function() {\n\t\t// noop\n\t},\n\n\tbeforeUpdate: function() {\n\t\thelpers$1.callback(this.options.beforeUpdate, [this]);\n\t},\n\n\t/**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {object} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar sampleSize = tickOpts.sampleSize;\n\t\tvar i, ilen, labels, ticks, samplingEnabled;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = helpers$1.extend({\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\ttop: 0,\n\t\t\tbottom: 0\n\t\t}, margins);\n\n\t\tme._ticks = null;\n\t\tme.ticks = null;\n\t\tme._labelSizes = null;\n\t\tme._maxLabelLines = 0;\n\t\tme.longestLabelWidth = 0;\n\t\tme.longestTextCache = me.longestTextCache || {};\n\t\tme._gridLineItems = null;\n\t\tme._labelItems = null;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\n\t\t// Data min/max\n\t\tme.beforeDataLimits();\n\t\tme.determineDataLimits();\n\t\tme.afterDataLimits();\n\n\t\t// Ticks - `this.ticks` is now DEPRECATED!\n\t\t// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n\t\t// and must not be accessed directly from outside this class. `this.ticks` being\n\t\t// around for long time and not marked as private, we can't change its structure\n\t\t// without unexpected breaking changes. If you need to access the scale ticks,\n\t\t// use scale.getTicks() instead.\n\n\t\tme.beforeBuildTicks();\n\n\t\t// New implementations should return an array of objects but for BACKWARD COMPAT,\n\t\t// we still support no return (`this.ticks` internally set by calling this method).\n\t\tticks = me.buildTicks() || [];\n\n\t\t// Allow modification of ticks in callback.\n\t\tticks = me.afterBuildTicks(ticks) || ticks;\n\n\t\t// Ensure ticks contains ticks in new tick format\n\t\tif ((!ticks || !ticks.length) && me.ticks) {\n\t\t\tticks = [];\n\t\t\tfor (i = 0, ilen = me.ticks.length; i < ilen; ++i) {\n\t\t\t\tticks.push({\n\t\t\t\t\tvalue: me.ticks[i],\n\t\t\t\t\tmajor: false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tme._ticks = ticks;\n\n\t\t// Compute tick rotation and fit using a sampled subset of labels\n\t\t// We generally don't need to compute the size of every single label for determining scale size\n\t\tsamplingEnabled = sampleSize < ticks.length;\n\t\tlabels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);\n\n\t\t// _configure is called twice, once here, once from core.controller.updateLayout.\n\t\t// Here we haven't been positioned yet, but dimensions are correct.\n\t\t// Variables set in _configure are needed for calculateTickRotation, and\n\t\t// it's ok that coordinates are not correct there, only dimensions matter.\n\t\tme._configure();\n\n\t\t// Tick Rotation\n\t\tme.beforeCalculateTickRotation();\n\t\tme.calculateTickRotation();\n\t\tme.afterCalculateTickRotation();\n\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\n\t\t// Auto-skip\n\t\tme._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;\n\n\t\tif (samplingEnabled) {\n\t\t\t// Generate labels using all non-skipped ticks\n\t\t\tlabels = me._convertTicksToLabels(me._ticksToDraw);\n\t\t}\n\n\t\tme.ticks = labels;   // BACKWARD COMPATIBILITY\n\n\t\t// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n\t\tme.afterUpdate();\n\n\t\t// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused\n\t\t// make maxWidth and maxHeight private\n\t\treturn me.minSize;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar reversePixels = me.options.ticks.reverse;\n\t\tvar startPixel, endPixel;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tstartPixel = me.left;\n\t\t\tendPixel = me.right;\n\t\t} else {\n\t\t\tstartPixel = me.top;\n\t\t\tendPixel = me.bottom;\n\t\t\t// by default vertical scales are from bottom to top, so pixels are reversed\n\t\t\treversePixels = !reversePixels;\n\t\t}\n\t\tme._startPixel = startPixel;\n\t\tme._endPixel = endPixel;\n\t\tme._reversePixels = reversePixels;\n\t\tme._length = endPixel - startPixel;\n\t},\n\n\tafterUpdate: function() {\n\t\thelpers$1.callback(this.options.afterUpdate, [this]);\n\t},\n\n\t//\n\n\tbeforeSetDimensions: function() {\n\t\thelpers$1.callback(this.options.beforeSetDimensions, [this]);\n\t},\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\t},\n\tafterSetDimensions: function() {\n\t\thelpers$1.callback(this.options.afterSetDimensions, [this]);\n\t},\n\n\t// Data limits\n\tbeforeDataLimits: function() {\n\t\thelpers$1.callback(this.options.beforeDataLimits, [this]);\n\t},\n\tdetermineDataLimits: helpers$1.noop,\n\tafterDataLimits: function() {\n\t\thelpers$1.callback(this.options.afterDataLimits, [this]);\n\t},\n\n\t//\n\tbeforeBuildTicks: function() {\n\t\thelpers$1.callback(this.options.beforeBuildTicks, [this]);\n\t},\n\tbuildTicks: helpers$1.noop,\n\tafterBuildTicks: function(ticks) {\n\t\tvar me = this;\n\t\t// ticks is empty for old axis implementations here\n\t\tif (isArray(ticks) && ticks.length) {\n\t\t\treturn helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n\t\t}\n\t\t// Support old implementations (that modified `this.ticks` directly in buildTicks)\n\t\tme.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n\t\treturn ticks;\n\t},\n\n\tbeforeTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n\t},\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\t// Convert ticks to strings\n\t\tvar tickOpts = me.options.ticks;\n\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n\t},\n\tafterTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n\t},\n\n\t//\n\n\tbeforeCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n\t},\n\tcalculateTickRotation: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar tickOpts = options.ticks;\n\t\tvar numTicks = me.getTicks().length;\n\t\tvar minRotation = tickOpts.minRotation || 0;\n\t\tvar maxRotation = tickOpts.maxRotation;\n\t\tvar labelRotation = minRotation;\n\t\tvar labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;\n\n\t\tif (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {\n\t\t\tme.labelRotation = minRotation;\n\t\t\treturn;\n\t\t}\n\n\t\tlabelSizes = me._getLabelSizes();\n\t\tmaxLabelWidth = labelSizes.widest.width;\n\t\tmaxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;\n\n\t\t// Estimate the width of each grid based on the canvas width, the maximum\n\t\t// label width and the number of tick intervals\n\t\tmaxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);\n\t\ttickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\tif (maxLabelWidth + 6 > tickWidth) {\n\t\t\ttickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n\t\t\tmaxHeight = me.maxHeight - getTickMarkLength(options.gridLines)\n\t\t\t\t- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);\n\t\t\tmaxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n\t\t\tlabelRotation = helpers$1.toDegrees(Math.min(\n\t\t\t\tMath.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),\n\t\t\t\tMath.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)\n\t\t\t));\n\t\t\tlabelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n\t\t}\n\n\t\tme.labelRotation = labelRotation;\n\t},\n\tafterCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n\t},\n\n\t//\n\n\tbeforeFit: function() {\n\t\thelpers$1.callback(this.options.beforeFit, [this]);\n\t},\n\tfit: function() {\n\t\tvar me = this;\n\t\t// Reset\n\t\tvar minSize = me.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\n\t\tvar chart = me.chart;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar display = me._isVisible();\n\t\tvar isBottom = opts.position === 'bottom';\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t// Width\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth;\n\t\t} else if (display) {\n\t\t\tminSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);\n\t\t}\n\n\t\t// height\n\t\tif (!isHorizontal) {\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t} else if (display) {\n\t\t\tminSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);\n\t\t}\n\n\t\t// Don't bother fitting the ticks if we are not showing the labels\n\t\tif (tickOpts.display && display) {\n\t\t\tvar tickFonts = parseTickFontOptions(tickOpts);\n\t\t\tvar labelSizes = me._getLabelSizes();\n\t\t\tvar firstLabelSize = labelSizes.first;\n\t\t\tvar lastLabelSize = labelSizes.last;\n\t\t\tvar widestLabelSize = labelSizes.widest;\n\t\t\tvar highestLabelSize = labelSizes.highest;\n\t\t\tvar lineSpace = tickFonts.minor.lineHeight * 0.4;\n\t\t\tvar tickPadding = tickOpts.padding;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\t// A horizontal axis is more constrained by the height.\n\t\t\t\tvar isRotated = me.labelRotation !== 0;\n\t\t\t\tvar angleRadians = helpers$1.toRadians(me.labelRotation);\n\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\n\t\t\t\tvar labelHeight = sinRotation * widestLabelSize.width\n\t\t\t\t\t+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))\n\t\t\t\t\t+ (isRotated ? 0 : lineSpace); // padding\n\n\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n\n\t\t\t\tvar offsetLeft = me.getPixelForTick(0) - me.left;\n\t\t\t\tvar offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);\n\t\t\t\tvar paddingLeft, paddingRight;\n\n\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n\t\t\t\t// which means that the right padding is dominated by the font height\n\t\t\t\tif (isRotated) {\n\t\t\t\t\tpaddingLeft = isBottom ?\n\t\t\t\t\t\tcosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :\n\t\t\t\t\t\tsinRotation * (firstLabelSize.height - firstLabelSize.offset);\n\t\t\t\t\tpaddingRight = isBottom ?\n\t\t\t\t\t\tsinRotation * (lastLabelSize.height - lastLabelSize.offset) :\n\t\t\t\t\t\tcosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;\n\t\t\t\t} else {\n\t\t\t\t\tpaddingLeft = firstLabelSize.width / 2;\n\t\t\t\t\tpaddingRight = lastLabelSize.width / 2;\n\t\t\t\t}\n\n\t\t\t\t// Adjust padding taking into account changes in offsets\n\t\t\t\t// and add 3 px to move away from canvas edges\n\t\t\t\tme.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;\n\t\t\t\tme.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;\n\t\t\t} else {\n\t\t\t\t// A vertical axis is more constrained by the width. Labels are the\n\t\t\t\t// dominant factor here, so get that length first and account for padding\n\t\t\t\tvar labelWidth = tickOpts.mirror ? 0 :\n\t\t\t\t\t// use lineSpace for consistency with horizontal axis\n\t\t\t\t\t// tickPadding is not implemented for horizontal\n\t\t\t\t\twidestLabelSize.width + tickPadding + lineSpace;\n\n\t\t\t\tminSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);\n\n\t\t\t\tme.paddingTop = firstLabelSize.height / 2;\n\t\t\t\tme.paddingBottom = lastLabelSize.height / 2;\n\t\t\t}\n\t\t}\n\n\t\tme.handleMargins();\n\n\t\tif (isHorizontal) {\n\t\t\tme.width = me._length = chart.width - me.margins.left - me.margins.right;\n\t\t\tme.height = minSize.height;\n\t\t} else {\n\t\t\tme.width = minSize.width;\n\t\t\tme.height = me._length = chart.height - me.margins.top - me.margins.bottom;\n\t\t}\n\t},\n\n\t/**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n\thandleMargins: function() {\n\t\tvar me = this;\n\t\tif (me.margins) {\n\t\t\tme.margins.left = Math.max(me.paddingLeft, me.margins.left);\n\t\t\tme.margins.top = Math.max(me.paddingTop, me.margins.top);\n\t\t\tme.margins.right = Math.max(me.paddingRight, me.margins.right);\n\t\t\tme.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);\n\t\t}\n\t},\n\n\tafterFit: function() {\n\t\thelpers$1.callback(this.options.afterFit, [this]);\n\t},\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\tisFullWidth: function() {\n\t\treturn this.options.fullWidth;\n\t},\n\n\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\tgetRightValue: function(rawValue) {\n\t\t// Null and undefined values first\n\t\tif (isNullOrUndef(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\tif ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\t// If it is in fact an object, dive in one more level\n\t\tif (rawValue) {\n\t\t\tif (this.isHorizontal()) {\n\t\t\t\tif (rawValue.x !== undefined) {\n\t\t\t\t\treturn this.getRightValue(rawValue.x);\n\t\t\t\t}\n\t\t\t} else if (rawValue.y !== undefined) {\n\t\t\t\treturn this.getRightValue(rawValue.y);\n\t\t\t}\n\t\t}\n\n\t\t// Value is good, return it\n\t\treturn rawValue;\n\t},\n\n\t_convertTicksToLabels: function(ticks) {\n\t\tvar me = this;\n\t\tvar labels, i, ilen;\n\n\t\tme.ticks = ticks.map(function(tick) {\n\t\t\treturn tick.value;\n\t\t});\n\n\t\tme.beforeTickToLabelConversion();\n\n\t\t// New implementations should return the formatted tick labels but for BACKWARD\n\t\t// COMPAT, we still support no return (`this.ticks` internally changed by calling\n\t\t// this method and supposed to contain only string values).\n\t\tlabels = me.convertTicksToLabels(ticks) || me.ticks;\n\n\t\tme.afterTickToLabelConversion();\n\n\t\t// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tticks[i].label = labels[i];\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLabelSizes: function() {\n\t\tvar me = this;\n\t\tvar labelSizes = me._labelSizes;\n\n\t\tif (!labelSizes) {\n\t\t\tme._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);\n\t\t\tme.longestLabelWidth = labelSizes.widest.width;\n\t\t}\n\n\t\treturn labelSizes;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_parseValue: function(value) {\n\t\tvar start, end, min, max;\n\n\t\tif (isArray(value)) {\n\t\t\tstart = +this.getRightValue(value[0]);\n\t\t\tend = +this.getRightValue(value[1]);\n\t\t\tmin = Math.min(start, end);\n\t\t\tmax = Math.max(start, end);\n\t\t} else {\n\t\t\tvalue = +this.getRightValue(value);\n\t\t\tstart = undefined;\n\t\t\tend = value;\n\t\t\tmin = value;\n\t\t\tmax = value;\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max,\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_getScaleLabel: function(rawValue) {\n\t\tvar v = this._parseValue(rawValue);\n\t\tif (v.start !== undefined) {\n\t\t\treturn '[' + v.start + ', ' + v.end + ']';\n\t\t}\n\n\t\treturn +this.getRightValue(rawValue);\n\t},\n\n\t/**\n\t * Used to get the value to display in the tooltip for the data at the given index\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetLabelForIndex: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param value\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetPixelForValue: helpers$1.noop,\n\n\t/**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param pixel\n\t */\n\tgetValueForPixel: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForTick: function(index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar numTicks = me._ticks.length;\n\t\tvar tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);\n\n\t\treturn index < 0 || index > numTicks - 1\n\t\t\t? null\n\t\t\t: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));\n\t},\n\n\t/**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForDecimal: function(decimal) {\n\t\tvar me = this;\n\n\t\tif (me._reversePixels) {\n\t\t\tdecimal = 1 - decimal;\n\t\t}\n\n\t\treturn me._startPixel + decimal * me._length;\n\t},\n\n\tgetDecimalForPixel: function(pixel) {\n\t\tvar decimal = (pixel - this._startPixel) / this._length;\n\t\treturn this._reversePixels ? 1 - decimal : decimal;\n\t},\n\n\t/**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetBasePixel: function() {\n\t\treturn this.getPixelForValue(this.getBaseValue());\n\t},\n\n\tgetBaseValue: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Returns a subset of ticks to be plotted to avoid overlapping labels.\n\t * @private\n\t */\n\t_autoSkip: function(ticks) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar axisLength = me._length;\n\t\tvar ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;\n\t\tvar majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n\t\tvar numMajorIndices = majorIndices.length;\n\t\tvar first = majorIndices[0];\n\t\tvar last = majorIndices[numMajorIndices - 1];\n\t\tvar i, ilen, spacing, avgMajorSpacing;\n\n\t\t// If there are too many major ticks to display them all\n\t\tif (numMajorIndices > ticksLimit) {\n\t\t\tskipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);\n\t\t\treturn nonSkipped(ticks);\n\t\t}\n\n\t\tspacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);\n\n\t\tif (numMajorIndices > 0) {\n\t\t\tfor (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n\t\t\t\tskip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);\n\t\t\t}\n\t\t\tavgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;\n\t\t\tskip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\t\t\tskip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n\t\t\treturn nonSkipped(ticks);\n\t\t}\n\t\tskip(ticks, spacing);\n\t\treturn nonSkipped(ticks);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_tickSize: function() {\n\t\tvar me = this;\n\t\tvar optionTicks = me.options.ticks;\n\n\t\t// Calculate space needed by label in axis direction.\n\t\tvar rot = helpers$1.toRadians(me.labelRotation);\n\t\tvar cos = Math.abs(Math.cos(rot));\n\t\tvar sin = Math.abs(Math.sin(rot));\n\n\t\tvar labelSizes = me._getLabelSizes();\n\t\tvar padding = optionTicks.autoSkipPadding || 0;\n\t\tvar w = labelSizes ? labelSizes.widest.width + padding : 0;\n\t\tvar h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n\t\t// Calculate space needed for 1 tick in axis direction.\n\t\treturn me.isHorizontal()\n\t\t\t? h * cos > w * sin ? w / cos : h / sin\n\t\t\t: h * sin < w * cos ? h / cos : w / sin;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_isVisible: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar display = me.options.display;\n\t\tvar i, ilen, meta;\n\n\t\tif (display !== 'auto') {\n\t\t\treturn !!display;\n\t\t}\n\n\t\t// When 'auto', the scale is visible if at least one associated dataset is visible.\n\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tif (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeGridLineItems: function(chartArea) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar options = me.options;\n\t\tvar gridLines = options.gridLines;\n\t\tvar position = options.position;\n\t\tvar offsetGridLines = gridLines.offsetGridLines;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar ticks = me._ticksToDraw;\n\t\tvar ticksLength = ticks.length + (offsetGridLines ? 1 : 0);\n\n\t\tvar tl = getTickMarkLength(gridLines);\n\t\tvar items = [];\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar axisHalfWidth = axisWidth / 2;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar alignBorderValue = function(pixel) {\n\t\t\treturn alignPixel(chart, pixel, axisWidth);\n\t\t};\n\t\tvar borderValue, i, tick, lineValue, alignedLineValue;\n\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;\n\n\t\tif (position === 'top') {\n\t\t\tborderValue = alignBorderValue(me.bottom);\n\t\t\tty1 = me.bottom - tl;\n\t\t\tty2 = borderValue - axisHalfWidth;\n\t\t\ty1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n\t\t\ty2 = chartArea.bottom;\n\t\t} else if (position === 'bottom') {\n\t\t\tborderValue = alignBorderValue(me.top);\n\t\t\ty1 = chartArea.top;\n\t\t\ty2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n\t\t\tty1 = borderValue + axisHalfWidth;\n\t\t\tty2 = me.top + tl;\n\t\t} else if (position === 'left') {\n\t\t\tborderValue = alignBorderValue(me.right);\n\t\t\ttx1 = me.right - tl;\n\t\t\ttx2 = borderValue - axisHalfWidth;\n\t\t\tx1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n\t\t\tx2 = chartArea.right;\n\t\t} else {\n\t\t\tborderValue = alignBorderValue(me.left);\n\t\t\tx1 = chartArea.left;\n\t\t\tx2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n\t\t\ttx1 = borderValue + axisHalfWidth;\n\t\t\ttx2 = me.left + tl;\n\t\t}\n\n\t\tfor (i = 0; i < ticksLength; ++i) {\n\t\t\ttick = ticks[i] || {};\n\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (isNullOrUndef(tick.label) && i < ticks.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (i === me.zeroLineIndex && options.offset === offsetGridLines) {\n\t\t\t\t// Draw the first index specially\n\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\tborderDash = gridLines.zeroLineBorderDash || [];\n\t\t\t\tborderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n\t\t\t} else {\n\t\t\t\tlineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);\n\t\t\t\tlineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');\n\t\t\t\tborderDash = gridLines.borderDash || [];\n\t\t\t\tborderDashOffset = gridLines.borderDashOffset || 0.0;\n\t\t\t}\n\n\t\t\tlineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);\n\n\t\t\t// Skip if the pixel is out of the range\n\t\t\tif (lineValue === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talignedLineValue = alignPixel(chart, lineValue, lineWidth);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\ttx1 = tx2 = x1 = x2 = alignedLineValue;\n\t\t\t} else {\n\t\t\t\tty1 = ty2 = y1 = y2 = alignedLineValue;\n\t\t\t}\n\n\t\t\titems.push({\n\t\t\t\ttx1: tx1,\n\t\t\t\tty1: ty1,\n\t\t\t\ttx2: tx2,\n\t\t\t\tty2: ty2,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: x2,\n\t\t\t\ty2: y2,\n\t\t\t\twidth: lineWidth,\n\t\t\t\tcolor: lineColor,\n\t\t\t\tborderDash: borderDash,\n\t\t\t\tborderDashOffset: borderDashOffset,\n\t\t\t});\n\t\t}\n\n\t\titems.ticksLength = ticksLength;\n\t\titems.borderValue = borderValue;\n\n\t\treturn items;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeLabelItems: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar optionTicks = options.ticks;\n\t\tvar position = options.position;\n\t\tvar isMirrored = optionTicks.mirror;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar ticks = me._ticksToDraw;\n\t\tvar fonts = parseTickFontOptions(optionTicks);\n\t\tvar tickPadding = optionTicks.padding;\n\t\tvar tl = getTickMarkLength(options.gridLines);\n\t\tvar rotation = -helpers$1.toRadians(me.labelRotation);\n\t\tvar items = [];\n\t\tvar i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n\n\t\tif (position === 'top') {\n\t\t\ty = me.bottom - tl - tickPadding;\n\t\t\ttextAlign = !rotation ? 'center' : 'left';\n\t\t} else if (position === 'bottom') {\n\t\t\ty = me.top + tl + tickPadding;\n\t\t\ttextAlign = !rotation ? 'center' : 'right';\n\t\t} else if (position === 'left') {\n\t\t\tx = me.right - (isMirrored ? 0 : tl) - tickPadding;\n\t\t\ttextAlign = isMirrored ? 'left' : 'right';\n\t\t} else {\n\t\t\tx = me.left + (isMirrored ? 0 : tl) + tickPadding;\n\t\t\ttextAlign = isMirrored ? 'right' : 'left';\n\t\t}\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\ttick = ticks[i];\n\t\t\tlabel = tick.label;\n\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (isNullOrUndef(label)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;\n\t\t\tfont = tick.major ? fonts.major : fonts.minor;\n\t\t\tlineHeight = font.lineHeight;\n\t\t\tlineCount = isArray(label) ? label.length : 1;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tx = pixel;\n\t\t\t\ttextOffset = position === 'top'\n\t\t\t\t\t? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight\n\t\t\t\t\t: (!rotation ? 0.5 : 0) * lineHeight;\n\t\t\t} else {\n\t\t\t\ty = pixel;\n\t\t\t\ttextOffset = (1 - lineCount) * lineHeight / 2;\n\t\t\t}\n\n\t\t\titems.push({\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\trotation: rotation,\n\t\t\t\tlabel: label,\n\t\t\t\tfont: font,\n\t\t\t\ttextOffset: textOffset,\n\t\t\t\ttextAlign: textAlign\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawGrid: function(chartArea) {\n\t\tvar me = this;\n\t\tvar gridLines = me.options.gridLines;\n\n\t\tif (!gridLines.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = me.ctx;\n\t\tvar chart = me.chart;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));\n\t\tvar width, color, i, ilen, item;\n\n\t\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\t\titem = items[i];\n\t\t\twidth = item.width;\n\t\t\tcolor = item.color;\n\n\t\t\tif (width && color) {\n\t\t\t\tctx.save();\n\t\t\t\tctx.lineWidth = width;\n\t\t\t\tctx.strokeStyle = color;\n\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\tctx.setLineDash(item.borderDash);\n\t\t\t\t\tctx.lineDashOffset = item.borderDashOffset;\n\t\t\t\t}\n\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\tctx.moveTo(item.tx1, item.ty1);\n\t\t\t\t\tctx.lineTo(item.tx2, item.ty2);\n\t\t\t\t}\n\n\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\tctx.moveTo(item.x1, item.y1);\n\t\t\t\t\tctx.lineTo(item.x2, item.y2);\n\t\t\t\t}\n\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t}\n\n\t\tif (axisWidth) {\n\t\t\t// Draw the line at the edge of the axis\n\t\t\tvar firstLineWidth = axisWidth;\n\t\t\tvar lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);\n\t\t\tvar borderValue = items.borderValue;\n\t\t\tvar x1, x2, y1, y2;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tx1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\tx2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\ty1 = y2 = borderValue;\n\t\t\t} else {\n\t\t\t\ty1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\ty2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\tx1 = x2 = borderValue;\n\t\t\t}\n\n\t\t\tctx.lineWidth = axisWidth;\n\t\t\tctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x1, y1);\n\t\t\tctx.lineTo(x2, y2);\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawLabels: function() {\n\t\tvar me = this;\n\t\tvar optionTicks = me.options.ticks;\n\n\t\tif (!optionTicks.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = me.ctx;\n\t\tvar items = me._labelItems || (me._labelItems = me._computeLabelItems());\n\t\tvar i, j, ilen, jlen, item, tickFont, label, y;\n\n\t\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\t\titem = items[i];\n\t\t\ttickFont = item.font;\n\n\t\t\t// Make sure we draw text in the correct color and font\n\t\t\tctx.save();\n\t\t\tctx.translate(item.x, item.y);\n\t\t\tctx.rotate(item.rotation);\n\t\t\tctx.font = tickFont.string;\n\t\t\tctx.fillStyle = tickFont.color;\n\t\t\tctx.textBaseline = 'middle';\n\t\t\tctx.textAlign = item.textAlign;\n\n\t\t\tlabel = item.label;\n\t\t\ty = item.textOffset;\n\t\t\tif (isArray(label)) {\n\t\t\t\tfor (j = 0, jlen = label.length; j < jlen; ++j) {\n\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\tctx.fillText('' + label[j], 0, y);\n\t\t\t\t\ty += tickFont.lineHeight;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tctx.fillText(label, 0, y);\n\t\t\t}\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawTitle: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar options = me.options;\n\t\tvar scaleLabel = options.scaleLabel;\n\n\t\tif (!scaleLabel.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);\n\t\tvar scaleLabelFont = helpers$1.options._parseFont(scaleLabel);\n\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n\t\tvar halfLineHeight = scaleLabelFont.lineHeight / 2;\n\t\tvar position = options.position;\n\t\tvar rotation = 0;\n\t\tvar scaleLabelX, scaleLabelY;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tscaleLabelX = me.left + me.width / 2; // midpoint of the width\n\t\t\tscaleLabelY = position === 'bottom'\n\t\t\t\t? me.bottom - halfLineHeight - scaleLabelPadding.bottom\n\t\t\t\t: me.top + halfLineHeight + scaleLabelPadding.top;\n\t\t} else {\n\t\t\tvar isLeft = position === 'left';\n\t\t\tscaleLabelX = isLeft\n\t\t\t\t? me.left + halfLineHeight + scaleLabelPadding.top\n\t\t\t\t: me.right - halfLineHeight - scaleLabelPadding.top;\n\t\t\tscaleLabelY = me.top + me.height / 2;\n\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.translate(scaleLabelX, scaleLabelY);\n\t\tctx.rotate(rotation);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\t\tctx.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\tctx.font = scaleLabelFont.string;\n\t\tctx.fillText(scaleLabel.labelString, 0, 0);\n\t\tctx.restore();\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar me = this;\n\n\t\tif (!me._isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tme._drawGrid(chartArea);\n\t\tme._drawTitle();\n\t\tme._drawLabels();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_layers: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tz = opts.ticks && opts.ticks.z || 0;\n\t\tvar gz = opts.gridLines && opts.gridLines.z || 0;\n\n\t\tif (!me._isVisible() || tz === gz || me.draw !== me._draw) {\n\t\t\t// backward compatibility: draw has been overridden by custom scale\n\t\t\treturn [{\n\t\t\t\tz: tz,\n\t\t\t\tdraw: function() {\n\t\t\t\t\tme.draw.apply(me, arguments);\n\t\t\t\t}\n\t\t\t}];\n\t\t}\n\n\t\treturn [{\n\t\t\tz: gz,\n\t\t\tdraw: function() {\n\t\t\t\tme._drawGrid.apply(me, arguments);\n\t\t\t\tme._drawTitle.apply(me, arguments);\n\t\t\t}\n\t\t}, {\n\t\t\tz: tz,\n\t\t\tdraw: function() {\n\t\t\t\tme._drawLabels.apply(me, arguments);\n\t\t\t}\n\t\t}];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getMatchingVisibleMetas: function(type) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\treturn me.chart._getSortedVisibleDatasetMetas()\n\t\t\t.filter(function(meta) {\n\t\t\t\treturn (!type || meta.type === type)\n\t\t\t\t\t&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);\n\t\t\t});\n\t}\n});\n\nScale.prototype._draw = Scale.prototype.draw;\n\nvar core_scale = Scale;\n\nvar isNullOrUndef$1 = helpers$1.isNullOrUndef;\n\nvar defaultConfig = {\n\tposition: 'bottom'\n};\n\nvar scale_category = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar labels = me._getLabels();\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar min = ticksOpts.min;\n\t\tvar max = ticksOpts.max;\n\t\tvar minIndex = 0;\n\t\tvar maxIndex = labels.length - 1;\n\t\tvar findIndex;\n\n\t\tif (min !== undefined) {\n\t\t\t// user specified min value\n\t\t\tfindIndex = labels.indexOf(min);\n\t\t\tif (findIndex >= 0) {\n\t\t\t\tminIndex = findIndex;\n\t\t\t}\n\t\t}\n\n\t\tif (max !== undefined) {\n\t\t\t// user specified max value\n\t\t\tfindIndex = labels.indexOf(max);\n\t\t\tif (findIndex >= 0) {\n\t\t\t\tmaxIndex = findIndex;\n\t\t\t}\n\t\t}\n\n\t\tme.minIndex = minIndex;\n\t\tme.maxIndex = maxIndex;\n\t\tme.min = labels[minIndex];\n\t\tme.max = labels[maxIndex];\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar labels = me._getLabels();\n\t\tvar minIndex = me.minIndex;\n\t\tvar maxIndex = me.maxIndex;\n\n\t\t// If we are viewing some subset of labels, slice the original array\n\t\tme.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\n\t\tif (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n\t\t\treturn me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n\t\t}\n\n\t\treturn me._getLabels()[index];\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar ticks = me.ticks;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (!me.isHorizontal()) {\n\t\t\t// For backward compatibility, vertical category scale reverse is inverted.\n\t\t\tme._reversePixels = !me._reversePixels;\n\t\t}\n\n\t\tif (!ticks) {\n\t\t\treturn;\n\t\t}\n\n\t\tme._startValue = me.minIndex - (offset ? 0.5 : 0);\n\t\tme._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);\n\t},\n\n\t// Used to get data value locations.  Value can either be an index or a numerical value\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar valueCategory, labels, idx;\n\n\t\tif (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {\n\t\t\tvalue = me.chart.data.datasets[datasetIndex].data[index];\n\t\t}\n\n\t\t// If value is a data object, then index is the index in the data array,\n\t\t// not the index of the scale. We need to change that.\n\t\tif (!isNullOrUndef$1(value)) {\n\t\t\tvalueCategory = me.isHorizontal() ? value.x : value.y;\n\t\t}\n\t\tif (valueCategory !== undefined || (value !== undefined && isNaN(index))) {\n\t\t\tlabels = me._getLabels();\n\t\t\tvalue = helpers$1.valueOrDefault(valueCategory, value);\n\t\t\tidx = labels.indexOf(value);\n\t\t\tindex = idx !== -1 ? idx : index;\n\t\t\tif (isNaN(index)) {\n\t\t\t\tindex = value;\n\t\t\t}\n\t\t}\n\t\treturn me.getPixelForDecimal((index - me._startValue) / me._valueRange);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.ticks;\n\t\treturn index < 0 || index > ticks.length - 1\n\t\t\t? null\n\t\t\t: this.getPixelForValue(ticks[index], index + this.minIndex);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);\n\t\treturn Math.min(Math.max(value, 0), me.ticks.length - 1);\n\t},\n\n\tgetBasePixel: function() {\n\t\treturn this.bottom;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults = defaultConfig;\nscale_category._defaults = _defaults;\n\nvar noop = helpers$1.noop;\nvar isNullOrUndef$2 = helpers$1.isNullOrUndef;\n\n/**\n * Generate a set of linear ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks(generationOptions, dataRange) {\n\tvar ticks = [];\n\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t// \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t// for details.\n\n\tvar MIN_SPACING = 1e-14;\n\tvar stepSize = generationOptions.stepSize;\n\tvar unit = stepSize || 1;\n\tvar maxNumSpaces = generationOptions.maxTicks - 1;\n\tvar min = generationOptions.min;\n\tvar max = generationOptions.max;\n\tvar precision = generationOptions.precision;\n\tvar rmin = dataRange.min;\n\tvar rmax = dataRange.max;\n\tvar spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n\tvar factor, niceMin, niceMax, numSpaces;\n\n\t// Beyond MIN_SPACING floating point numbers being to lose precision\n\t// such that we can't do the math necessary to generate ticks\n\tif (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {\n\t\treturn [rmin, rmax];\n\t}\n\n\tnumSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\tif (numSpaces > maxNumSpaces) {\n\t\t// If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n\t\tspacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n\t}\n\n\tif (stepSize || isNullOrUndef$2(precision)) {\n\t\t// If a precision is not specified, calculate factor based on spacing\n\t\tfactor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n\t} else {\n\t\t// If the user specified a precision, round to that number of decimal places\n\t\tfactor = Math.pow(10, precision);\n\t\tspacing = Math.ceil(spacing * factor) / factor;\n\t}\n\n\tniceMin = Math.floor(rmin / spacing) * spacing;\n\tniceMax = Math.ceil(rmax / spacing) * spacing;\n\n\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\tif (stepSize) {\n\t\t// If very close to our whole number, use it.\n\t\tif (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n\t\t\tniceMin = min;\n\t\t}\n\t\tif (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n\t\t\tniceMax = max;\n\t\t}\n\t}\n\n\tnumSpaces = (niceMax - niceMin) / spacing;\n\t// If very close to our rounded value, use it.\n\tif (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\tnumSpaces = Math.round(numSpaces);\n\t} else {\n\t\tnumSpaces = Math.ceil(numSpaces);\n\t}\n\n\tniceMin = Math.round(niceMin * factor) / factor;\n\tniceMax = Math.round(niceMax * factor) / factor;\n\tticks.push(isNullOrUndef$2(min) ? niceMin : min);\n\tfor (var j = 1; j < numSpaces; ++j) {\n\t\tticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n\t}\n\tticks.push(isNullOrUndef$2(max) ? niceMax : max);\n\n\treturn ticks;\n}\n\nvar scale_linearbase = core_scale.extend({\n\tgetRightValue: function(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn +value;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, value);\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t// axis, they can manually override it\n\t\tif (tickOpts.beginAtZero) {\n\t\t\tvar minSign = helpers$1.sign(me.min);\n\t\t\tvar maxSign = helpers$1.sign(me.max);\n\n\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t// move the top up to 0\n\t\t\t\tme.max = 0;\n\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t// move the bottom down to 0\n\t\t\t\tme.min = 0;\n\t\t\t}\n\t\t}\n\n\t\tvar setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n\t\tvar setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n\t\tif (tickOpts.min !== undefined) {\n\t\t\tme.min = tickOpts.min;\n\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\tif (me.min === null) {\n\t\t\t\tme.min = tickOpts.suggestedMin;\n\t\t\t} else {\n\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t}\n\t\t}\n\n\t\tif (tickOpts.max !== undefined) {\n\t\t\tme.max = tickOpts.max;\n\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\tif (me.max === null) {\n\t\t\t\tme.max = tickOpts.suggestedMax;\n\t\t\t} else {\n\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t}\n\t\t}\n\n\t\tif (setMin !== setMax) {\n\t\t\t// We set the min or the max but not both.\n\t\t\t// So ensure that our range is good\n\t\t\t// Inverted or 0 length range can happen when\n\t\t\t// ticks.min is set, and no datasets are visible\n\t\t\tif (me.min >= me.max) {\n\t\t\t\tif (setMin) {\n\t\t\t\t\tme.max = me.min + 1;\n\t\t\t\t} else {\n\t\t\t\t\tme.min = me.max - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (me.min === me.max) {\n\t\t\tme.max++;\n\n\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\tme.min--;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar stepSize = tickOpts.stepSize;\n\t\tvar maxTicksLimit = tickOpts.maxTicksLimit;\n\t\tvar maxTicks;\n\n\t\tif (stepSize) {\n\t\t\tmaxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n\t\t} else {\n\t\t\tmaxTicks = me._computeTickLimit();\n\t\t\tmaxTicksLimit = maxTicksLimit || 11;\n\t\t}\n\n\t\tif (maxTicksLimit) {\n\t\t\tmaxTicks = Math.min(maxTicksLimit, maxTicks);\n\t\t}\n\n\t\treturn maxTicks;\n\t},\n\n\t_computeTickLimit: function() {\n\t\treturn Number.POSITIVE_INFINITY;\n\t},\n\n\thandleDirectionalChanges: noop,\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t// the graph. Make sure we always have at least 2 ticks\n\t\tvar maxTicks = me.getTickLimit();\n\t\tmaxTicks = Math.max(2, maxTicks);\n\n\t\tvar numericGeneratorOptions = {\n\t\t\tmaxTicks: maxTicks,\n\t\t\tmin: tickOpts.min,\n\t\t\tmax: tickOpts.max,\n\t\t\tprecision: tickOpts.precision,\n\t\t\tstepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n\n\t\tme.handleDirectionalChanges();\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(me);\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar ticks = me.getTicks();\n\t\tvar start = me.min;\n\t\tvar end = me.max;\n\t\tvar offset;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (me.options.offset && ticks.length) {\n\t\t\toffset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n\t\t\tstart -= offset;\n\t\t\tend += offset;\n\t\t}\n\t\tme._startValue = start;\n\t\tme._endValue = end;\n\t\tme._valueRange = end - start;\n\t}\n});\n\nvar defaultConfig$1 = {\n\tposition: 'left',\n\tticks: {\n\t\tcallback: core_ticks.formatters.linear\n\t}\n};\n\nvar DEFAULT_MIN = 0;\nvar DEFAULT_MAX = 1;\n\nfunction getOrCreateStack(stacks, stacked, meta) {\n\tvar key = [\n\t\tmeta.type,\n\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\tstacked === undefined && meta.stack === undefined ? meta.index : '',\n\t\tmeta.stack\n\t].join('.');\n\n\tif (stacks[key] === undefined) {\n\t\tstacks[key] = {\n\t\t\tpos: [],\n\t\t\tneg: []\n\t\t};\n\t}\n\n\treturn stacks[key];\n}\n\nfunction stackData(scale, stacks, meta, data) {\n\tvar opts = scale.options;\n\tvar stacked = opts.stacked;\n\tvar stack = getOrCreateStack(stacks, stacked, meta);\n\tvar pos = stack.pos;\n\tvar neg = stack.neg;\n\tvar ilen = data.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = scale._parseValue(data[i]);\n\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tpos[i] = pos[i] || 0;\n\t\tneg[i] = neg[i] || 0;\n\n\t\tif (opts.relativePoints) {\n\t\t\tpos[i] = 100;\n\t\t} else if (value.min < 0 || value.max < 0) {\n\t\t\tneg[i] += value.min;\n\t\t} else {\n\t\t\tpos[i] += value.max;\n\t\t}\n\t}\n}\n\nfunction updateMinMax(scale, meta, data) {\n\tvar ilen = data.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = scale._parseValue(data[i]);\n\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tscale.min = Math.min(scale.min, value.min);\n\t\tscale.max = Math.max(scale.max, value.max);\n\t}\n}\n\nvar scale_linear = scale_linearbase.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar metasets = me._getMatchingVisibleMetas();\n\t\tvar hasStacks = opts.stacked;\n\t\tvar stacks = {};\n\t\tvar ilen = metasets.length;\n\t\tvar i, meta, data, values;\n\n\t\tme.min = Number.POSITIVE_INFINITY;\n\t\tme.max = Number.NEGATIVE_INFINITY;\n\n\t\tif (hasStacks === undefined) {\n\t\t\tfor (i = 0; !hasStacks && i < ilen; ++i) {\n\t\t\t\tmeta = metasets[i];\n\t\t\t\thasStacks = meta.stack !== undefined;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = metasets[i];\n\t\t\tdata = datasets[meta.index].data;\n\t\t\tif (hasStacks) {\n\t\t\t\tstackData(me, stacks, meta, data);\n\t\t\t} else {\n\t\t\t\tupdateMinMax(me, meta, data);\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.each(stacks, function(stackValues) {\n\t\t\tvalues = stackValues.pos.concat(stackValues.neg);\n\t\t\tme.min = Math.min(me.min, helpers$1.min(values));\n\t\t\tme.max = Math.max(me.max, helpers$1.max(values));\n\t\t});\n\n\t\tme.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n\t\tme.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickFont;\n\n\t\tif (me.isHorizontal()) {\n\t\t\treturn Math.ceil(me.width / 40);\n\t\t}\n\t\ttickFont = helpers$1.options._parseFont(me.options.ticks);\n\t\treturn Math.ceil(me.height / tickFont.lineHeight);\n\t},\n\n\t// Called after the ticks are built. We need\n\thandleDirectionalChanges: function() {\n\t\tif (!this.isHorizontal()) {\n\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\tthis.ticks.reverse();\n\t\t}\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\t// Utils\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\treturn me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\treturn this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.ticksAsNumbers;\n\t\tif (index < 0 || index > ticks.length - 1) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.getPixelForValue(ticks[index]);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$1 = defaultConfig$1;\nscale_linear._defaults = _defaults$1;\n\nvar valueOrDefault$b = helpers$1.valueOrDefault;\nvar log10 = helpers$1.math.log10;\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks$1(generationOptions, dataRange) {\n\tvar ticks = [];\n\n\tvar tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n\n\tvar endExp = Math.floor(log10(dataRange.max));\n\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\tvar exp, significand;\n\n\tif (tickVal === 0) {\n\t\texp = Math.floor(log10(dataRange.minNotZero));\n\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\n\t\tticks.push(tickVal);\n\t\ttickVal = significand * Math.pow(10, exp);\n\t} else {\n\t\texp = Math.floor(log10(tickVal));\n\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t}\n\tvar precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n\tdo {\n\t\tticks.push(tickVal);\n\n\t\t++significand;\n\t\tif (significand === 10) {\n\t\t\tsignificand = 1;\n\t\t\t++exp;\n\t\t\tprecision = exp >= 0 ? 1 : precision;\n\t\t}\n\n\t\ttickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\n\tvar lastTick = valueOrDefault$b(generationOptions.max, tickVal);\n\tticks.push(lastTick);\n\n\treturn ticks;\n}\n\nvar defaultConfig$2 = {\n\tposition: 'left',\n\n\t// label settings\n\tticks: {\n\t\tcallback: core_ticks.formatters.logarithmic\n\t}\n};\n\n// TODO(v3): change this to positiveOrDefault\nfunction nonNegativeOrDefault(value, defaultValue) {\n\treturn helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n}\n\nvar scale_logarithmic = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\t\tvar datasetIndex, meta, value, data, i, ilen;\n\n\t\t// Calculate Range\n\t\tme.min = Number.POSITIVE_INFINITY;\n\t\tme.max = Number.NEGATIVE_INFINITY;\n\t\tme.minNotZero = Number.POSITIVE_INFINITY;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tdata = datasets[datasetIndex].data;\n\t\t\t\t\tfor (i = 0, ilen = data.length; i < ilen; i++) {\n\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\tvalue = me._parseValue(data[i]);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalues[i] = values[i] || 0;\n\t\t\t\t\t\tvalues[i] += value.max;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tif (valuesForType.length > 0) {\n\t\t\t\t\tvar minVal = helpers$1.min(valuesForType);\n\t\t\t\t\tvar maxVal = helpers$1.max(valuesForType);\n\t\t\t\t\tme.min = Math.min(me.min, minVal);\n\t\t\t\t\tme.max = Math.max(me.max, maxVal);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tdata = datasets[datasetIndex].data;\n\t\t\t\t\tfor (i = 0, ilen = data.length; i < ilen; i++) {\n\t\t\t\t\t\tvalue = me._parseValue(data[i]);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tme.min = Math.min(value.min, me.min);\n\t\t\t\t\t\tme.max = Math.max(value.max, me.max);\n\n\t\t\t\t\t\tif (value.min !== 0) {\n\t\t\t\t\t\t\tme.minNotZero = Math.min(value.min, me.minNotZero);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tme.min = helpers$1.isFinite(me.min) ? me.min : null;\n\t\tme.max = helpers$1.isFinite(me.max) ? me.max : null;\n\t\tme.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar DEFAULT_MIN = 1;\n\t\tvar DEFAULT_MAX = 10;\n\n\t\tme.min = nonNegativeOrDefault(tickOpts.min, me.min);\n\t\tme.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n\t\tif (me.min === me.max) {\n\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\tme.min = Math.pow(10, Math.floor(log10(me.min)) - 1);\n\t\t\t\tme.max = Math.pow(10, Math.floor(log10(me.max)) + 1);\n\t\t\t} else {\n\t\t\t\tme.min = DEFAULT_MIN;\n\t\t\t\tme.max = DEFAULT_MAX;\n\t\t\t}\n\t\t}\n\t\tif (me.min === null) {\n\t\t\tme.min = Math.pow(10, Math.floor(log10(me.max)) - 1);\n\t\t}\n\t\tif (me.max === null) {\n\t\t\tme.max = me.min !== 0\n\t\t\t\t? Math.pow(10, Math.floor(log10(me.min)) + 1)\n\t\t\t\t: DEFAULT_MAX;\n\t\t}\n\t\tif (me.minNotZero === null) {\n\t\t\tif (me.min > 0) {\n\t\t\t\tme.minNotZero = me.min;\n\t\t\t} else if (me.max < 1) {\n\t\t\t\tme.minNotZero = Math.pow(10, Math.floor(log10(me.max)));\n\t\t\t} else {\n\t\t\t\tme.minNotZero = DEFAULT_MIN;\n\t\t\t}\n\t\t}\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = !me.isHorizontal();\n\n\t\tvar generationOptions = {\n\t\t\tmin: nonNegativeOrDefault(tickOpts.min),\n\t\t\tmax: nonNegativeOrDefault(tickOpts.max)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks$1(generationOptions, me);\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\treverse = !reverse;\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t\tif (reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tthis.tickValues = this.ticks.slice();\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(this);\n\t},\n\n\t// Get the correct tooltip label\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.tickValues;\n\t\tif (index < 0 || index > ticks.length - 1) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.getPixelForValue(ticks[index]);\n\t},\n\n\t/**\n\t * Returns the value of the first tick.\n\t * @param {number} value - The minimum not zero value.\n\t * @return {number} The first tick value.\n\t * @private\n\t */\n\t_getFirstTickValue: function(value) {\n\t\tvar exp = Math.floor(log10(value));\n\t\tvar significand = Math.floor(value / Math.pow(10, exp));\n\n\t\treturn significand * Math.pow(10, exp);\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar start = me.min;\n\t\tvar offset = 0;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (start === 0) {\n\t\t\tstart = me._getFirstTickValue(me.minNotZero);\n\t\t\toffset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;\n\t\t}\n\n\t\tme._startValue = log10(start);\n\t\tme._valueOffset = offset;\n\t\tme._valueRange = (log10(me.max) - log10(start)) / (1 - offset);\n\t},\n\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\tvar decimal = 0;\n\n\t\tvalue = +me.getRightValue(value);\n\n\t\tif (value > me.min && value > 0) {\n\t\t\tdecimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;\n\t\t}\n\t\treturn me.getPixelForDecimal(decimal);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar decimal = me.getDecimalForPixel(pixel);\n\t\treturn decimal === 0 && me.min === 0\n\t\t\t? 0\n\t\t\t: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$2 = defaultConfig$2;\nscale_logarithmic._defaults = _defaults$2;\n\nvar valueOrDefault$c = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\nvar resolve$4 = helpers$1.options.resolve;\n\nvar defaultConfig$3 = {\n\tdisplay: true,\n\n\t// Boolean - Whether to animate scaling the chart from the centre\n\tanimate: true,\n\tposition: 'chartArea',\n\n\tangleLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0,0,0,0.1)',\n\t\tlineWidth: 1,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\tgridLines: {\n\t\tcircular: false\n\t},\n\n\t// label settings\n\tticks: {\n\t\t// Boolean - Show a backdrop to the scale label\n\t\tshowLabelBackdrop: true,\n\n\t\t// String - The colour of the label backdrop\n\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\n\t\t// Number - The backdrop padding above & below the label in pixels\n\t\tbackdropPaddingY: 2,\n\n\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\tbackdropPaddingX: 2,\n\n\t\tcallback: core_ticks.formatters.linear\n\t},\n\n\tpointLabels: {\n\t\t// Boolean - if true, show point labels\n\t\tdisplay: true,\n\n\t\t// Number - Point label font size in pixels\n\t\tfontSize: 10,\n\n\t\t// Function - Used to convert point labels\n\t\tcallback: function(label) {\n\t\t\treturn label;\n\t\t}\n\t}\n};\n\nfunction getTickBackdropHeight(opts) {\n\tvar tickOpts = opts.ticks;\n\n\tif (tickOpts.display && opts.display) {\n\t\treturn valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n\t}\n\treturn 0;\n}\n\nfunction measureLabelSize(ctx, lineHeight, label) {\n\tif (helpers$1.isArray(label)) {\n\t\treturn {\n\t\t\tw: helpers$1.longestText(ctx, ctx.font, label),\n\t\t\th: label.length * lineHeight\n\t\t};\n\t}\n\n\treturn {\n\t\tw: ctx.measureText(label).width,\n\t\th: lineHeight\n\t};\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n\tif (angle === min || angle === max) {\n\t\treturn {\n\t\t\tstart: pos - (size / 2),\n\t\t\tend: pos + (size / 2)\n\t\t};\n\t} else if (angle < min || angle > max) {\n\t\treturn {\n\t\t\tstart: pos - size,\n\t\t\tend: pos\n\t\t};\n\t}\n\n\treturn {\n\t\tstart: pos,\n\t\tend: pos + size\n\t};\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n\t// Right, this is really confusing and there is a lot of maths going on here\n\t// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t//\n\t// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t//\n\t// Solution:\n\t//\n\t// We assume the radius of the polygon is half the size of the canvas at first\n\t// at each index we check if the text overlaps.\n\t//\n\t// Where it does, we store that angle and that index.\n\t//\n\t// After finding the largest index and angle we calculate how much we need to remove\n\t// from the shape radius to move the point inwards by that x.\n\t//\n\t// We average the left and right distances to get the maximum shape radius that can fit in the box\n\t// along with labels.\n\t//\n\t// Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t// on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t//\n\t// This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t// and position it in the most space efficient manner\n\t//\n\t// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n\tvar plFont = helpers$1.options._parseFont(scale.options.pointLabels);\n\n\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\tvar furthestLimits = {\n\t\tl: 0,\n\t\tr: scale.width,\n\t\tt: 0,\n\t\tb: scale.height - scale.paddingTop\n\t};\n\tvar furthestAngles = {};\n\tvar i, textSize, pointPosition;\n\n\tscale.ctx.font = plFont.string;\n\tscale._pointLabelSizes = [];\n\n\tvar valueCount = scale.chart.data.labels.length;\n\tfor (i = 0; i < valueCount; i++) {\n\t\tpointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n\t\ttextSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);\n\t\tscale._pointLabelSizes[i] = textSize;\n\n\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians) % 360;\n\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\tfurthestAngles.l = angleRadians;\n\t\t}\n\n\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\tfurthestAngles.r = angleRadians;\n\t\t}\n\n\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\tfurthestAngles.t = angleRadians;\n\t\t}\n\n\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\tfurthestAngles.b = angleRadians;\n\t\t}\n\t}\n\n\tscale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n}\n\nfunction getTextAlignForAngle(angle) {\n\tif (angle === 0 || angle === 180) {\n\t\treturn 'center';\n\t} else if (angle < 180) {\n\t\treturn 'left';\n\t}\n\n\treturn 'right';\n}\n\nfunction fillText(ctx, text, position, lineHeight) {\n\tvar y = position.y + lineHeight / 2;\n\tvar i, ilen;\n\n\tif (helpers$1.isArray(text)) {\n\t\tfor (i = 0, ilen = text.length; i < ilen; ++i) {\n\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\ty += lineHeight;\n\t\t}\n\t} else {\n\t\tctx.fillText(text, position.x, y);\n\t}\n}\n\nfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\tif (angle === 90 || angle === 270) {\n\t\tposition.y -= (textSize.h / 2);\n\t} else if (angle > 270 || angle < 90) {\n\t\tposition.y -= textSize.h;\n\t}\n}\n\nfunction drawPointLabels(scale) {\n\tvar ctx = scale.ctx;\n\tvar opts = scale.options;\n\tvar pointLabelOpts = opts.pointLabels;\n\tvar tickBackdropHeight = getTickBackdropHeight(opts);\n\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n\tvar plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n\tctx.save();\n\n\tctx.font = plFont.string;\n\tctx.textBaseline = 'middle';\n\n\tfor (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {\n\t\t// Extra pixels out for some label spacing\n\t\tvar extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);\n\n\t\t// Keep this in loop since we may support array properties here\n\t\tvar pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n\t\tctx.fillStyle = pointLabelFontColor;\n\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians);\n\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\tfillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);\n\t}\n\tctx.restore();\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\tvar ctx = scale.ctx;\n\tvar circular = gridLineOpts.circular;\n\tvar valueCount = scale.chart.data.labels.length;\n\tvar lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n\tvar lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n\tvar pointPosition;\n\n\tif ((!circular && !valueCount) || !lineColor || !lineWidth) {\n\t\treturn;\n\t}\n\n\tctx.save();\n\tctx.strokeStyle = lineColor;\n\tctx.lineWidth = lineWidth;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(gridLineOpts.borderDash || []);\n\t\tctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n\t}\n\n\tctx.beginPath();\n\tif (circular) {\n\t\t// Draw circular arcs between the points\n\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t} else {\n\t\t// Draw straight lines connecting each index\n\t\tpointPosition = scale.getPointPosition(0, radius);\n\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\n\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t}\n\t}\n\tctx.closePath();\n\tctx.stroke();\n\tctx.restore();\n}\n\nfunction numberOrZero(param) {\n\treturn helpers$1.isNumber(param) ? param : 0;\n}\n\nvar scale_radialLinear = scale_linearbase.extend({\n\tsetDimensions: function() {\n\t\tvar me = this;\n\n\t\t// Set the unconstrained dimension before label rotation\n\t\tme.width = me.maxWidth;\n\t\tme.height = me.maxHeight;\n\t\tme.paddingTop = getTickBackdropHeight(me.options) / 2;\n\t\tme.xCenter = Math.floor(me.width / 2);\n\t\tme.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n\t\tme.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar min = Number.POSITIVE_INFINITY;\n\t\tvar max = Number.NEGATIVE_INFINITY;\n\n\t\thelpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\n\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\treturn Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\n\t\tscale_linearbase.prototype.convertTicksToLabels.call(me);\n\n\t\t// Point labels\n\t\tme.pointLabels = me.chart.data.labels.map(function() {\n\t\t\tvar label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);\n\t\t\treturn label || label === 0 ? label : '';\n\t\t});\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display && opts.pointLabels.display) {\n\t\t\tfitWithPointLabels(me);\n\t\t} else {\n\t\t\tme.setCenterPoint(0, 0, 0, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Set radius reductions and determine new radius and center point\n\t * @private\n\t */\n\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\tvar me = this;\n\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n\n\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\n\t\tme.drawingArea = Math.min(\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t},\n\n\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\tvar me = this;\n\t\tvar maxRight = me.width - rightMovement - me.drawingArea;\n\t\tvar maxLeft = leftMovement + me.drawingArea;\n\t\tvar maxTop = topMovement + me.drawingArea;\n\t\tvar maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n\n\t\tme.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n\t\tme.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n\t},\n\n\tgetIndexAngle: function(index) {\n\t\tvar chart = this.chart;\n\t\tvar angleMultiplier = 360 / chart.data.labels.length;\n\t\tvar options = chart.options || {};\n\t\tvar startAngle = options.startAngle || 0;\n\n\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\tvar angle = (index * angleMultiplier + startAngle) % 360;\n\n\t\treturn (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;\n\t},\n\n\tgetDistanceFromCenterForValue: function(value) {\n\t\tvar me = this;\n\n\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\t// Take into account half font size + the yPadding of the top value\n\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\tif (me.options.ticks.reverse) {\n\t\t\treturn (me.max - value) * scalingFactor;\n\t\t}\n\t\treturn (value - me.min) * scalingFactor;\n\t},\n\n\tgetPointPosition: function(index, distanceFromCenter) {\n\t\tvar me = this;\n\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\treturn {\n\t\t\tx: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n\t\t\ty: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n\t\t};\n\t},\n\n\tgetPointPositionForValue: function(index, value) {\n\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t},\n\n\tgetBasePosition: function(index) {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.getPointPositionForValue(index || 0,\n\t\t\tme.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawGrid: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar angleLineOpts = opts.angleLines;\n\t\tvar lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n\t\tvar lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);\n\t\tvar i, offset, position;\n\n\t\tif (opts.pointLabels.display) {\n\t\t\tdrawPointLabels(me);\n\t\t}\n\n\t\tif (gridLineOpts.display) {\n\t\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\t\tif (index !== 0) {\n\t\t\t\t\toffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, offset, index);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (angleLineOpts.display && lineWidth && lineColor) {\n\t\t\tctx.save();\n\t\t\tctx.lineWidth = lineWidth;\n\t\t\tctx.strokeStyle = lineColor;\n\t\t\tif (ctx.setLineDash) {\n\t\t\t\tctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n\t\t\t\tctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n\t\t\t}\n\n\t\t\tfor (i = me.chart.data.labels.length - 1; i >= 0; i--) {\n\t\t\t\toffset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);\n\t\t\t\tposition = me.getPointPosition(i, offset);\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(me.xCenter, me.yCenter);\n\t\t\t\tctx.lineTo(position.x, position.y);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawLabels: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\tif (!tickOpts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar startAngle = me.getIndexAngle(0);\n\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\t\tvar tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n\t\tvar offset, width;\n\n\t\tctx.save();\n\t\tctx.font = tickFont.string;\n\t\tctx.translate(me.xCenter, me.yCenter);\n\t\tctx.rotate(startAngle);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\n\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\tif (index === 0 && !tickOpts.reverse) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\n\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\twidth = ctx.measureText(label).width;\n\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\n\t\t\t\tctx.fillRect(\n\t\t\t\t\t-width / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\twidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\ttickFont.size + tickOpts.backdropPaddingY * 2\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tctx.fillStyle = tickFontColor;\n\t\t\tctx.fillText(label, 0, -offset);\n\t\t});\n\n\t\tctx.restore();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawTitle: helpers$1.noop\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$3 = defaultConfig$3;\nscale_radialLinear._defaults = _defaults$3;\n\nvar deprecated$1 = helpers$1._deprecated;\nvar resolve$5 = helpers$1.options.resolve;\nvar valueOrDefault$d = helpers$1.valueOrDefault;\n\n// Integer constants are from the ES6 spec.\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\nvar INTERVALS = {\n\tmillisecond: {\n\t\tcommon: true,\n\t\tsize: 1,\n\t\tsteps: 1000\n\t},\n\tsecond: {\n\t\tcommon: true,\n\t\tsize: 1000,\n\t\tsteps: 60\n\t},\n\tminute: {\n\t\tcommon: true,\n\t\tsize: 60000,\n\t\tsteps: 60\n\t},\n\thour: {\n\t\tcommon: true,\n\t\tsize: 3600000,\n\t\tsteps: 24\n\t},\n\tday: {\n\t\tcommon: true,\n\t\tsize: 86400000,\n\t\tsteps: 30\n\t},\n\tweek: {\n\t\tcommon: false,\n\t\tsize: 604800000,\n\t\tsteps: 4\n\t},\n\tmonth: {\n\t\tcommon: true,\n\t\tsize: 2.628e9,\n\t\tsteps: 12\n\t},\n\tquarter: {\n\t\tcommon: false,\n\t\tsize: 7.884e9,\n\t\tsteps: 4\n\t},\n\tyear: {\n\t\tcommon: true,\n\t\tsize: 3.154e10\n\t}\n};\n\nvar UNITS = Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n\treturn a - b;\n}\n\nfunction arrayUnique(items) {\n\tvar hash = {};\n\tvar out = [];\n\tvar i, ilen, item;\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\titem = items[i];\n\t\tif (!hash[item]) {\n\t\t\thash[item] = true;\n\t\t\tout.push(item);\n\t\t}\n\t}\n\n\treturn out;\n}\n\nfunction getMin(options) {\n\treturn helpers$1.valueOrDefault(options.time.min, options.ticks.min);\n}\n\nfunction getMax(options) {\n\treturn helpers$1.valueOrDefault(options.time.max, options.ticks.max);\n}\n\n/**\n * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n * extremity (left + width or top + height). Note that it would be more optimized to directly\n * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n *\n * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n * If 'series', timestamps will be positioned at the same distance from each other. In this\n * case, only timestamps that break the time linearity are registered, meaning that in the\n * best case, all timestamps are linear, the table contains only min and max.\n */\nfunction buildLookupTable(timestamps, min, max, distribution) {\n\tif (distribution === 'linear' || !timestamps.length) {\n\t\treturn [\n\t\t\t{time: min, pos: 0},\n\t\t\t{time: max, pos: 1}\n\t\t];\n\t}\n\n\tvar table = [];\n\tvar items = [min];\n\tvar i, ilen, prev, curr, next;\n\n\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\tcurr = timestamps[i];\n\t\tif (curr > min && curr < max) {\n\t\t\titems.push(curr);\n\t\t}\n\t}\n\n\titems.push(max);\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\tnext = items[i + 1];\n\t\tprev = items[i - 1];\n\t\tcurr = items[i];\n\n\t\t// only add points that breaks the scale linearity\n\t\tif (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n\t\t\ttable.push({time: curr, pos: i / (ilen - 1)});\n\t\t}\n\t}\n\n\treturn table;\n}\n\n// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\nfunction lookup(table, key, value) {\n\tvar lo = 0;\n\tvar hi = table.length - 1;\n\tvar mid, i0, i1;\n\n\twhile (lo >= 0 && lo <= hi) {\n\t\tmid = (lo + hi) >> 1;\n\t\ti0 = table[mid - 1] || null;\n\t\ti1 = table[mid];\n\n\t\tif (!i0) {\n\t\t\t// given value is outside table (before first item)\n\t\t\treturn {lo: null, hi: i1};\n\t\t} else if (i1[key] < value) {\n\t\t\tlo = mid + 1;\n\t\t} else if (i0[key] > value) {\n\t\t\thi = mid - 1;\n\t\t} else {\n\t\t\treturn {lo: i0, hi: i1};\n\t\t}\n\t}\n\n\t// given value is outside table (after last item)\n\treturn {lo: i1, hi: null};\n}\n\n/**\n * Linearly interpolates the given source `value` using the table items `skey` values and\n * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n * index [0, 1] or [n - 1, n] are used for the interpolation.\n */\nfunction interpolate$1(table, skey, sval, tkey) {\n\tvar range = lookup(table, skey, sval);\n\n\t// Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\tvar prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n\tvar next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n\n\tvar span = next[skey] - prev[skey];\n\tvar ratio = span ? (sval - prev[skey]) / span : 0;\n\tvar offset = (next[tkey] - prev[tkey]) * ratio;\n\n\treturn prev[tkey] + offset;\n}\n\nfunction toTimestamp(scale, input) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options.time;\n\tvar parser = options.parser;\n\tvar format = parser || options.format;\n\tvar value = input;\n\n\tif (typeof parser === 'function') {\n\t\tvalue = parser(value);\n\t}\n\n\t// Only parse if its not a timestamp already\n\tif (!helpers$1.isFinite(value)) {\n\t\tvalue = typeof format === 'string'\n\t\t\t? adapter.parse(value, format)\n\t\t\t: adapter.parse(value);\n\t}\n\n\tif (value !== null) {\n\t\treturn +value;\n\t}\n\n\t// Labels are in an incompatible format and no `parser` has been provided.\n\t// The user might still use the deprecated `format` option for parsing.\n\tif (!parser && typeof format === 'function') {\n\t\tvalue = format(input);\n\n\t\t// `format` could return something else than a timestamp, if so, parse it\n\t\tif (!helpers$1.isFinite(value)) {\n\t\t\tvalue = adapter.parse(value);\n\t\t}\n\t}\n\n\treturn value;\n}\n\nfunction parse(scale, input) {\n\tif (helpers$1.isNullOrUndef(input)) {\n\t\treturn null;\n\t}\n\n\tvar options = scale.options.time;\n\tvar value = toTimestamp(scale, scale.getRightValue(input));\n\tif (value === null) {\n\t\treturn value;\n\t}\n\n\tif (options.round) {\n\t\tvalue = +scale._adapter.startOf(value, options.round);\n\t}\n\n\treturn value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n\tvar ilen = UNITS.length;\n\tvar i, interval, factor;\n\n\tfor (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n\t\tinterval = INTERVALS[UNITS[i]];\n\t\tfactor = interval.steps ? interval.steps : MAX_INTEGER;\n\n\t\tif (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n\n\treturn UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n\tvar i, unit;\n\n\tfor (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n\t\tunit = UNITS[i];\n\t\tif (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n\t\t\treturn unit;\n\t\t}\n\t}\n\n\treturn UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n\tfor (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n\t\tif (INTERVALS[UNITS[i]].common) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n}\n\n/**\n * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n * `minor` unit using the given scale time `options`.\n * Important: this method can return ticks outside the min and max range, it's the\n * responsibility of the calling code to clamp values if needed.\n */\nfunction generate(scale, min, max, capacity) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options;\n\tvar timeOpts = options.time;\n\tvar minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n\tvar stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);\n\tvar weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n\tvar first = min;\n\tvar ticks = [];\n\tvar time;\n\n\t// For 'week' unit, handle the first day of week option\n\tif (weekday) {\n\t\tfirst = +adapter.startOf(first, 'isoWeek', weekday);\n\t}\n\n\t// Align first ticks on unit\n\tfirst = +adapter.startOf(first, weekday ? 'day' : minor);\n\n\t// Prevent browser from freezing in case user options request millions of milliseconds\n\tif (adapter.diff(max, min, minor) > 100000 * stepSize) {\n\t\tthrow min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;\n\t}\n\n\tfor (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {\n\t\tticks.push(time);\n\t}\n\n\tif (time === max || options.bounds === 'ticks') {\n\t\tticks.push(time);\n\t}\n\n\treturn ticks;\n}\n\n/**\n * Returns the start and end offsets from edges in the form of {start, end}\n * where each value is a relative width to the scale and ranges between 0 and 1.\n * They add extra margins on the both sides by scaling down the original scale.\n * Offsets are added when the `offset` option is true.\n */\nfunction computeOffsets(table, ticks, min, max, options) {\n\tvar start = 0;\n\tvar end = 0;\n\tvar first, last;\n\n\tif (options.offset && ticks.length) {\n\t\tfirst = interpolate$1(table, 'time', ticks[0], 'pos');\n\t\tif (ticks.length === 1) {\n\t\t\tstart = 1 - first;\n\t\t} else {\n\t\t\tstart = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n\t\t}\n\t\tlast = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\t\tif (ticks.length === 1) {\n\t\t\tend = last;\n\t\t} else {\n\t\t\tend = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n\t\t}\n\t}\n\n\treturn {start: start, end: end, factor: 1 / (start + 1 + end)};\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n\tvar adapter = scale._adapter;\n\tvar first = +adapter.startOf(ticks[0].value, majorUnit);\n\tvar last = ticks[ticks.length - 1].value;\n\tvar major, index;\n\n\tfor (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n\t\tindex = map[major];\n\t\tif (index >= 0) {\n\t\t\tticks[index].major = true;\n\t\t}\n\t}\n\treturn ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n\tvar ticks = [];\n\tvar map = {};\n\tvar ilen = values.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = values[i];\n\t\tmap[value] = i;\n\n\t\tticks.push({\n\t\t\tvalue: value,\n\t\t\tmajor: false\n\t\t});\n\t}\n\n\t// We set the major ticks separately from the above loop because calling startOf for every tick\n\t// is expensive when there is a large number of ticks\n\treturn (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nvar defaultConfig$4 = {\n\tposition: 'bottom',\n\n\t/**\n\t * Data distribution along the scale:\n\t * - 'linear': data are spread according to their time (distances can vary),\n\t * - 'series': data are spread at the same distance from each other.\n\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t * @since 2.7.0\n\t */\n\tdistribution: 'linear',\n\n\t/**\n\t * Scale boundary strategy (bypassed by min/max time options)\n\t * - `data`: make sure data are fully visible, ticks outside are removed\n\t * - `ticks`: make sure ticks are fully visible, data outside are truncated\n\t * @see https://github.com/chartjs/Chart.js/pull/4556\n\t * @since 2.7.0\n\t */\n\tbounds: 'data',\n\n\tadapters: {},\n\ttime: {\n\t\tparser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\tround: false, // none, or override with week, month, year, etc.\n\t\tdisplayFormat: false, // DEPRECATED\n\t\tisoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n\t\tminUnit: 'millisecond',\n\t\tdisplayFormats: {}\n\t},\n\tticks: {\n\t\tautoSkip: false,\n\n\t\t/**\n\t\t * Ticks generation input values:\n\t\t * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n\t\t * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n\t\t * - 'labels': generates ticks from user given `data.labels` values ONLY.\n\t\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t\t * @since 2.7.0\n\t\t */\n\t\tsource: 'auto',\n\n\t\tmajor: {\n\t\t\tenabled: false\n\t\t}\n\t}\n};\n\nvar scale_time = core_scale.extend({\n\tinitialize: function() {\n\t\tthis.mergeTicksOptions();\n\t\tcore_scale.prototype.initialize.call(this);\n\t},\n\n\tupdate: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar time = options.time || (options.time = {});\n\t\tvar adapter = me._adapter = new core_adapters._date(options.adapters.date);\n\n\t\t// DEPRECATIONS: output a message only one time per update\n\t\tdeprecated$1('time scale', time.format, 'time.format', 'time.parser');\n\t\tdeprecated$1('time scale', time.min, 'time.min', 'ticks.min');\n\t\tdeprecated$1('time scale', time.max, 'time.max', 'ticks.max');\n\n\t\t// Backward compatibility: before introducing adapter, `displayFormats` was\n\t\t// supposed to contain *all* unit/string pairs but this can't be resolved\n\t\t// when loading the scale (adapters are loaded afterward), so let's populate\n\t\t// missing formats on update\n\t\thelpers$1.mergeIf(time.displayFormats, adapter.formats());\n\n\t\treturn core_scale.prototype.update.apply(me, arguments);\n\t},\n\n\t/**\n\t * Allows data to be referenced via 't' attribute\n\t */\n\tgetRightValue: function(rawValue) {\n\t\tif (rawValue && rawValue.t !== undefined) {\n\t\t\trawValue = rawValue.t;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, rawValue);\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar unit = options.time.unit || 'day';\n\t\tvar min = MAX_INTEGER;\n\t\tvar max = MIN_INTEGER;\n\t\tvar timestamps = [];\n\t\tvar datasets = [];\n\t\tvar labels = [];\n\t\tvar i, j, ilen, jlen, data, timestamp, labelsAdded;\n\t\tvar dataLabels = me._getLabels();\n\n\t\tfor (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n\t\t\tlabels.push(parse(me, dataLabels[i]));\n\t\t}\n\n\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tdata = chart.data.datasets[i].data;\n\n\t\t\t\t// Let's consider that all data have the same format.\n\t\t\t\tif (helpers$1.isObject(data[0])) {\n\t\t\t\t\tdatasets[i] = [];\n\n\t\t\t\t\tfor (j = 0, jlen = data.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamp = parse(me, data[j]);\n\t\t\t\t\t\ttimestamps.push(timestamp);\n\t\t\t\t\t\tdatasets[i][j] = timestamp;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdatasets[i] = labels.slice(0);\n\t\t\t\t\tif (!labelsAdded) {\n\t\t\t\t\t\ttimestamps = timestamps.concat(labels);\n\t\t\t\t\t\tlabelsAdded = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdatasets[i] = [];\n\t\t\t}\n\t\t}\n\n\t\tif (labels.length) {\n\t\t\tmin = Math.min(min, labels[0]);\n\t\t\tmax = Math.max(max, labels[labels.length - 1]);\n\t\t}\n\n\t\tif (timestamps.length) {\n\t\t\ttimestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);\n\t\t\tmin = Math.min(min, timestamps[0]);\n\t\t\tmax = Math.max(max, timestamps[timestamps.length - 1]);\n\t\t}\n\n\t\tmin = parse(me, getMin(options)) || min;\n\t\tmax = parse(me, getMax(options)) || max;\n\n\t\t// In case there is no valid min/max, set limits based on unit time option\n\t\tmin = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n\t\tmax = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;\n\n\t\t// Make sure that max is strictly higher than min (required by the lookup table)\n\t\tme.min = Math.min(min, max);\n\t\tme.max = Math.max(min + 1, max);\n\n\t\t// PRIVATE\n\t\tme._table = [];\n\t\tme._timestamps = {\n\t\t\tdata: timestamps,\n\t\t\tdatasets: datasets,\n\t\t\tlabels: labels\n\t\t};\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\t\tvar options = me.options;\n\t\tvar tickOpts = options.ticks;\n\t\tvar timeOpts = options.time;\n\t\tvar timestamps = me._timestamps;\n\t\tvar ticks = [];\n\t\tvar capacity = me.getLabelCapacity(min);\n\t\tvar source = tickOpts.source;\n\t\tvar distribution = options.distribution;\n\t\tvar i, ilen, timestamp;\n\n\t\tif (source === 'data' || (source === 'auto' && distribution === 'series')) {\n\t\t\ttimestamps = timestamps.data;\n\t\t} else if (source === 'labels') {\n\t\t\ttimestamps = timestamps.labels;\n\t\t} else {\n\t\t\ttimestamps = generate(me, min, max, capacity);\n\t\t}\n\n\t\tif (options.bounds === 'ticks' && timestamps.length) {\n\t\t\tmin = timestamps[0];\n\t\t\tmax = timestamps[timestamps.length - 1];\n\t\t}\n\n\t\t// Enforce limits with user min/max options\n\t\tmin = parse(me, getMin(options)) || min;\n\t\tmax = parse(me, getMax(options)) || max;\n\n\t\t// Remove ticks outside the min/max range\n\t\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\t\ttimestamp = timestamps[i];\n\t\t\tif (timestamp >= min && timestamp <= max) {\n\t\t\t\tticks.push(timestamp);\n\t\t\t}\n\t\t}\n\n\t\tme.min = min;\n\t\tme.max = max;\n\n\t\t// PRIVATE\n\t\t// determineUnitForFormatting relies on the number of ticks so we don't use it when\n\t\t// autoSkip is enabled because we don't yet know what the final number of ticks will be\n\t\tme._unit = timeOpts.unit || (tickOpts.autoSkip\n\t\t\t? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)\n\t\t\t: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));\n\t\tme._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined\n\t\t\t: determineMajorUnit(me._unit);\n\t\tme._table = buildLookupTable(me._timestamps.data, min, max, distribution);\n\t\tme._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\n\t\treturn ticksFromTimestamps(me, ticks, me._majorUnit);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar data = me.chart.data;\n\t\tvar timeOpts = me.options.time;\n\t\tvar label = data.labels && index < data.labels.length ? data.labels[index] : '';\n\t\tvar value = data.datasets[datasetIndex].data[index];\n\n\t\tif (helpers$1.isObject(value)) {\n\t\t\tlabel = me.getRightValue(value);\n\t\t}\n\t\tif (timeOpts.tooltipFormat) {\n\t\t\treturn adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n\t\t}\n\t\tif (typeof label === 'string') {\n\t\t\treturn label;\n\t\t}\n\t\treturn adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n\t},\n\n\t/**\n\t * Function to format an individual tick mark\n\t * @private\n\t */\n\ttickFormatFunction: function(time, index, ticks, format) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar formats = options.time.displayFormats;\n\t\tvar minorFormat = formats[me._unit];\n\t\tvar majorUnit = me._majorUnit;\n\t\tvar majorFormat = formats[majorUnit];\n\t\tvar tick = ticks[index];\n\t\tvar tickOpts = options.ticks;\n\t\tvar major = majorUnit && majorFormat && tick && tick.major;\n\t\tvar label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n\t\tvar nestedTickOpts = major ? tickOpts.major : tickOpts.minor;\n\t\tvar formatter = resolve$5([\n\t\t\tnestedTickOpts.callback,\n\t\t\tnestedTickOpts.userCallback,\n\t\t\ttickOpts.callback,\n\t\t\ttickOpts.userCallback\n\t\t]);\n\n\t\treturn formatter ? formatter(label, index, ticks) : label;\n\t},\n\n\tconvertTicksToLabels: function(ticks) {\n\t\tvar labels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tlabels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetPixelForOffset: function(time) {\n\t\tvar me = this;\n\t\tvar offsets = me._offsets;\n\t\tvar pos = interpolate$1(me._table, 'time', time, 'pos');\n\t\treturn me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n\t},\n\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar time = null;\n\n\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\ttime = me._timestamps.datasets[datasetIndex][index];\n\t\t}\n\n\t\tif (time === null) {\n\t\t\ttime = parse(me, value);\n\t\t}\n\n\t\tif (time !== null) {\n\t\t\treturn me.getPixelForOffset(time);\n\t\t}\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.getTicks();\n\t\treturn index >= 0 && index < ticks.length ?\n\t\t\tthis.getPixelForOffset(ticks[index].value) :\n\t\t\tnull;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar offsets = me._offsets;\n\t\tvar pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n\t\tvar time = interpolate$1(me._table, 'pos', pos, 'time');\n\n\t\t// DEPRECATION, we should return time directly\n\t\treturn me._adapter._create(time);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLabelSize: function(label) {\n\t\tvar me = this;\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar tickLabelWidth = me.ctx.measureText(label).width;\n\t\tvar angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n\t\tvar cosRotation = Math.cos(angle);\n\t\tvar sinRotation = Math.sin(angle);\n\t\tvar tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n\n\t\treturn {\n\t\t\tw: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n\t\t\th: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n\t\t};\n\t},\n\n\t/**\n\t * Crude approximation of what the label width might be\n\t * @private\n\t */\n\tgetLabelWidth: function(label) {\n\t\treturn this._getLabelSize(label).w;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetLabelCapacity: function(exampleTime) {\n\t\tvar me = this;\n\t\tvar timeOpts = me.options.time;\n\t\tvar displayFormats = timeOpts.displayFormats;\n\n\t\t// pick the longest format (milliseconds) for guestimation\n\t\tvar format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\t\tvar exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);\n\t\tvar size = me._getLabelSize(exampleLabel);\n\t\tvar capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);\n\n\t\tif (me.options.offset) {\n\t\t\tcapacity--;\n\t\t}\n\n\t\treturn capacity > 0 ? capacity : 1;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$4 = defaultConfig$4;\nscale_time._defaults = _defaults$4;\n\nvar scales = {\n\tcategory: scale_category,\n\tlinear: scale_linear,\n\tlogarithmic: scale_logarithmic,\n\tradialLinear: scale_radialLinear,\n\ttime: scale_time\n};\n\nvar FORMATS = {\n\tdatetime: 'MMM D, YYYY, h:mm:ss a',\n\tmillisecond: 'h:mm:ss.SSS a',\n\tsecond: 'h:mm:ss a',\n\tminute: 'h:mm a',\n\thour: 'hA',\n\tday: 'MMM D',\n\tweek: 'll',\n\tmonth: 'MMM YYYY',\n\tquarter: '[Q]Q - YYYY',\n\tyear: 'YYYY'\n};\n\ncore_adapters._date.override(typeof moment === 'function' ? {\n\t_id: 'moment', // DEBUG ONLY\n\n\tformats: function() {\n\t\treturn FORMATS;\n\t},\n\n\tparse: function(value, format) {\n\t\tif (typeof value === 'string' && typeof format === 'string') {\n\t\t\tvalue = moment(value, format);\n\t\t} else if (!(value instanceof moment)) {\n\t\t\tvalue = moment(value);\n\t\t}\n\t\treturn value.isValid() ? value.valueOf() : null;\n\t},\n\n\tformat: function(time, format) {\n\t\treturn moment(time).format(format);\n\t},\n\n\tadd: function(time, amount, unit) {\n\t\treturn moment(time).add(amount, unit).valueOf();\n\t},\n\n\tdiff: function(max, min, unit) {\n\t\treturn moment(max).diff(moment(min), unit);\n\t},\n\n\tstartOf: function(time, unit, weekday) {\n\t\ttime = moment(time);\n\t\tif (unit === 'isoWeek') {\n\t\t\treturn time.isoWeekday(weekday).valueOf();\n\t\t}\n\t\treturn time.startOf(unit).valueOf();\n\t},\n\n\tendOf: function(time, unit) {\n\t\treturn moment(time).endOf(unit).valueOf();\n\t},\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility with scale.getValueForPixel().\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(time) {\n\t\treturn moment(time);\n\t},\n} : {});\n\ncore_defaults._set('global', {\n\tplugins: {\n\t\tfiller: {\n\t\t\tpropagate: true\n\t\t}\n\t}\n});\n\nvar mappers = {\n\tdataset: function(source) {\n\t\tvar index = source.fill;\n\t\tvar chart = source.chart;\n\t\tvar meta = chart.getDatasetMeta(index);\n\t\tvar visible = meta && chart.isDatasetVisible(index);\n\t\tvar points = (visible && meta.dataset._children) || [];\n\t\tvar length = points.length || 0;\n\n\t\treturn !length ? null : function(point, i) {\n\t\t\treturn (i < length && points[i]._view) || null;\n\t\t};\n\t},\n\n\tboundary: function(source) {\n\t\tvar boundary = source.boundary;\n\t\tvar x = boundary ? boundary.x : null;\n\t\tvar y = boundary ? boundary.y : null;\n\n\t\tif (helpers$1.isArray(boundary)) {\n\t\t\treturn function(point, i) {\n\t\t\t\treturn boundary[i];\n\t\t\t};\n\t\t}\n\n\t\treturn function(point) {\n\t\t\treturn {\n\t\t\t\tx: x === null ? point.x : x,\n\t\t\t\ty: y === null ? point.y : y,\n\t\t\t};\n\t\t};\n\t}\n};\n\n// @todo if (fill[0] === '#')\nfunction decodeFill(el, index, count) {\n\tvar model = el._model || {};\n\tvar fill = model.fill;\n\tvar target;\n\n\tif (fill === undefined) {\n\t\tfill = !!model.backgroundColor;\n\t}\n\n\tif (fill === false || fill === null) {\n\t\treturn false;\n\t}\n\n\tif (fill === true) {\n\t\treturn 'origin';\n\t}\n\n\ttarget = parseFloat(fill, 10);\n\tif (isFinite(target) && Math.floor(target) === target) {\n\t\tif (fill[0] === '-' || fill[0] === '+') {\n\t\t\ttarget = index + target;\n\t\t}\n\n\t\tif (target === index || target < 0 || target >= count) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tswitch (fill) {\n\t// compatibility\n\tcase 'bottom':\n\t\treturn 'start';\n\tcase 'top':\n\t\treturn 'end';\n\tcase 'zero':\n\t\treturn 'origin';\n\t// supported boundaries\n\tcase 'origin':\n\tcase 'start':\n\tcase 'end':\n\t\treturn fill;\n\t// invalid fill values\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nfunction computeLinearBoundary(source) {\n\tvar model = source.el._model || {};\n\tvar scale = source.el._scale || {};\n\tvar fill = source.fill;\n\tvar target = null;\n\tvar horizontal;\n\n\tif (isFinite(fill)) {\n\t\treturn null;\n\t}\n\n\t// Backward compatibility: until v3, we still need to support boundary values set on\n\t// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n\t// controllers might still use it (e.g. the Smith chart).\n\n\tif (fill === 'start') {\n\t\ttarget = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n\t} else if (fill === 'end') {\n\t\ttarget = model.scaleTop === undefined ? scale.top : model.scaleTop;\n\t} else if (model.scaleZero !== undefined) {\n\t\ttarget = model.scaleZero;\n\t} else if (scale.getBasePixel) {\n\t\ttarget = scale.getBasePixel();\n\t}\n\n\tif (target !== undefined && target !== null) {\n\t\tif (target.x !== undefined && target.y !== undefined) {\n\t\t\treturn target;\n\t\t}\n\n\t\tif (helpers$1.isFinite(target)) {\n\t\t\thorizontal = scale.isHorizontal();\n\t\t\treturn {\n\t\t\t\tx: horizontal ? target : null,\n\t\t\t\ty: horizontal ? null : target\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction computeCircularBoundary(source) {\n\tvar scale = source.el._scale;\n\tvar options = scale.options;\n\tvar length = scale.chart.data.labels.length;\n\tvar fill = source.fill;\n\tvar target = [];\n\tvar start, end, center, i, point;\n\n\tif (!length) {\n\t\treturn null;\n\t}\n\n\tstart = options.ticks.reverse ? scale.max : scale.min;\n\tend = options.ticks.reverse ? scale.min : scale.max;\n\tcenter = scale.getPointPositionForValue(0, start);\n\tfor (i = 0; i < length; ++i) {\n\t\tpoint = fill === 'start' || fill === 'end'\n\t\t\t? scale.getPointPositionForValue(i, fill === 'start' ? start : end)\n\t\t\t: scale.getBasePosition(i);\n\t\tif (options.gridLines.circular) {\n\t\t\tpoint.cx = center.x;\n\t\t\tpoint.cy = center.y;\n\t\t\tpoint.angle = scale.getIndexAngle(i) - Math.PI / 2;\n\t\t}\n\t\ttarget.push(point);\n\t}\n\treturn target;\n}\n\nfunction computeBoundary(source) {\n\tvar scale = source.el._scale || {};\n\n\tif (scale.getPointPositionForValue) {\n\t\treturn computeCircularBoundary(source);\n\t}\n\treturn computeLinearBoundary(source);\n}\n\nfunction resolveTarget(sources, index, propagate) {\n\tvar source = sources[index];\n\tvar fill = source.fill;\n\tvar visited = [index];\n\tvar target;\n\n\tif (!propagate) {\n\t\treturn fill;\n\t}\n\n\twhile (fill !== false && visited.indexOf(fill) === -1) {\n\t\tif (!isFinite(fill)) {\n\t\t\treturn fill;\n\t\t}\n\n\t\ttarget = sources[fill];\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (target.visible) {\n\t\t\treturn fill;\n\t\t}\n\n\t\tvisited.push(fill);\n\t\tfill = target.fill;\n\t}\n\n\treturn false;\n}\n\nfunction createMapper(source) {\n\tvar fill = source.fill;\n\tvar type = 'dataset';\n\n\tif (fill === false) {\n\t\treturn null;\n\t}\n\n\tif (!isFinite(fill)) {\n\t\ttype = 'boundary';\n\t}\n\n\treturn mappers[type](source);\n}\n\nfunction isDrawable(point) {\n\treturn point && !point.skip;\n}\n\nfunction drawArea(ctx, curve0, curve1, len0, len1) {\n\tvar i, cx, cy, r;\n\n\tif (!len0 || !len1) {\n\t\treturn;\n\t}\n\n\t// building first area curve (normal)\n\tctx.moveTo(curve0[0].x, curve0[0].y);\n\tfor (i = 1; i < len0; ++i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n\t}\n\n\tif (curve1[0].angle !== undefined) {\n\t\tcx = curve1[0].cx;\n\t\tcy = curve1[0].cy;\n\t\tr = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));\n\t\tfor (i = len1 - 1; i > 0; --i) {\n\t\t\tctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);\n\t\t}\n\t\treturn;\n\t}\n\n\t// joining the two area curves\n\tctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);\n\n\t// building opposite area curve (reverse)\n\tfor (i = len1 - 1; i > 0; --i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n\t}\n}\n\nfunction doFill(ctx, points, mapper, view, color, loop) {\n\tvar count = points.length;\n\tvar span = view.spanGaps;\n\tvar curve0 = [];\n\tvar curve1 = [];\n\tvar len0 = 0;\n\tvar len1 = 0;\n\tvar i, ilen, index, p0, p1, d0, d1, loopOffset;\n\n\tctx.beginPath();\n\n\tfor (i = 0, ilen = count; i < ilen; ++i) {\n\t\tindex = i % count;\n\t\tp0 = points[index]._view;\n\t\tp1 = mapper(p0, index, view);\n\t\td0 = isDrawable(p0);\n\t\td1 = isDrawable(p1);\n\n\t\tif (loop && loopOffset === undefined && d0) {\n\t\t\tloopOffset = i + 1;\n\t\t\tilen = count + loopOffset;\n\t\t}\n\n\t\tif (d0 && d1) {\n\t\t\tlen0 = curve0.push(p0);\n\t\t\tlen1 = curve1.push(p1);\n\t\t} else if (len0 && len1) {\n\t\t\tif (!span) {\n\t\t\t\tdrawArea(ctx, curve0, curve1, len0, len1);\n\t\t\t\tlen0 = len1 = 0;\n\t\t\t\tcurve0 = [];\n\t\t\t\tcurve1 = [];\n\t\t\t} else {\n\t\t\t\tif (d0) {\n\t\t\t\t\tcurve0.push(p0);\n\t\t\t\t}\n\t\t\t\tif (d1) {\n\t\t\t\t\tcurve1.push(p1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdrawArea(ctx, curve0, curve1, len0, len1);\n\n\tctx.closePath();\n\tctx.fillStyle = color;\n\tctx.fill();\n}\n\nvar plugin_filler = {\n\tid: 'filler',\n\n\tafterDatasetsUpdate: function(chart, options) {\n\t\tvar count = (chart.data.datasets || []).length;\n\t\tvar propagate = options.propagate;\n\t\tvar sources = [];\n\t\tvar meta, i, el, source;\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tel = meta.dataset;\n\t\t\tsource = null;\n\n\t\t\tif (el && el._model && el instanceof elements.Line) {\n\t\t\t\tsource = {\n\t\t\t\t\tvisible: chart.isDatasetVisible(i),\n\t\t\t\t\tfill: decodeFill(el, i, count),\n\t\t\t\t\tchart: chart,\n\t\t\t\t\tel: el\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tmeta.$filler = source;\n\t\t\tsources.push(source);\n\t\t}\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsource.fill = resolveTarget(sources, i, propagate);\n\t\t\tsource.boundary = computeBoundary(source);\n\t\t\tsource.mapper = createMapper(source);\n\t\t}\n\t},\n\n\tbeforeDatasetsDraw: function(chart) {\n\t\tvar metasets = chart._getSortedVisibleDatasetMetas();\n\t\tvar ctx = chart.ctx;\n\t\tvar meta, i, el, view, points, mapper, color;\n\n\t\tfor (i = metasets.length - 1; i >= 0; --i) {\n\t\t\tmeta = metasets[i].$filler;\n\n\t\t\tif (!meta || !meta.visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tel = meta.el;\n\t\t\tview = el._view;\n\t\t\tpoints = el._children || [];\n\t\t\tmapper = meta.mapper;\n\t\t\tcolor = view.backgroundColor || core_defaults.global.defaultColor;\n\n\t\t\tif (mapper && color && points.length) {\n\t\t\t\thelpers$1.canvas.clipArea(ctx, chart.chartArea);\n\t\t\t\tdoFill(ctx, points, mapper, view, color, el._loop);\n\t\t\t\thelpers$1.canvas.unclipArea(ctx);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;\nvar noop$1 = helpers$1.noop;\nvar valueOrDefault$e = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\tlegend: {\n\t\tdisplay: true,\n\t\tposition: 'top',\n\t\talign: 'center',\n\t\tfullWidth: true,\n\t\treverse: false,\n\t\tweight: 1000,\n\n\t\t// a callback that will handle\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.datasetIndex;\n\t\t\tvar ci = this.chart;\n\t\t\tvar meta = ci.getDatasetMeta(index);\n\n\t\t\t// See controller.isDatasetVisible comment\n\t\t\tmeta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n\n\t\t\t// We hid a dataset ... rerender the chart\n\t\t\tci.update();\n\t\t},\n\n\t\tonHover: null,\n\t\tonLeave: null,\n\n\t\tlabels: {\n\t\t\tboxWidth: 40,\n\t\t\tpadding: 10,\n\t\t\t// Generates labels shown in the legend\n\t\t\t// Valid properties to return:\n\t\t\t// text : text to display\n\t\t\t// fillStyle : fill of coloured box\n\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t// lineCap : cap style for line\n\t\t\t// lineDash\n\t\t\t// lineDashOffset :\n\t\t\t// lineJoin :\n\t\t\t// lineWidth :\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\tvar options = chart.options.legend || {};\n\t\t\t\tvar usePointStyle = options.labels && options.labels.usePointStyle;\n\n\t\t\t\treturn chart._getSortedDatasetMetas().map(function(meta) {\n\t\t\t\t\tvar style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: datasets[meta.index].label,\n\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\thidden: !chart.isDatasetVisible(meta.index),\n\t\t\t\t\t\tlineCap: style.borderCapStyle,\n\t\t\t\t\t\tlineDash: style.borderDash,\n\t\t\t\t\t\tlineDashOffset: style.borderDashOffset,\n\t\t\t\t\t\tlineJoin: style.borderJoinStyle,\n\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\tpointStyle: style.pointStyle,\n\t\t\t\t\t\trotation: style.rotation,\n\n\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\tdatasetIndex: meta.index\n\t\t\t\t\t};\n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\t},\n\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar datasets = chart.data.datasets;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; i++) {\n\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\tlistItemSpan.style.backgroundColor = datasets[i].backgroundColor;\n\t\t\tif (datasets[i].label) {\n\t\t\t\tlistItem.appendChild(document.createTextNode(datasets[i].label));\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t}\n});\n\n/**\n * Helper function to get the box width based on the usePointStyle option\n * @param {object} labelopts - the label options on the legend\n * @param {number} fontSize - the label font size\n * @return {number} width of the color box area\n */\nfunction getBoxWidth(labelOpts, fontSize) {\n\treturn labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?\n\t\tfontSize :\n\t\tlabelOpts.boxWidth;\n}\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Legend = core_element.extend({\n\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\n\t\t/**\n \t\t * @private\n \t\t */\n\t\tme._hoveredItem = null;\n\n\t\t// Are we in doughnut mode which has a different data type\n\t\tme.doughnutMode = false;\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\t// Any function defined here is inherited by all legend types.\n\t// Any function can be extended by the legend type\n\n\tbeforeUpdate: noop$1,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\t},\n\tafterUpdate: noop$1,\n\n\t//\n\n\tbeforeSetDimensions: noop$1,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$1,\n\n\t//\n\n\tbeforeBuildLabels: noop$1,\n\tbuildLabels: function() {\n\t\tvar me = this;\n\t\tvar labelOpts = me.options.labels || {};\n\t\tvar legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n\t\tif (labelOpts.filter) {\n\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t});\n\t\t}\n\n\t\tif (me.options.reverse) {\n\t\t\tlegendItems.reverse();\n\t\t}\n\n\t\tme.legendItems = legendItems;\n\t},\n\tafterBuildLabels: noop$1,\n\n\t//\n\n\tbeforeFit: noop$1,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar display = opts.display;\n\n\t\tvar ctx = me.ctx;\n\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\n\t\t// Reset hit boxes\n\t\tvar hitboxes = me.legendHitBoxes = [];\n\n\t\tvar minSize = me.minSize;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = display ? 10 : 0;\n\t\t} else {\n\t\t\tminSize.width = display ? 10 : 0;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Increase sizes here\n\t\tif (!display) {\n\t\t\tme.width = minSize.width = me.height = minSize.height = 0;\n\t\t\treturn;\n\t\t}\n\t\tctx.font = labelFont.string;\n\n\t\tif (isHorizontal) {\n\t\t\t// Labels\n\n\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\tvar totalHeight = 0;\n\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\tif (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {\n\t\t\t\t\ttotalHeight += fontSize + labelOpts.padding;\n\t\t\t\t\tlineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n\t\t\t\t}\n\n\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\thitboxes[i] = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: fontSize\n\t\t\t\t};\n\n\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t});\n\n\t\t\tminSize.height += totalHeight;\n\n\t\t} else {\n\t\t\tvar vPadding = labelOpts.padding;\n\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\tvar columnHeights = me.columnHeights = [];\n\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\tvar currentColWidth = 0;\n\t\t\tvar currentColHeight = 0;\n\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t// If too tall, go to new column\n\t\t\t\tif (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {\n\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\t\t\t\t\tcolumnHeights.push(currentColHeight);\n\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t}\n\n\t\t\t\t// Get max width\n\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\tcurrentColHeight += fontSize + vPadding;\n\n\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\thitboxes[i] = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\theight: fontSize\n\t\t\t\t};\n\t\t\t});\n\n\t\t\ttotalWidth += currentColWidth;\n\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\tcolumnHeights.push(currentColHeight);\n\t\t\tminSize.width += totalWidth;\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\tafterFit: noop$1,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\n\t// Actually draw the legend on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor;\n\t\tvar lineDefault = globalDefaults.elements.line;\n\t\tvar legendHeight = me.height;\n\t\tvar columnHeights = me.columnHeights;\n\t\tvar legendWidth = me.width;\n\t\tvar lineWidths = me.lineWidths;\n\n\t\tif (!opts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);\n\t\tvar ctx = me.ctx;\n\t\tvar fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\t\tvar cursor;\n\n\t\t// Canvas setup\n\t\tctx.textAlign = rtlHelper.textAlign('left');\n\t\tctx.textBaseline = 'middle';\n\t\tctx.lineWidth = 0.5;\n\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\tctx.font = labelFont.string;\n\n\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\tvar hitboxes = me.legendHitBoxes;\n\n\t\t// current position\n\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the ctx for the box\n\t\t\tctx.save();\n\n\t\t\tvar lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\tctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);\n\t\t\tctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\tctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\tctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\tctx.lineWidth = lineWidth;\n\t\t\tctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);\n\n\t\t\tif (ctx.setLineDash) {\n\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\tctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t}\n\n\t\t\tif (labelOpts && labelOpts.usePointStyle) {\n\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\tvar radius = boxWidth * Math.SQRT2 / 2;\n\t\t\t\tvar centerX = rtlHelper.xPlus(x, boxWidth / 2);\n\t\t\t\tvar centerY = y + fontSize / 2;\n\n\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\thelpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);\n\t\t\t} else {\n\t\t\t\t// Draw box as legend symbol\n\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);\n\t\t\t\tif (lineWidth !== 0) {\n\t\t\t\t\tctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t};\n\n\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\tvar halfFontSize = fontSize / 2;\n\t\t\tvar xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);\n\t\t\tvar yMiddle = y + halfFontSize;\n\n\t\t\tctx.fillText(legendItem.text, xLeft, yMiddle);\n\n\t\t\tif (legendItem.hidden) {\n\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.lineWidth = 2;\n\t\t\t\tctx.moveTo(xLeft, yMiddle);\n\t\t\t\tctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t};\n\n\t\tvar alignmentOffset = function(dimension, blockSize) {\n\t\t\tswitch (opts.align) {\n\t\t\tcase 'start':\n\t\t\t\treturn labelOpts.padding;\n\t\t\tcase 'end':\n\t\t\t\treturn dimension - blockSize;\n\t\t\tdefault: // center\n\t\t\t\treturn (dimension - blockSize + labelOpts.padding) / 2;\n\t\t\t}\n\t\t};\n\n\t\t// Horizontal\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tif (isHorizontal) {\n\t\t\tcursor = {\n\t\t\t\tx: me.left + alignmentOffset(legendWidth, lineWidths[0]),\n\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\tline: 0\n\t\t\t};\n\t\t} else {\n\t\t\tcursor = {\n\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\ty: me.top + alignmentOffset(legendHeight, columnHeights[0]),\n\t\t\t\tline: 0\n\t\t\t};\n\t\t}\n\n\t\thelpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);\n\n\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\tvar textWidth = ctx.measureText(legendItem.text).width;\n\t\t\tvar width = boxWidth + (fontSize / 2) + textWidth;\n\t\t\tvar x = cursor.x;\n\t\t\tvar y = cursor.y;\n\n\t\t\trtlHelper.setWidth(me.minSize.width);\n\n\t\t\t// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n\t\t\t// instead of me.right and me.bottom because me.width and me.height\n\t\t\t// may have been changed since me.minSize was calculated\n\t\t\tif (isHorizontal) {\n\t\t\t\tif (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\tcursor.line++;\n\t\t\t\t\tx = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);\n\t\t\t\t}\n\t\t\t} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\tcursor.line++;\n\t\t\t\ty = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);\n\t\t\t}\n\n\t\t\tvar realX = rtlHelper.x(x);\n\n\t\t\tdrawLegendBox(realX, y, legendItem);\n\n\t\t\thitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);\n\t\t\thitboxes[i].top = y;\n\n\t\t\t// Fill the actual label\n\t\t\tfillText(realX, y, legendItem, textWidth);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tcursor.x += width + labelOpts.padding;\n\t\t\t} else {\n\t\t\t\tcursor.y += itemHeight;\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLegendItemAt: function(x, y) {\n\t\tvar me = this;\n\t\tvar i, hitBox, lh;\n\n\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t// See if we are touching one of the dataset boxes\n\t\t\tlh = me.legendHitBoxes;\n\t\t\tfor (i = 0; i < lh.length; ++i) {\n\t\t\t\thitBox = lh[i];\n\n\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t// Touching an element\n\t\t\t\t\treturn me.legendItems[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\tvar hoveredItem;\n\n\t\tif (type === 'mousemove') {\n\t\t\tif (!opts.onHover && !opts.onLeave) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (type === 'click') {\n\t\t\tif (!opts.onClick) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Chart event already has relative position in it\n\t\thoveredItem = me._getLegendItemAt(e.x, e.y);\n\n\t\tif (type === 'click') {\n\t\t\tif (hoveredItem && opts.onClick) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onClick.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t} else {\n\t\t\tif (opts.onLeave && hoveredItem !== me._hoveredItem) {\n\t\t\t\tif (me._hoveredItem) {\n\t\t\t\t\topts.onLeave.call(me, e.native, me._hoveredItem);\n\t\t\t\t}\n\t\t\t\tme._hoveredItem = hoveredItem;\n\t\t\t}\n\n\t\t\tif (opts.onHover && hoveredItem) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onHover.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t}\n\t}\n});\n\nfunction createNewLegendAndAttach(chart, legendOpts) {\n\tvar legend = new Legend({\n\t\tctx: chart.ctx,\n\t\toptions: legendOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, legend, legendOpts);\n\tcore_layouts.addBox(chart, legend);\n\tchart.legend = legend;\n}\n\nvar plugin_legend = {\n\tid: 'legend',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n\t * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Legend,\n\n\tbeforeInit: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\n\t\tif (legendOpts) {\n\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\t\tvar legend = chart.legend;\n\n\t\tif (legendOpts) {\n\t\t\thelpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n\t\t\tif (legend) {\n\t\t\t\tcore_layouts.configure(chart, legend, legendOpts);\n\t\t\t\tlegend.options = legendOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t\t}\n\t\t} else if (legend) {\n\t\t\tcore_layouts.removeBox(chart, legend);\n\t\t\tdelete chart.legend;\n\t\t}\n\t},\n\n\tafterEvent: function(chart, e) {\n\t\tvar legend = chart.legend;\n\t\tif (legend) {\n\t\t\tlegend.handleEvent(e);\n\t\t}\n\t}\n};\n\nvar noop$2 = helpers$1.noop;\n\ncore_defaults._set('global', {\n\ttitle: {\n\t\tdisplay: false,\n\t\tfontStyle: 'bold',\n\t\tfullWidth: true,\n\t\tpadding: 10,\n\t\tposition: 'top',\n\t\ttext: '',\n\t\tweight: 2000         // by default greater than legend (1000) to be above\n\t}\n});\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Title = core_element.extend({\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\n\tbeforeUpdate: noop$2,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: noop$2,\n\n\t//\n\n\tbeforeSetDimensions: noop$2,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$2,\n\n\t//\n\n\tbeforeBuildLabels: noop$2,\n\tbuildLabels: noop$2,\n\tafterBuildLabels: noop$2,\n\n\t//\n\n\tbeforeFit: noop$2,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar minSize = me.minSize = {};\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar lineCount, textSize;\n\n\t\tif (!opts.display) {\n\t\t\tme.width = minSize.width = me.height = minSize.height = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tlineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\t\ttextSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;\n\n\t\tme.width = minSize.width = isHorizontal ? me.maxWidth : textSize;\n\t\tme.height = minSize.height = isHorizontal ? textSize : me.maxHeight;\n\t},\n\tafterFit: noop$2,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\n\t// Actually draw the title block on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\n\t\tif (!opts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\tvar lineHeight = fontOpts.lineHeight;\n\t\tvar offset = lineHeight / 2 + opts.padding;\n\t\tvar rotation = 0;\n\t\tvar top = me.top;\n\t\tvar left = me.left;\n\t\tvar bottom = me.bottom;\n\t\tvar right = me.right;\n\t\tvar maxWidth, titleX, titleY;\n\n\t\tctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\t\tctx.font = fontOpts.string;\n\n\t\t// Horizontal\n\t\tif (me.isHorizontal()) {\n\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\ttitleY = top + offset;\n\t\t\tmaxWidth = right - left;\n\t\t} else {\n\t\t\ttitleX = opts.position === 'left' ? left + offset : right - offset;\n\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\tmaxWidth = bottom - top;\n\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t}\n\n\t\tctx.save();\n\t\tctx.translate(titleX, titleY);\n\t\tctx.rotate(rotation);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\n\t\tvar text = opts.text;\n\t\tif (helpers$1.isArray(text)) {\n\t\t\tvar y = 0;\n\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\tctx.fillText(text[i], 0, y, maxWidth);\n\t\t\t\ty += lineHeight;\n\t\t\t}\n\t\t} else {\n\t\t\tctx.fillText(text, 0, 0, maxWidth);\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nfunction createNewTitleBlockAndAttach(chart, titleOpts) {\n\tvar title = new Title({\n\t\tctx: chart.ctx,\n\t\toptions: titleOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, title, titleOpts);\n\tcore_layouts.addBox(chart, title);\n\tchart.titleBlock = title;\n}\n\nvar plugin_title = {\n\tid: 'title',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n\t * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Title,\n\n\tbeforeInit: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\n\t\tif (titleOpts) {\n\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\t\tvar titleBlock = chart.titleBlock;\n\n\t\tif (titleOpts) {\n\t\t\thelpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n\t\t\tif (titleBlock) {\n\t\t\t\tcore_layouts.configure(chart, titleBlock, titleOpts);\n\t\t\t\ttitleBlock.options = titleOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t\t}\n\t\t} else if (titleBlock) {\n\t\t\tcore_layouts.removeBox(chart, titleBlock);\n\t\t\tdelete chart.titleBlock;\n\t\t}\n\t}\n};\n\nvar plugins = {};\nvar filler = plugin_filler;\nvar legend = plugin_legend;\nvar title = plugin_title;\nplugins.filler = filler;\nplugins.legend = legend;\nplugins.title = title;\n\n/**\n * @namespace Chart\n */\n\n\ncore_controller.helpers = helpers$1;\n\n// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\ncore_helpers();\n\ncore_controller._adapters = core_adapters;\ncore_controller.Animation = core_animation;\ncore_controller.animationService = core_animations;\ncore_controller.controllers = controllers;\ncore_controller.DatasetController = core_datasetController;\ncore_controller.defaults = core_defaults;\ncore_controller.Element = core_element;\ncore_controller.elements = elements;\ncore_controller.Interaction = core_interaction;\ncore_controller.layouts = core_layouts;\ncore_controller.platform = platform;\ncore_controller.plugins = core_plugins;\ncore_controller.Scale = core_scale;\ncore_controller.scaleService = core_scaleService;\ncore_controller.Ticks = core_ticks;\ncore_controller.Tooltip = core_tooltip;\n\n// Register built-in scales\n\ncore_controller.helpers.each(scales, function(scale, type) {\n\tcore_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n});\n\n// Load to register built-in adapters (as side effects)\n\n\n// Loading built-in plugins\n\nfor (var k in plugins) {\n\tif (plugins.hasOwnProperty(k)) {\n\t\tcore_controller.plugins.register(plugins[k]);\n\t}\n}\n\ncore_controller.platform.initialize();\n\nvar src = core_controller;\nif (typeof window !== 'undefined') {\n\twindow.Chart = core_controller;\n}\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Chart\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.Chart = core_controller;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Legend\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Legend = plugins.legend._element;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Title\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Title = plugins.title._element;\n\n/**\n * Provided for backward compatibility, use Chart.plugins instead\n * @namespace Chart.pluginService\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.pluginService = core_controller.plugins;\n\n/**\n * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n * effect, instead simply create/register plugins via plain JavaScript objects.\n * @interface Chart.PluginBase\n * @deprecated since version 2.5.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.PluginBase = core_controller.Element.extend({});\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas instead.\n * @namespace Chart.canvasHelpers\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.canvasHelpers = core_controller.helpers.canvas;\n\n/**\n * Provided for backward compatibility, use Chart.layouts instead.\n * @namespace Chart.layoutService\n * @deprecated since version 2.7.3\n * @todo remove at version 3\n * @private\n */\ncore_controller.layoutService = core_controller.layouts;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.LinearScaleBase\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\ncore_controller.LinearScaleBase = scale_linearbase;\n\n/**\n * Provided for backward compatibility, instead we should create a new Chart\n * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n */\ncore_controller.helpers.each(\n\t[\n\t\t'Bar',\n\t\t'Bubble',\n\t\t'Doughnut',\n\t\t'Line',\n\t\t'PolarArea',\n\t\t'Radar',\n\t\t'Scatter'\n\t],\n\tfunction(klass) {\n\t\tcore_controller[klass] = function(ctx, cfg) {\n\t\t\treturn new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n\t\t\t\ttype: klass.charAt(0).toLowerCase() + klass.slice(1)\n\t\t\t}));\n\t\t};\n\t}\n);\n\nreturn src;\n\n})));\n","; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {\n/*!\n * jQuery JavaScript Library v3.4.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2019-05-01T21:04Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.4.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code, options ) {\n\t\tDOMEval( code, { nonce: options && options.nonce } );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.4\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2019-04-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t(nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\") ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 && rdescend.test( selector ) ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = (elem.ownerDocument || elem).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( typeof elem.contentDocument !== \"undefined\" ) {\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\t// Support: Android <=4.1 - 4.3 only\n\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t// Support: IE 9-11 only\n\t// Also use offsetWidth/offsetHeight for when box sizing is unreliable\n\t// We use getClientRects() to check for hidden/disconnected.\n\t// In those cases, the computed value can be trusted to be border-box\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\t\tval === \"auto\" ||\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = Date.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url, options ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n\n; browserify_shim__define__module__export__(typeof jQuery != \"undefined\" ? jQuery : window.jQuery);\n\n}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });\n","//! moment.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            var args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays (ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        var weekdays = isArray(this._weekdays) ? this._weekdays :\n            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];\n        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)\n            : (m) ? weekdays[m.day()] : weekdays;\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000;\n    var MS_PER_MINUTE = 60 * MS_PER_SECOND;\n    var MS_PER_HOUR = 60 * MS_PER_MINUTE;\n    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return (dividend % divisor + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':   return months;\n                case 'quarter': return months / 3;\n                case 'year':    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asQuarters     = makeAs('Q');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asQuarters     = asQuarters;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.24.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","var $ = require('../../node_modules/jquery/dist/jquery')\r\nwindow.jQuery = $;\r\nwindow.$ = $;\r\nvar Chart = require('chart.js');\r\n\r\n$(function () {\r\n\r\n  window.chartColors = {\r\n    red: \"rgb(255, 99, 132)\",\r\n    orange: \"rgb(255, 159, 64)\",\r\n    yellow: \"rgb(255, 205, 86)\",\r\n    green: \"rgb(75, 192, 192)\",\r\n    blue: \"rgb(54, 162, 235)\",\r\n    purple: \"rgb(153, 102, 255)\",\r\n    grey: \"rgb(201, 203, 207)\"\r\n  };\r\n\r\n  var colorsToAssign = [\r\n    window.chartColors.blue,\r\n    window.chartColors.green,\r\n    window.chartColors.yellow,\r\n    window.chartColors.red\r\n  ]\r\n\r\n  if (summaryChartData) {\r\n\r\n    var summaryChartDatasetsWithColors = summaryChartData.datasets.map(\r\n      (d, i) => {\r\n        var d2 = { ...d }\r\n        d2.backgroundColor = colorsToAssign[i]\r\n        console.log(d2);\r\n        return d2\r\n      });\r\n    summaryChartData.datasets = summaryChartDatasetsWithColors;\r\n    console.log(summaryChartData)\r\n\r\n    var leaderboard = new Chart(\r\n      document.getElementById(\"FishFryLeaderboard\"), {\r\n      type: \"bar\",\r\n      data: summaryChartData,\r\n      options: {\r\n        title: {\r\n          display: false,\r\n        },\r\n        tooltips: {\r\n          mode: 'index',\r\n          intersect: false\r\n        },\r\n        responsive: true,\r\n        scales: {\r\n          xAxes: [{\r\n            stacked: true,\r\n          }],\r\n          yAxes: [{\r\n            stacked: true\r\n          }]\r\n        }\r\n      }\r\n    }\r\n    );\r\n  } else {\r\n    console.log(\"No stats\");\r\n    $('#LeaderBoardAlert').show();\r\n  }\r\n\r\n})"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy8ucmVnaXN0cnkubnBtanMub3JnL2Jyb3dzZXItcGFjay82LjEuMC9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwibm9kZV9tb2R1bGVzLy5yZWdpc3RyeS5ucG1qcy5vcmcvY2hhcnQuanMvMi45LjMvbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvQ2hhcnQuanMiLCJub2RlX21vZHVsZXMvLnJlZ2lzdHJ5Lm5wbWpzLm9yZy9qcXVlcnkvMy40LjEvbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJub2RlX21vZHVsZXMvLnJlZ2lzdHJ5Lm5wbWpzLm9yZy9tb21lbnQvMi4yNC4wL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwic3JjL2pzL2xlYWRlcmJvYXJkLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQ0FBOzs7Ozs7QUFNQyxXQUFVLE1BQVYsRUFBa0IsT0FBbEIsRUFBMkI7QUFDNUIsVUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsT0FBTyxNQUFQLEtBQWtCLFdBQWpELEdBQStELE1BQU0sQ0FBQyxPQUFQLEdBQWlCLE9BQU8sQ0FBQyxZQUFXO0FBQUUsUUFBSTtBQUFFLGFBQU8sT0FBTyxDQUFDLFFBQUQsQ0FBZDtBQUEyQixLQUFqQyxDQUFrQyxPQUFNLENBQU4sRUFBUyxDQUFHO0FBQUUsR0FBN0QsRUFBRCxDQUF2RixHQUNBLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxNQUFNLENBQUMsR0FBdkMsR0FBNkMsTUFBTSxDQUFDLENBQUMsU0FBRCxDQUFELEVBQWMsVUFBUyxPQUFULEVBQWtCO0FBQUUsV0FBTyxPQUFPLENBQUMsWUFBVztBQUFFLFVBQUk7QUFBRSxlQUFPLE9BQU8sQ0FBQyxRQUFELENBQWQ7QUFBMkIsT0FBakMsQ0FBa0MsT0FBTSxDQUFOLEVBQVMsQ0FB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QSxFQUFBLEtBQUssQ0FBQyxHQUFOLEdBQTBCLFNBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsU0FBTixHQUEwQixTQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLE9BQU4sR0FBMEIsT0FBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxRQUFOLEdBQTBCLFFBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsU0FBTixHQUEwQixTQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLE1BQU4sR0FBMEIsTUFBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxhQUFOLEdBQTBCLGFBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsY0FBTixHQUEwQixjQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLE9BQU4sR0FBMEIsU0FBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxJQUFOLEdBQTBCLElBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsTUFBTixHQUEwQixNQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLFVBQU4sR0FBMEIsVUFBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxHQUFOLEdBQTBCLFlBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsR0FBTixHQUEwQixZQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLFlBQU4sR0FBMEIsWUFBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxHQUFOLEdBQTBCLFNBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsT0FBTixHQUEwQixPQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLFFBQU4sR0FBMEIsUUFBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxPQUFOLEdBQTBCLE9BQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsUUFBTixHQUEwQixRQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLE1BQU4sR0FBMEIsTUFBMUI7QUFDQSxFQUFBLEtBQUssQ0FBQyxXQUFOLEdBQTBCLFdBQTFCO0FBQ0EsRUFBQSxLQUFLLENBQUMsT0FBTixHQUEwQixPQUExQjtBQUNBLEVBQUEsS0FBSyxDQUFDLE1BQU4sR0FBMEIsTUFBMUI7QUFDQSxFQUFBLEtBQUss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dCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKiFcbiAqIENoYXJ0LmpzIHYyLjkuM1xuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDE5IENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG50eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZnVuY3Rpb24oKSB7IHRyeSB7IHJldHVybiByZXF1aXJlKCdtb21lbnQnKTsgfSBjYXRjaChlKSB7IH0gfSgpKSA6XG50eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydyZXF1aXJlJ10sIGZ1bmN0aW9uKHJlcXVpcmUpIHsgcmV0dXJuIGZhY3RvcnkoZnVuY3Rpb24oKSB7IHRyeSB7IHJldHVybiByZXF1aXJlKCdtb21lbnQnKTsgfSBjYXRjaChlKSB7IH0gfSgpKTsgfSkgOlxuKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuQ2hhcnQgPSBmYWN0b3J5KGdsb2JhbC5tb21lbnQpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5tb21lbnQgPSBtb21lbnQgJiYgbW9tZW50Lmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBtb21lbnRbJ2RlZmF1bHQnXSA6IG1vbWVudDtcblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbmZ1bmN0aW9uIGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UgKG4pIHtcblx0cmV0dXJuIG4gJiYgblsnZGVmYXVsdCddIHx8IG47XG59XG5cbnZhciBjb2xvck5hbWUgPSB7XHJcblx0XCJhbGljZWJsdWVcIjogWzI0MCwgMjQ4LCAyNTVdLFxyXG5cdFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcclxuXHRcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImFxdWFtYXJpbmVcIjogWzEyNywgMjU1LCAyMTJdLFxyXG5cdFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxyXG5cdFwiYmVpZ2VcIjogWzI0NSwgMjQ1LCAyMjBdLFxyXG5cdFwiYmlzcXVlXCI6IFsyNTUsIDIyOCwgMTk2XSxcclxuXHRcImJsYWNrXCI6IFswLCAwLCAwXSxcclxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcclxuXHRcImJsdWVcIjogWzAsIDAsIDI1NV0sXHJcblx0XCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxyXG5cdFwiYnJvd25cIjogWzE2NSwgNDIsIDQyXSxcclxuXHRcImJ1cmx5d29vZFwiOiBbMjIyLCAxODQsIDEzNV0sXHJcblx0XCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXHJcblx0XCJjaGFydHJldXNlXCI6IFsxMjcsIDI1NSwgMF0sXHJcblx0XCJjaG9jb2xhdGVcIjogWzIxMCwgMTA1LCAzMF0sXHJcblx0XCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcclxuXHRcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcclxuXHRcImNvcm5zaWxrXCI6IFsyNTUsIDI0OCwgMjIwXSxcclxuXHRcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcclxuXHRcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImRhcmtibHVlXCI6IFswLCAwLCAxMzldLFxyXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcclxuXHRcImRhcmtnb2xkZW5yb2RcIjogWzE4NCwgMTM0LCAxMV0sXHJcblx0XCJkYXJrZ3JheVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXHJcblx0XCJkYXJrZ3JleVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxyXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcclxuXHRcImRhcmtvbGl2ZWdyZWVuXCI6IFs4NSwgMTA3LCA0N10sXHJcblx0XCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXHJcblx0XCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxyXG5cdFwiZGFya3JlZFwiOiBbMTM5LCAwLCAwXSxcclxuXHRcImRhcmtzYWxtb25cIjogWzIzMywgMTUwLCAxMjJdLFxyXG5cdFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcclxuXHRcImRhcmtzbGF0ZWJsdWVcIjogWzcyLCA2MSwgMTM5XSxcclxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrdHVycXVvaXNlXCI6IFswLCAyMDYsIDIwOV0sXHJcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXHJcblx0XCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcclxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEsIDI1NV0sXHJcblx0XCJkaW1ncmF5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcclxuXHRcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxyXG5cdFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxyXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0LCAxMzksIDM0XSxcclxuXHRcImZ1Y2hzaWFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXHJcblx0XCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcclxuXHRcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcclxuXHRcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcclxuXHRcImdyYXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXHJcblx0XCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcclxuXHRcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiaG9uZXlkZXdcIjogWzI0MCwgMjU1LCAyNDBdLFxyXG5cdFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXHJcblx0XCJpbmRpYW5yZWRcIjogWzIwNSwgOTIsIDkyXSxcclxuXHRcImluZGlnb1wiOiBbNzUsIDAsIDEzMF0sXHJcblx0XCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXHJcblx0XCJraGFraVwiOiBbMjQwLCAyMzAsIDE0MF0sXHJcblx0XCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXHJcblx0XCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcclxuXHRcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxyXG5cdFwibGVtb25jaGlmZm9uXCI6IFsyNTUsIDI1MCwgMjA1XSxcclxuXHRcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXHJcblx0XCJsaWdodGNvcmFsXCI6IFsyNDAsIDEyOCwgMTI4XSxcclxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXHJcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXHJcblx0XCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRncmVlblwiOiBbMTQ0LCAyMzgsIDE0NF0sXHJcblx0XCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRwaW5rXCI6IFsyNTUsIDE4MiwgMTkzXSxcclxuXHRcImxpZ2h0c2FsbW9uXCI6IFsyNTUsIDE2MCwgMTIyXSxcclxuXHRcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXHJcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxyXG5cdFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiwgMTk2LCAyMjJdLFxyXG5cdFwibGlnaHR5ZWxsb3dcIjogWzI1NSwgMjU1LCAyMjRdLFxyXG5cdFwibGltZVwiOiBbMCwgMjU1LCAwXSxcclxuXHRcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxyXG5cdFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxyXG5cdFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwibWFyb29uXCI6IFsxMjgsIDAsIDBdLFxyXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLCAyMDUsIDE3MF0sXHJcblx0XCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxyXG5cdFwibWVkaXVtb3JjaGlkXCI6IFsxODYsIDg1LCAyMTFdLFxyXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcsIDExMiwgMjE5XSxcclxuXHRcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxyXG5cdFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcclxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXHJcblx0XCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXHJcblx0XCJtZWRpdW12aW9sZXRyZWRcIjogWzE5OSwgMjEsIDEzM10sXHJcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1LCAyNSwgMTEyXSxcclxuXHRcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXHJcblx0XCJtaXN0eXJvc2VcIjogWzI1NSwgMjI4LCAyMjVdLFxyXG5cdFwibW9jY2FzaW5cIjogWzI1NSwgMjI4LCAxODFdLFxyXG5cdFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxyXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4XSxcclxuXHRcIm9sZGxhY2VcIjogWzI1MywgMjQ1LCAyMzBdLFxyXG5cdFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcclxuXHRcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcclxuXHRcIm9yYW5nZVwiOiBbMjU1LCAxNjUsIDBdLFxyXG5cdFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcclxuXHRcIm9yY2hpZFwiOiBbMjE4LCAxMTIsIDIxNF0sXHJcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcclxuXHRcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXHJcblx0XCJwYWxldHVycXVvaXNlXCI6IFsxNzUsIDIzOCwgMjM4XSxcclxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwgMTEyLCAxNDddLFxyXG5cdFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXHJcblx0XCJwZWFjaHB1ZmZcIjogWzI1NSwgMjE4LCAxODVdLFxyXG5cdFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcclxuXHRcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxyXG5cdFwicGx1bVwiOiBbMjIxLCAxNjAsIDIyMV0sXHJcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcclxuXHRcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxyXG5cdFwicmViZWNjYXB1cnBsZVwiOiBbMTAyLCA1MSwgMTUzXSxcclxuXHRcInJlZFwiOiBbMjU1LCAwLCAwXSxcclxuXHRcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXHJcblx0XCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXHJcblx0XCJzYWRkbGVicm93blwiOiBbMTM5LCA2OSwgMTldLFxyXG5cdFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcclxuXHRcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXHJcblx0XCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxyXG5cdFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxyXG5cdFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXHJcblx0XCJzaWx2ZXJcIjogWzE5MiwgMTkyLCAxOTJdLFxyXG5cdFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXHJcblx0XCJzbGF0ZWJsdWVcIjogWzEwNiwgOTAsIDIwNV0sXHJcblx0XCJzbGF0ZWdyYXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNub3dcIjogWzI1NSwgMjUwLCAyNTBdLFxyXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcclxuXHRcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcclxuXHRcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXHJcblx0XCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXHJcblx0XCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcclxuXHRcInRvbWF0b1wiOiBbMjU1LCA5OSwgNzFdLFxyXG5cdFwidHVycXVvaXNlXCI6IFs2NCwgMjI0LCAyMDhdLFxyXG5cdFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcclxuXHRcIndoZWF0XCI6IFsyNDUsIDIyMiwgMTc5XSxcclxuXHRcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XSxcclxuXHRcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxyXG5cdFwieWVsbG93XCI6IFsyNTUsIDI1NSwgMF0sXHJcblx0XCJ5ZWxsb3dncmVlblwiOiBbMTU0LCAyMDUsIDUwXVxyXG59O1xuXG52YXIgY29udmVyc2lvbnMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG4vKiBNSVQgbGljZW5zZSAqL1xuXG5cbi8vIE5PVEU6IGNvbnZlcnNpb25zIHNob3VsZCBvbmx5IHJldHVybiBwcmltaXRpdmUgdmFsdWVzIChpLmUuIGFycmF5cywgb3Jcbi8vICAgICAgIHZhbHVlcyB0aGF0IGdpdmUgY29ycmVjdCBgdHlwZW9mYCByZXN1bHRzKS5cbi8vICAgICAgIGRvIG5vdCB1c2UgYm94IHZhbHVlcyB0eXBlcyAoaS5lLiBOdW1iZXIoKSwgU3RyaW5nKCksIGV0Yy4pXG5cbnZhciByZXZlcnNlS2V5d29yZHMgPSB7fTtcbmZvciAodmFyIGtleSBpbiBjb2xvck5hbWUpIHtcblx0aWYgKGNvbG9yTmFtZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0cmV2ZXJzZUtleXdvcmRzW2NvbG9yTmFtZVtrZXldXSA9IGtleTtcblx0fVxufVxuXG52YXIgY29udmVydCA9IG1vZHVsZS5leHBvcnRzID0ge1xuXHRyZ2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAncmdiJ30sXG5cdGhzbDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc2wnfSxcblx0aHN2OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2hzdid9LFxuXHRod2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHdiJ30sXG5cdGNteWs6IHtjaGFubmVsczogNCwgbGFiZWxzOiAnY215ayd9LFxuXHR4eXo6IHtjaGFubmVsczogMywgbGFiZWxzOiAneHl6J30sXG5cdGxhYjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsYWInfSxcblx0bGNoOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2xjaCd9LFxuXHRoZXg6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2hleCddfSxcblx0a2V5d29yZDoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsna2V5d29yZCddfSxcblx0YW5zaTE2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMTYnXX0sXG5cdGFuc2kyNTY6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2Fuc2kyNTYnXX0sXG5cdGhjZzoge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsnaCcsICdjJywgJ2cnXX0sXG5cdGFwcGxlOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogWydyMTYnLCAnZzE2JywgJ2IxNiddfSxcblx0Z3JheToge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnZ3JheSddfVxufTtcblxuLy8gaGlkZSAuY2hhbm5lbHMgYW5kIC5sYWJlbHMgcHJvcGVydGllc1xuZm9yICh2YXIgbW9kZWwgaW4gY29udmVydCkge1xuXHRpZiAoY29udmVydC5oYXNPd25Qcm9wZXJ0eShtb2RlbCkpIHtcblx0XHRpZiAoISgnY2hhbm5lbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdGlmICghKCdsYWJlbHMnIGluIGNvbnZlcnRbbW9kZWxdKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWwgbGFiZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHRcdH1cblxuXHRcdGlmIChjb252ZXJ0W21vZGVsXS5sYWJlbHMubGVuZ3RoICE9PSBjb252ZXJ0W21vZGVsXS5jaGFubmVscykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdjaGFubmVsIGFuZCBsYWJlbCBjb3VudHMgbWlzbWF0Y2g6ICcgKyBtb2RlbCk7XG5cdFx0fVxuXG5cdFx0dmFyIGNoYW5uZWxzID0gY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cdFx0dmFyIGxhYmVscyA9IGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0XHRkZWxldGUgY29udmVydFttb2RlbF0uY2hhbm5lbHM7XG5cdFx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmxhYmVscztcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFttb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY2hhbm5lbHN9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFttb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGxhYmVsc30pO1xuXHR9XG59XG5cbmNvbnZlcnQucmdiLmhzbCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuXHR2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cdHZhciBkZWx0YSA9IG1heCAtIG1pbjtcblx0dmFyIGg7XG5cdHZhciBzO1xuXHR2YXIgbDtcblxuXHRpZiAobWF4ID09PSBtaW4pIHtcblx0XHRoID0gMDtcblx0fSBlbHNlIGlmIChyID09PSBtYXgpIHtcblx0XHRoID0gKGcgLSBiKSAvIGRlbHRhO1xuXHR9IGVsc2UgaWYgKGcgPT09IG1heCkge1xuXHRcdGggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xuXHR9IGVsc2UgaWYgKGIgPT09IG1heCkge1xuXHRcdGggPSA0ICsgKHIgLSBnKSAvIGRlbHRhO1xuXHR9XG5cblx0aCA9IE1hdGgubWluKGggKiA2MCwgMzYwKTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGwgPSAobWluICsgbWF4KSAvIDI7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0cyA9IDA7XG5cdH0gZWxzZSBpZiAobCA8PSAwLjUpIHtcblx0XHRzID0gZGVsdGEgLyAobWF4ICsgbWluKTtcblx0fSBlbHNlIHtcblx0XHRzID0gZGVsdGEgLyAoMiAtIG1heCAtIG1pbik7XG5cdH1cblxuXHRyZXR1cm4gW2gsIHMgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IuaHN2ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgcmRpZjtcblx0dmFyIGdkaWY7XG5cdHZhciBiZGlmO1xuXHR2YXIgaDtcblx0dmFyIHM7XG5cblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIHYgPSBNYXRoLm1heChyLCBnLCBiKTtcblx0dmFyIGRpZmYgPSB2IC0gTWF0aC5taW4ociwgZywgYik7XG5cdHZhciBkaWZmYyA9IGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICh2IC0gYykgLyA2IC8gZGlmZiArIDEgLyAyO1xuXHR9O1xuXG5cdGlmIChkaWZmID09PSAwKSB7XG5cdFx0aCA9IHMgPSAwO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkaWZmIC8gdjtcblx0XHRyZGlmID0gZGlmZmMocik7XG5cdFx0Z2RpZiA9IGRpZmZjKGcpO1xuXHRcdGJkaWYgPSBkaWZmYyhiKTtcblxuXHRcdGlmIChyID09PSB2KSB7XG5cdFx0XHRoID0gYmRpZiAtIGdkaWY7XG5cdFx0fSBlbHNlIGlmIChnID09PSB2KSB7XG5cdFx0XHRoID0gKDEgLyAzKSArIHJkaWYgLSBiZGlmO1xuXHRcdH0gZWxzZSBpZiAoYiA9PT0gdikge1xuXHRcdFx0aCA9ICgyIC8gMykgKyBnZGlmIC0gcmRpZjtcblx0XHR9XG5cdFx0aWYgKGggPCAwKSB7XG5cdFx0XHRoICs9IDE7XG5cdFx0fSBlbHNlIGlmIChoID4gMSkge1xuXHRcdFx0aCAtPSAxO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBbXG5cdFx0aCAqIDM2MCxcblx0XHRzICogMTAwLFxuXHRcdHYgKiAxMDBcblx0XTtcbn07XG5cbmNvbnZlcnQucmdiLmh3YiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF07XG5cdHZhciBnID0gcmdiWzFdO1xuXHR2YXIgYiA9IHJnYlsyXTtcblx0dmFyIGggPSBjb252ZXJ0LnJnYi5oc2wocmdiKVswXTtcblx0dmFyIHcgPSAxIC8gMjU1ICogTWF0aC5taW4ociwgTWF0aC5taW4oZywgYikpO1xuXG5cdGIgPSAxIC0gMSAvIDI1NSAqIE1hdGgubWF4KHIsIE1hdGgubWF4KGcsIGIpKTtcblxuXHRyZXR1cm4gW2gsIHcgKiAxMDAsIGIgKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IuY215ayA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHIgPSByZ2JbMF0gLyAyNTU7XG5cdHZhciBnID0gcmdiWzFdIC8gMjU1O1xuXHR2YXIgYiA9IHJnYlsyXSAvIDI1NTtcblx0dmFyIGM7XG5cdHZhciBtO1xuXHR2YXIgeTtcblx0dmFyIGs7XG5cblx0ayA9IE1hdGgubWluKDEgLSByLCAxIC0gZywgMSAtIGIpO1xuXHRjID0gKDEgLSByIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdG0gPSAoMSAtIGcgLSBrKSAvICgxIC0gaykgfHwgMDtcblx0eSA9ICgxIC0gYiAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXG5cdHJldHVybiBbYyAqIDEwMCwgbSAqIDEwMCwgeSAqIDEwMCwgayAqIDEwMF07XG59O1xuXG4vKipcbiAqIFNlZSBodHRwczovL2VuLm0ud2lraXBlZGlhLm9yZy93aWtpL0V1Y2xpZGVhbl9kaXN0YW5jZSNTcXVhcmVkX0V1Y2xpZGVhbl9kaXN0YW5jZVxuICogKi9cbmZ1bmN0aW9uIGNvbXBhcmF0aXZlRGlzdGFuY2UoeCwgeSkge1xuXHRyZXR1cm4gKFxuXHRcdE1hdGgucG93KHhbMF0gLSB5WzBdLCAyKSArXG5cdFx0TWF0aC5wb3coeFsxXSAtIHlbMV0sIDIpICtcblx0XHRNYXRoLnBvdyh4WzJdIC0geVsyXSwgMilcblx0KTtcbn1cblxuY29udmVydC5yZ2Iua2V5d29yZCA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHJldmVyc2VkID0gcmV2ZXJzZUtleXdvcmRzW3JnYl07XG5cdGlmIChyZXZlcnNlZCkge1xuXHRcdHJldHVybiByZXZlcnNlZDtcblx0fVxuXG5cdHZhciBjdXJyZW50Q2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG5cdHZhciBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG5cblx0Zm9yICh2YXIga2V5d29yZCBpbiBjb2xvck5hbWUpIHtcblx0XHRpZiAoY29sb3JOYW1lLmhhc093blByb3BlcnR5KGtleXdvcmQpKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBjb2xvck5hbWVba2V5d29yZF07XG5cblx0XHRcdC8vIENvbXB1dGUgY29tcGFyYXRpdmUgZGlzdGFuY2Vcblx0XHRcdHZhciBkaXN0YW5jZSA9IGNvbXBhcmF0aXZlRGlzdGFuY2UocmdiLCB2YWx1ZSk7XG5cblx0XHRcdC8vIENoZWNrIGlmIGl0cyBsZXNzLCBpZiBzbyBzZXQgYXMgY2xvc2VzdFxuXHRcdFx0aWYgKGRpc3RhbmNlIDwgY3VycmVudENsb3Nlc3REaXN0YW5jZSkge1xuXHRcdFx0XHRjdXJyZW50Q2xvc2VzdERpc3RhbmNlID0gZGlzdGFuY2U7XG5cdFx0XHRcdGN1cnJlbnRDbG9zZXN0S2V5d29yZCA9IGtleXdvcmQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGN1cnJlbnRDbG9zZXN0S2V5d29yZDtcbn07XG5cbmNvbnZlcnQua2V5d29yZC5yZ2IgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHRyZXR1cm4gY29sb3JOYW1lW2tleXdvcmRdO1xufTtcblxuY29udmVydC5yZ2IueHl6ID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgciA9IHJnYlswXSAvIDI1NTtcblx0dmFyIGcgPSByZ2JbMV0gLyAyNTU7XG5cdHZhciBiID0gcmdiWzJdIC8gMjU1O1xuXG5cdC8vIGFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wNDA0NSA/IE1hdGgucG93KCgociArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChyIC8gMTIuOTIpO1xuXHRnID0gZyA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKGcgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAoZyAvIDEyLjkyKTtcblx0YiA9IGIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChiICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGIgLyAxMi45Mik7XG5cblx0dmFyIHggPSAociAqIDAuNDEyNCkgKyAoZyAqIDAuMzU3NikgKyAoYiAqIDAuMTgwNSk7XG5cdHZhciB5ID0gKHIgKiAwLjIxMjYpICsgKGcgKiAwLjcxNTIpICsgKGIgKiAwLjA3MjIpO1xuXHR2YXIgeiA9IChyICogMC4wMTkzKSArIChnICogMC4xMTkyKSArIChiICogMC45NTA1KTtcblxuXHRyZXR1cm4gW3ggKiAxMDAsIHkgKiAxMDAsIHogKiAxMDBdO1xufTtcblxuY29udmVydC5yZ2IubGFiID0gZnVuY3Rpb24gKHJnYikge1xuXHR2YXIgeHl6ID0gY29udmVydC5yZ2IueHl6KHJnYik7XG5cdHZhciB4ID0geHl6WzBdO1xuXHR2YXIgeSA9IHh5elsxXTtcblx0dmFyIHogPSB4eXpbMl07XG5cdHZhciBsO1xuXHR2YXIgYTtcblx0dmFyIGI7XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/IE1hdGgucG93KHgsIDEgLyAzKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcblx0eSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEgLyAzKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcblx0eiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEgLyAzKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRsID0gKDExNiAqIHkpIC0gMTY7XG5cdGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5oc2wucmdiID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXSAvIDM2MDtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgdDE7XG5cdHZhciB0Mjtcblx0dmFyIHQzO1xuXHR2YXIgcmdiO1xuXHR2YXIgdmFsO1xuXG5cdGlmIChzID09PSAwKSB7XG5cdFx0dmFsID0gbCAqIDI1NTtcblx0XHRyZXR1cm4gW3ZhbCwgdmFsLCB2YWxdO1xuXHR9XG5cblx0aWYgKGwgPCAwLjUpIHtcblx0XHR0MiA9IGwgKiAoMSArIHMpO1xuXHR9IGVsc2Uge1xuXHRcdHQyID0gbCArIHMgLSBsICogcztcblx0fVxuXG5cdHQxID0gMiAqIGwgLSB0MjtcblxuXHRyZ2IgPSBbMCwgMCwgMF07XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0dDMgPSBoICsgMSAvIDMgKiAtKGkgLSAxKTtcblx0XHRpZiAodDMgPCAwKSB7XG5cdFx0XHR0MysrO1xuXHRcdH1cblx0XHRpZiAodDMgPiAxKSB7XG5cdFx0XHR0My0tO1xuXHRcdH1cblxuXHRcdGlmICg2ICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0Mztcblx0XHR9IGVsc2UgaWYgKDIgKiB0MyA8IDEpIHtcblx0XHRcdHZhbCA9IHQyO1xuXHRcdH0gZWxzZSBpZiAoMyAqIHQzIDwgMikge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSB0MTtcblx0XHR9XG5cblx0XHRyZ2JbaV0gPSB2YWwgKiAyNTU7XG5cdH1cblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY29udmVydC5oc2wuaHN2ID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgaCA9IGhzbFswXTtcblx0dmFyIHMgPSBoc2xbMV0gLyAxMDA7XG5cdHZhciBsID0gaHNsWzJdIC8gMTAwO1xuXHR2YXIgc21pbiA9IHM7XG5cdHZhciBsbWluID0gTWF0aC5tYXgobCwgMC4wMSk7XG5cdHZhciBzdjtcblx0dmFyIHY7XG5cblx0bCAqPSAyO1xuXHRzICo9IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuXHRzbWluICo9IGxtaW4gPD0gMSA/IGxtaW4gOiAyIC0gbG1pbjtcblx0diA9IChsICsgcykgLyAyO1xuXHRzdiA9IGwgPT09IDAgPyAoMiAqIHNtaW4pIC8gKGxtaW4gKyBzbWluKSA6ICgyICogcykgLyAobCArIHMpO1xuXG5cdHJldHVybiBbaCwgc3YgKiAxMDAsIHYgKiAxMDBdO1xufTtcblxuY29udmVydC5oc3YucmdiID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXSAvIDYwO1xuXHR2YXIgcyA9IGhzdlsxXSAvIDEwMDtcblx0dmFyIHYgPSBoc3ZbMl0gLyAxMDA7XG5cdHZhciBoaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG5cdHZhciBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG5cdHZhciBwID0gMjU1ICogdiAqICgxIC0gcyk7XG5cdHZhciBxID0gMjU1ICogdiAqICgxIC0gKHMgKiBmKSk7XG5cdHZhciB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSk7XG5cdHYgKj0gMjU1O1xuXG5cdHN3aXRjaCAoaGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZXR1cm4gW3YsIHQsIHBdO1xuXHRcdGNhc2UgMTpcblx0XHRcdHJldHVybiBbcSwgdiwgcF07XG5cdFx0Y2FzZSAyOlxuXHRcdFx0cmV0dXJuIFtwLCB2LCB0XTtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gW3AsIHEsIHZdO1xuXHRcdGNhc2UgNDpcblx0XHRcdHJldHVybiBbdCwgcCwgdl07XG5cdFx0Y2FzZSA1OlxuXHRcdFx0cmV0dXJuIFt2LCBwLCBxXTtcblx0fVxufTtcblxuY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24gKGhzdikge1xuXHR2YXIgaCA9IGhzdlswXTtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXHR2YXIgdm1pbiA9IE1hdGgubWF4KHYsIDAuMDEpO1xuXHR2YXIgbG1pbjtcblx0dmFyIHNsO1xuXHR2YXIgbDtcblxuXHRsID0gKDIgLSBzKSAqIHY7XG5cdGxtaW4gPSAoMiAtIHMpICogdm1pbjtcblx0c2wgPSBzICogdm1pbjtcblx0c2wgLz0gKGxtaW4gPD0gMSkgPyBsbWluIDogMiAtIGxtaW47XG5cdHNsID0gc2wgfHwgMDtcblx0bCAvPSAyO1xuXG5cdHJldHVybiBbaCwgc2wgKiAxMDAsIGwgKiAxMDBdO1xufTtcblxuLy8gaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3NzLWNvbG9yLyNod2ItdG8tcmdiXG5jb252ZXJ0Lmh3Yi5yZ2IgPSBmdW5jdGlvbiAoaHdiKSB7XG5cdHZhciBoID0gaHdiWzBdIC8gMzYwO1xuXHR2YXIgd2ggPSBod2JbMV0gLyAxMDA7XG5cdHZhciBibCA9IGh3YlsyXSAvIDEwMDtcblx0dmFyIHJhdGlvID0gd2ggKyBibDtcblx0dmFyIGk7XG5cdHZhciB2O1xuXHR2YXIgZjtcblx0dmFyIG47XG5cblx0Ly8gd2ggKyBibCBjYW50IGJlID4gMVxuXHRpZiAocmF0aW8gPiAxKSB7XG5cdFx0d2ggLz0gcmF0aW87XG5cdFx0YmwgLz0gcmF0aW87XG5cdH1cblxuXHRpID0gTWF0aC5mbG9vcig2ICogaCk7XG5cdHYgPSAxIC0gYmw7XG5cdGYgPSA2ICogaCAtIGk7XG5cblx0aWYgKChpICYgMHgwMSkgIT09IDApIHtcblx0XHRmID0gMSAtIGY7XG5cdH1cblxuXHRuID0gd2ggKyBmICogKHYgLSB3aCk7IC8vIGxpbmVhciBpbnRlcnBvbGF0aW9uXG5cblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblx0c3dpdGNoIChpKSB7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIDY6XG5cdFx0Y2FzZSAwOiByID0gdjsgZyA9IG47IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAxOiByID0gbjsgZyA9IHY7IGIgPSB3aDsgYnJlYWs7XG5cdFx0Y2FzZSAyOiByID0gd2g7IGcgPSB2OyBiID0gbjsgYnJlYWs7XG5cdFx0Y2FzZSAzOiByID0gd2g7IGcgPSBuOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA0OiByID0gbjsgZyA9IHdoOyBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA1OiByID0gdjsgZyA9IHdoOyBiID0gbjsgYnJlYWs7XG5cdH1cblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC5jbXlrLnJnYiA9IGZ1bmN0aW9uIChjbXlrKSB7XG5cdHZhciBjID0gY215a1swXSAvIDEwMDtcblx0dmFyIG0gPSBjbXlrWzFdIC8gMTAwO1xuXHR2YXIgeSA9IGNteWtbMl0gLyAxMDA7XG5cdHZhciBrID0gY215a1szXSAvIDEwMDtcblx0dmFyIHI7XG5cdHZhciBnO1xuXHR2YXIgYjtcblxuXHRyID0gMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgayk7XG5cdGcgPSAxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKTtcblx0YiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0Lnh5ei5yZ2IgPSBmdW5jdGlvbiAoeHl6KSB7XG5cdHZhciB4ID0geHl6WzBdIC8gMTAwO1xuXHR2YXIgeSA9IHh5elsxXSAvIDEwMDtcblx0dmFyIHogPSB4eXpbMl0gLyAxMDA7XG5cdHZhciByO1xuXHR2YXIgZztcblx0dmFyIGI7XG5cblx0ciA9ICh4ICogMy4yNDA2KSArICh5ICogLTEuNTM3MikgKyAoeiAqIC0wLjQ5ODYpO1xuXHRnID0gKHggKiAtMC45Njg5KSArICh5ICogMS44NzU4KSArICh6ICogMC4wNDE1KTtcblx0YiA9ICh4ICogMC4wNTU3KSArICh5ICogLTAuMjA0MCkgKyAoeiAqIDEuMDU3MCk7XG5cblx0Ly8gYXNzdW1lIHNSR0Jcblx0ciA9IHIgPiAwLjAwMzEzMDhcblx0XHQ/ICgoMS4wNTUgKiBNYXRoLnBvdyhyLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuXHRcdDogciAqIDEyLjkyO1xuXG5cdGcgPSBnID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogTWF0aC5wb3coZywgMS4wIC8gMi40KSkgLSAwLjA1NSlcblx0XHQ6IGcgKiAxMi45MjtcblxuXHRiID0gYiA+IDAuMDAzMTMwOFxuXHRcdD8gKCgxLjA1NSAqIE1hdGgucG93KGIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG5cdFx0OiBiICogMTIuOTI7XG5cblx0ciA9IE1hdGgubWluKE1hdGgubWF4KDAsIHIpLCAxKTtcblx0ZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcblx0YiA9IE1hdGgubWluKE1hdGgubWF4KDAsIGIpLCAxKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoubGFiID0gZnVuY3Rpb24gKHh5eikge1xuXHR2YXIgeCA9IHh5elswXTtcblx0dmFyIHkgPSB4eXpbMV07XG5cdHZhciB6ID0geHl6WzJdO1xuXHR2YXIgbDtcblx0dmFyIGE7XG5cdHZhciBiO1xuXG5cdHggLz0gOTUuMDQ3O1xuXHR5IC89IDEwMDtcblx0eiAvPSAxMDguODgzO1xuXG5cdHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxIC8gMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxIC8gMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxIC8gMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cblx0bCA9ICgxMTYgKiB5KSAtIDE2O1xuXHRhID0gNTAwICogKHggLSB5KTtcblx0YiA9IDIwMCAqICh5IC0geik7XG5cblx0cmV0dXJuIFtsLCBhLCBiXTtcbn07XG5cbmNvbnZlcnQubGFiLnh5eiA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIHg7XG5cdHZhciB5O1xuXHR2YXIgejtcblxuXHR5ID0gKGwgKyAxNikgLyAxMTY7XG5cdHggPSBhIC8gNTAwICsgeTtcblx0eiA9IHkgLSBiIC8gMjAwO1xuXG5cdHZhciB5MiA9IE1hdGgucG93KHksIDMpO1xuXHR2YXIgeDIgPSBNYXRoLnBvdyh4LCAzKTtcblx0dmFyIHoyID0gTWF0aC5wb3coeiwgMyk7XG5cdHkgPSB5MiA+IDAuMDA4ODU2ID8geTIgOiAoeSAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXHR4ID0geDIgPiAwLjAwODg1NiA/IHgyIDogKHggLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eiA9IHoyID4gMC4wMDg4NTYgPyB6MiA6ICh6IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cblx0eCAqPSA5NS4wNDc7XG5cdHkgKj0gMTAwO1xuXHR6ICo9IDEwOC44ODM7XG5cblx0cmV0dXJuIFt4LCB5LCB6XTtcbn07XG5cbmNvbnZlcnQubGFiLmxjaCA9IGZ1bmN0aW9uIChsYWIpIHtcblx0dmFyIGwgPSBsYWJbMF07XG5cdHZhciBhID0gbGFiWzFdO1xuXHR2YXIgYiA9IGxhYlsyXTtcblx0dmFyIGhyO1xuXHR2YXIgaDtcblx0dmFyIGM7XG5cblx0aHIgPSBNYXRoLmF0YW4yKGIsIGEpO1xuXHRoID0gaHIgKiAzNjAgLyAyIC8gTWF0aC5QSTtcblxuXHRpZiAoaCA8IDApIHtcblx0XHRoICs9IDM2MDtcblx0fVxuXG5cdGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG5cblx0cmV0dXJuIFtsLCBjLCBoXTtcbn07XG5cbmNvbnZlcnQubGNoLmxhYiA9IGZ1bmN0aW9uIChsY2gpIHtcblx0dmFyIGwgPSBsY2hbMF07XG5cdHZhciBjID0gbGNoWzFdO1xuXHR2YXIgaCA9IGxjaFsyXTtcblx0dmFyIGE7XG5cdHZhciBiO1xuXHR2YXIgaHI7XG5cblx0aHIgPSBoIC8gMzYwICogMiAqIE1hdGguUEk7XG5cdGEgPSBjICogTWF0aC5jb3MoaHIpO1xuXHRiID0gYyAqIE1hdGguc2luKGhyKTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblx0dmFyIHZhbHVlID0gMSBpbiBhcmd1bWVudHMgPyBhcmd1bWVudHNbMV0gOiBjb252ZXJ0LnJnYi5oc3YoYXJncylbMl07IC8vIGhzdiAtPiBhbnNpMTYgb3B0aW1pemF0aW9uXG5cblx0dmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gNTApO1xuXG5cdGlmICh2YWx1ZSA9PT0gMCkge1xuXHRcdHJldHVybiAzMDtcblx0fVxuXG5cdHZhciBhbnNpID0gMzBcblx0XHQrICgoTWF0aC5yb3VuZChiIC8gMjU1KSA8PCAyKVxuXHRcdHwgKE1hdGgucm91bmQoZyAvIDI1NSkgPDwgMSlcblx0XHR8IE1hdGgucm91bmQociAvIDI1NSkpO1xuXG5cdGlmICh2YWx1ZSA9PT0gMikge1xuXHRcdGFuc2kgKz0gNjA7XG5cdH1cblxuXHRyZXR1cm4gYW5zaTtcbn07XG5cbmNvbnZlcnQuaHN2LmFuc2kxNiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdC8vIG9wdGltaXphdGlvbiBoZXJlOyB3ZSBhbHJlYWR5IGtub3cgdGhlIHZhbHVlIGFuZCBkb24ndCBuZWVkIHRvIGdldFxuXHQvLyBpdCBjb252ZXJ0ZWQgZm9yIHVzLlxuXHRyZXR1cm4gY29udmVydC5yZ2IuYW5zaTE2KGNvbnZlcnQuaHN2LnJnYihhcmdzKSwgYXJnc1syXSk7XG59O1xuXG5jb252ZXJ0LnJnYi5hbnNpMjU2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIHIgPSBhcmdzWzBdO1xuXHR2YXIgZyA9IGFyZ3NbMV07XG5cdHZhciBiID0gYXJnc1syXTtcblxuXHQvLyB3ZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuXHQvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy5cblx0aWYgKHIgPT09IGcgJiYgZyA9PT0gYikge1xuXHRcdGlmIChyIDwgOCkge1xuXHRcdFx0cmV0dXJuIDE2O1xuXHRcdH1cblxuXHRcdGlmIChyID4gMjQ4KSB7XG5cdFx0XHRyZXR1cm4gMjMxO1xuXHRcdH1cblxuXHRcdHJldHVybiBNYXRoLnJvdW5kKCgociAtIDgpIC8gMjQ3KSAqIDI0KSArIDIzMjtcblx0fVxuXG5cdHZhciBhbnNpID0gMTZcblx0XHQrICgzNiAqIE1hdGgucm91bmQociAvIDI1NSAqIDUpKVxuXHRcdCsgKDYgKiBNYXRoLnJvdW5kKGcgLyAyNTUgKiA1KSlcblx0XHQrIE1hdGgucm91bmQoYiAvIDI1NSAqIDUpO1xuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0dmFyIGNvbG9yID0gYXJncyAlIDEwO1xuXG5cdC8vIGhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG5cdFx0aWYgKGFyZ3MgPiA1MCkge1xuXHRcdFx0Y29sb3IgKz0gMy41O1xuXHRcdH1cblxuXHRcdGNvbG9yID0gY29sb3IgLyAxMC41ICogMjU1O1xuXG5cdFx0cmV0dXJuIFtjb2xvciwgY29sb3IsIGNvbG9yXTtcblx0fVxuXG5cdHZhciBtdWx0ID0gKH5+KGFyZ3MgPiA1MCkgKyAxKSAqIDAuNTtcblx0dmFyIHIgPSAoKGNvbG9yICYgMSkgKiBtdWx0KSAqIDI1NTtcblx0dmFyIGcgPSAoKChjb2xvciA+PiAxKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cdHZhciBiID0gKCgoY29sb3IgPj4gMikgJiAxKSAqIG11bHQpICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LmFuc2kyNTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Ly8gaGFuZGxlIGdyZXlzY2FsZVxuXHRpZiAoYXJncyA+PSAyMzIpIHtcblx0XHR2YXIgYyA9IChhcmdzIC0gMjMyKSAqIDEwICsgODtcblx0XHRyZXR1cm4gW2MsIGMsIGNdO1xuXHR9XG5cblx0YXJncyAtPSAxNjtcblxuXHR2YXIgcmVtO1xuXHR2YXIgciA9IE1hdGguZmxvb3IoYXJncyAvIDM2KSAvIDUgKiAyNTU7XG5cdHZhciBnID0gTWF0aC5mbG9vcigocmVtID0gYXJncyAlIDM2KSAvIDYpIC8gNSAqIDI1NTtcblx0dmFyIGIgPSAocmVtICUgNikgLyA1ICogMjU1O1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oZXggPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgaW50ZWdlciA9ICgoTWF0aC5yb3VuZChhcmdzWzBdKSAmIDB4RkYpIDw8IDE2KVxuXHRcdCsgKChNYXRoLnJvdW5kKGFyZ3NbMV0pICYgMHhGRikgPDwgOClcblx0XHQrIChNYXRoLnJvdW5kKGFyZ3NbMl0pICYgMHhGRik7XG5cblx0dmFyIHN0cmluZyA9IGludGVnZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cdHJldHVybiAnMDAwMDAwJy5zdWJzdHJpbmcoc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59O1xuXG5jb252ZXJ0LmhleC5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHR2YXIgbWF0Y2ggPSBhcmdzLnRvU3RyaW5nKDE2KS5tYXRjaCgvW2EtZjAtOV17Nn18W2EtZjAtOV17M30vaSk7XG5cdGlmICghbWF0Y2gpIHtcblx0XHRyZXR1cm4gWzAsIDAsIDBdO1xuXHR9XG5cblx0dmFyIGNvbG9yU3RyaW5nID0gbWF0Y2hbMF07XG5cblx0aWYgKG1hdGNoWzBdLmxlbmd0aCA9PT0gMykge1xuXHRcdGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAoY2hhcikge1xuXHRcdFx0cmV0dXJuIGNoYXIgKyBjaGFyO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGludGVnZXIgPSBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuXHR2YXIgciA9IChpbnRlZ2VyID4+IDE2KSAmIDB4RkY7XG5cdHZhciBnID0gKGludGVnZXIgPj4gOCkgJiAweEZGO1xuXHR2YXIgYiA9IGludGVnZXIgJiAweEZGO1xuXG5cdHJldHVybiBbciwgZywgYl07XG59O1xuXG5jb252ZXJ0LnJnYi5oY2cgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHZhciByID0gcmdiWzBdIC8gMjU1O1xuXHR2YXIgZyA9IHJnYlsxXSAvIDI1NTtcblx0dmFyIGIgPSByZ2JbMl0gLyAyNTU7XG5cdHZhciBtYXggPSBNYXRoLm1heChNYXRoLm1heChyLCBnKSwgYik7XG5cdHZhciBtaW4gPSBNYXRoLm1pbihNYXRoLm1pbihyLCBnKSwgYik7XG5cdHZhciBjaHJvbWEgPSAobWF4IC0gbWluKTtcblx0dmFyIGdyYXlzY2FsZTtcblx0dmFyIGh1ZTtcblxuXHRpZiAoY2hyb21hIDwgMSkge1xuXHRcdGdyYXlzY2FsZSA9IG1pbiAvICgxIC0gY2hyb21hKTtcblx0fSBlbHNlIHtcblx0XHRncmF5c2NhbGUgPSAwO1xuXHR9XG5cblx0aWYgKGNocm9tYSA8PSAwKSB7XG5cdFx0aHVlID0gMDtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IHIpIHtcblx0XHRodWUgPSAoKGcgLSBiKSAvIGNocm9tYSkgJSA2O1xuXHR9IGVsc2Vcblx0aWYgKG1heCA9PT0gZykge1xuXHRcdGh1ZSA9IDIgKyAoYiAtIHIpIC8gY2hyb21hO1xuXHR9IGVsc2Uge1xuXHRcdGh1ZSA9IDQgKyAociAtIGcpIC8gY2hyb21hICsgNDtcblx0fVxuXG5cdGh1ZSAvPSA2O1xuXHRodWUgJT0gMTtcblxuXHRyZXR1cm4gW2h1ZSAqIDM2MCwgY2hyb21hICogMTAwLCBncmF5c2NhbGUgKiAxMDBdO1xufTtcblxuY29udmVydC5oc2wuaGNnID0gZnVuY3Rpb24gKGhzbCkge1xuXHR2YXIgcyA9IGhzbFsxXSAvIDEwMDtcblx0dmFyIGwgPSBoc2xbMl0gLyAxMDA7XG5cdHZhciBjID0gMTtcblx0dmFyIGYgPSAwO1xuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0YyA9IDIuMCAqIHMgKiBsO1xuXHR9IGVsc2Uge1xuXHRcdGMgPSAyLjAgKiBzICogKDEuMCAtIGwpO1xuXHR9XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKGwgLSAwLjUgKiBjKSAvICgxLjAgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHNsWzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LmhjZyA9IGZ1bmN0aW9uIChoc3YpIHtcblx0dmFyIHMgPSBoc3ZbMV0gLyAxMDA7XG5cdHZhciB2ID0gaHN2WzJdIC8gMTAwO1xuXG5cdHZhciBjID0gcyAqIHY7XG5cdHZhciBmID0gMDtcblxuXHRpZiAoYyA8IDEuMCkge1xuXHRcdGYgPSAodiAtIGMpIC8gKDEgLSBjKTtcblx0fVxuXG5cdHJldHVybiBbaHN2WzBdLCBjICogMTAwLCBmICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLnJnYiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGggPSBoY2dbMF0gLyAzNjA7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblxuXHRpZiAoYyA9PT0gMC4wKSB7XG5cdFx0cmV0dXJuIFtnICogMjU1LCBnICogMjU1LCBnICogMjU1XTtcblx0fVxuXG5cdHZhciBwdXJlID0gWzAsIDAsIDBdO1xuXHR2YXIgaGkgPSAoaCAlIDEpICogNjtcblx0dmFyIHYgPSBoaSAlIDE7XG5cdHZhciB3ID0gMSAtIHY7XG5cdHZhciBtZyA9IDA7XG5cblx0c3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuXHRcdGNhc2UgMDpcblx0XHRcdHB1cmVbMF0gPSAxOyBwdXJlWzFdID0gdjsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdHB1cmVbMF0gPSB3OyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gdzsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRcdHB1cmVbMF0gPSB2OyBwdXJlWzFdID0gMDsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSB3O1xuXHR9XG5cblx0bWcgPSAoMS4wIC0gYykgKiBnO1xuXG5cdHJldHVybiBbXG5cdFx0KGMgKiBwdXJlWzBdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsxXSArIG1nKSAqIDI1NSxcblx0XHQoYyAqIHB1cmVbMl0gKyBtZykgKiAyNTVcblx0XTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzdiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciB2ID0gYyArIGcgKiAoMS4wIC0gYyk7XG5cdHZhciBmID0gMDtcblxuXHRpZiAodiA+IDAuMCkge1xuXHRcdGYgPSBjIC8gdjtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBmICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmhzbCA9IGZ1bmN0aW9uIChoY2cpIHtcblx0dmFyIGMgPSBoY2dbMV0gLyAxMDA7XG5cdHZhciBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdHZhciBsID0gZyAqICgxLjAgLSBjKSArIDAuNSAqIGM7XG5cdHZhciBzID0gMDtcblxuXHRpZiAobCA+IDAuMCAmJiBsIDwgMC41KSB7XG5cdFx0cyA9IGMgLyAoMiAqIGwpO1xuXHR9IGVsc2Vcblx0aWYgKGwgPj0gMC41ICYmIGwgPCAxLjApIHtcblx0XHRzID0gYyAvICgyICogKDEgLSBsKSk7XG5cdH1cblxuXHRyZXR1cm4gW2hjZ1swXSwgcyAqIDEwMCwgbCAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5od2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdHZhciBjID0gaGNnWzFdIC8gMTAwO1xuXHR2YXIgZyA9IGhjZ1syXSAvIDEwMDtcblx0dmFyIHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0cmV0dXJuIFtoY2dbMF0sICh2IC0gYykgKiAxMDAsICgxIC0gdikgKiAxMDBdO1xufTtcblxuY29udmVydC5od2IuaGNnID0gZnVuY3Rpb24gKGh3Yikge1xuXHR2YXIgdyA9IGh3YlsxXSAvIDEwMDtcblx0dmFyIGIgPSBod2JbMl0gLyAxMDA7XG5cdHZhciB2ID0gMSAtIGI7XG5cdHZhciBjID0gdiAtIHc7XG5cdHZhciBnID0gMDtcblxuXHRpZiAoYyA8IDEpIHtcblx0XHRnID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2h3YlswXSwgYyAqIDEwMCwgZyAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmFwcGxlLnJnYiA9IGZ1bmN0aW9uIChhcHBsZSkge1xuXHRyZXR1cm4gWyhhcHBsZVswXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzFdIC8gNjU1MzUpICogMjU1LCAoYXBwbGVbMl0gLyA2NTUzNSkgKiAyNTVdO1xufTtcblxuY29udmVydC5yZ2IuYXBwbGUgPSBmdW5jdGlvbiAocmdiKSB7XG5cdHJldHVybiBbKHJnYlswXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsxXSAvIDI1NSkgKiA2NTUzNSwgKHJnYlsyXSAvIDI1NSkgKiA2NTUzNV07XG59O1xuXG5jb252ZXJ0LmdyYXkucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFthcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1LCBhcmdzWzBdIC8gMTAwICogMjU1XTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oc2wgPSBjb252ZXJ0LmdyYXkuaHN2ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFswLCAwLCBhcmdzWzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5od2IgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDEwMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkuY215ayA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbMCwgMCwgMCwgZ3JheVswXV07XG59O1xuXG5jb252ZXJ0LmdyYXkubGFiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFtncmF5WzBdLCAwLCAwXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oZXggPSBmdW5jdGlvbiAoZ3JheSkge1xuXHR2YXIgdmFsID0gTWF0aC5yb3VuZChncmF5WzBdIC8gMTAwICogMjU1KSAmIDB4RkY7XG5cdHZhciBpbnRlZ2VyID0gKHZhbCA8PCAxNikgKyAodmFsIDw8IDgpICsgdmFsO1xuXG5cdHZhciBzdHJpbmcgPSBpbnRlZ2VyLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuXHRyZXR1cm4gJzAwMDAwMCcuc3Vic3RyaW5nKHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufTtcblxuY29udmVydC5yZ2IuZ3JheSA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0dmFyIHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcblx0cmV0dXJuIFt2YWwgLyAyNTUgKiAxMDBdO1xufTtcbn0pO1xudmFyIGNvbnZlcnNpb25zXzEgPSBjb252ZXJzaW9ucy5yZ2I7XG52YXIgY29udmVyc2lvbnNfMiA9IGNvbnZlcnNpb25zLmhzbDtcbnZhciBjb252ZXJzaW9uc18zID0gY29udmVyc2lvbnMuaHN2O1xudmFyIGNvbnZlcnNpb25zXzQgPSBjb252ZXJzaW9ucy5od2I7XG52YXIgY29udmVyc2lvbnNfNSA9IGNvbnZlcnNpb25zLmNteWs7XG52YXIgY29udmVyc2lvbnNfNiA9IGNvbnZlcnNpb25zLnh5ejtcbnZhciBjb252ZXJzaW9uc183ID0gY29udmVyc2lvbnMubGFiO1xudmFyIGNvbnZlcnNpb25zXzggPSBjb252ZXJzaW9ucy5sY2g7XG52YXIgY29udmVyc2lvbnNfOSA9IGNvbnZlcnNpb25zLmhleDtcbnZhciBjb252ZXJzaW9uc18xMCA9IGNvbnZlcnNpb25zLmtleXdvcmQ7XG52YXIgY29udmVyc2lvbnNfMTEgPSBjb252ZXJzaW9ucy5hbnNpMTY7XG52YXIgY29udmVyc2lvbnNfMTIgPSBjb252ZXJzaW9ucy5hbnNpMjU2O1xudmFyIGNvbnZlcnNpb25zXzEzID0gY29udmVyc2lvbnMuaGNnO1xudmFyIGNvbnZlcnNpb25zXzE0ID0gY29udmVyc2lvbnMuYXBwbGU7XG52YXIgY29udmVyc2lvbnNfMTUgPSBjb252ZXJzaW9ucy5ncmF5O1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0dmFyIGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHR2YXIgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gdW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHR2YXIgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yICh2YXIgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdHZhciBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdHZhciBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0dmFyIGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbnZhciByb3V0ZSA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdHZhciBjb252ZXJzaW9uID0ge307XG5cblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdHZhciB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdHZhciBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIG5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxudmFyIGNvbG9yQ29udmVydCA9IGNvbnZlcnQ7XG5cbnZhciBjb2xvck5hbWUkMSA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XG5cbi8qIE1JVCBsaWNlbnNlICovXG5cblxudmFyIGNvbG9yU3RyaW5nID0ge1xuICAgZ2V0UmdiYTogZ2V0UmdiYSxcbiAgIGdldEhzbGE6IGdldEhzbGEsXG4gICBnZXRSZ2I6IGdldFJnYixcbiAgIGdldEhzbDogZ2V0SHNsLFxuICAgZ2V0SHdiOiBnZXRId2IsXG4gICBnZXRBbHBoYTogZ2V0QWxwaGEsXG5cbiAgIGhleFN0cmluZzogaGV4U3RyaW5nLFxuICAgcmdiU3RyaW5nOiByZ2JTdHJpbmcsXG4gICByZ2JhU3RyaW5nOiByZ2JhU3RyaW5nLFxuICAgcGVyY2VudFN0cmluZzogcGVyY2VudFN0cmluZyxcbiAgIHBlcmNlbnRhU3RyaW5nOiBwZXJjZW50YVN0cmluZyxcbiAgIGhzbFN0cmluZzogaHNsU3RyaW5nLFxuICAgaHNsYVN0cmluZzogaHNsYVN0cmluZyxcbiAgIGh3YlN0cmluZzogaHdiU3RyaW5nLFxuICAga2V5d29yZDoga2V5d29yZFxufTtcblxuZnVuY3Rpb24gZ2V0UmdiYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgYWJiciA9ICAvXiMoW2EtZkEtRjAtOV17Myw0fSkkL2ksXG4gICAgICAgaGV4ID0gIC9eIyhbYS1mQS1GMC05XXs2fShbYS1mQS1GMC05XXsyfSk/KSQvaSxcbiAgICAgICByZ2JhID0gL15yZ2JhP1xcKFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKixcXHMqKFsrLV0/XFxkKylcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC9pLFxuICAgICAgIHBlciA9IC9ecmdiYT9cXChcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvaSxcbiAgICAgICBrZXl3b3JkID0gLyhcXHcrKS87XG5cbiAgIHZhciByZ2IgPSBbMCwgMCwgMF0sXG4gICAgICAgYSA9IDEsXG4gICAgICAgbWF0Y2ggPSBzdHJpbmcubWF0Y2goYWJiciksXG4gICAgICAgaGV4QWxwaGEgPSBcIlwiO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgICBtYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgaGV4QWxwaGEgPSBtYXRjaFszXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpXSArIG1hdGNoW2ldLCAxNik7XG4gICAgICB9XG4gICAgICBpZiAoaGV4QWxwaGEpIHtcbiAgICAgICAgIGEgPSBNYXRoLnJvdW5kKChwYXJzZUludChoZXhBbHBoYSArIGhleEFscGhhLCAxNikgLyAyNTUpICogMTAwKSAvIDEwMDtcbiAgICAgIH1cbiAgIH1cbiAgIGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGhleCkpIHtcbiAgICAgIGhleEFscGhhID0gbWF0Y2hbMl07XG4gICAgICBtYXRjaCA9IG1hdGNoWzFdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoLnNsaWNlKGkgKiAyLCBpICogMiArIDIpLCAxNik7XG4gICAgICB9XG4gICAgICBpZiAoaGV4QWxwaGEpIHtcbiAgICAgICAgIGEgPSBNYXRoLnJvdW5kKChwYXJzZUludChoZXhBbHBoYSwgMTYpIC8gMjU1KSAqIDEwMCkgLyAxMDA7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChyZ2JhKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IHBhcnNlSW50KG1hdGNoW2kgKyAxXSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChwZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG1hdGNoW2kgKyAxXSkgKiAyLjU1KTtcbiAgICAgIH1cbiAgICAgIGEgPSBwYXJzZUZsb2F0KG1hdGNoWzRdKTtcbiAgIH1cbiAgIGVsc2UgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKGtleXdvcmQpKSB7XG4gICAgICBpZiAobWF0Y2hbMV0gPT0gXCJ0cmFuc3BhcmVudFwiKSB7XG4gICAgICAgICByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICAgICAgfVxuICAgICAgcmdiID0gY29sb3JOYW1lJDFbbWF0Y2hbMV1dO1xuICAgICAgaWYgKCFyZ2IpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgIH1cblxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJnYltpXSA9IHNjYWxlKHJnYltpXSwgMCwgMjU1KTtcbiAgIH1cbiAgIGlmICghYSAmJiBhICE9IDApIHtcbiAgICAgIGEgPSAxO1xuICAgfVxuICAgZWxzZSB7XG4gICAgICBhID0gc2NhbGUoYSwgMCwgMSk7XG4gICB9XG4gICByZ2JbM10gPSBhO1xuICAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHNsYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHNsID0gL15oc2xhP1xcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvO1xuICAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGhzbCk7XG4gICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgICAgdmFyIGggPSBzY2FsZShwYXJzZUludChtYXRjaFsxXSksIDAsIDM2MCksXG4gICAgICAgICAgcyA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pLCAwLCAxMDApLFxuICAgICAgICAgIGwgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICBhID0gc2NhbGUoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcbiAgICAgIHJldHVybiBbaCwgcywgbCwgYV07XG4gICB9XG59XG5cbmZ1bmN0aW9uIGdldEh3YihzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHdiID0gL15od2JcXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLztcbiAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChod2IpO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICAgICB2YXIgaCA9IHNjYWxlKHBhcnNlSW50KG1hdGNoWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICB3ID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCksXG4gICAgICAgICAgYiA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApLFxuICAgICAgICAgIGEgPSBzY2FsZShpc05hTihhbHBoYSkgPyAxIDogYWxwaGEsIDAsIDEpO1xuICAgICAgcmV0dXJuIFtoLCB3LCBiLCBhXTtcbiAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmdiKHN0cmluZykge1xuICAgdmFyIHJnYmEgPSBnZXRSZ2JhKHN0cmluZyk7XG4gICByZXR1cm4gcmdiYSAmJiByZ2JhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRIc2woc3RyaW5nKSB7XG4gIHZhciBoc2xhID0gZ2V0SHNsYShzdHJpbmcpO1xuICByZXR1cm4gaHNsYSAmJiBoc2xhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRBbHBoYShzdHJpbmcpIHtcbiAgIHZhciB2YWxzID0gZ2V0UmdiYShzdHJpbmcpO1xuICAgaWYgKHZhbHMpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxuICAgZWxzZSBpZiAodmFscyA9IGdldEhzbGEoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG4gICBlbHNlIGlmICh2YWxzID0gZ2V0SHdiKHN0cmluZykpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxufVxuXG4vLyBnZW5lcmF0b3JzXG5mdW5jdGlvbiBoZXhTdHJpbmcocmdiYSwgYSkge1xuICAgdmFyIGEgPSAoYSAhPT0gdW5kZWZpbmVkICYmIHJnYmEubGVuZ3RoID09PSAzKSA/IGEgOiByZ2JhWzNdO1xuICAgcmV0dXJuIFwiI1wiICsgaGV4RG91YmxlKHJnYmFbMF0pIFxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzFdKVxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzJdKVxuICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgKGEgPj0gMCAmJiBhIDwgMSlcbiAgICAgICAgICAgICAgICAgPyBoZXhEb3VibGUoTWF0aC5yb3VuZChhICogMjU1KSlcbiAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICk7XG59XG5cbmZ1bmN0aW9uIHJnYlN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAocmdiYVszXSAmJiByZ2JhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKTtcbiAgIH1cbiAgIHJldHVybiBcInJnYihcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAocmdiYVszXSAhPT0gdW5kZWZpbmVkID8gcmdiYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwicmdiYShcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXVxuICAgICAgICAgICArIFwiLCBcIiArIGFscGhhICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKHJnYmFbM10gJiYgcmdiYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpO1xuICAgfVxuICAgdmFyIHIgPSBNYXRoLnJvdW5kKHJnYmFbMF0vMjU1ICogMTAwKSxcbiAgICAgICBnID0gTWF0aC5yb3VuZChyZ2JhWzFdLzI1NSAqIDEwMCksXG4gICAgICAgYiA9IE1hdGgucm91bmQocmdiYVsyXS8yNTUgKiAxMDApO1xuXG4gICByZXR1cm4gXCJyZ2IoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSlcIjtcbn1cblxuZnVuY3Rpb24gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdLzI1NSAqIDEwMCksXG4gICAgICAgZyA9IE1hdGgucm91bmQocmdiYVsxXS8yNTUgKiAxMDApLFxuICAgICAgIGIgPSBNYXRoLnJvdW5kKHJnYmFbMl0vMjU1ICogMTAwKTtcbiAgIHJldHVybiBcInJnYmEoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSwgXCIgKyAoYWxwaGEgfHwgcmdiYVszXSB8fCAxKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xTdHJpbmcoaHNsYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKGhzbGFbM10gJiYgaHNsYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gaHNsYVN0cmluZyhoc2xhLCBhbHBoYSk7XG4gICB9XG4gICByZXR1cm4gXCJoc2woXCIgKyBoc2xhWzBdICsgXCIsIFwiICsgaHNsYVsxXSArIFwiJSwgXCIgKyBoc2xhWzJdICsgXCIlKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xhU3RyaW5nKGhzbGEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHNsYVszXSAhPT0gdW5kZWZpbmVkID8gaHNsYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHNsYShcIiArIGhzbGFbMF0gKyBcIiwgXCIgKyBoc2xhWzFdICsgXCIlLCBcIiArIGhzbGFbMl0gKyBcIiUsIFwiXG4gICAgICAgICAgICsgYWxwaGEgKyBcIilcIjtcbn1cblxuLy8gaHdiIGlzIGEgYml0IGRpZmZlcmVudCB0aGFuIHJnYihhKSAmIGhzbChhKSBzaW5jZSB0aGVyZSBpcyBubyBhbHBoYSBzcGVjaWZpYyBzeW50YXhcbi8vIChod2IgaGF2ZSBhbHBoYSBvcHRpb25hbCAmIDEgaXMgZGVmYXVsdCB2YWx1ZSlcbmZ1bmN0aW9uIGh3YlN0cmluZyhod2IsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHdiWzNdICE9PSB1bmRlZmluZWQgPyBod2JbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcImh3YihcIiArIGh3YlswXSArIFwiLCBcIiArIGh3YlsxXSArIFwiJSwgXCIgKyBod2JbMl0gKyBcIiVcIlxuICAgICAgICAgICArIChhbHBoYSAhPT0gdW5kZWZpbmVkICYmIGFscGhhICE9PSAxID8gXCIsIFwiICsgYWxwaGEgOiBcIlwiKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkKHJnYikge1xuICByZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIHNjYWxlKG51bSwgbWluLCBtYXgpIHtcbiAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyBcIjBcIiArIHN0ciA6IHN0cjtcbn1cblxuXG4vL2NyZWF0ZSBhIGxpc3Qgb2YgcmV2ZXJzZSBjb2xvciBuYW1lc1xudmFyIHJldmVyc2VOYW1lcyA9IHt9O1xuZm9yICh2YXIgbmFtZSBpbiBjb2xvck5hbWUkMSkge1xuICAgcmV2ZXJzZU5hbWVzW2NvbG9yTmFtZSQxW25hbWVdXSA9IG5hbWU7XG59XG5cbi8qIE1JVCBsaWNlbnNlICovXG5cblxuXG52YXIgQ29sb3IgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGlmIChvYmogaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbG9yKSkge1xuXHRcdHJldHVybiBuZXcgQ29sb3Iob2JqKTtcblx0fVxuXG5cdHRoaXMudmFsaWQgPSBmYWxzZTtcblx0dGhpcy52YWx1ZXMgPSB7XG5cdFx0cmdiOiBbMCwgMCwgMF0sXG5cdFx0aHNsOiBbMCwgMCwgMF0sXG5cdFx0aHN2OiBbMCwgMCwgMF0sXG5cdFx0aHdiOiBbMCwgMCwgMF0sXG5cdFx0Y215azogWzAsIDAsIDAsIDBdLFxuXHRcdGFscGhhOiAxXG5cdH07XG5cblx0Ly8gcGFyc2UgQ29sb3IoKSBhcmd1bWVudFxuXHR2YXIgdmFscztcblx0aWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG5cdFx0dmFscyA9IGNvbG9yU3RyaW5nLmdldFJnYmEob2JqKTtcblx0XHRpZiAodmFscykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IGNvbG9yU3RyaW5nLmdldEhzbGEob2JqKSkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IGNvbG9yU3RyaW5nLmdldEh3YihvYmopKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG5cdFx0dmFscyA9IG9iajtcblx0XHRpZiAodmFscy5yICE9PSB1bmRlZmluZWQgfHwgdmFscy5yZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy5sICE9PSB1bmRlZmluZWQgfHwgdmFscy5saWdodG5lc3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy52ICE9PSB1bmRlZmluZWQgfHwgdmFscy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHN2JywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLncgIT09IHVuZGVmaW5lZCB8fCB2YWxzLndoaXRlbmVzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLmMgIT09IHVuZGVmaW5lZCB8fCB2YWxzLmN5YW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2NteWsnLCB2YWxzKTtcblx0XHR9XG5cdH1cbn07XG5cbkNvbG9yLnByb3RvdHlwZSA9IHtcblx0aXNWYWxpZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbGlkO1xuXHR9LFxuXHRyZ2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgncmdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0aHNsOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2hzbCcsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGhzdjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdoc3YnLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRod2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0Y215azogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdjbXlrJywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRyZ2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5yZ2I7XG5cdH0sXG5cdGhzbEFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhzbDtcblx0fSxcblx0aHN2QXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaHN2O1xuXHR9LFxuXHRod2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRpZiAodmFsdWVzLmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVzLmh3Yi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWVzLmh3Yjtcblx0fSxcblx0Y215a0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmNteWs7XG5cdH0sXG5cdHJnYmFBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRyZXR1cm4gdmFsdWVzLnJnYi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHR9LFxuXHRoc2xhQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdFx0cmV0dXJuIHZhbHVlcy5oc2wuY29uY2F0KFt2YWx1ZXMuYWxwaGFdKTtcblx0fSxcblx0YWxwaGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgdmFsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZWQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAwLCB2YWwpO1xuXHR9LFxuXHRncmVlbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ3JnYicsIDEsIHZhbCk7XG5cdH0sXG5cdGJsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAyLCB2YWwpO1xuXHR9LFxuXHRodWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsKSB7XG5cdFx0XHR2YWwgJT0gMzYwO1xuXHRcdFx0dmFsID0gdmFsIDwgMCA/IDM2MCArIHZhbCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHNsJywgMCwgdmFsKTtcblx0fSxcblx0c2F0dXJhdGlvbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDEsIHZhbCk7XG5cdH0sXG5cdGxpZ2h0bmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDIsIHZhbCk7XG5cdH0sXG5cdHNhdHVyYXRpb252OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHN2JywgMSwgdmFsKTtcblx0fSxcblx0d2hpdGVuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMSwgdmFsKTtcblx0fSxcblx0YmxhY2tuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMiwgdmFsKTtcblx0fSxcblx0dmFsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc3YnLCAyLCB2YWwpO1xuXHR9LFxuXHRjeWFuOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDAsIHZhbCk7XG5cdH0sXG5cdG1hZ2VudGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMSwgdmFsKTtcblx0fSxcblx0eWVsbG93OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDIsIHZhbCk7XG5cdH0sXG5cdGJsYWNrOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDMsIHZhbCk7XG5cdH0sXG5cblx0aGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmhleFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IpO1xuXHR9LFxuXHRyZ2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcucmdiU3RyaW5nKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRyZ2JhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLnJnYmFTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdHBlcmNlbnRTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcucGVyY2VudFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmhzbFN0cmluZyh0aGlzLnZhbHVlcy5oc2wsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsYVN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBjb2xvclN0cmluZy5oc2xhU3RyaW5nKHRoaXMudmFsdWVzLmhzbCwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRod2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gY29sb3JTdHJpbmcuaHdiU3RyaW5nKHRoaXMudmFsdWVzLmh3YiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRrZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIGNvbG9yU3RyaW5nLmtleXdvcmQodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cblx0cmdiTnVtYmVyOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHRyZXR1cm4gKHJnYlswXSA8PCAxNikgfCAocmdiWzFdIDw8IDgpIHwgcmdiWzJdO1xuXHR9LFxuXG5cdGx1bWlub3NpdHk6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHR2YXIgbHVtID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjaGFuID0gcmdiW2ldIC8gMjU1O1xuXHRcdFx0bHVtW2ldID0gKGNoYW4gPD0gMC4wMzkyOCkgPyBjaGFuIC8gMTIuOTIgOiBNYXRoLnBvdygoKGNoYW4gKyAwLjA1NSkgLyAxLjA1NSksIDIuNCk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjIxMjYgKiBsdW1bMF0gKyAwLjcxNTIgKiBsdW1bMV0gKyAwLjA3MjIgKiBsdW1bMl07XG5cdH0sXG5cblx0Y29udHJhc3Q6IGZ1bmN0aW9uIChjb2xvcjIpIHtcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAvI2NvbnRyYXN0LXJhdGlvZGVmXG5cdFx0dmFyIGx1bTEgPSB0aGlzLmx1bWlub3NpdHkoKTtcblx0XHR2YXIgbHVtMiA9IGNvbG9yMi5sdW1pbm9zaXR5KCk7XG5cdFx0aWYgKGx1bTEgPiBsdW0yKSB7XG5cdFx0XHRyZXR1cm4gKGx1bTEgKyAwLjA1KSAvIChsdW0yICsgMC4wNSk7XG5cdFx0fVxuXHRcdHJldHVybiAobHVtMiArIDAuMDUpIC8gKGx1bTEgKyAwLjA1KTtcblx0fSxcblxuXHRsZXZlbDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdHZhciBjb250cmFzdFJhdGlvID0gdGhpcy5jb250cmFzdChjb2xvcjIpO1xuXHRcdGlmIChjb250cmFzdFJhdGlvID49IDcuMSkge1xuXHRcdFx0cmV0dXJuICdBQUEnO1xuXHRcdH1cblxuXHRcdHJldHVybiAoY29udHJhc3RSYXRpbyA+PSA0LjUpID8gJ0FBJyA6ICcnO1xuXHR9LFxuXG5cdGRhcms6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBZSVEgZXF1YXRpb24gZnJvbSBodHRwOi8vMjR3YXlzLm9yZy8yMDEwL2NhbGN1bGF0aW5nLWNvbG9yLWNvbnRyYXN0XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHR2YXIgeWlxID0gKHJnYlswXSAqIDI5OSArIHJnYlsxXSAqIDU4NyArIHJnYlsyXSAqIDExNCkgLyAxMDAwO1xuXHRcdHJldHVybiB5aXEgPCAxMjg7XG5cdH0sXG5cblx0bGlnaHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gIXRoaXMuZGFyaygpO1xuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdFx0cmdiW2ldID0gMjU1IC0gdGhpcy52YWx1ZXMucmdiW2ldO1xuXHRcdH1cblx0XHR0aGlzLnNldFZhbHVlcygncmdiJywgcmdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRsaWdodGVuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsyXSArPSBoc2xbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRkYXJrZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0aHNsWzJdIC09IGhzbFsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHNhdHVyYXRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsxXSArPSBoc2xbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRkZXNhdHVyYXRlOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsxXSAtPSBoc2xbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3aGl0ZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBod2IgPSB0aGlzLnZhbHVlcy5od2I7XG5cdFx0aHdiWzFdICs9IGh3YlsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCBod2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGJsYWNrZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBod2IgPSB0aGlzLnZhbHVlcy5od2I7XG5cdFx0aHdiWzJdICs9IGh3YlsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCBod2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGdyZXlzY2FsZTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9HcmF5c2NhbGUjQ29udmVydGluZ19jb2xvcl90b19ncmF5c2NhbGVcblx0XHR2YXIgdmFsID0gcmdiWzBdICogMC4zICsgcmdiWzFdICogMC41OSArIHJnYlsyXSAqIDAuMTE7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIFt2YWwsIHZhbCwgdmFsXSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xlYXJlcjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGFscGhhID0gdGhpcy52YWx1ZXMuYWxwaGE7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgYWxwaGEgLSAoYWxwaGEgKiByYXRpbykpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdG9wYXF1ZXI6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBhbHBoYSA9IHRoaXMudmFsdWVzLmFscGhhO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIGFscGhhICsgKGFscGhhICogcmF0aW8pKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyb3RhdGU6IGZ1bmN0aW9uIChkZWdyZWVzKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHR2YXIgaHVlID0gKGhzbFswXSArIGRlZ3JlZXMpICUgMzYwO1xuXHRcdGhzbFswXSA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFBvcnRlZCBmcm9tIHNhc3MgaW1wbGVtZW50YXRpb24gaW4gQ1xuXHQgKiBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy9saWJzYXNzL2Jsb2IvMGU2YjRhMjg1MDA5MjM1NmFhM2VjZTA3YzZiMjQ5ZjAyMjFjYWNlZC9mdW5jdGlvbnMuY3BwI0wyMDlcblx0ICovXG5cdG1peDogZnVuY3Rpb24gKG1peGluQ29sb3IsIHdlaWdodCkge1xuXHRcdHZhciBjb2xvcjEgPSB0aGlzO1xuXHRcdHZhciBjb2xvcjIgPSBtaXhpbkNvbG9yO1xuXHRcdHZhciBwID0gd2VpZ2h0ID09PSB1bmRlZmluZWQgPyAwLjUgOiB3ZWlnaHQ7XG5cblx0XHR2YXIgdyA9IDIgKiBwIC0gMTtcblx0XHR2YXIgYSA9IGNvbG9yMS5hbHBoYSgpIC0gY29sb3IyLmFscGhhKCk7XG5cblx0XHR2YXIgdzEgPSAoKCh3ICogYSA9PT0gLTEpID8gdyA6ICh3ICsgYSkgLyAoMSArIHcgKiBhKSkgKyAxKSAvIDIuMDtcblx0XHR2YXIgdzIgPSAxIC0gdzE7XG5cblx0XHRyZXR1cm4gdGhpc1xuXHRcdFx0LnJnYihcblx0XHRcdFx0dzEgKiBjb2xvcjEucmVkKCkgKyB3MiAqIGNvbG9yMi5yZWQoKSxcblx0XHRcdFx0dzEgKiBjb2xvcjEuZ3JlZW4oKSArIHcyICogY29sb3IyLmdyZWVuKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmJsdWUoKSArIHcyICogY29sb3IyLmJsdWUoKVxuXHRcdFx0KVxuXHRcdFx0LmFscGhhKGNvbG9yMS5hbHBoYSgpICogcCArIGNvbG9yMi5hbHBoYSgpICogKDEgLSBwKSk7XG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmdiKCk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBOT1RFKFNCKTogdXNpbmcgbm9kZS1jbG9uZSBjcmVhdGVzIGEgZGVwZW5kZW5jeSB0byBCdWZmZXIgd2hlbiB1c2luZyBicm93c2VyaWZ5LFxuXHRcdC8vIG1ha2luZyB0aGUgZmluYWwgYnVpbGQgd2F5IHRvIGJpZyB0byBlbWJlZCBpbiBDaGFydC5qcy4gU28gbGV0J3MgZG8gaXQgbWFudWFsbHksXG5cdFx0Ly8gYXNzdW1pbmcgdGhhdCB2YWx1ZXMgdG8gY2xvbmUgYXJlIDEgZGltZW5zaW9uIGFycmF5cyBjb250YWluaW5nIG9ubHkgbnVtYmVycyxcblx0XHQvLyBleGNlcHQgJ2FscGhhJyB3aGljaCBpcyBhIG51bWJlci5cblx0XHR2YXIgcmVzdWx0ID0gbmV3IENvbG9yKCk7XG5cdFx0dmFyIHNvdXJjZSA9IHRoaXMudmFsdWVzO1xuXHRcdHZhciB0YXJnZXQgPSByZXN1bHQudmFsdWVzO1xuXHRcdHZhciB2YWx1ZSwgdHlwZTtcblxuXHRcdGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG5cdFx0XHRpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG5cdFx0XHRcdHZhbHVlID0gc291cmNlW3Byb3BdO1xuXHRcdFx0XHR0eXBlID0gKHt9KS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblx0XHRcdFx0aWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcblx0XHRcdFx0XHR0YXJnZXRbcHJvcF0gPSB2YWx1ZS5zbGljZSgwKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuXHRcdFx0XHRcdHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ3VuZXhwZWN0ZWQgY29sb3IgdmFsdWU6JywgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxufTtcblxuQ29sb3IucHJvdG90eXBlLnNwYWNlcyA9IHtcblx0cmdiOiBbJ3JlZCcsICdncmVlbicsICdibHVlJ10sXG5cdGhzbDogWydodWUnLCAnc2F0dXJhdGlvbicsICdsaWdodG5lc3MnXSxcblx0aHN2OiBbJ2h1ZScsICdzYXR1cmF0aW9uJywgJ3ZhbHVlJ10sXG5cdGh3YjogWydodWUnLCAnd2hpdGVuZXNzJywgJ2JsYWNrbmVzcyddLFxuXHRjbXlrOiBbJ2N5YW4nLCAnbWFnZW50YScsICd5ZWxsb3cnLCAnYmxhY2snXVxufTtcblxuQ29sb3IucHJvdG90eXBlLm1heGVzID0ge1xuXHRyZ2I6IFsyNTUsIDI1NSwgMjU1XSxcblx0aHNsOiBbMzYwLCAxMDAsIDEwMF0sXG5cdGhzdjogWzM2MCwgMTAwLCAxMDBdLFxuXHRod2I6IFszNjAsIDEwMCwgMTAwXSxcblx0Y215azogWzEwMCwgMTAwLCAxMDAsIDEwMF1cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5nZXRWYWx1ZXMgPSBmdW5jdGlvbiAoc3BhY2UpIHtcblx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHR2YXIgdmFscyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHR2YWxzW3NwYWNlLmNoYXJBdChpKV0gPSB2YWx1ZXNbc3BhY2VdW2ldO1xuXHR9XG5cblx0aWYgKHZhbHVlcy5hbHBoYSAhPT0gMSkge1xuXHRcdHZhbHMuYSA9IHZhbHVlcy5hbHBoYTtcblx0fVxuXG5cdC8vIHtyOiAyNTUsIGc6IDI1NSwgYjogMjU1LCBhOiAwLjR9XG5cdHJldHVybiB2YWxzO1xufTtcblxuQ29sb3IucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uIChzcGFjZSwgdmFscykge1xuXHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdHZhciBzcGFjZXMgPSB0aGlzLnNwYWNlcztcblx0dmFyIG1heGVzID0gdGhpcy5tYXhlcztcblx0dmFyIGFscGhhID0gMTtcblx0dmFyIGk7XG5cblx0dGhpcy52YWxpZCA9IHRydWU7XG5cblx0aWYgKHNwYWNlID09PSAnYWxwaGEnKSB7XG5cdFx0YWxwaGEgPSB2YWxzO1xuXHR9IGVsc2UgaWYgKHZhbHMubGVuZ3RoKSB7XG5cdFx0Ly8gWzEwLCAxMCwgMTBdXG5cdFx0dmFsdWVzW3NwYWNlXSA9IHZhbHMuc2xpY2UoMCwgc3BhY2UubGVuZ3RoKTtcblx0XHRhbHBoYSA9IHZhbHNbc3BhY2UubGVuZ3RoXTtcblx0fSBlbHNlIGlmICh2YWxzW3NwYWNlLmNoYXJBdCgwKV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIHtyOiAxMCwgZzogMTAsIGI6IDEwfVxuXHRcdGZvciAoaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFsdWVzW3NwYWNlXVtpXSA9IHZhbHNbc3BhY2UuY2hhckF0KGkpXTtcblx0XHR9XG5cblx0XHRhbHBoYSA9IHZhbHMuYTtcblx0fSBlbHNlIGlmICh2YWxzW3NwYWNlc1tzcGFjZV1bMF1dICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cmVkOiAxMCwgZ3JlZW46IDEwLCBibHVlOiAxMH1cblx0XHR2YXIgY2hhbnMgPSBzcGFjZXNbc3BhY2VdO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YWx1ZXNbc3BhY2VdW2ldID0gdmFsc1tjaGFuc1tpXV07XG5cdFx0fVxuXG5cdFx0YWxwaGEgPSB2YWxzLmFscGhhO1xuXHR9XG5cblx0dmFsdWVzLmFscGhhID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKGFscGhhID09PSB1bmRlZmluZWQgPyB2YWx1ZXMuYWxwaGEgOiBhbHBoYSkpKTtcblxuXHRpZiAoc3BhY2UgPT09ICdhbHBoYScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgY2FwcGVkO1xuXG5cdC8vIGNhcCB2YWx1ZXMgb2YgdGhlIHNwYWNlIHByaW9yIGNvbnZlcnRpbmcgYWxsIHZhbHVlc1xuXHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRjYXBwZWQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtYXhlc1tzcGFjZV1baV0sIHZhbHVlc1tzcGFjZV1baV0pKTtcblx0XHR2YWx1ZXNbc3BhY2VdW2ldID0gTWF0aC5yb3VuZChjYXBwZWQpO1xuXHR9XG5cblx0Ly8gY29udmVydCB0byBhbGwgdGhlIG90aGVyIGNvbG9yIHNwYWNlc1xuXHRmb3IgKHZhciBzbmFtZSBpbiBzcGFjZXMpIHtcblx0XHRpZiAoc25hbWUgIT09IHNwYWNlKSB7XG5cdFx0XHR2YWx1ZXNbc25hbWVdID0gY29sb3JDb252ZXJ0W3NwYWNlXVtzbmFtZV0odmFsdWVzW3NwYWNlXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0U3BhY2UgPSBmdW5jdGlvbiAoc3BhY2UsIGFyZ3MpIHtcblx0dmFyIHZhbHMgPSBhcmdzWzBdO1xuXG5cdGlmICh2YWxzID09PSB1bmRlZmluZWQpIHtcblx0XHQvLyBjb2xvci5yZ2IoKVxuXHRcdHJldHVybiB0aGlzLmdldFZhbHVlcyhzcGFjZSk7XG5cdH1cblxuXHQvLyBjb2xvci5yZ2IoMTAsIDEwLCAxMClcblx0aWYgKHR5cGVvZiB2YWxzID09PSAnbnVtYmVyJykge1xuXHRcdHZhbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblx0fVxuXG5cdHRoaXMuc2V0VmFsdWVzKHNwYWNlLCB2YWxzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIChzcGFjZSwgaW5kZXgsIHZhbCkge1xuXHR2YXIgc3ZhbHVlcyA9IHRoaXMudmFsdWVzW3NwYWNlXTtcblx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gY29sb3IucmVkKClcblx0XHRyZXR1cm4gc3ZhbHVlc1tpbmRleF07XG5cdH0gZWxzZSBpZiAodmFsID09PSBzdmFsdWVzW2luZGV4XSkge1xuXHRcdC8vIGNvbG9yLnJlZChjb2xvci5yZWQoKSlcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8vIGNvbG9yLnJlZCgxMDApXG5cdHN2YWx1ZXNbaW5kZXhdID0gdmFsO1xuXHR0aGlzLnNldFZhbHVlcyhzcGFjZSwgc3ZhbHVlcyk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkNvbG9yID0gQ29sb3I7XG59XG5cbnZhciBjaGFydGpzQ29sb3IgPSBDb2xvcjtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnNcbiAqL1xudmFyIGhlbHBlcnMgPSB7XG5cdC8qKlxuXHQgKiBBbiBlbXB0eSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkLCBmb3IgZXhhbXBsZSwgZm9yIG9wdGlvbmFsIGNhbGxiYWNrLlxuXHQgKi9cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHVuaXF1ZSBpZCwgc2VxdWVudGlhbGx5IGdlbmVyYXRlZCBmcm9tIGEgZ2xvYmFsIHZhcmlhYmxlLlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfVxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdHVpZDogKGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZCA9IDA7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGlkKys7XG5cdFx0fTtcblx0fSgpKSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgbmVpdGhlciBudWxsIG5vciB1bmRlZmluZWQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRpc051bGxPclVuZGVmOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSAoaW5jbHVkaW5nIHR5cGVkIGFycmF5cyksIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRpc0FycmF5OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0dmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXHRcdGlmICh0eXBlLnN1YnN0cigwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc3Vic3RyKC02KSA9PT0gJ0FycmF5XScpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge2Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNPYmplY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgcmV0dXJucyBmYWxzZVxuXHQgKiBAcGFyYW0geyp9IHZhbHVlICAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdGlzRmluaXRlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUodmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0dmFsdWVPckRlZmF1bHQ6IGZ1bmN0aW9uKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGF0IHRoZSBnaXZlbiBgaW5kZXhgIGluIGFycmF5IGlmIGRlZmluZWQsIGVsc2UgcmV0dXJucyBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHBhcmFtIHtBcnJheX0gdmFsdWUgLSBUaGUgYXJyYXkgdG8gbG9va3VwIGZvciB2YWx1ZSBhdCBgaW5kZXhgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW4gYHZhbHVlYCB0byBsb29rdXAgZm9yIHZhbHVlLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlW2luZGV4XWAgaXMgdW5kZWZpbmVkLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHZhbHVlQXRJbmRleE9yRGVmYXVsdDogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gaGVscGVycy52YWx1ZU9yRGVmYXVsdChoZWxwZXJzLmlzQXJyYXkodmFsdWUpID8gdmFsdWVbaW5kZXhdIDogdmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcblx0ICogdmFsdWUgcmV0dXJuZWQgYnkgYGZuYC4gSWYgYGZuYCBpcyBub3QgYSBmdW5jdGlvbiwgdGhpcyBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG5cdCAqIEBwYXJhbSB7QXJyYXl8dW5kZWZpbmVkfG51bGx9IGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjYWxsYmFjazogZnVuY3Rpb24oZm4sIGFyZ3MsIHRoaXNBcmcpIHtcblx0XHRpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGUoU0IpIGZvciBwZXJmb3JtYW5jZSBzYWtlLCB0aGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gbG9vcGFibGUgdHlwZVxuXHQgKiBpcyB1bmtub3duIG9yIGluIG5vbmUgaW50ZW5zaXZlIGNvZGUgKG5vdCBjYWxsZWQgb2Z0ZW4gYW5kIHNtYWxsIGxvb3BhYmxlKS4gRWxzZVxuXHQgKiBpdCdzIHByZWZlcmFibGUgdG8gdXNlIGEgcmVndWxhciBmb3IoKSBsb29wIGFuZCBzYXZlIGV4dHJhIGZ1bmN0aW9uIGNhbGxzLlxuXHQgKiBAcGFyYW0ge29iamVjdHxBcnJheX0gbG9vcGFibGUgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGl0ZXJhdGVkLlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbdGhpc0FyZ10gLSBUaGUgdmFsdWUgb2YgYHRoaXNgIHByb3ZpZGVkIGZvciB0aGUgY2FsbCB0byBgZm5gLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXZlcnNlXSAtIElmIHRydWUsIGl0ZXJhdGVzIGJhY2t3YXJkIG9uIHRoZSBsb29wYWJsZS5cblx0ICovXG5cdGVhY2g6IGZ1bmN0aW9uKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuXHRcdHZhciBpLCBsZW4sIGtleXM7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsb29wYWJsZSkpIHtcblx0XHRcdGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0Zm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzT2JqZWN0KGxvb3BhYmxlKSkge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcblx0XHRcdGxlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTQ4NTM5NzRcblx0ICogQHBhcmFtIHtBcnJheX0gYTAgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuXHQgKiBAcGFyYW0ge0FycmF5fSBhMSAtIFRoZSBhcnJheSB0byBjb21wYXJlXG5cdCAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgKi9cblx0YXJyYXlFcXVhbHM6IGZ1bmN0aW9uKGEwLCBhMSkge1xuXHRcdHZhciBpLCBpbGVuLCB2MCwgdjE7XG5cblx0XHRpZiAoIWEwIHx8ICFhMSB8fCBhMC5sZW5ndGggIT09IGExLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHYwID0gYTBbaV07XG5cdFx0XHR2MSA9IGExW2ldO1xuXG5cdFx0XHRpZiAodjAgaW5zdGFuY2VvZiBBcnJheSAmJiB2MSBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRcdGlmICghaGVscGVycy5hcnJheUVxdWFscyh2MCwgdjEpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHYwICE9PSB2MSkge1xuXHRcdFx0XHQvLyBOT1RFOiB0d28gZGlmZmVyZW50IG9iamVjdCBpbnN0YW5jZXMgd2lsbCBuZXZlciBiZSBlcXVhbDoge3g6MjB9ICE9IHt4OjIwfVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAgd2l0aG91dCBrZWVwaW5nIHJlZmVyZW5jZXMgb24gb2JqZWN0cyBhbmQgYXJyYXlzLlxuXHQgKiBAcGFyYW0geyp9IHNvdXJjZSAtIFRoZSB2YWx1ZSB0byBjbG9uZS5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjbG9uZTogZnVuY3Rpb24oc291cmNlKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShzb3VyY2UpKSB7XG5cdFx0XHRyZXR1cm4gc291cmNlLm1hcChoZWxwZXJzLmNsb25lKTtcblx0XHR9XG5cblx0XHRpZiAoaGVscGVycy5pc09iamVjdChzb3VyY2UpKSB7XG5cdFx0XHR2YXIgdGFyZ2V0ID0ge307XG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cdFx0XHR2YXIga2xlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0dmFyIGsgPSAwO1xuXG5cdFx0XHRmb3IgKDsgayA8IGtsZW47ICsraykge1xuXHRcdFx0XHR0YXJnZXRba2V5c1trXV0gPSBoZWxwZXJzLmNsb25lKHNvdXJjZVtrZXlzW2tdXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNvdXJjZTtcblx0fSxcblxuXHQvKipcblx0ICogVGhlIGRlZmF1bHQgbWVyZ2VyIHdoZW4gQ2hhcnQuaGVscGVycy5tZXJnZSBpcyBjYWxsZWQgd2l0aG91dCBtZXJnZXIgb3B0aW9uLlxuXHQgKiBOb3RlKFNCKTogYWxzbyB1c2VkIGJ5IG1lcmdlQ29uZmlnIGFuZCBtZXJnZVNjYWxlQ29uZmlnIGFzIGZhbGxiYWNrLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X21lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV07XG5cdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHR2YWwpICYmIGhlbHBlcnMuaXNPYmplY3Qoc3ZhbCkpIHtcblx0XHRcdGhlbHBlcnMubWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldFtrZXldID0gaGVscGVycy5jbG9uZShzdmFsKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE1lcmdlcyBzb3VyY2Vba2V5XSBpbiB0YXJnZXRba2V5XSBvbmx5IGlmIHRhcmdldFtrZXldIGlzIHVuZGVmaW5lZC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9tZXJnZXJJZjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV07XG5cdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHR2YWwpICYmIGhlbHBlcnMuaXNPYmplY3Qoc3ZhbCkpIHtcblx0XHRcdGhlbHBlcnMubWVyZ2VJZih0dmFsLCBzdmFsKTtcblx0XHR9IGVsc2UgaWYgKCF0YXJnZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBoZWxwZXJzLmNsb25lKHN2YWwpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmVjdXJzaXZlbHkgZGVlcCBjb3BpZXMgYHNvdXJjZWAgcHJvcGVydGllcyBpbnRvIGB0YXJnZXRgIHdpdGggdGhlIGdpdmVuIGBvcHRpb25zYC5cblx0ICogSU1QT1JUQU5UOiBgdGFyZ2V0YCBpcyBub3QgY2xvbmVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBgc291cmNlYCBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgaW4gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIG1lcmdlZCBpbnRvLlxuXHQgKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBNZXJnaW5nIG9wdGlvbnM6XG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm1lcmdlcl0gLSBUaGUgbWVyZ2UgbWV0aG9kIChrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0bWVyZ2U6IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0dmFyIHNvdXJjZXMgPSBoZWxwZXJzLmlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IFtzb3VyY2VdO1xuXHRcdHZhciBpbGVuID0gc291cmNlcy5sZW5ndGg7XG5cdFx0dmFyIG1lcmdlLCBpLCBrZXlzLCBrbGVuLCBrO1xuXG5cdFx0aWYgKCFoZWxwZXJzLmlzT2JqZWN0KHRhcmdldCkpIHtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdFx0bWVyZ2UgPSBvcHRpb25zLm1lcmdlciB8fCBoZWxwZXJzLl9tZXJnZXI7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRzb3VyY2UgPSBzb3VyY2VzW2ldO1xuXHRcdFx0aWYgKCFoZWxwZXJzLmlzT2JqZWN0KHNvdXJjZSkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXHRcdFx0Zm9yIChrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKSB7XG5cdFx0XHRcdG1lcmdlKGtleXNba10sIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZWN1cnNpdmVseSBkZWVwIGNvcGllcyBgc291cmNlYCBwcm9wZXJ0aWVzIGludG8gYHRhcmdldGAgKm9ubHkqIGlmIG5vdCBkZWZpbmVkIGluIHRhcmdldC5cblx0ICogSU1QT1JUQU5UOiBgdGFyZ2V0YCBpcyBub3QgY2xvbmVkIGFuZCB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBgc291cmNlYCBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0IC0gVGhlIHRhcmdldCBvYmplY3QgaW4gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIG1lcmdlZCBpbnRvLlxuXHQgKiBAcGFyYW0ge29iamVjdHxvYmplY3RbXX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBgdGFyZ2V0YCBvYmplY3QuXG5cdCAqL1xuXHRtZXJnZUlmOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBoZWxwZXJzLl9tZXJnZXJJZn0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBjb250ZW50cyBvZiB0d28gb3IgbW9yZSBvYmplY3RzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBvYmplY3RzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtvYmplY3R9IGFyZzEgLSBPYmplY3QgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge29iamVjdH0gYXJnTiAtIEFkZGl0aW9uYWwgb2JqZWN0cyBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0ZXh0ZW5kOiBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB7XG5cdFx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgZHN0LCBzcmMpIHtcblx0XHRcdFx0ZHN0W2tleV0gPSBzcmNba2V5XTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHQvKipcblx0ICogQmFzaWMgamF2YXNjcmlwdCBpbmhlcml0YW5jZSBiYXNlZCBvbiB0aGUgbW9kZWwgY3JlYXRlZCBpbiBCYWNrYm9uZS5qc1xuXHQgKi9cblx0aW5oZXJpdHM6IGZ1bmN0aW9uKGV4dGVuc2lvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBDaGFydEVsZW1lbnQgPSAoZXh0ZW5zaW9ucyAmJiBleHRlbnNpb25zLmhhc093blByb3BlcnR5KCdjb25zdHJ1Y3RvcicpKSA/IGV4dGVuc2lvbnMuY29uc3RydWN0b3IgOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHR2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmNvbnN0cnVjdG9yID0gQ2hhcnRFbGVtZW50O1xuXHRcdH07XG5cblx0XHRTdXJyb2dhdGUucHJvdG90eXBlID0gbWUucHJvdG90eXBlO1xuXHRcdENoYXJ0RWxlbWVudC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlKCk7XG5cdFx0Q2hhcnRFbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMuaW5oZXJpdHM7XG5cblx0XHRpZiAoZXh0ZW5zaW9ucykge1xuXHRcdFx0aGVscGVycy5leHRlbmQoQ2hhcnRFbGVtZW50LnByb3RvdHlwZSwgZXh0ZW5zaW9ucyk7XG5cdFx0fVxuXG5cdFx0Q2hhcnRFbGVtZW50Ll9fc3VwZXJfXyA9IG1lLnByb3RvdHlwZTtcblx0XHRyZXR1cm4gQ2hhcnRFbGVtZW50O1xuXHR9LFxuXG5cdF9kZXByZWNhdGVkOiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIHByZXZpb3VzLCBjdXJyZW50KSB7XG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdFx0J1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgaGVscGVyc19jb3JlID0gaGVscGVycztcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbGxiYWNrIGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5jYWxsQ2FsbGJhY2tcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuY2FsbENhbGxiYWNrID0gaGVscGVycy5jYWxsYmFjaztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGluc3RlYWQuXG4gKiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhLCBTYWZhcmksIEZGMS41KywgSUU5K1xuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuaW5kZXhPZlxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb21JbmRleCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgaXRlbSwgZnJvbUluZGV4KTtcbn07XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLnZhbHVlT3JEZWZhdWx0IGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5nZXRWYWx1ZU9yRGVmYXVsdFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5nZXRWYWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdCBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXG4vKipcbiAqIEVhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmVhc2luZ0VmZmVjdHNcbiAqIEBzZWUgaHR0cDovL3d3dy5yb2JlcnRwZW5uZXIuY29tL2Vhc2luZy9cbiAqL1xudmFyIGVmZmVjdHMgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0O1xuXHR9LFxuXG5cdGVhc2VJblF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLXQgKiAodCAtIDIpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0wLjUgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZUluQ3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRDdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9IHQgLSAxKSAqIHQgKiB0ICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMik7XG5cdH0sXG5cblx0ZWFzZUluUXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLSgodCA9IHQgLSAxKSAqIHQgKiB0ICogdCAtIDEpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKTtcblx0fSxcblxuXHRlYXNlSW5RdWludDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0ICogdCAqIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWludDogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xuXHR9LFxuXG5cdGVhc2VJblNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLU1hdGguY29zKHQgKiAoTWF0aC5QSSAvIDIpKSArIDE7XG5cdH0sXG5cblx0ZWFzZU91dFNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gTWF0aC5zaW4odCAqIChNYXRoLlBJIC8gMikpO1xuXHR9LFxuXG5cdGVhc2VJbk91dFNpbmU6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogdCkgLSAxKTtcblx0fSxcblxuXHRlYXNlSW5FeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID09PSAwKSA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuXHR9LFxuXG5cdGVhc2VPdXRFeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID09PSAxKSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEV4cG86IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICh0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpO1xuXHR9LFxuXG5cdGVhc2VJbkNpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA+PSAxKSB7XG5cdFx0XHRyZXR1cm4gdDtcblx0XHR9XG5cdFx0cmV0dXJuIC0oTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcblx0fSxcblxuXHRlYXNlT3V0Q2lyYzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoMSAtICh0ID0gdCAtIDEpICogdCk7XG5cdH0sXG5cblx0ZWFzZUluT3V0Q2lyYzogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIC0wLjUgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcblx0fSxcblxuXHRlYXNlSW5FbGFzdGljOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHZhciBwID0gMDtcblx0XHR2YXIgYSA9IDE7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICghcCkge1xuXHRcdFx0cCA9IDAuMztcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0cmV0dXJuIC0oYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG5cdH0sXG5cblx0ZWFzZU91dEVsYXN0aWM6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0dmFyIHAgPSAwO1xuXHRcdHZhciBhID0gMTtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICh0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCFwKSB7XG5cdFx0XHRwID0gMC4zO1xuXHRcdH1cblx0XHRpZiAoYSA8IDEpIHtcblx0XHRcdGEgPSAxO1xuXHRcdFx0cyA9IHAgLyA0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0RWxhc3RpYzogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHR2YXIgcCA9IDA7XG5cdFx0dmFyIGEgPSAxO1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKCh0IC89IDAuNSkgPT09IDIpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoIXApIHtcblx0XHRcdHAgPSAwLjQ1O1xuXHRcdH1cblx0XHRpZiAoYSA8IDEpIHtcblx0XHRcdGEgPSAxO1xuXHRcdFx0cyA9IHAgLyA0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdH1cblx0XHRpZiAodCA8IDEpIHtcblx0XHRcdHJldHVybiAtMC41ICogKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAwLjUgKyAxO1xuXHR9LFxuXHRlYXNlSW5CYWNrOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuXHR9LFxuXG5cdGVhc2VPdXRCYWNrOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHJldHVybiAodCA9IHQgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0QmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuXHR9LFxuXG5cdGVhc2VJbkJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAxIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KTtcblx0fSxcblxuXHRlYXNlT3V0Qm91bmNlOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPCAoMSAvIDIuNzUpKSB7XG5cdFx0XHRyZXR1cm4gNy41NjI1ICogdCAqIHQ7XG5cdFx0fVxuXHRcdGlmICh0IDwgKDIgLyAyLjc1KSkge1xuXHRcdFx0cmV0dXJuIDcuNTYyNSAqICh0IC09ICgxLjUgLyAyLjc1KSkgKiB0ICsgMC43NTtcblx0XHR9XG5cdFx0aWYgKHQgPCAoMi41IC8gMi43NSkpIHtcblx0XHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMi4yNSAvIDIuNzUpKSAqIHQgKyAwLjkzNzU7XG5cdFx0fVxuXHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMi42MjUgLyAyLjc1KSkgKiB0ICsgMC45ODQzNzU7XG5cdH0sXG5cblx0ZWFzZUluT3V0Qm91bmNlOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPCAwLjUpIHtcblx0XHRcdHJldHVybiBlZmZlY3RzLmVhc2VJbkJvdW5jZSh0ICogMikgKiAwLjU7XG5cdFx0fVxuXHRcdHJldHVybiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNTtcblx0fVxufTtcblxudmFyIGhlbHBlcnNfZWFzaW5nID0ge1xuXHRlZmZlY3RzOiBlZmZlY3RzXG59O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nLmVmZmVjdHMgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmVhc2luZ0VmZmVjdHNcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnNfY29yZS5lYXNpbmdFZmZlY3RzID0gZWZmZWN0cztcblxudmFyIFBJID0gTWF0aC5QSTtcbnZhciBSQURfUEVSX0RFRyA9IFBJIC8gMTgwO1xudmFyIERPVUJMRV9QSSA9IFBJICogMjtcbnZhciBIQUxGX1BJID0gUEkgLyAyO1xudmFyIFFVQVJURVJfUEkgPSBQSSAvIDQ7XG52YXIgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmNhbnZhc1xuICovXG52YXIgZXhwb3J0cyQxID0ge1xuXHQvKipcblx0ICogQ2xlYXJzIHRoZSBlbnRpcmUgY2FudmFzIGFzc29jaWF0ZWQgdG8gdGhlIGdpdmVuIGBjaGFydGAuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGZvciB3aGljaCB0byBjbGVhciB0aGUgY2FudmFzLlxuXHQgKi9cblx0Y2xlYXI6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0Y2hhcnQuY3R4LmNsZWFyUmVjdCgwLCAwLCBjaGFydC53aWR0aCwgY2hhcnQuaGVpZ2h0KTtcblx0fSxcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIFwicGF0aFwiIGZvciBhIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVycyBhdCBwb3NpdGlvbiAoeCwgeSkgd2l0aCBhXG5cdCAqIGdpdmVuIHNpemUgKHdpZHRoLCBoZWlnaHQpIGFuZCB0aGUgc2FtZSBgcmFkaXVzYCBmb3IgYWxsIGNvcm5lcnMuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBUaGUgY2FudmFzIDJEIENvbnRleHQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHggYXhpcyBvZiB0aGUgY29vcmRpbmF0ZSBmb3IgdGhlIHJlY3RhbmdsZSBzdGFydGluZyBwb2ludC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHkgLSBUaGUgeSBheGlzIG9mIHRoZSBjb29yZGluYXRlIGZvciB0aGUgcmVjdGFuZ2xlIHN0YXJ0aW5nIHBvaW50LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgcmVjdGFuZ2xlJ3Mgd2lkdGguXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgcmVjdGFuZ2xlJ3MgaGVpZ2h0LlxuXHQgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gVGhlIHJvdW5kZWQgYW1vdW50IChpbiBwaXhlbHMpIGZvciB0aGUgZm91ciBjb3JuZXJzLlxuXHQgKiBAdG9kbyBoYW5kbGUgYHJhZGl1c2AgYXMgdG9wLWxlZnQsIHRvcC1yaWdodCwgYm90dG9tLXJpZ2h0LCBib3R0b20tbGVmdCBhcnJheS9vYmplY3Q/XG5cdCAqL1xuXHRyb3VuZGVkUmVjdDogZnVuY3Rpb24oY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcblx0XHRpZiAocmFkaXVzKSB7XG5cdFx0XHR2YXIgciA9IE1hdGgubWluKHJhZGl1cywgaGVpZ2h0IC8gMiwgd2lkdGggLyAyKTtcblx0XHRcdHZhciBsZWZ0ID0geCArIHI7XG5cdFx0XHR2YXIgdG9wID0geSArIHI7XG5cdFx0XHR2YXIgcmlnaHQgPSB4ICsgd2lkdGggLSByO1xuXHRcdFx0dmFyIGJvdHRvbSA9IHkgKyBoZWlnaHQgLSByO1xuXG5cdFx0XHRjdHgubW92ZVRvKHgsIHRvcCk7XG5cdFx0XHRpZiAobGVmdCA8IHJpZ2h0ICYmIHRvcCA8IGJvdHRvbSkge1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIHRvcCwgciwgLVBJLCAtSEFMRl9QSSk7XG5cdFx0XHRcdGN0eC5hcmMocmlnaHQsIHRvcCwgciwgLUhBTEZfUEksIDApO1xuXHRcdFx0XHRjdHguYXJjKHJpZ2h0LCBib3R0b20sIHIsIDAsIEhBTEZfUEkpO1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIGJvdHRvbSwgciwgSEFMRl9QSSwgUEkpO1xuXHRcdFx0fSBlbHNlIGlmIChsZWZ0IDwgcmlnaHQpIHtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhsZWZ0LCB5KTtcblx0XHRcdFx0Y3R4LmFyYyhyaWdodCwgdG9wLCByLCAtSEFMRl9QSSwgSEFMRl9QSSk7XG5cdFx0XHRcdGN0eC5hcmMobGVmdCwgdG9wLCByLCBIQUxGX1BJLCBQSSArIEhBTEZfUEkpO1xuXHRcdFx0fSBlbHNlIGlmICh0b3AgPCBib3R0b20pIHtcblx0XHRcdFx0Y3R4LmFyYyhsZWZ0LCB0b3AsIHIsIC1QSSwgMCk7XG5cdFx0XHRcdGN0eC5hcmMobGVmdCwgYm90dG9tLCByLCAwLCBQSSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHguYXJjKGxlZnQsIHRvcCwgciwgLVBJLCBQSSk7XG5cdFx0XHR9XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHgsIHkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHgucmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdH0sXG5cblx0ZHJhd1BvaW50OiBmdW5jdGlvbihjdHgsIHN0eWxlLCByYWRpdXMsIHgsIHksIHJvdGF0aW9uKSB7XG5cdFx0dmFyIHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cztcblx0XHR2YXIgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG5cblx0XHRpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0dHlwZSA9IHN0eWxlLnRvU3RyaW5nKCk7XG5cdFx0XHRpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcblx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0Y3R4LnRyYW5zbGF0ZSh4LCB5KTtcblx0XHRcdFx0Y3R4LnJvdGF0ZShyYWQpO1xuXHRcdFx0XHRjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG5cdFx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblxuXHRcdHN3aXRjaCAoc3R5bGUpIHtcblx0XHQvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgRE9VQkxFX1BJKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3RyaWFuZ2xlJzpcblx0XHRcdGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcblx0XHRcdHJhZCArPSBUV09fVEhJUkRTX1BJO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuXHRcdFx0cmFkICs9IFRXT19USElSRFNfUEk7XG5cdFx0XHRjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Um91bmRlZCc6XG5cdFx0XHQvLyBOT1RFOiB0aGUgcm91bmRlZCByZWN0IGltcGxlbWVudGF0aW9uIGNoYW5nZWQgdG8gdXNlIGBhcmNgIGluc3RlYWQgb2Zcblx0XHRcdC8vIGBxdWFkcmF0aWNDdXJ2ZVRvYCBzaW5jZSBpdCBnZW5lcmF0ZXMgYmV0dGVyIHJlc3VsdHMgd2hlbiByZWN0IGlzXG5cdFx0XHQvLyBhbG1vc3QgYSBjaXJjbGUuIDAuNTE2IChpbnN0ZWFkIG9mIDAuNSkgcHJvZHVjZXMgcmVzdWx0cyB3aXRoIHZpc3VhbGx5XG5cdFx0XHQvLyBjbG9zZXIgcHJvcG9ydGlvbiB0byB0aGUgcHJldmlvdXMgaW1wbCBhbmQgaXQgaXMgaW5zY3JpYmVkIGluIHRoZVxuXHRcdFx0Ly8gY2lyY2xlIHdpdGggYHJhZGl1c2AuIEZvciBtb3JlIGRldGFpbHMsIHNlZSB0aGUgZm9sbG93aW5nIFBSczpcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81NTk3XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTg1OFxuXHRcdFx0Y29ybmVyUmFkaXVzID0gcmFkaXVzICogMC41MTY7XG5cdFx0XHRzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG5cdFx0XHRjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG5cdFx0XHRjdHguYXJjKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuXHRcdFx0Y3R4LmFyYyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcblx0XHRcdGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3JlY3QnOlxuXHRcdFx0aWYgKCFyb3RhdGlvbikge1xuXHRcdFx0XHRzaXplID0gTWF0aC5TUVJUMV8yICogcmFkaXVzO1xuXHRcdFx0XHRjdHgucmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0cmFkICs9IFFVQVJURVJfUEk7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAncmVjdFJvdCc6XG5cdFx0XHR4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY3Jvc3NSb3QnOlxuXHRcdFx0cmFkICs9IFFVQVJURVJfUEk7XG5cdFx0XHQvKiBmYWxscyB0aHJvdWdoICovXG5cdFx0Y2FzZSAnY3Jvc3MnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3N0YXInOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdHJhZCArPSBRVUFSVEVSX1BJO1xuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2xpbmUnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Rhc2gnOlxuXHRcdFx0Y3R4Lm1vdmVUbyh4LCB5KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXMsIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGN0eC5maWxsKCk7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcmVjdGFuZ2xlXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludCAtIFRoZSBwb2ludCB0byB0ZXN0XG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBhcmVhIC0gVGhlIHJlY3RhbmdsZVxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pc1BvaW50SW5BcmVhOiBmdW5jdGlvbihwb2ludCwgYXJlYSkge1xuXHRcdHZhciBlcHNpbG9uID0gMWUtNjsgLy8gMWUtNiBpcyBtYXJnaW4gaW4gcGl4ZWxzIGZvciBhY2N1bXVsYXRlZCBlcnJvci5cblxuXHRcdHJldHVybiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gZXBzaWxvbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIGVwc2lsb24gJiZcblx0XHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIGVwc2lsb24gJiYgcG9pbnQueSA8IGFyZWEuYm90dG9tICsgZXBzaWxvbjtcblx0fSxcblxuXHRjbGlwQXJlYTogZnVuY3Rpb24oY3R4LCBhcmVhKSB7XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0fSxcblxuXHR1bmNsaXBBcmVhOiBmdW5jdGlvbihjdHgpIHtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG5cdFx0dmFyIHN0ZXBwZWQgPSB0YXJnZXQuc3RlcHBlZExpbmU7XG5cdFx0aWYgKHN0ZXBwZWQpIHtcblx0XHRcdGlmIChzdGVwcGVkID09PSAnbWlkZGxlJykge1xuXHRcdFx0XHR2YXIgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcblx0XHRcdFx0Y3R4LmxpbmVUbyhtaWRwb2ludCwgZmxpcCA/IHRhcmdldC55IDogcHJldmlvdXMueSk7XG5cdFx0XHRcdGN0eC5saW5lVG8obWlkcG9pbnQsIGZsaXAgPyBwcmV2aW91cy55IDogdGFyZ2V0LnkpO1xuXHRcdFx0fSBlbHNlIGlmICgoc3RlcHBlZCA9PT0gJ2FmdGVyJyAmJiAhZmxpcCkgfHwgKHN0ZXBwZWQgIT09ICdhZnRlcicgJiYgZmxpcCkpIHtcblx0XHRcdFx0Y3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcblx0XHRcdH1cblx0XHRcdGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRhcmdldC50ZW5zaW9uKSB7XG5cdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LmJlemllckN1cnZlVG8oXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNYIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFgsXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNZIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFksXG5cdFx0XHRmbGlwID8gdGFyZ2V0LmNvbnRyb2xQb2ludE5leHRYIDogdGFyZ2V0LmNvbnRyb2xQb2ludFByZXZpb3VzWCxcblx0XHRcdGZsaXAgPyB0YXJnZXQuY29udHJvbFBvaW50TmV4dFkgOiB0YXJnZXQuY29udHJvbFBvaW50UHJldmlvdXNZLFxuXHRcdFx0dGFyZ2V0LngsXG5cdFx0XHR0YXJnZXQueSk7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX2NhbnZhcyA9IGV4cG9ydHMkMTtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5jbGVhciBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmNsZWFyXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzX2NvcmUuY2xlYXIgPSBleHBvcnRzJDEuY2xlYXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5yb3VuZGVkUmVjdCBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzX2NvcmUuZHJhd1JvdW5kZWRSZWN0YW5nbGUgPSBmdW5jdGlvbihjdHgpIHtcblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRleHBvcnRzJDEucm91bmRlZFJlY3QuYXBwbHkoZXhwb3J0cyQxLCBhcmd1bWVudHMpO1xufTtcblxudmFyIGRlZmF1bHRzID0ge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9zZXQ6IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZXMpIHtcblx0XHRyZXR1cm4gaGVscGVyc19jb3JlLm1lcmdlKHRoaXNbc2NvcGVdIHx8ICh0aGlzW3Njb3BlXSA9IHt9KSwgdmFsdWVzKTtcblx0fVxufTtcblxuLy8gVE9ETyh2Myk6IHJlbW92ZSAnZ2xvYmFsJyBmcm9tIG5hbWVzcGFjZS4gIGFsbCBkZWZhdWx0IGFyZSBnbG9iYWwgYW5kXG4vLyB0aGVyZSdzIGluY29uc2lzdGVuY3kgYXJvdW5kIHdoaWNoIG9wdGlvbnMgYXJlIHVuZGVyICdnbG9iYWwnXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGRlZmF1bHRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdGRlZmF1bHRGb250Q29sb3I6ICcjNjY2Jyxcblx0ZGVmYXVsdEZvbnRGYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcblx0ZGVmYXVsdEZvbnRTaXplOiAxMixcblx0ZGVmYXVsdEZvbnRTdHlsZTogJ25vcm1hbCcsXG5cdGRlZmF1bHRMaW5lSGVpZ2h0OiAxLjIsXG5cdHNob3dMaW5lczogdHJ1ZVxufSk7XG5cbnZhciBjb3JlX2RlZmF1bHRzID0gZGVmYXVsdHM7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnNfY29yZS52YWx1ZU9yRGVmYXVsdDtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gZm9udCBvYmplY3QgaW50byBhIENTUyBmb250IHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBmb250IC0gQSBmb250IG9iamVjdC5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIENTUyBmb250IHN0cmluZy4gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9mb250XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiB0b0ZvbnRTdHJpbmcoZm9udCkge1xuXHRpZiAoIWZvbnQgfHwgaGVscGVyc19jb3JlLmlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBoZWxwZXJzX2NvcmUuaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJylcblx0XHQrIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpXG5cdFx0KyBmb250LnNpemUgKyAncHggJ1xuXHRcdCsgZm9udC5mYW1pbHk7XG59XG5cbi8qKlxuICogQGFsaWFzIENoYXJ0LmhlbHBlcnMub3B0aW9uc1xuICogQG5hbWVzcGFjZVxuICovXG52YXIgaGVscGVyc19vcHRpb25zID0ge1xuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuXHQgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBmb250IHNpemUgKGluIHBpeGVscykgdXNlZCB0byByZXNvbHZlIHJlbGF0aXZlIGB2YWx1ZWAuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBlZmZlY3RpdmUgbGluZSBoZWlnaHQgaW4gcGl4ZWxzIChzaXplICogMS4yIGlmIHZhbHVlIGlzIGludmFsaWQpLlxuXHQgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvTGluZUhlaWdodDogZnVuY3Rpb24odmFsdWUsIHNpemUpIHtcblx0XHR2YXIgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaCgvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLyk7XG5cdFx0aWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG5cdFx0XHRyZXR1cm4gc2l6ZSAqIDEuMjtcblx0XHR9XG5cblx0XHR2YWx1ZSA9ICttYXRjaGVzWzJdO1xuXG5cdFx0c3dpdGNoIChtYXRjaGVzWzNdKSB7XG5cdFx0Y2FzZSAncHgnOlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGNhc2UgJyUnOlxuXHRcdFx0dmFsdWUgLz0gMTAwO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNpemUgKiB2YWx1ZTtcblx0fSxcblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfG9iamVjdH0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG5cdCAqICBlbHNlLCBpZiBhbmQgb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KVxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvUGFkZGluZzogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgdCwgciwgYiwgbDtcblxuXHRcdGlmIChoZWxwZXJzX2NvcmUuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0XHR0ID0gK3ZhbHVlLnRvcCB8fCAwO1xuXHRcdFx0ciA9ICt2YWx1ZS5yaWdodCB8fCAwO1xuXHRcdFx0YiA9ICt2YWx1ZS5ib3R0b20gfHwgMDtcblx0XHRcdGwgPSArdmFsdWUubGVmdCB8fCAwO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gciA9IGIgPSBsID0gK3ZhbHVlIHx8IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogdCxcblx0XHRcdHJpZ2h0OiByLFxuXHRcdFx0Ym90dG9tOiBiLFxuXHRcdFx0bGVmdDogbCxcblx0XHRcdGhlaWdodDogdCArIGIsXG5cdFx0XHR3aWR0aDogbCArIHJcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgZm9udCBvcHRpb25zIGFuZCByZXR1cm5zIHRoZSBmb250IG9iamVjdC5cblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBBIG9iamVjdCB0aGF0IGNvbnRhaW5zIGZvbnQgb3B0aW9ucyB0byBiZSBwYXJzZWQuXG5cdCAqIEByZXR1cm4ge29iamVjdH0gVGhlIGZvbnQgb2JqZWN0LlxuXHQgKiBAdG9kbyBTdXBwb3J0IGZvbnQuKiBvcHRpb25zIGFuZCByZW5hbWVkIHRvIHRvRm9udCgpLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3BhcnNlRm9udDogZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBnbG9iYWxEZWZhdWx0cyA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKTtcblx0XHR2YXIgZm9udCA9IHtcblx0XHRcdGZhbWlseTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0XHRsaW5lSGVpZ2h0OiBoZWxwZXJzX2NvcmUub3B0aW9ucy50b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0TGluZUhlaWdodCksIHNpemUpLFxuXHRcdFx0c2l6ZTogc2l6ZSxcblx0XHRcdHN0eWxlOiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0XHR3ZWlnaHQ6IG51bGwsXG5cdFx0XHRzdHJpbmc6ICcnXG5cdFx0fTtcblxuXHRcdGZvbnQuc3RyaW5nID0gdG9Gb250U3RyaW5nKGZvbnQpO1xuXHRcdHJldHVybiBmb250O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGBpbnB1dHNgIHNlcXVlbnRpYWxseSBhbmQgcmV0dXJucyB0aGUgZmlyc3QgZGVmaW5lZCB2YWx1ZS5cblx0ICogQHBhcmFtIHtBcnJheX0gaW5wdXRzIC0gQW4gYXJyYXkgb2YgdmFsdWVzLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGxhc3QgdmFsdWUuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbY29udGV4dF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgdmFsdWVcblx0ICogaXMgY2FsbGVkIHdpdGggYGNvbnRleHRgIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgcmVzdWx0IGJlY29tZXMgdGhlIG5ldyBpbnB1dC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlIHZhbHVlXG5cdCAqIGF0IGBpbmRleGAgYmVjb21lIHRoZSBuZXcgaW5wdXQuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBbaW5mb10gLSBvYmplY3QgdG8gcmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHJlc29sdXRpb24gaW5cblx0ICogQHBhcmFtIHtib29sZWFufSBbaW5mby5jYWNoZWFibGVdIC0gV2lsbCBiZSBzZXQgdG8gYGZhbHNlYCBpZiBvcHRpb24gaXMgbm90IGNhY2hlYWJsZS5cblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRyZXNvbHZlOiBmdW5jdGlvbihpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG5cdFx0dmFyIGNhY2hlYWJsZSA9IHRydWU7XG5cdFx0dmFyIGksIGlsZW4sIHZhbHVlO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHZhbHVlID0gaW5wdXRzW2ldO1xuXHRcdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuXHRcdFx0XHRjYWNoZWFibGUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGhlbHBlcnNfY29yZS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW2luZGV4XTtcblx0XHRcdFx0Y2FjaGVhYmxlID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRpZiAoaW5mbyAmJiAhY2FjaGVhYmxlKSB7XG5cdFx0XHRcdFx0aW5mby5jYWNoZWFibGUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm1hdGhcbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIGV4cG9ydHMkMiA9IHtcblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgb2YgZmFjdG9ycyBzb3J0ZWQgZnJvbSAxIHRvIHNxcnQodmFsdWUpXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZmFjdG9yaXplOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR2YXIgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG5cdFx0dmFyIGk7XG5cblx0XHRmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG5cdFx0XHRpZiAodmFsdWUgJSBpID09PSAwKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKGkpO1xuXHRcdFx0XHRyZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkgeyAvLyBpZiB2YWx1ZSBpcyBhIHNxdWFyZSBudW1iZXJcblx0XHRcdHJlc3VsdC5wdXNoKHNxcnQpO1xuXHRcdH1cblxuXHRcdHJlc3VsdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHJldHVybiBhIC0gYjtcblx0XHR9KS5wb3AoKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LFxuXG5cdGxvZzEwOiBNYXRoLmxvZzEwIHx8IGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgZXhwb25lbnQgPSBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFOyAvLyBNYXRoLkxPRzEwRSA9IDEgLyBNYXRoLkxOMTAuXG5cdFx0Ly8gQ2hlY2sgZm9yIHdob2xlIHBvd2VycyBvZiAxMCxcblx0XHQvLyB3aGljaCBkdWUgdG8gZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3Igc2hvdWxkIGJlIGNvcnJlY3RlZC5cblx0XHR2YXIgcG93ZXJPZjEwID0gTWF0aC5yb3VuZChleHBvbmVudCk7XG5cdFx0dmFyIGlzUG93ZXJPZjEwID0geCA9PT0gTWF0aC5wb3coMTAsIHBvd2VyT2YxMCk7XG5cblx0XHRyZXR1cm4gaXNQb3dlck9mMTAgPyBwb3dlck9mMTAgOiBleHBvbmVudDtcblx0fVxufTtcblxudmFyIGhlbHBlcnNfbWF0aCA9IGV4cG9ydHMkMjtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLm1hdGgubG9nMTAgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5sb2cxMFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjkuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVyc19jb3JlLmxvZzEwID0gZXhwb3J0cyQyLmxvZzEwO1xuXG52YXIgZ2V0UnRsQWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuXHRyZXR1cm4ge1xuXHRcdHg6IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuXHRcdH0sXG5cdFx0c2V0V2lkdGg6IGZ1bmN0aW9uKHcpIHtcblx0XHRcdHdpZHRoID0gdztcblx0XHR9LFxuXHRcdHRleHRBbGlnbjogZnVuY3Rpb24oYWxpZ24pIHtcblx0XHRcdGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRcdFx0cmV0dXJuIGFsaWduO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHR9LFxuXHRcdHhQbHVzOiBmdW5jdGlvbih4LCB2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHggLSB2YWx1ZTtcblx0XHR9LFxuXHRcdGxlZnRGb3JMdHI6IGZ1bmN0aW9uKHgsIGl0ZW1XaWR0aCkge1xuXHRcdFx0cmV0dXJuIHggLSBpdGVtV2lkdGg7XG5cdFx0fSxcblx0fTtcbn07XG5cbnZhciBnZXRMdHJBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG5cdFx0eDogZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHg7XG5cdFx0fSxcblx0XHRzZXRXaWR0aDogZnVuY3Rpb24odykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cdFx0fSxcblx0XHR0ZXh0QWxpZ246IGZ1bmN0aW9uKGFsaWduKSB7XG5cdFx0XHRyZXR1cm4gYWxpZ247XG5cdFx0fSxcblx0XHR4UGx1czogZnVuY3Rpb24oeCwgdmFsdWUpIHtcblx0XHRcdHJldHVybiB4ICsgdmFsdWU7XG5cdFx0fSxcblx0XHRsZWZ0Rm9yTHRyOiBmdW5jdGlvbih4LCBfaXRlbVdpZHRoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0XHRcdHJldHVybiB4O1xuXHRcdH0sXG5cdH07XG59O1xuXG52YXIgZ2V0QWRhcHRlciA9IGZ1bmN0aW9uKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG5cdHJldHVybiBydGwgPyBnZXRSdGxBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMdHJBZGFwdGVyKCk7XG59O1xuXG52YXIgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uID0gZnVuY3Rpb24oY3R4LCBkaXJlY3Rpb24pIHtcblx0dmFyIHN0eWxlLCBvcmlnaW5hbDtcblx0aWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuXHRcdHN0eWxlID0gY3R4LmNhbnZhcy5zdHlsZTtcblx0XHRvcmlnaW5hbCA9IFtcblx0XHRcdHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2RpcmVjdGlvbicpLFxuXHRcdFx0c3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eSgnZGlyZWN0aW9uJyksXG5cdFx0XTtcblxuXHRcdHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcblx0XHRjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcblx0fVxufTtcblxudmFyIHJlc3RvcmVUZXh0RGlyZWN0aW9uID0gZnVuY3Rpb24oY3R4KSB7XG5cdHZhciBvcmlnaW5hbCA9IGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcblx0aWYgKG9yaWdpbmFsICE9PSB1bmRlZmluZWQpIHtcblx0XHRkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuXHRcdGN0eC5jYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIG9yaWdpbmFsWzBdLCBvcmlnaW5hbFsxXSk7XG5cdH1cbn07XG5cbnZhciBoZWxwZXJzX3J0bCA9IHtcblx0Z2V0UnRsQWRhcHRlcjogZ2V0QWRhcHRlcixcblx0b3ZlcnJpZGVUZXh0RGlyZWN0aW9uOiBvdmVycmlkZVRleHREaXJlY3Rpb24sXG5cdHJlc3RvcmVUZXh0RGlyZWN0aW9uOiByZXN0b3JlVGV4dERpcmVjdGlvbixcbn07XG5cbnZhciBoZWxwZXJzJDEgPSBoZWxwZXJzX2NvcmU7XG52YXIgZWFzaW5nID0gaGVscGVyc19lYXNpbmc7XG52YXIgY2FudmFzID0gaGVscGVyc19jYW52YXM7XG52YXIgb3B0aW9ucyA9IGhlbHBlcnNfb3B0aW9ucztcbnZhciBtYXRoID0gaGVscGVyc19tYXRoO1xudmFyIHJ0bCA9IGhlbHBlcnNfcnRsO1xuaGVscGVycyQxLmVhc2luZyA9IGVhc2luZztcbmhlbHBlcnMkMS5jYW52YXMgPSBjYW52YXM7XG5oZWxwZXJzJDEub3B0aW9ucyA9IG9wdGlvbnM7XG5oZWxwZXJzJDEubWF0aCA9IG1hdGg7XG5oZWxwZXJzJDEucnRsID0gcnRsO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGFydCwgdmlldywgbW9kZWwsIGVhc2UpIHtcblx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhtb2RlbCk7XG5cdHZhciBpLCBpbGVuLCBrZXksIGFjdHVhbCwgb3JpZ2luLCB0YXJnZXQsIHR5cGUsIGMwLCBjMTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRrZXkgPSBrZXlzW2ldO1xuXG5cdFx0dGFyZ2V0ID0gbW9kZWxba2V5XTtcblxuXHRcdC8vIGlmIGEgdmFsdWUgaXMgYWRkZWQgdG8gdGhlIG1vZGVsIGFmdGVyIHBpdm90KCkgaGFzIGJlZW4gY2FsbGVkLCB0aGUgdmlld1xuXHRcdC8vIGRvZXNuJ3QgY29udGFpbiBpdCwgc28gbGV0J3MgaW5pdGlhbGl6ZSB0aGUgdmlldyB0byB0aGUgdGFyZ2V0IHZhbHVlLlxuXHRcdGlmICghdmlldy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHR2aWV3W2tleV0gPSB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0YWN0dWFsID0gdmlld1trZXldO1xuXG5cdFx0aWYgKGFjdHVhbCA9PT0gdGFyZ2V0IHx8IGtleVswXSA9PT0gJ18nKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRpZiAoIXN0YXJ0Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdHN0YXJ0W2tleV0gPSBhY3R1YWw7XG5cdFx0fVxuXG5cdFx0b3JpZ2luID0gc3RhcnRba2V5XTtcblxuXHRcdHR5cGUgPSB0eXBlb2YgdGFyZ2V0O1xuXG5cdFx0aWYgKHR5cGUgPT09IHR5cGVvZiBvcmlnaW4pIHtcblx0XHRcdGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRjMCA9IGNoYXJ0anNDb2xvcihvcmlnaW4pO1xuXHRcdFx0XHRpZiAoYzAudmFsaWQpIHtcblx0XHRcdFx0XHRjMSA9IGNoYXJ0anNDb2xvcih0YXJnZXQpO1xuXHRcdFx0XHRcdGlmIChjMS52YWxpZCkge1xuXHRcdFx0XHRcdFx0dmlld1trZXldID0gYzEubWl4KGMwLCBlYXNlKS5yZ2JTdHJpbmcoKTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChoZWxwZXJzJDEuaXNGaW5pdGUob3JpZ2luKSAmJiBoZWxwZXJzJDEuaXNGaW5pdGUodGFyZ2V0KSkge1xuXHRcdFx0XHR2aWV3W2tleV0gPSBvcmlnaW4gKyAodGFyZ2V0IC0gb3JpZ2luKSAqIGVhc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZpZXdba2V5XSA9IHRhcmdldDtcblx0fVxufVxuXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcblx0aGVscGVycyQxLmV4dGVuZCh0aGlzLCBjb25maWd1cmF0aW9uKTtcblx0dGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuXG5oZWxwZXJzJDEuZXh0ZW5kKEVsZW1lbnQucHJvdG90eXBlLCB7XG5cdF90eXBlOiB1bmRlZmluZWQsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oaWRkZW4gPSBmYWxzZTtcblx0fSxcblxuXHRwaXZvdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAoIW1lLl92aWV3KSB7XG5cdFx0XHRtZS5fdmlldyA9IGhlbHBlcnMkMS5leHRlbmQoe30sIG1lLl9tb2RlbCk7XG5cdFx0fVxuXHRcdG1lLl9zdGFydCA9IHt9O1xuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHR0cmFuc2l0aW9uOiBmdW5jdGlvbihlYXNlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbW9kZWwgPSBtZS5fbW9kZWw7XG5cdFx0dmFyIHN0YXJ0ID0gbWUuX3N0YXJ0O1xuXHRcdHZhciB2aWV3ID0gbWUuX3ZpZXc7XG5cblx0XHQvLyBObyBhbmltYXRpb24gLT4gTm8gVHJhbnNpdGlvblxuXHRcdGlmICghbW9kZWwgfHwgZWFzZSA9PT0gMSkge1xuXHRcdFx0bWUuX3ZpZXcgPSBoZWxwZXJzJDEuZXh0ZW5kKHt9LCBtb2RlbCk7XG5cdFx0XHRtZS5fc3RhcnQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIG1lO1xuXHRcdH1cblxuXHRcdGlmICghdmlldykge1xuXHRcdFx0dmlldyA9IG1lLl92aWV3ID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKCFzdGFydCkge1xuXHRcdFx0c3RhcnQgPSBtZS5fc3RhcnQgPSB7fTtcblx0XHR9XG5cblx0XHRpbnRlcnBvbGF0ZShzdGFydCwgdmlldywgbW9kZWwsIGVhc2UpO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHRoaXMuX21vZGVsLngsXG5cdFx0XHR5OiB0aGlzLl9tb2RlbC55XG5cdFx0fTtcblx0fSxcblxuXHRoYXNWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMkMS5pc051bWJlcih0aGlzLl9tb2RlbC54KSAmJiBoZWxwZXJzJDEuaXNOdW1iZXIodGhpcy5fbW9kZWwueSk7XG5cdH1cbn0pO1xuXG5FbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMkMS5pbmhlcml0cztcblxudmFyIGNvcmVfZWxlbWVudCA9IEVsZW1lbnQ7XG5cbnZhciBleHBvcnRzJDMgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0Y2hhcnQ6IG51bGwsIC8vIHRoZSBhbmltYXRpb24gYXNzb2NpYXRlZCBjaGFydCBpbnN0YW5jZVxuXHRjdXJyZW50U3RlcDogMCwgLy8gdGhlIGN1cnJlbnQgYW5pbWF0aW9uIHN0ZXBcblx0bnVtU3RlcHM6IDYwLCAvLyBkZWZhdWx0IG51bWJlciBvZiBzdGVwc1xuXHRlYXNpbmc6ICcnLCAvLyB0aGUgZWFzaW5nIHRvIHVzZSBmb3IgdGhpcyBhbmltYXRpb25cblx0cmVuZGVyOiBudWxsLCAvLyByZW5kZXIgZnVuY3Rpb24gdXNlZCBieSB0aGUgYW5pbWF0aW9uIHNlcnZpY2VcblxuXHRvbkFuaW1hdGlvblByb2dyZXNzOiBudWxsLCAvLyB1c2VyIHNwZWNpZmllZCBjYWxsYmFjayB0byBmaXJlIG9uIGVhY2ggc3RlcCBvZiB0aGUgYW5pbWF0aW9uXG5cdG9uQW5pbWF0aW9uQ29tcGxldGU6IG51bGwsIC8vIHVzZXIgc3BlY2lmaWVkIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzXG59KTtcblxudmFyIGNvcmVfYW5pbWF0aW9uID0gZXhwb3J0cyQzO1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LkFuaW1hdGlvbiBpbnN0ZWFkXG4gKiBAcHJvcCBDaGFydC5BbmltYXRpb24jYW5pbWF0aW9uT2JqZWN0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzJDMucHJvdG90eXBlLCAnYW5pbWF0aW9uT2JqZWN0Jywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LkFuaW1hdGlvbiNjaGFydCBpbnN0ZWFkXG4gKiBAcHJvcCBDaGFydC5BbmltYXRpb24jY2hhcnRJbnN0YW5jZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyQzLnByb3RvdHlwZSwgJ2NoYXJ0SW5zdGFuY2UnLCB7XG5cdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2hhcnQ7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR0aGlzLmNoYXJ0ID0gdmFsdWU7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0YW5pbWF0aW9uOiB7XG5cdFx0ZHVyYXRpb246IDEwMDAsXG5cdFx0ZWFzaW5nOiAnZWFzZU91dFF1YXJ0Jyxcblx0XHRvblByb2dyZXNzOiBoZWxwZXJzJDEubm9vcCxcblx0XHRvbkNvbXBsZXRlOiBoZWxwZXJzJDEubm9vcFxuXHR9XG59KTtcblxudmFyIGNvcmVfYW5pbWF0aW9ucyA9IHtcblx0YW5pbWF0aW9uczogW10sXG5cdHJlcXVlc3Q6IG51bGwsXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IHRvIGFuaW1hdGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQW5pbWF0aW9ufSBhbmltYXRpb24gLSBUaGUgYW5pbWF0aW9uIHRoYXQgd2Ugd2lsbCBhbmltYXRlLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgYW5pbWF0aW9uIGR1cmF0aW9uIGluIG1zLlxuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGxhenkgLSBpZiB0cnVlLCB0aGUgY2hhcnQgaXMgbm90IG1hcmtlZCBhcyBhbmltYXRpbmcgdG8gZW5hYmxlIG1vcmUgcmVzcG9uc2l2ZSBpbnRlcmFjdGlvbnNcblx0ICovXG5cdGFkZEFuaW1hdGlvbjogZnVuY3Rpb24oY2hhcnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIGxhenkpIHtcblx0XHR2YXIgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucztcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGFuaW1hdGlvbi5jaGFydCA9IGNoYXJ0O1xuXHRcdGFuaW1hdGlvbi5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdGFuaW1hdGlvbi5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0aWYgKCFsYXp5KSB7XG5cdFx0XHRjaGFydC5hbmltYXRpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhbmltYXRpb25zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0aWYgKGFuaW1hdGlvbnNbaV0uY2hhcnQgPT09IGNoYXJ0KSB7XG5cdFx0XHRcdGFuaW1hdGlvbnNbaV0gPSBhbmltYXRpb247XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRhbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcblxuXHRcdC8vIElmIHRoZXJlIGFyZSBubyBhbmltYXRpb25zIHF1ZXVlZCwgbWFudWFsbHkga2lja3N0YXJ0IGEgZGlnZXN0LCBmb3IgbGFjayBvZiBhIGJldHRlciB3b3JkXG5cdFx0aWYgKGFuaW1hdGlvbnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHR0aGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuXHRcdH1cblx0fSxcblxuXHRjYW5jZWxBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGluZGV4ID0gaGVscGVycyQxLmZpbmRJbmRleCh0aGlzLmFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbikge1xuXHRcdFx0cmV0dXJuIGFuaW1hdGlvbi5jaGFydCA9PT0gY2hhcnQ7XG5cdFx0fSk7XG5cblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdGNoYXJ0LmFuaW1hdGluZyA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblxuXHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKG1lLnJlcXVlc3QgPT09IG51bGwpIHtcblx0XHRcdC8vIFNraXAgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3RzIHVudGlsIHRoZSBhY3RpdmUgb25lIGlzIGV4ZWN1dGVkLlxuXHRcdFx0Ly8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gcHJvY2Vzc2luZyBtb3VzZSBldmVudHMsIGUuZy4gJ21vdXNlbW92ZSdcblx0XHRcdC8vIGFuZCAnbW91c2VvdXQnIGV2ZW50cyB3aWxsIHRyaWdnZXIgbXVsdGlwbGUgcmVuZGVycy5cblx0XHRcdG1lLnJlcXVlc3QgPSBoZWxwZXJzJDEucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLnJlcXVlc3QgPSBudWxsO1xuXHRcdFx0XHRtZS5zdGFydERpZ2VzdCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c3RhcnREaWdlc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRtZS5hZHZhbmNlKCk7XG5cblx0XHQvLyBEbyB3ZSBoYXZlIG1vcmUgc3R1ZmYgdG8gYW5pbWF0ZT9cblx0XHRpZiAobWUuYW5pbWF0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRhZHZhbmNlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucztcblx0XHR2YXIgYW5pbWF0aW9uLCBjaGFydCwgbnVtU3RlcHMsIG5leHRTdGVwO1xuXHRcdHZhciBpID0gMDtcblxuXHRcdC8vIDEgYW5pbWF0aW9uIHBlciBjaGFydCwgc28gd2UgYXJlIGxvb3BpbmcgY2hhcnRzIGhlcmVcblx0XHR3aGlsZSAoaSA8IGFuaW1hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb25zW2ldO1xuXHRcdFx0Y2hhcnQgPSBhbmltYXRpb24uY2hhcnQ7XG5cdFx0XHRudW1TdGVwcyA9IGFuaW1hdGlvbi5udW1TdGVwcztcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgY3VycmVudFN0ZXAgc3RhcnRzIGF0IDFcblx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy82MTA0XG5cdFx0XHRuZXh0U3RlcCA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSBhbmltYXRpb24uc3RhcnRUaW1lKSAvIGFuaW1hdGlvbi5kdXJhdGlvbiAqIG51bVN0ZXBzKSArIDE7XG5cdFx0XHRhbmltYXRpb24uY3VycmVudFN0ZXAgPSBNYXRoLm1pbihuZXh0U3RlcCwgbnVtU3RlcHMpO1xuXG5cdFx0XHRoZWxwZXJzJDEuY2FsbGJhY2soYW5pbWF0aW9uLnJlbmRlciwgW2NoYXJ0LCBhbmltYXRpb25dLCBjaGFydCk7XG5cdFx0XHRoZWxwZXJzJDEuY2FsbGJhY2soYW5pbWF0aW9uLm9uQW5pbWF0aW9uUHJvZ3Jlc3MsIFthbmltYXRpb25dLCBjaGFydCk7XG5cblx0XHRcdGlmIChhbmltYXRpb24uY3VycmVudFN0ZXAgPj0gbnVtU3RlcHMpIHtcblx0XHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXHRcdFx0XHRjaGFydC5hbmltYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0YW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQrK2k7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgcmVzb2x2ZSA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG5cbnZhciBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcblxuLyoqXG4gKiBIb29rcyB0aGUgYXJyYXkgbWV0aG9kcyB0aGF0IGFkZCBvciByZW1vdmUgdmFsdWVzICgncHVzaCcsIHBvcCcsICdzaGlmdCcsICdzcGxpY2UnLFxuICogJ3Vuc2hpZnQnKSBhbmQgbm90aWZ5IHRoZSBsaXN0ZW5lciBBRlRFUiB0aGUgYXJyYXkgaGFzIGJlZW4gYWx0ZXJlZC4gTGlzdGVuZXJzIGFyZVxuICogY2FsbGVkIG9uIHRoZSAnb25EYXRhKicgY2FsbGJhY2tzIChlLmcuIG9uRGF0YVB1c2gsIGV0Yy4pIHdpdGggc2FtZSBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuXHRpZiAoYXJyYXkuX2NoYXJ0anMpIHtcblx0XHRhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX2NoYXJ0anMnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdHZhbHVlOiB7XG5cdFx0XHRsaXN0ZW5lcnM6IFtsaXN0ZW5lcl1cblx0XHR9XG5cdH0pO1xuXG5cdGFycmF5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0dmFyIG1ldGhvZCA9ICdvbkRhdGEnICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpO1xuXHRcdHZhciBiYXNlID0gYXJyYXlba2V5XTtcblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdFx0XHR2YXIgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcblxuXHRcdFx0XHRoZWxwZXJzJDEuZWFjaChhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMsIGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdG9iamVjdFttZXRob2RdLmFwcGx5KG9iamVjdCwgYXJncyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRyZXR1cm4gcmVzO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBnaXZlbiBhcnJheSBldmVudCBsaXN0ZW5lciBhbmQgY2xlYW51cCBleHRyYSBhdHRhY2hlZCBwcm9wZXJ0aWVzIChzdWNoIGFzXG4gKiB0aGUgX2NoYXJ0anMgc3R1YiBhbmQgb3ZlcnJpZGRlbiBtZXRob2RzKSBpZiBhcnJheSBkb2Vzbid0IGhhdmUgYW55IG1vcmUgbGlzdGVuZXJzLlxuICovXG5mdW5jdGlvbiB1bmxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuXHR2YXIgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuXHRpZiAoIXN0dWIpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG5cdHZhciBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcblx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHR9XG5cblx0aWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0YXJyYXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRkZWxldGUgYXJyYXlba2V5XTtcblx0fSk7XG5cblx0ZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuXG4vLyBCYXNlIGNsYXNzIGZvciBhbGwgZGF0YXNldCBjb250cm9sbGVycyAobGluZSwgYmFyLCBldGMpXG52YXIgRGF0YXNldENvbnRyb2xsZXIgPSBmdW5jdGlvbihjaGFydCwgZGF0YXNldEluZGV4KSB7XG5cdHRoaXMuaW5pdGlhbGl6ZShjaGFydCwgZGF0YXNldEluZGV4KTtcbn07XG5cbmhlbHBlcnMkMS5leHRlbmQoRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLCB7XG5cblx0LyoqXG5cdCAqIEVsZW1lbnQgdHlwZSB1c2VkIHRvIGdlbmVyYXRlIGEgbWV0YSBkYXRhc2V0IChlLmcuIENoYXJ0LmVsZW1lbnQuTGluZSkuXG5cdCAqIEB0eXBlIHtDaGFydC5jb3JlLmVsZW1lbnR9XG5cdCAqL1xuXHRkYXRhc2V0RWxlbWVudFR5cGU6IG51bGwsXG5cblx0LyoqXG5cdCAqIEVsZW1lbnQgdHlwZSB1c2VkIHRvIGdlbmVyYXRlIGEgbWV0YSBkYXRhIChlLmcuIENoYXJ0LmVsZW1lbnQuUG9pbnQpLlxuXHQgKiBAdHlwZSB7Q2hhcnQuY29yZS5lbGVtZW50fVxuXHQgKi9cblx0ZGF0YUVsZW1lbnRUeXBlOiBudWxsLFxuXG5cdC8qKlxuXHQgKiBEYXRhc2V0IGVsZW1lbnQgb3B0aW9uIGtleXMgdG8gYmUgcmVzb2x2ZWQgaW4gX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMuXG5cdCAqIEEgZGVyaXZlZCBjb250cm9sbGVyIG1heSBvdmVycmlkZSB0aGlzIHRvIHJlc29sdmUgY29udHJvbGxlci1zcGVjaWZpYyBvcHRpb25zLlxuXHQgKiBUaGUga2V5cyBkZWZpbmVkIGhlcmUgYXJlIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBsZWdlbmQgc3R5bGVzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFzZXRFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDYXBTdHlsZScsXG5cdFx0J2JvcmRlckNvbG9yJyxcblx0XHQnYm9yZGVyRGFzaCcsXG5cdFx0J2JvcmRlckRhc2hPZmZzZXQnLFxuXHRcdCdib3JkZXJKb2luU3R5bGUnLFxuXHRcdCdib3JkZXJXaWR0aCdcblx0XSxcblxuXHQvKipcblx0ICogRGF0YSBlbGVtZW50IG9wdGlvbiBrZXlzIHRvIGJlIHJlc29sdmVkIGluIF9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zLlxuXHQgKiBBIGRlcml2ZWQgY29udHJvbGxlciBtYXkgb3ZlcnJpZGUgdGhpcyB0byByZXNvbHZlIGNvbnRyb2xsZXItc3BlY2lmaWMgb3B0aW9ucy5cblx0ICogVGhlIGtleXMgZGVmaW5lZCBoZXJlIGFyZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3IgbGVnZW5kIHN0eWxlcy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J3BvaW50U3R5bGUnXG5cdF0sXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUuY2hhcnQgPSBjaGFydDtcblx0XHRtZS5pbmRleCA9IGRhdGFzZXRJbmRleDtcblx0XHRtZS5saW5rU2NhbGVzKCk7XG5cdFx0bWUuYWRkRWxlbWVudHMoKTtcblx0XHRtZS5fdHlwZSA9IG1lLmdldE1ldGEoKS50eXBlO1xuXHR9LFxuXG5cdHVwZGF0ZUluZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHR0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuXHR9LFxuXG5cdGxpbmtTY2FsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgc2NhbGVzT3B0cyA9IGNoYXJ0Lm9wdGlvbnMuc2NhbGVzO1xuXG5cdFx0aWYgKG1ldGEueEF4aXNJRCA9PT0gbnVsbCB8fCAhKG1ldGEueEF4aXNJRCBpbiBzY2FsZXMpIHx8IGRhdGFzZXQueEF4aXNJRCkge1xuXHRcdFx0bWV0YS54QXhpc0lEID0gZGF0YXNldC54QXhpc0lEIHx8IHNjYWxlc09wdHMueEF4ZXNbMF0uaWQ7XG5cdFx0fVxuXHRcdGlmIChtZXRhLnlBeGlzSUQgPT09IG51bGwgfHwgIShtZXRhLnlBeGlzSUQgaW4gc2NhbGVzKSB8fCBkYXRhc2V0LnlBeGlzSUQpIHtcblx0XHRcdG1ldGEueUF4aXNJRCA9IGRhdGFzZXQueUF4aXNJRCB8fCBzY2FsZXNPcHRzLnlBeGVzWzBdLmlkO1xuXHRcdH1cblx0fSxcblxuXHRnZXREYXRhc2V0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuXHR9LFxuXG5cdGdldE1ldGE6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuXHR9LFxuXG5cdGdldFNjYWxlRm9ySWQ6IGZ1bmN0aW9uKHNjYWxlSUQpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbc2NhbGVJRF07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueUF4aXNJRDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRJbmRleFNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS54QXhpc0lEO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFZhbHVlU2NhbGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5fZ2V0VmFsdWVTY2FsZUlkKCkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5fZ2V0SW5kZXhTY2FsZUlkKCkpO1xuXHR9LFxuXG5cdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl91cGRhdGUodHJ1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fZGF0YSkge1xuXHRcdFx0dW5saXN0ZW5BcnJheUV2ZW50cyh0aGlzLl9kYXRhLCB0aGlzKTtcblx0XHR9XG5cdH0sXG5cblx0Y3JlYXRlTWV0YURhdGFzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHR5cGUgPSBtZS5kYXRhc2V0RWxlbWVudFR5cGU7XG5cdFx0cmV0dXJuIHR5cGUgJiYgbmV3IHR5cGUoe1xuXHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fSk7XG5cdH0sXG5cblx0Y3JlYXRlTWV0YURhdGE6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdHlwZSA9IG1lLmRhdGFFbGVtZW50VHlwZTtcblx0XHRyZXR1cm4gdHlwZSAmJiBuZXcgdHlwZSh7XG5cdFx0XHRfY2hhcnQ6IG1lLmNoYXJ0LFxuXHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRfaW5kZXg6IGluZGV4XG5cdFx0fSk7XG5cdH0sXG5cblx0YWRkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YSB8fCBbXTtcblx0XHR2YXIgbWV0YURhdGEgPSBtZXRhLmRhdGE7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGFEYXRhW2ldID0gbWV0YURhdGFbaV0gfHwgbWUuY3JlYXRlTWV0YURhdGEoaSk7XG5cdFx0fVxuXG5cdFx0bWV0YS5kYXRhc2V0ID0gbWV0YS5kYXRhc2V0IHx8IG1lLmNyZWF0ZU1ldGFEYXRhc2V0KCk7XG5cdH0sXG5cblx0YWRkRWxlbWVudEFuZFJlc2V0OiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVNZXRhRGF0YShpbmRleCk7XG5cdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5zcGxpY2UoaW5kZXgsIDAsIGVsZW1lbnQpO1xuXHRcdHRoaXMudXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgdHJ1ZSk7XG5cdH0sXG5cblx0YnVpbGRPclVwZGF0ZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBkYXRhID0gZGF0YXNldC5kYXRhIHx8IChkYXRhc2V0LmRhdGEgPSBbXSk7XG5cblx0XHQvLyBJbiBvcmRlciB0byBjb3JyZWN0bHkgaGFuZGxlIGRhdGEgYWRkaXRpb24vZGVsZXRpb24gYW5pbWF0aW9uIChhbiB0aHVzIHNpbXVsYXRlXG5cdFx0Ly8gcmVhbC10aW1lIGNoYXJ0cyksIHdlIG5lZWQgdG8gbW9uaXRvciB0aGVzZSBkYXRhIG1vZGlmaWNhdGlvbnMgYW5kIHN5bmNocm9uaXplXG5cdFx0Ly8gdGhlIGludGVybmFsIG1ldGEgZGF0YSBhY2NvcmRpbmdseS5cblx0XHRpZiAobWUuX2RhdGEgIT09IGRhdGEpIHtcblx0XHRcdGlmIChtZS5fZGF0YSkge1xuXHRcdFx0XHQvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHRoZSB1c2VyIHJlcGxhY2VkIHRoZSBkYXRhIGFycmF5IGluc3RhbmNlLlxuXHRcdFx0XHR1bmxpc3RlbkFycmF5RXZlbnRzKG1lLl9kYXRhLCBtZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChkYXRhICYmIE9iamVjdC5pc0V4dGVuc2libGUoZGF0YSkpIHtcblx0XHRcdFx0bGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgbWUpO1xuXHRcdFx0fVxuXHRcdFx0bWUuX2RhdGEgPSBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFJlLXN5bmMgbWV0YSBkYXRhIGluIGNhc2UgdGhlIHVzZXIgcmVwbGFjZWQgdGhlIGRhdGEgYXJyYXkgb3IgaWYgd2UgbWlzc2VkXG5cdFx0Ly8gYW55IHVwZGF0ZXMgYW5kIHNvIG1ha2Ugc3VyZSB0aGF0IHdlIGhhbmRsZSBudW1iZXIgb2YgZGF0YXBvaW50cyBjaGFuZ2luZy5cblx0XHRtZS5yZXN5bmNFbGVtZW50cygpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtZXJnZWQgdXNlci1zdXBwbGllZCBhbmQgZGVmYXVsdCBkYXRhc2V0LWxldmVsIG9wdGlvbnNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0bWUuX2NvbmZpZyA9IGhlbHBlcnMkMS5tZXJnZSh7fSwgW1xuXHRcdFx0bWUuY2hhcnQub3B0aW9ucy5kYXRhc2V0c1ttZS5fdHlwZV0sXG5cdFx0XHRtZS5nZXREYXRhc2V0KCksXG5cdFx0XSwge1xuXHRcdFx0bWVyZ2VyOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlKSB7XG5cdFx0XHRcdGlmIChrZXkgIT09ICdfbWV0YScgJiYga2V5ICE9PSAnZGF0YScpIHtcblx0XHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF91cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRtZS5fY29uZmlndXJlKCk7XG5cdFx0bWUuX2NhY2hlZERhdGFPcHRzID0gbnVsbDtcblx0XHRtZS51cGRhdGUocmVzZXQpO1xuXHR9LFxuXG5cdHVwZGF0ZTogaGVscGVycyQxLm5vb3AsXG5cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdHZhciBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaWxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0ZWxlbWVudHNbaV0udHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1ldGEuZGF0YXNldCkge1xuXHRcdFx0bWV0YS5kYXRhc2V0LnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdHZhciBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaWxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cblx0XHRpZiAobWV0YS5kYXRhc2V0KSB7XG5cdFx0XHRtZXRhLmRhdGFzZXQuZHJhdygpO1xuXHRcdH1cblxuXHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRlbGVtZW50c1tpXS5kcmF3KCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgc2V0IG9mIHByZWRlZmluZWQgc3R5bGUgcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgZGF0YXNldFxuXHQgKiBvciB0aGUgZGF0YSBpZiB0aGUgaW5kZXggaXMgc3BlY2lmaWVkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGRhdGEgaW5kZXhcblx0ICogQHJldHVybiB7SVN0eWxlSW50ZXJmYWNlfSBzdHlsZSBvYmplY3Rcblx0ICovXG5cdGdldFN0eWxlOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG5cdFx0dmFyIHN0eWxlO1xuXG5cdFx0bWUuX2NvbmZpZ3VyZSgpO1xuXHRcdGlmIChkYXRhc2V0ICYmIGluZGV4ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHN0eWxlID0gbWUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMoZGF0YXNldCB8fCB7fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGluZGV4ID0gaW5kZXggfHwgMDtcblx0XHRcdHN0eWxlID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMobWV0YS5kYXRhW2luZGV4XSB8fCB7fSwgaW5kZXgpO1xuXHRcdH1cblxuXHRcdGlmIChzdHlsZS5maWxsID09PSBmYWxzZSB8fCBzdHlsZS5maWxsID09PSBudWxsKSB7XG5cdFx0XHRzdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZS5ib3JkZXJDb2xvcjtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3R5bGU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCwgaG92ZXIpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0T3B0cyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGN1c3RvbSA9IGVsZW1lbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5lbGVtZW50c1ttZS5kYXRhc2V0RWxlbWVudFR5cGUucHJvdG90eXBlLl90eXBlXSB8fCB7fTtcblx0XHR2YXIgZWxlbWVudE9wdGlvbnMgPSBtZS5fZGF0YXNldEVsZW1lbnRPcHRpb25zO1xuXHRcdHZhciB2YWx1ZXMgPSB7fTtcblx0XHR2YXIgaSwgaWxlbiwga2V5LCByZWFkS2V5O1xuXG5cdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0dmFyIGNvbnRleHQgPSB7XG5cdFx0XHRjaGFydDogY2hhcnQsXG5cdFx0XHRkYXRhc2V0OiBtZS5nZXREYXRhc2V0KCksXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0aG92ZXI6IGhvdmVyXG5cdFx0fTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBlbGVtZW50T3B0aW9ucy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGtleSA9IGVsZW1lbnRPcHRpb25zW2ldO1xuXHRcdFx0cmVhZEtleSA9IGhvdmVyID8gJ2hvdmVyJyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKSA6IGtleTtcblx0XHRcdHZhbHVlc1trZXldID0gcmVzb2x2ZShbXG5cdFx0XHRcdGN1c3RvbVtyZWFkS2V5XSxcblx0XHRcdFx0ZGF0YXNldE9wdHNbcmVhZEtleV0sXG5cdFx0XHRcdG9wdGlvbnNbcmVhZEtleV1cblx0XHRcdF0sIGNvbnRleHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50ICYmIGVsZW1lbnQuY3VzdG9tO1xuXHRcdHZhciBjYWNoZWQgPSBtZS5fY2FjaGVkRGF0YU9wdHM7XG5cdFx0aWYgKGNhY2hlZCAmJiAhY3VzdG9tKSB7XG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXHRcdH1cblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGF0YXNldE9wdHMgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5lbGVtZW50c1ttZS5kYXRhRWxlbWVudFR5cGUucHJvdG90eXBlLl90eXBlXSB8fCB7fTtcblx0XHR2YXIgZWxlbWVudE9wdGlvbnMgPSBtZS5fZGF0YUVsZW1lbnRPcHRpb25zO1xuXHRcdHZhciB2YWx1ZXMgPSB7fTtcblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0ZGF0YUluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXQ6IG1lLmdldERhdGFzZXQoKSxcblx0XHRcdGRhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHR9O1xuXG5cdFx0Ly8gYHJlc29sdmVgIHNldHMgY2FjaGVhYmxlIHRvIGBmYWxzZWAgaWYgYW55IG9wdGlvbiBpcyBpbmRleGVkIG9yIHNjcmlwdGVkXG5cdFx0dmFyIGluZm8gPSB7Y2FjaGVhYmxlOiAhY3VzdG9tfTtcblxuXHRcdHZhciBrZXlzLCBpLCBpbGVuLCBrZXk7XG5cblx0XHRjdXN0b20gPSBjdXN0b20gfHwge307XG5cblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoZWxlbWVudE9wdGlvbnMpKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZWxlbWVudE9wdGlvbnMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGtleSA9IGVsZW1lbnRPcHRpb25zW2ldO1xuXHRcdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRcdGN1c3RvbVtrZXldLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2tleV0sXG5cdFx0XHRcdFx0b3B0aW9uc1trZXldXG5cdFx0XHRcdF0sIGNvbnRleHQsIGluZGV4LCBpbmZvKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGVsZW1lbnRPcHRpb25zKTtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRcdGN1c3RvbVtrZXldLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2VsZW1lbnRPcHRpb25zW2tleV1dLFxuXHRcdFx0XHRcdGRhdGFzZXRPcHRzW2tleV0sXG5cdFx0XHRcdFx0b3B0aW9uc1trZXldXG5cdFx0XHRcdF0sIGNvbnRleHQsIGluZGV4LCBpbmZvKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaW5mby5jYWNoZWFibGUpIHtcblx0XHRcdG1lLl9jYWNoZWREYXRhT3B0cyA9IE9iamVjdC5mcmVlemUodmFsdWVzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVzO1xuXHR9LFxuXG5cdHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRoZWxwZXJzJDEubWVyZ2UoZWxlbWVudC5fbW9kZWwsIGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgfHwge30pO1xuXHRcdGRlbGV0ZSBlbGVtZW50LiRwcmV2aW91c1N0eWxlO1xuXHR9LFxuXG5cdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHR2YXIgZGF0YXNldCA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tlbGVtZW50Ll9kYXRhc2V0SW5kZXhdO1xuXHRcdHZhciBpbmRleCA9IGVsZW1lbnQuX2luZGV4O1xuXHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgbW9kZWwgPSBlbGVtZW50Ll9tb2RlbDtcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0ZWxlbWVudC4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHJlc29sdmUoW2N1c3RvbS5ob3ZlckJhY2tncm91bmRDb2xvciwgZGF0YXNldC5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihtb2RlbC5iYWNrZ3JvdW5kQ29sb3IpXSwgdW5kZWZpbmVkLCBpbmRleCk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSByZXNvbHZlKFtjdXN0b20uaG92ZXJCb3JkZXJDb2xvciwgZGF0YXNldC5ob3ZlckJvcmRlckNvbG9yLCBnZXRIb3ZlckNvbG9yKG1vZGVsLmJvcmRlckNvbG9yKV0sIHVuZGVmaW5lZCwgaW5kZXgpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gcmVzb2x2ZShbY3VzdG9tLmhvdmVyQm9yZGVyV2lkdGgsIGRhdGFzZXQuaG92ZXJCb3JkZXJXaWR0aCwgbW9kZWwuYm9yZGVyV2lkdGhdLCB1bmRlZmluZWQsIGluZGV4KTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmdldE1ldGEoKS5kYXRhc2V0O1xuXG5cdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdHRoaXMucmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfc2V0RGF0YXNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5nZXRNZXRhKCkuZGF0YXNldDtcblx0XHR2YXIgcHJldiA9IHt9O1xuXHRcdHZhciBpLCBpbGVuLCBrZXksIGtleXMsIGhvdmVyT3B0aW9ucywgbW9kZWw7XG5cblx0XHRpZiAoIWVsZW1lbnQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRtb2RlbCA9IGVsZW1lbnQuX21vZGVsO1xuXHRcdGhvdmVyT3B0aW9ucyA9IHRoaXMuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMoZWxlbWVudCwgdHJ1ZSk7XG5cblx0XHRrZXlzID0gT2JqZWN0LmtleXMoaG92ZXJPcHRpb25zKTtcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGtleSA9IGtleXNbaV07XG5cdFx0XHRwcmV2W2tleV0gPSBtb2RlbFtrZXldO1xuXHRcdFx0bW9kZWxba2V5XSA9IGhvdmVyT3B0aW9uc1trZXldO1xuXHRcdH1cblxuXHRcdGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgPSBwcmV2O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cmVzeW5jRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YTtcblx0XHR2YXIgbnVtTWV0YSA9IG1ldGEuZGF0YS5sZW5ndGg7XG5cdFx0dmFyIG51bURhdGEgPSBkYXRhLmxlbmd0aDtcblxuXHRcdGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuXHRcdFx0bWV0YS5kYXRhLnNwbGljZShudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG5cdFx0fSBlbHNlIGlmIChudW1EYXRhID4gbnVtTWV0YSkge1xuXHRcdFx0bWUuaW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGluc2VydEVsZW1lbnRzOiBmdW5jdGlvbihzdGFydCwgY291bnQpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdHRoaXMuYWRkRWxlbWVudEFuZFJlc2V0KHN0YXJ0ICsgaSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0b25EYXRhUHVzaDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR0aGlzLmluc2VydEVsZW1lbnRzKHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsIGNvdW50KTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVBvcDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5wb3AoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdG9uRGF0YVNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmdldE1ldGEoKS5kYXRhLnNoaWZ0KCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRvbkRhdGFTcGxpY2U6IGZ1bmN0aW9uKHN0YXJ0LCBjb3VudCkge1xuXHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG5cdFx0dGhpcy5pbnNlcnRFbGVtZW50cyhzdGFydCwgYXJndW1lbnRzLmxlbmd0aCAtIDIpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0b25EYXRhVW5zaGlmdDogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5pbnNlcnRFbGVtZW50cygwLCBhcmd1bWVudHMubGVuZ3RoKTtcblx0fVxufSk7XG5cbkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCA9IGhlbHBlcnMkMS5pbmhlcml0cztcblxudmFyIGNvcmVfZGF0YXNldENvbnRyb2xsZXIgPSBEYXRhc2V0Q29udHJvbGxlcjtcblxudmFyIFRBVSA9IE1hdGguUEkgKiAyO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRhcmM6IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6ICcjZmZmJyxcblx0XHRcdGJvcmRlcldpZHRoOiAyLFxuXHRcdFx0Ym9yZGVyQWxpZ246ICdjZW50ZXInXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGFyYykge1xuXHR2YXIgc3RhcnRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlO1xuXHR2YXIgZW5kQW5nbGUgPSBhcmMuZW5kQW5nbGU7XG5cdHZhciBwaXhlbE1hcmdpbiA9IGFyYy5waXhlbE1hcmdpbjtcblx0dmFyIGFuZ2xlTWFyZ2luID0gcGl4ZWxNYXJnaW4gLyBhcmMub3V0ZXJSYWRpdXM7XG5cdHZhciB4ID0gYXJjLng7XG5cdHZhciB5ID0gYXJjLnk7XG5cblx0Ly8gRHJhdyBhbiBpbm5lciBib3JkZXIgYnkgY2xpcGluZyB0aGUgYXJjIGFuZCBkcmF3aW5nIGEgZG91YmxlLXdpZHRoIGJvcmRlclxuXHQvLyBFbmxhcmdlIHRoZSBjbGlwcGluZyBhcmMgYnkgMC4zMyBwaXhlbHMgdG8gZWxpbWluYXRlIGdsaXRjaGVzIGJldHdlZW4gYm9yZGVyc1xuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGN0eC5hcmMoeCwgeSwgYXJjLm91dGVyUmFkaXVzLCBzdGFydEFuZ2xlIC0gYW5nbGVNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4pO1xuXHRpZiAoYXJjLmlubmVyUmFkaXVzID4gcGl4ZWxNYXJnaW4pIHtcblx0XHRhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gYXJjLmlubmVyUmFkaXVzO1xuXHRcdGN0eC5hcmMoeCwgeSwgYXJjLmlubmVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG5cdH0gZWxzZSB7XG5cdFx0Y3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBNYXRoLlBJIC8gMiwgc3RhcnRBbmdsZSAtIE1hdGguUEkgLyAyKTtcblx0fVxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5jbGlwKCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIHZtLCBhcmMsIGlubmVyKSB7XG5cdHZhciBlbmRBbmdsZSA9IGFyYy5lbmRBbmdsZTtcblx0dmFyIGk7XG5cblx0aWYgKGlubmVyKSB7XG5cdFx0YXJjLmVuZEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGUgKyBUQVU7XG5cdFx0Y2xpcEFyYyhjdHgsIGFyYyk7XG5cdFx0YXJjLmVuZEFuZ2xlID0gZW5kQW5nbGU7XG5cdFx0aWYgKGFyYy5lbmRBbmdsZSA9PT0gYXJjLnN0YXJ0QW5nbGUgJiYgYXJjLmZ1bGxDaXJjbGVzKSB7XG5cdFx0XHRhcmMuZW5kQW5nbGUgKz0gVEFVO1xuXHRcdFx0YXJjLmZ1bGxDaXJjbGVzLS07XG5cdFx0fVxuXHR9XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLmlubmVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSArIFRBVSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRmb3IgKGkgPSAwOyBpIDwgYXJjLmZ1bGxDaXJjbGVzOyArK2kpIHtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdH1cblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGN0eC5hcmMoYXJjLngsIGFyYy55LCB2bS5vdXRlclJhZGl1cywgYXJjLnN0YXJ0QW5nbGUsIGFyYy5zdGFydEFuZ2xlICsgVEFVKTtcblx0Zm9yIChpID0gMDsgaSA8IGFyYy5mdWxsQ2lyY2xlczsgKytpKSB7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRyYXdCb3JkZXIoY3R4LCB2bSwgYXJjKSB7XG5cdHZhciBpbm5lciA9IHZtLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuXG5cdGlmIChpbm5lcikge1xuXHRcdGN0eC5saW5lV2lkdGggPSB2bS5ib3JkZXJXaWR0aCAqIDI7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ3JvdW5kJztcblx0fSBlbHNlIHtcblx0XHRjdHgubGluZVdpZHRoID0gdm0uYm9yZGVyV2lkdGg7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ2JldmVsJztcblx0fVxuXG5cdGlmIChhcmMuZnVsbENpcmNsZXMpIHtcblx0XHRkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCB2bSwgYXJjLCBpbm5lcik7XG5cdH1cblxuXHRpZiAoaW5uZXIpIHtcblx0XHRjbGlwQXJjKGN0eCwgYXJjKTtcblx0fVxuXG5cdGN0eC5iZWdpblBhdGgoKTtcblx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIHZtLm91dGVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSwgYXJjLmVuZEFuZ2xlKTtcblx0Y3R4LmFyYyhhcmMueCwgYXJjLnksIGFyYy5pbm5lclJhZGl1cywgYXJjLmVuZEFuZ2xlLCBhcmMuc3RhcnRBbmdsZSwgdHJ1ZSk7XG5cdGN0eC5jbG9zZVBhdGgoKTtcblx0Y3R4LnN0cm9rZSgpO1xufVxuXG52YXIgZWxlbWVudF9hcmMgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdhcmMnLFxuXG5cdGluTGFiZWxSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblxuXHRcdGlmICh2bSkge1xuXHRcdFx0cmV0dXJuIChNYXRoLnBvdyhtb3VzZVggLSB2bS54LCAyKSA8IE1hdGgucG93KHZtLnJhZGl1cyArIHZtLmhvdmVyUmFkaXVzLCAyKSk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRpblJhbmdlOiBmdW5jdGlvbihjaGFydFgsIGNoYXJ0WSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0pIHtcblx0XHRcdHZhciBwb2ludFJlbGF0aXZlUG9zaXRpb24gPSBoZWxwZXJzJDEuZ2V0QW5nbGVGcm9tUG9pbnQodm0sIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuXHRcdFx0dmFyIGFuZ2xlID0gcG9pbnRSZWxhdGl2ZVBvc2l0aW9uLmFuZ2xlO1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gcG9pbnRSZWxhdGl2ZVBvc2l0aW9uLmRpc3RhbmNlO1xuXG5cdFx0XHQvLyBTYW5pdGlzZSBhbmdsZSByYW5nZVxuXHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSB2bS5zdGFydEFuZ2xlO1xuXHRcdFx0dmFyIGVuZEFuZ2xlID0gdm0uZW5kQW5nbGU7XG5cdFx0XHR3aGlsZSAoZW5kQW5nbGUgPCBzdGFydEFuZ2xlKSB7XG5cdFx0XHRcdGVuZEFuZ2xlICs9IFRBVTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA+IGVuZEFuZ2xlKSB7XG5cdFx0XHRcdGFuZ2xlIC09IFRBVTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA8IHN0YXJ0QW5nbGUpIHtcblx0XHRcdFx0YW5nbGUgKz0gVEFVO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDaGVjayBpZiB3aXRoaW4gdGhlIHJhbmdlIG9mIHRoZSBvcGVuL2Nsb3NlIGFuZ2xlXG5cdFx0XHR2YXIgYmV0d2VlbkFuZ2xlcyA9IChhbmdsZSA+PSBzdGFydEFuZ2xlICYmIGFuZ2xlIDw9IGVuZEFuZ2xlKTtcblx0XHRcdHZhciB3aXRoaW5SYWRpdXMgPSAoZGlzdGFuY2UgPj0gdm0uaW5uZXJSYWRpdXMgJiYgZGlzdGFuY2UgPD0gdm0ub3V0ZXJSYWRpdXMpO1xuXG5cdFx0XHRyZXR1cm4gKGJldHdlZW5BbmdsZXMgJiYgd2l0aGluUmFkaXVzKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBoYWxmQW5nbGUgPSAodm0uc3RhcnRBbmdsZSArIHZtLmVuZEFuZ2xlKSAvIDI7XG5cdFx0dmFyIGhhbGZSYWRpdXMgPSAodm0uaW5uZXJSYWRpdXMgKyB2bS5vdXRlclJhZGl1cykgLyAyO1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG5cdFx0XHR5OiB2bS55ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcblx0XHR9O1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIE1hdGguUEkgKiAoKHZtLmVuZEFuZ2xlIC0gdm0uc3RhcnRBbmdsZSkgLyAoMiAqIE1hdGguUEkpKSAqIChNYXRoLnBvdyh2bS5vdXRlclJhZGl1cywgMikgLSBNYXRoLnBvdyh2bS5pbm5lclJhZGl1cywgMikpO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgY2VudHJlQW5nbGUgPSB2bS5zdGFydEFuZ2xlICsgKCh2bS5lbmRBbmdsZSAtIHZtLnN0YXJ0QW5nbGUpIC8gMik7XG5cdFx0dmFyIHJhbmdlRnJvbUNlbnRyZSA9ICh2bS5vdXRlclJhZGl1cyAtIHZtLmlubmVyUmFkaXVzKSAvIDIgKyB2bS5pbm5lclJhZGl1cztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54ICsgKE1hdGguY29zKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSksXG5cdFx0XHR5OiB2bS55ICsgKE1hdGguc2luKGNlbnRyZUFuZ2xlKSAqIHJhbmdlRnJvbUNlbnRyZSlcblx0XHR9O1xuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgcGl4ZWxNYXJnaW4gPSAodm0uYm9yZGVyQWxpZ24gPT09ICdpbm5lcicpID8gMC4zMyA6IDA7XG5cdFx0dmFyIGFyYyA9IHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55LFxuXHRcdFx0aW5uZXJSYWRpdXM6IHZtLmlubmVyUmFkaXVzLFxuXHRcdFx0b3V0ZXJSYWRpdXM6IE1hdGgubWF4KHZtLm91dGVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIDApLFxuXHRcdFx0cGl4ZWxNYXJnaW46IHBpeGVsTWFyZ2luLFxuXHRcdFx0c3RhcnRBbmdsZTogdm0uc3RhcnRBbmdsZSxcblx0XHRcdGVuZEFuZ2xlOiB2bS5lbmRBbmdsZSxcblx0XHRcdGZ1bGxDaXJjbGVzOiBNYXRoLmZsb29yKHZtLmNpcmN1bWZlcmVuY2UgLyBUQVUpXG5cdFx0fTtcblx0XHR2YXIgaTtcblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yO1xuXG5cdFx0aWYgKGFyYy5mdWxsQ2lyY2xlcykge1xuXHRcdFx0YXJjLmVuZEFuZ2xlID0gYXJjLnN0YXJ0QW5nbGUgKyBUQVU7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKGFyYy54LCBhcmMueSwgYXJjLm91dGVyUmFkaXVzLCBhcmMuc3RhcnRBbmdsZSwgYXJjLmVuZEFuZ2xlKTtcblx0XHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuaW5uZXJSYWRpdXMsIGFyYy5lbmRBbmdsZSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGFyYy5mdWxsQ2lyY2xlczsgKytpKSB7XG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHR9XG5cdFx0XHRhcmMuZW5kQW5nbGUgPSBhcmMuc3RhcnRBbmdsZSArIHZtLmNpcmN1bWZlcmVuY2UgJSBUQVU7XG5cdFx0fVxuXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMub3V0ZXJSYWRpdXMsIGFyYy5zdGFydEFuZ2xlLCBhcmMuZW5kQW5nbGUpO1xuXHRcdGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuaW5uZXJSYWRpdXMsIGFyYy5lbmRBbmdsZSwgYXJjLnN0YXJ0QW5nbGUsIHRydWUpO1xuXHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoKSB7XG5cdFx0XHRkcmF3Qm9yZGVyKGN0eCwgdm0sIGFyYyk7XG5cdFx0fVxuXG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQxID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG52YXIgZGVmYXVsdENvbG9yID0gY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRsaW5lOiB7XG5cdFx0XHR0ZW5zaW9uOiAwLjQsXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiAzLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG5cdFx0XHRib3JkZXJEYXNoOiBbXSxcblx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRcdGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcblx0XHRcdGNhcEJlemllclBvaW50czogdHJ1ZSxcblx0XHRcdGZpbGw6IHRydWUsIC8vIGRvIHdlIGZpbGwgaW4gdGhlIGFyZWEgYmV0d2VlbiB0aGUgbGluZSBhbmQgaXRzIGJhc2UgYXhpc1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBlbGVtZW50X2xpbmUgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdsaW5lJyxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB2bSA9IG1lLl92aWV3O1xuXHRcdHZhciBjdHggPSBtZS5fY2hhcnQuY3R4O1xuXHRcdHZhciBzcGFuR2FwcyA9IHZtLnNwYW5HYXBzO1xuXHRcdHZhciBwb2ludHMgPSBtZS5fY2hpbGRyZW4uc2xpY2UoKTsgLy8gY2xvbmUgYXJyYXlcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzID0gZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGFzdERyYXduSW5kZXggPSAtMTtcblx0XHR2YXIgY2xvc2VQYXRoID0gbWUuX2xvb3A7XG5cdFx0dmFyIGluZGV4LCBwcmV2aW91cywgY3VycmVudFZNO1xuXG5cdFx0aWYgKCFwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKG1lLl9sb29wKSB7XG5cdFx0XHRmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG5cdFx0XHRcdHByZXZpb3VzID0gaGVscGVycyQxLnByZXZpb3VzSXRlbShwb2ludHMsIGluZGV4KTtcblx0XHRcdFx0Ly8gSWYgdGhlIGxpbmUgaGFzIGFuIG9wZW4gcGF0aCwgc2hpZnQgdGhlIHBvaW50IGFycmF5XG5cdFx0XHRcdGlmICghcG9pbnRzW2luZGV4XS5fdmlldy5za2lwICYmIHByZXZpb3VzLl92aWV3LnNraXApIHtcblx0XHRcdFx0XHRwb2ludHMgPSBwb2ludHMuc2xpY2UoaW5kZXgpLmNvbmNhdChwb2ludHMuc2xpY2UoMCwgaW5kZXgpKTtcblx0XHRcdFx0XHRjbG9zZVBhdGggPSBzcGFuR2Fwcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgdGhlIGxpbmUgaGFzIGEgY2xvc2UgcGF0aCwgYWRkIHRoZSBmaXJzdCBwb2ludCBhZ2FpblxuXHRcdFx0aWYgKGNsb3NlUGF0aCkge1xuXHRcdFx0XHRwb2ludHMucHVzaChwb2ludHNbMF0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHQvLyBTdHJva2UgTGluZSBPcHRpb25zXG5cdFx0Y3R4LmxpbmVDYXAgPSB2bS5ib3JkZXJDYXBTdHlsZSB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyQ2FwU3R5bGU7XG5cblx0XHQvLyBJRSA5IGFuZCAxMCBkbyBub3Qgc3VwcG9ydCBsaW5lIGRhc2hcblx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRjdHguc2V0TGluZURhc2godm0uYm9yZGVyRGFzaCB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaCk7XG5cdFx0fVxuXG5cdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQkMSh2bS5ib3JkZXJEYXNoT2Zmc2V0LCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaE9mZnNldCk7XG5cdFx0Y3R4LmxpbmVKb2luID0gdm0uYm9yZGVySm9pblN0eWxlIHx8IGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJKb2luU3R5bGU7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JDEodm0uYm9yZGVyV2lkdGgsIGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJXaWR0aCk7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3IgfHwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdENvbG9yO1xuXG5cdFx0Ly8gU3Ryb2tlIExpbmVcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHQvLyBGaXJzdCBwb2ludCBtb3ZlcyB0byBpdCdzIHN0YXJ0aW5nIHBvc2l0aW9uIG5vIG1hdHRlciB3aGF0XG5cdFx0Y3VycmVudFZNID0gcG9pbnRzWzBdLl92aWV3O1xuXHRcdGlmICghY3VycmVudFZNLnNraXApIHtcblx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdGxhc3REcmF3bkluZGV4ID0gMDtcblx0XHR9XG5cblx0XHRmb3IgKGluZGV4ID0gMTsgaW5kZXggPCBwb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG5cdFx0XHRjdXJyZW50Vk0gPSBwb2ludHNbaW5kZXhdLl92aWV3O1xuXHRcdFx0cHJldmlvdXMgPSBsYXN0RHJhd25JbmRleCA9PT0gLTEgPyBoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaW5kZXgpIDogcG9pbnRzW2xhc3REcmF3bkluZGV4XTtcblxuXHRcdFx0aWYgKCFjdXJyZW50Vk0uc2tpcCkge1xuXHRcdFx0XHRpZiAoKGxhc3REcmF3bkluZGV4ICE9PSAoaW5kZXggLSAxKSAmJiAhc3BhbkdhcHMpIHx8IGxhc3REcmF3bkluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRcdC8vIFRoZXJlIHdhcyBhIGdhcCBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnQgYWZ0ZXIgdGhlIGdhcFxuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBMaW5lIHRvIG5leHQgcG9pbnRcblx0XHRcdFx0XHRoZWxwZXJzJDEuY2FudmFzLmxpbmVUbyhjdHgsIHByZXZpb3VzLl92aWV3LCBjdXJyZW50Vk0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxhc3REcmF3bkluZGV4ID0gaW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGNsb3NlUGF0aCkge1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdH1cblxuXHRcdGN0eC5zdHJva2UoKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9XG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDIgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbnZhciBkZWZhdWx0Q29sb3IkMSA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cG9pbnQ6IHtcblx0XHRcdHJhZGl1czogMyxcblx0XHRcdHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IkMSxcblx0XHRcdGJvcmRlckNvbG9yOiBkZWZhdWx0Q29sb3IkMSxcblx0XHRcdGJvcmRlcldpZHRoOiAxLFxuXHRcdFx0Ly8gSG92ZXJcblx0XHRcdGhpdFJhZGl1czogMSxcblx0XHRcdGhvdmVyUmFkaXVzOiA0LFxuXHRcdFx0aG92ZXJCb3JkZXJXaWR0aDogMVxuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIHhSYW5nZShtb3VzZVgpIHtcblx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0cmV0dXJuIHZtID8gKE1hdGguYWJzKG1vdXNlWCAtIHZtLngpIDwgdm0ucmFkaXVzICsgdm0uaGl0UmFkaXVzKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB5UmFuZ2UobW91c2VZKSB7XG5cdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdHJldHVybiB2bSA/IChNYXRoLmFicyhtb3VzZVkgLSB2bS55KSA8IHZtLnJhZGl1cyArIHZtLmhpdFJhZGl1cykgOiBmYWxzZTtcbn1cblxudmFyIGVsZW1lbnRfcG9pbnQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0X3R5cGU6ICdwb2ludCcsXG5cblx0aW5SYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB2bSA/ICgoTWF0aC5wb3cobW91c2VYIC0gdm0ueCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB2bS55LCAyKSkgPCBNYXRoLnBvdyh2bS5oaXRSYWRpdXMgKyB2bS5yYWRpdXMsIDIpKSA6IGZhbHNlO1xuXHR9LFxuXG5cdGluTGFiZWxSYW5nZTogeFJhbmdlLFxuXHRpblhSYW5nZTogeFJhbmdlLFxuXHRpbllSYW5nZTogeVJhbmdlLFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1hdGguUEkgKiBNYXRoLnBvdyh0aGlzLl92aWV3LnJhZGl1cywgMik7XG5cdH0sXG5cblx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueSxcblx0XHRcdHBhZGRpbmc6IHZtLnJhZGl1cyArIHZtLmJvcmRlcldpZHRoXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHBvaW50U3R5bGUgPSB2bS5wb2ludFN0eWxlO1xuXHRcdHZhciByb3RhdGlvbiA9IHZtLnJvdGF0aW9uO1xuXHRcdHZhciByYWRpdXMgPSB2bS5yYWRpdXM7XG5cdFx0dmFyIHggPSB2bS54O1xuXHRcdHZhciB5ID0gdm0ueTtcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblx0XHR2YXIgZGVmYXVsdENvbG9yID0gZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdENvbG9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNoYWRvd1xuXG5cdFx0aWYgKHZtLnNraXApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDbGlwcGluZyBmb3IgUG9pbnRzLlxuXHRcdGlmIChjaGFydEFyZWEgPT09IHVuZGVmaW5lZCB8fCBoZWxwZXJzJDEuY2FudmFzLl9pc1BvaW50SW5BcmVhKHZtLCBjaGFydEFyZWEpKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvciB8fCBkZWZhdWx0Q29sb3I7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQkMih2bS5ib3JkZXJXaWR0aCwgZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMucG9pbnQuYm9yZGVyV2lkdGgpO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvciB8fCBkZWZhdWx0Q29sb3I7XG5cdFx0XHRoZWxwZXJzJDEuY2FudmFzLmRyYXdQb2ludChjdHgsIHBvaW50U3R5bGUsIHJhZGl1cywgeCwgeSwgcm90YXRpb24pO1xuXHRcdH1cblx0fVxufSk7XG5cbnZhciBkZWZhdWx0Q29sb3IkMiA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cmVjdGFuZ2xlOiB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRDb2xvciQyLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGRlZmF1bHRDb2xvciQyLFxuXHRcdFx0Ym9yZGVyU2tpcHBlZDogJ2JvdHRvbScsXG5cdFx0XHRib3JkZXJXaWR0aDogMFxuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIGlzVmVydGljYWwodm0pIHtcblx0cmV0dXJuIHZtICYmIHZtLndpZHRoICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgYm91bmRzIG9mIHRoZSBiYXIgcmVnYXJkbGVzcyBvZiB0aGUgb3JpZW50YXRpb25cbiAqIEBwYXJhbSBiYXIge0NoYXJ0LkVsZW1lbnQuUmVjdGFuZ2xlfSB0aGUgYmFyXG4gKiBAcmV0dXJuIHtCb3VuZHN9IGJvdW5kcyBvZiB0aGUgYmFyXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRCYXJCb3VuZHModm0pIHtcblx0dmFyIHgxLCB4MiwgeTEsIHkyLCBoYWxmO1xuXG5cdGlmIChpc1ZlcnRpY2FsKHZtKSkge1xuXHRcdGhhbGYgPSB2bS53aWR0aCAvIDI7XG5cdFx0eDEgPSB2bS54IC0gaGFsZjtcblx0XHR4MiA9IHZtLnggKyBoYWxmO1xuXHRcdHkxID0gTWF0aC5taW4odm0ueSwgdm0uYmFzZSk7XG5cdFx0eTIgPSBNYXRoLm1heCh2bS55LCB2bS5iYXNlKTtcblx0fSBlbHNlIHtcblx0XHRoYWxmID0gdm0uaGVpZ2h0IC8gMjtcblx0XHR4MSA9IE1hdGgubWluKHZtLngsIHZtLmJhc2UpO1xuXHRcdHgyID0gTWF0aC5tYXgodm0ueCwgdm0uYmFzZSk7XG5cdFx0eTEgPSB2bS55IC0gaGFsZjtcblx0XHR5MiA9IHZtLnkgKyBoYWxmO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZWZ0OiB4MSxcblx0XHR0b3A6IHkxLFxuXHRcdHJpZ2h0OiB4Mixcblx0XHRib3R0b206IHkyXG5cdH07XG59XG5cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG5cdHJldHVybiBvcmlnID09PSB2MSA/IHYyIDogb3JpZyA9PT0gdjIgPyB2MSA6IG9yaWc7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyU2tpcHBlZCh2bSkge1xuXHR2YXIgZWRnZSA9IHZtLmJvcmRlclNraXBwZWQ7XG5cdHZhciByZXMgPSB7fTtcblxuXHRpZiAoIWVkZ2UpIHtcblx0XHRyZXR1cm4gcmVzO1xuXHR9XG5cblx0aWYgKHZtLmhvcml6b250YWwpIHtcblx0XHRpZiAodm0uYmFzZSA+IHZtLngpIHtcblx0XHRcdGVkZ2UgPSBzd2FwKGVkZ2UsICdsZWZ0JywgJ3JpZ2h0Jyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHZtLmJhc2UgPCB2bS55KSB7XG5cdFx0ZWRnZSA9IHN3YXAoZWRnZSwgJ2JvdHRvbScsICd0b3AnKTtcblx0fVxuXG5cdHJlc1tlZGdlXSA9IHRydWU7XG5cdHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgodm0sIG1heFcsIG1heEgpIHtcblx0dmFyIHZhbHVlID0gdm0uYm9yZGVyV2lkdGg7XG5cdHZhciBza2lwID0gcGFyc2VCb3JkZXJTa2lwcGVkKHZtKTtcblx0dmFyIHQsIHIsIGIsIGw7XG5cblx0aWYgKGhlbHBlcnMkMS5pc09iamVjdCh2YWx1ZSkpIHtcblx0XHR0ID0gK3ZhbHVlLnRvcCB8fCAwO1xuXHRcdHIgPSArdmFsdWUucmlnaHQgfHwgMDtcblx0XHRiID0gK3ZhbHVlLmJvdHRvbSB8fCAwO1xuXHRcdGwgPSArdmFsdWUubGVmdCB8fCAwO1xuXHR9IGVsc2Uge1xuXHRcdHQgPSByID0gYiA9IGwgPSArdmFsdWUgfHwgMDtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0dDogc2tpcC50b3AgfHwgKHQgPCAwKSA/IDAgOiB0ID4gbWF4SCA/IG1heEggOiB0LFxuXHRcdHI6IHNraXAucmlnaHQgfHwgKHIgPCAwKSA/IDAgOiByID4gbWF4VyA/IG1heFcgOiByLFxuXHRcdGI6IHNraXAuYm90dG9tIHx8IChiIDwgMCkgPyAwIDogYiA+IG1heEggPyBtYXhIIDogYixcblx0XHRsOiBza2lwLmxlZnQgfHwgKGwgPCAwKSA/IDAgOiBsID4gbWF4VyA/IG1heFcgOiBsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHModm0pIHtcblx0dmFyIGJvdW5kcyA9IGdldEJhckJvdW5kcyh2bSk7XG5cdHZhciB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xuXHR2YXIgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG5cdHZhciBib3JkZXIgPSBwYXJzZUJvcmRlcldpZHRoKHZtLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuXG5cdHJldHVybiB7XG5cdFx0b3V0ZXI6IHtcblx0XHRcdHg6IGJvdW5kcy5sZWZ0LFxuXHRcdFx0eTogYm91bmRzLnRvcCxcblx0XHRcdHc6IHdpZHRoLFxuXHRcdFx0aDogaGVpZ2h0XG5cdFx0fSxcblx0XHRpbm5lcjoge1xuXHRcdFx0eDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcblx0XHRcdHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcblx0XHRcdHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcblx0XHRcdGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmJcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2Uodm0sIHgsIHkpIHtcblx0dmFyIHNraXBYID0geCA9PT0gbnVsbDtcblx0dmFyIHNraXBZID0geSA9PT0gbnVsbDtcblx0dmFyIGJvdW5kcyA9ICF2bSB8fCAoc2tpcFggJiYgc2tpcFkpID8gZmFsc2UgOiBnZXRCYXJCb3VuZHModm0pO1xuXG5cdHJldHVybiBib3VuZHNcblx0XHQmJiAoc2tpcFggfHwgeCA+PSBib3VuZHMubGVmdCAmJiB4IDw9IGJvdW5kcy5yaWdodClcblx0XHQmJiAoc2tpcFkgfHwgeSA+PSBib3VuZHMudG9wICYmIHkgPD0gYm91bmRzLmJvdHRvbSk7XG59XG5cbnZhciBlbGVtZW50X3JlY3RhbmdsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXHRfdHlwZTogJ3JlY3RhbmdsZScsXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciByZWN0cyA9IGJvdW5kaW5nUmVjdHModm0pO1xuXHRcdHZhciBvdXRlciA9IHJlY3RzLm91dGVyO1xuXHRcdHZhciBpbm5lciA9IHJlY3RzLmlubmVyO1xuXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvcjtcblx0XHRjdHguZmlsbFJlY3Qob3V0ZXIueCwgb3V0ZXIueSwgb3V0ZXIudywgb3V0ZXIuaCk7XG5cblx0XHRpZiAob3V0ZXIudyA9PT0gaW5uZXIudyAmJiBvdXRlci5oID09PSBpbm5lci5oKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3Qob3V0ZXIueCwgb3V0ZXIueSwgb3V0ZXIudywgb3V0ZXIuaCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYm9yZGVyQ29sb3I7XG5cdFx0Y3R4LnJlY3QoaW5uZXIueCwgaW5uZXIueSwgaW5uZXIudywgaW5uZXIuaCk7XG5cdFx0Y3R4LmZpbGwoJ2V2ZW5vZGQnKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGhlaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4gdm0uYmFzZSAtIHZtLnk7XG5cdH0sXG5cblx0aW5SYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHRyZXR1cm4gaW5SYW5nZSh0aGlzLl92aWV3LCBtb3VzZVgsIG1vdXNlWSk7XG5cdH0sXG5cblx0aW5MYWJlbFJhbmdlOiBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIGlzVmVydGljYWwodm0pXG5cdFx0XHQ/IGluUmFuZ2Uodm0sIG1vdXNlWCwgbnVsbClcblx0XHRcdDogaW5SYW5nZSh2bSwgbnVsbCwgbW91c2VZKTtcblx0fSxcblxuXHRpblhSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0cmV0dXJuIGluUmFuZ2UodGhpcy5fdmlldywgbW91c2VYLCBudWxsKTtcblx0fSxcblxuXHRpbllSYW5nZTogZnVuY3Rpb24obW91c2VZKSB7XG5cdFx0cmV0dXJuIGluUmFuZ2UodGhpcy5fdmlldywgbnVsbCwgbW91c2VZKTtcblx0fSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgeCwgeTtcblx0XHRpZiAoaXNWZXJ0aWNhbCh2bSkpIHtcblx0XHRcdHggPSB2bS54O1xuXHRcdFx0eSA9ICh2bS55ICsgdm0uYmFzZSkgLyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR4ID0gKHZtLnggKyB2bS5iYXNlKSAvIDI7XG5cdFx0XHR5ID0gdm0ueTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge3g6IHgsIHk6IHl9O1xuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRyZXR1cm4gaXNWZXJ0aWNhbCh2bSlcblx0XHRcdD8gdm0ud2lkdGggKiBNYXRoLmFicyh2bS55IC0gdm0uYmFzZSlcblx0XHRcdDogdm0uaGVpZ2h0ICogTWF0aC5hYnModm0ueCAtIHZtLmJhc2UpO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCxcblx0XHRcdHk6IHZtLnlcblx0XHR9O1xuXHR9XG59KTtcblxudmFyIGVsZW1lbnRzID0ge307XG52YXIgQXJjID0gZWxlbWVudF9hcmM7XG52YXIgTGluZSA9IGVsZW1lbnRfbGluZTtcbnZhciBQb2ludCA9IGVsZW1lbnRfcG9pbnQ7XG52YXIgUmVjdGFuZ2xlID0gZWxlbWVudF9yZWN0YW5nbGU7XG5lbGVtZW50cy5BcmMgPSBBcmM7XG5lbGVtZW50cy5MaW5lID0gTGluZTtcbmVsZW1lbnRzLlBvaW50ID0gUG9pbnQ7XG5lbGVtZW50cy5SZWN0YW5nbGUgPSBSZWN0YW5nbGU7XG5cbnZhciBkZXByZWNhdGVkID0gaGVscGVycyQxLl9kZXByZWNhdGVkO1xudmFyIHZhbHVlT3JEZWZhdWx0JDMgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnYmFyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdsYWJlbCdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRvZmZzZXQ6IHRydWUsXG5cdFx0XHRncmlkTGluZXM6IHtcblx0XHRcdFx0b2Zmc2V0R3JpZExpbmVzOiB0cnVlXG5cdFx0XHR9XG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInXG5cdFx0fV1cblx0fVxufSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRkYXRhc2V0czoge1xuXHRcdGJhcjoge1xuXHRcdFx0Y2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG5cdFx0XHRiYXJQZXJjZW50YWdlOiAwLjlcblx0XHR9XG5cdH1cbn0pO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBcIm9wdGltYWxcIiBzYW1wbGUgc2l6ZSB0byBtYWludGFpbiBiYXJzIGVxdWFsbHkgc2l6ZWQgd2hpbGUgcHJldmVudGluZyBvdmVybGFwLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUoc2NhbGUsIHBpeGVscykge1xuXHR2YXIgbWluID0gc2NhbGUuX2xlbmd0aDtcblx0dmFyIHByZXYsIGN1cnIsIGksIGlsZW47XG5cblx0Zm9yIChpID0gMSwgaWxlbiA9IHBpeGVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKHBpeGVsc1tpXSAtIHBpeGVsc1tpIC0gMV0pKTtcblx0fVxuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBzY2FsZS5nZXRUaWNrcygpLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaSk7XG5cdFx0bWluID0gaSA+IDAgPyBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSkgOiBtaW47XG5cdFx0cHJldiA9IGN1cnI7XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGFuIFwiaWRlYWxcIiBjYXRlZ29yeSBiYXNlZCBvbiB0aGUgYWJzb2x1dGUgYmFyIHRoaWNrbmVzcyBvciwgaWYgdW5kZWZpbmVkIG9yIG51bGwsXG4gKiB1c2VzIHRoZSBzbWFsbGVzdCBpbnRlcnZhbCAoc2VlIGNvbXB1dGVNaW5TYW1wbGVTaXplKSB0aGF0IHByZXZlbnRzIGJhciBvdmVybGFwcGluZy4gVGhpc1xuICogbW9kZSBjdXJyZW50bHkgYWx3YXlzIGdlbmVyYXRlcyBiYXJzIGVxdWFsbHkgc2l6ZWQgKHVudGlsIHdlIGludHJvZHVjZSBzY3JpcHRhYmxlIG9wdGlvbnM/KS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpIHtcblx0dmFyIHRoaWNrbmVzcyA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuXHR2YXIgY291bnQgPSBydWxlci5zdGFja0NvdW50O1xuXHR2YXIgY3VyciA9IHJ1bGVyLnBpeGVsc1tpbmRleF07XG5cdHZhciBtaW4gPSBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZih0aGlja25lc3MpXG5cdFx0PyBjb21wdXRlTWluU2FtcGxlU2l6ZShydWxlci5zY2FsZSwgcnVsZXIucGl4ZWxzKVxuXHRcdDogLTE7XG5cdHZhciBzaXplLCByYXRpbztcblxuXHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuXHRcdHNpemUgPSBtaW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcblx0XHRyYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcblx0fSBlbHNlIHtcblx0XHQvLyBXaGVuIGJhciB0aGlja25lc3MgaXMgZW5mb3JjZWQsIGNhdGVnb3J5IGFuZCBiYXIgcGVyY2VudGFnZXMgYXJlIGlnbm9yZWQuXG5cdFx0Ly8gTm90ZShTQik6IHdlIGNvdWxkIGFkZCBzdXBwb3J0IGZvciByZWxhdGl2ZSBiYXIgdGhpY2tuZXNzIChlLmcuIGJhclRoaWNrbmVzczogJzUwJScpXG5cdFx0Ly8gYW5kIGRlcHJlY2F0ZSBiYXJQZXJjZW50YWdlIHNpbmNlIHRoaXMgdmFsdWUgaXMgaWdub3JlZCB3aGVuIHRoaWNrbmVzcyBpcyBhYnNvbHV0ZS5cblx0XHRzaXplID0gdGhpY2tuZXNzICogY291bnQ7XG5cdFx0cmF0aW8gPSAxO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRjaHVuazogc2l6ZSAvIGNvdW50LFxuXHRcdHJhdGlvOiByYXRpbyxcblx0XHRzdGFydDogY3VyciAtIChzaXplIC8gMilcblx0fTtcbn1cblxuLyoqXG4gKiBDb21wdXRlcyBhbiBcIm9wdGltYWxcIiBjYXRlZ29yeSB0aGF0IGdsb2JhbGx5IGFycmFuZ2VzIGJhcnMgc2lkZSBieSBzaWRlIChubyBnYXAgd2hlblxuICogcGVyY2VudGFnZSBvcHRpb25zIGFyZSAxKSwgYmFzZWQgb24gdGhlIHByZXZpb3VzIGFuZCBmb2xsb3dpbmcgY2F0ZWdvcmllcy4gVGhpcyBtb2RlXG4gKiBnZW5lcmF0ZXMgYmFycyB3aXRoIGRpZmZlcmVudCB3aWR0aHMgd2hlbiBkYXRhIGFyZSBub3QgZXZlbmx5IHNwYWNlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKSB7XG5cdHZhciBwaXhlbHMgPSBydWxlci5waXhlbHM7XG5cdHZhciBjdXJyID0gcGl4ZWxzW2luZGV4XTtcblx0dmFyIHByZXYgPSBpbmRleCA+IDAgPyBwaXhlbHNbaW5kZXggLSAxXSA6IG51bGw7XG5cdHZhciBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcblx0dmFyIHBlcmNlbnQgPSBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcblx0dmFyIHN0YXJ0LCBzaXplO1xuXG5cdGlmIChwcmV2ID09PSBudWxsKSB7XG5cdFx0Ly8gZmlyc3QgZGF0YTogaXRzIHNpemUgaXMgZG91YmxlIGJhc2VkIG9uIHRoZSBuZXh0IHBvaW50IG9yLFxuXHRcdC8vIGlmIGl0J3MgYWxzbyB0aGUgbGFzdCBkYXRhLCB3ZSB1c2UgdGhlIHNjYWxlIHNpemUuXG5cdFx0cHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuXHR9XG5cblx0aWYgKG5leHQgPT09IG51bGwpIHtcblx0XHQvLyBsYXN0IGRhdGE6IGl0cyBzaXplIGlzIGFsc28gZG91YmxlIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBwb2ludC5cblx0XHRuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuXHR9XG5cblx0c3RhcnQgPSBjdXJyIC0gKGN1cnIgLSBNYXRoLm1pbihwcmV2LCBuZXh0KSkgLyAyICogcGVyY2VudDtcblx0c2l6ZSA9IE1hdGguYWJzKG5leHQgLSBwcmV2KSAvIDIgKiBwZXJjZW50O1xuXG5cdHJldHVybiB7XG5cdFx0Y2h1bms6IHNpemUgLyBydWxlci5zdGFja0NvdW50LFxuXHRcdHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG5cdFx0c3RhcnQ6IHN0YXJ0XG5cdH07XG59XG5cbnZhciBjb250cm9sbGVyX2JhciA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlJlY3RhbmdsZSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJTa2lwcGVkJyxcblx0XHQnYm9yZGVyV2lkdGgnLFxuXHRcdCdiYXJQZXJjZW50YWdlJyxcblx0XHQnYmFyVGhpY2tuZXNzJyxcblx0XHQnY2F0ZWdvcnlQZXJjZW50YWdlJyxcblx0XHQnbWF4QmFyVGhpY2tuZXNzJyxcblx0XHQnbWluQmFyTGVuZ3RoJ1xuXHRdLFxuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEsIHNjYWxlT3B0cztcblxuXHRcdGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmluaXRpYWxpemUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHRtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdG1ldGEuc3RhY2sgPSBtZS5nZXREYXRhc2V0KCkuc3RhY2s7XG5cdFx0bWV0YS5iYXIgPSB0cnVlO1xuXG5cdFx0c2NhbGVPcHRzID0gbWUuX2dldEluZGV4U2NhbGUoKS5vcHRpb25zO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5iYXJQZXJjZW50YWdlLCAnc2NhbGVzLlt4L3ldQXhlcy5iYXJQZXJjZW50YWdlJywgJ2RhdGFzZXQuYmFyUGVyY2VudGFnZScpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5iYXJUaGlja25lc3MsICdzY2FsZXMuW3gveV1BeGVzLmJhclRoaWNrbmVzcycsICdkYXRhc2V0LmJhclRoaWNrbmVzcycpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UsICdzY2FsZXMuW3gveV1BeGVzLmNhdGVnb3J5UGVyY2VudGFnZScsICdkYXRhc2V0LmNhdGVnb3J5UGVyY2VudGFnZScpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIG1lLl9nZXRWYWx1ZVNjYWxlKCkub3B0aW9ucy5taW5CYXJMZW5ndGgsICdzY2FsZXMuW3gveV1BeGVzLm1pbkJhckxlbmd0aCcsICdkYXRhc2V0Lm1pbkJhckxlbmd0aCcpO1xuXHRcdGRlcHJlY2F0ZWQoJ2JhciBjaGFydCcsIHNjYWxlT3B0cy5tYXhCYXJUaGlja25lc3MsICdzY2FsZXMuW3gveV1BeGVzLm1heEJhclRoaWNrbmVzcycsICdkYXRhc2V0Lm1heEJhclRoaWNrbmVzcycpO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0bWUuX3J1bGVyID0gbWUuZ2V0UnVsZXIoKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSByZWN0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocmVjdHNbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBvcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMocmVjdGFuZ2xlLCBpbmRleCk7XG5cblx0XHRyZWN0YW5nbGUuX3hTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS54QXhpc0lEKTtcblx0XHRyZWN0YW5nbGUuX3lTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHRyZWN0YW5nbGUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdHJlY3RhbmdsZS5faW5kZXggPSBpbmRleDtcblx0XHRyZWN0YW5nbGUuX21vZGVsID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyU2tpcHBlZDogb3B0aW9ucy5ib3JkZXJTa2lwcGVkLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRkYXRhc2V0TGFiZWw6IGRhdGFzZXQubGFiZWwsXG5cdFx0XHRsYWJlbDogbWUuY2hhcnQuZGF0YS5sYWJlbHNbaW5kZXhdXG5cdFx0fTtcblxuXHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheShkYXRhc2V0LmRhdGFbaW5kZXhdKSkge1xuXHRcdFx0cmVjdGFuZ2xlLl9tb2RlbC5ib3JkZXJTa2lwcGVkID0gbnVsbDtcblx0XHR9XG5cblx0XHRtZS5fdXBkYXRlRWxlbWVudEdlb21ldHJ5KHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0LCBvcHRpb25zKTtcblxuXHRcdHJlY3RhbmdsZS5waXZvdCgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3VwZGF0ZUVsZW1lbnRHZW9tZXRyeTogZnVuY3Rpb24ocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtb2RlbCA9IHJlY3RhbmdsZS5fbW9kZWw7XG5cdFx0dmFyIHZzY2FsZSA9IG1lLl9nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0dmFyIGJhc2UgPSB2c2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG5cdFx0dmFyIGhvcml6b250YWwgPSB2c2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHJ1bGVyID0gbWUuX3J1bGVyIHx8IG1lLmdldFJ1bGVyKCk7XG5cdFx0dmFyIHZwaXhlbHMgPSBtZS5jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhtZS5pbmRleCwgaW5kZXgsIG9wdGlvbnMpO1xuXHRcdHZhciBpcGl4ZWxzID0gbWUuY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMobWUuaW5kZXgsIGluZGV4LCBydWxlciwgb3B0aW9ucyk7XG5cblx0XHRtb2RlbC5ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcblx0XHRtb2RlbC5iYXNlID0gcmVzZXQgPyBiYXNlIDogdnBpeGVscy5iYXNlO1xuXHRcdG1vZGVsLnggPSBob3Jpem9udGFsID8gcmVzZXQgPyBiYXNlIDogdnBpeGVscy5oZWFkIDogaXBpeGVscy5jZW50ZXI7XG5cdFx0bW9kZWwueSA9IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZDtcblx0XHRtb2RlbC5oZWlnaHQgPSBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogdW5kZWZpbmVkO1xuXHRcdG1vZGVsLndpZHRoID0gaG9yaXpvbnRhbCA/IHVuZGVmaW5lZCA6IGlwaXhlbHMuc2l6ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc3RhY2tzIGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbbGFzdF0gLSBUaGUgZGF0YXNldCBpbmRleFxuXHQgKiBAcmV0dXJucyB7c3RyaW5nW119IFRoZSBsaXN0IG9mIHN0YWNrIElEc1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldFN0YWNrczogZnVuY3Rpb24obGFzdCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHNjYWxlID0gbWUuX2dldEluZGV4U2NhbGUoKTtcblx0XHR2YXIgbWV0YXNldHMgPSBzY2FsZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMobWUuX3R5cGUpO1xuXHRcdHZhciBzdGFja2VkID0gc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuXHRcdHZhciBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuXHRcdHZhciBzdGFja3MgPSBbXTtcblx0XHR2YXIgaSwgbWV0YTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdC8vIHN0YWNrZWQgICB8IG1ldGEuc3RhY2tcblx0XHRcdC8vICAgICAgICAgICB8IGZvdW5kIHwgbm90IGZvdW5kIHwgdW5kZWZpbmVkXG5cdFx0XHQvLyBmYWxzZSAgICAgfCAgIHggICB8ICAgICB4ICAgICB8ICAgICB4XG5cdFx0XHQvLyB0cnVlICAgICAgfCAgICAgICB8ICAgICB4ICAgICB8XG5cdFx0XHQvLyB1bmRlZmluZWQgfCAgICAgICB8ICAgICB4ICAgICB8ICAgICB4XG5cdFx0XHRpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YobWV0YS5zdGFjaykgPT09IC0xIHx8XG5cdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRzdGFja3MucHVzaChtZXRhLnN0YWNrKTtcblx0XHRcdH1cblx0XHRcdGlmIChtZXRhLmluZGV4ID09PSBsYXN0KSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzdGFja3M7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGVmZmVjdGl2ZSBudW1iZXIgb2Ygc3RhY2tzIGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRTdGFja0NvdW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKCkubGVuZ3RoO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzdGFjayBpbmRleCBmb3IgdGhlIGdpdmVuIGRhdGFzZXQgYmFzZWQgb24gZ3JvdXBzIGFuZCBiYXIgdmlzaWJpbGl0eS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IFtkYXRhc2V0SW5kZXhdIC0gVGhlIGRhdGFzZXQgaW5kZXhcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSAtIFRoZSBzdGFjayBuYW1lIHRvIGZpbmRcblx0ICogQHJldHVybnMge251bWJlcn0gVGhlIHN0YWNrIGluZGV4XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRTdGFja0luZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgsIG5hbWUpIHtcblx0XHR2YXIgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCk7XG5cdFx0dmFyIGluZGV4ID0gKG5hbWUgIT09IHVuZGVmaW5lZClcblx0XHRcdD8gc3RhY2tzLmluZGV4T2YobmFtZSlcblx0XHRcdDogLTE7IC8vIGluZGV4T2YgcmV0dXJucyAtMSBpZiBlbGVtZW50IGlzIG5vdCBwcmVzZW50XG5cblx0XHRyZXR1cm4gKGluZGV4ID09PSAtMSlcblx0XHRcdD8gc3RhY2tzLmxlbmd0aCAtIDFcblx0XHRcdDogaW5kZXg7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRnZXRSdWxlcjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgc2NhbGUgPSBtZS5fZ2V0SW5kZXhTY2FsZSgpO1xuXHRcdHZhciBwaXhlbHMgPSBbXTtcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5nZXRNZXRhKCkuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHBpeGVscy5wdXNoKHNjYWxlLmdldFBpeGVsRm9yVmFsdWUobnVsbCwgaSwgbWUuaW5kZXgpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cGl4ZWxzOiBwaXhlbHMsXG5cdFx0XHRzdGFydDogc2NhbGUuX3N0YXJ0UGl4ZWwsXG5cdFx0XHRlbmQ6IHNjYWxlLl9lbmRQaXhlbCxcblx0XHRcdHN0YWNrQ291bnQ6IG1lLmdldFN0YWNrQ291bnQoKSxcblx0XHRcdHNjYWxlOiBzY2FsZVxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGU6IHBpeGVsIHZhbHVlcyBhcmUgbm90IGNsYW1wZWQgdG8gdGhlIHNjYWxlIGFyZWEuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjYWxjdWxhdGVCYXJWYWx1ZVBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCwgb3B0aW9ucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHNjYWxlID0gbWUuX2dldFZhbHVlU2NhbGUoKTtcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbWV0YXNldHMgPSBzY2FsZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMobWUuX3R5cGUpO1xuXHRcdHZhciB2YWx1ZSA9IHNjYWxlLl9wYXJzZVZhbHVlKGRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdHZhciBtaW5CYXJMZW5ndGggPSBvcHRpb25zLm1pbkJhckxlbmd0aDtcblx0XHR2YXIgc3RhY2tlZCA9IHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcblx0XHR2YXIgc3RhY2sgPSBtZS5nZXRNZXRhKCkuc3RhY2s7XG5cdFx0dmFyIHN0YXJ0ID0gdmFsdWUuc3RhcnQgPT09IHVuZGVmaW5lZCA/IDAgOiB2YWx1ZS5tYXggPj0gMCAmJiB2YWx1ZS5taW4gPj0gMCA/IHZhbHVlLm1pbiA6IHZhbHVlLm1heDtcblx0XHR2YXIgbGVuZ3RoID0gdmFsdWUuc3RhcnQgPT09IHVuZGVmaW5lZCA/IHZhbHVlLmVuZCA6IHZhbHVlLm1heCA+PSAwICYmIHZhbHVlLm1pbiA+PSAwID8gdmFsdWUubWF4IC0gdmFsdWUubWluIDogdmFsdWUubWluIC0gdmFsdWUubWF4O1xuXHRcdHZhciBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuXHRcdHZhciBpLCBpbWV0YSwgaXZhbHVlLCBiYXNlLCBoZWFkLCBzaXplLCBzdGFja0xlbmd0aDtcblxuXHRcdGlmIChzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgc3RhY2sgIT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aW1ldGEgPSBtZXRhc2V0c1tpXTtcblxuXHRcdFx0XHRpZiAoaW1ldGEuaW5kZXggPT09IGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGltZXRhLnN0YWNrID09PSBzdGFjaykge1xuXHRcdFx0XHRcdHN0YWNrTGVuZ3RoID0gc2NhbGUuX3BhcnNlVmFsdWUoZGF0YXNldHNbaW1ldGEuaW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHRpdmFsdWUgPSBzdGFja0xlbmd0aC5zdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhY2tMZW5ndGguZW5kIDogc3RhY2tMZW5ndGgubWluID49IDAgJiYgc3RhY2tMZW5ndGgubWF4ID49IDAgPyBzdGFja0xlbmd0aC5tYXggOiBzdGFja0xlbmd0aC5taW47XG5cblx0XHRcdFx0XHRpZiAoKHZhbHVlLm1pbiA8IDAgJiYgaXZhbHVlIDwgMCkgfHwgKHZhbHVlLm1heCA+PSAwICYmIGl2YWx1ZSA+IDApKSB7XG5cdFx0XHRcdFx0XHRzdGFydCArPSBpdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YmFzZSA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQpO1xuXHRcdGhlYWQgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcblx0XHRzaXplID0gaGVhZCAtIGJhc2U7XG5cblx0XHRpZiAobWluQmFyTGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcblx0XHRcdHNpemUgPSBtaW5CYXJMZW5ndGg7XG5cdFx0XHRpZiAobGVuZ3RoID49IDAgJiYgIWlzSG9yaXpvbnRhbCB8fCBsZW5ndGggPCAwICYmIGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRoZWFkID0gYmFzZSAtIG1pbkJhckxlbmd0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhlYWQgPSBiYXNlICsgbWluQmFyTGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0YmFzZTogYmFzZSxcblx0XHRcdGhlYWQ6IGhlYWQsXG5cdFx0XHRjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjYWxjdWxhdGVCYXJJbmRleFBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCwgcnVsZXIsIG9wdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcblx0XHRcdD8gY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpXG5cdFx0XHQ6IGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpO1xuXG5cdFx0dmFyIHN0YWNrSW5kZXggPSBtZS5nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbWUuZ2V0TWV0YSgpLnN0YWNrKTtcblx0XHR2YXIgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyAocmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4KSArIChyYW5nZS5jaHVuayAvIDIpO1xuXHRcdHZhciBzaXplID0gTWF0aC5taW4oXG5cdFx0XHR2YWx1ZU9yRGVmYXVsdCQzKG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSksXG5cdFx0XHRyYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcblx0XHRcdGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuXHRcdFx0Y2VudGVyOiBjZW50ZXIsXG5cdFx0XHRzaXplOiBzaXplXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBzY2FsZSA9IG1lLl9nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0dmFyIHJlY3RzID0gbWUuZ2V0TWV0YSgpLmRhdGE7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIGlsZW4gPSByZWN0cy5sZW5ndGg7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0aGVscGVycyQxLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIGNoYXJ0LmNoYXJ0QXJlYSk7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0dmFyIHZhbCA9IHNjYWxlLl9wYXJzZVZhbHVlKGRhdGFzZXQuZGF0YVtpXSk7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbC5taW4pICYmICFpc05hTih2YWwubWF4KSkge1xuXHRcdFx0XHRyZWN0c1tpXS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdmFsdWVzID0gaGVscGVycyQxLmV4dGVuZCh7fSwgY29yZV9kYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMuYXBwbHkobWUsIGFyZ3VtZW50cykpO1xuXHRcdHZhciBpbmRleE9wdHMgPSBtZS5fZ2V0SW5kZXhTY2FsZSgpLm9wdGlvbnM7XG5cdFx0dmFyIHZhbHVlT3B0cyA9IG1lLl9nZXRWYWx1ZVNjYWxlKCkub3B0aW9ucztcblxuXHRcdHZhbHVlcy5iYXJQZXJjZW50YWdlID0gdmFsdWVPckRlZmF1bHQkMyhpbmRleE9wdHMuYmFyUGVyY2VudGFnZSwgdmFsdWVzLmJhclBlcmNlbnRhZ2UpO1xuXHRcdHZhbHVlcy5iYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5iYXJUaGlja25lc3MsIHZhbHVlcy5iYXJUaGlja25lc3MpO1xuXHRcdHZhbHVlcy5jYXRlZ29yeVBlcmNlbnRhZ2UgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5jYXRlZ29yeVBlcmNlbnRhZ2UsIHZhbHVlcy5jYXRlZ29yeVBlcmNlbnRhZ2UpO1xuXHRcdHZhbHVlcy5tYXhCYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdCQzKGluZGV4T3B0cy5tYXhCYXJUaGlja25lc3MsIHZhbHVlcy5tYXhCYXJUaGlja25lc3MpO1xuXHRcdHZhbHVlcy5taW5CYXJMZW5ndGggPSB2YWx1ZU9yRGVmYXVsdCQzKHZhbHVlT3B0cy5taW5CYXJMZW5ndGgsIHZhbHVlcy5taW5CYXJMZW5ndGgpO1xuXG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxuXG59KTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDQgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgcmVzb2x2ZSQxID0gaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZTtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdidWJibGUnLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLCAvLyBidWJibGUgc2hvdWxkIHByb2JhYmx5IHVzZSBhIGxpbmVhciBzY2FsZSBieSBkZWZhdWx0XG5cdFx0XHRwb3NpdGlvbjogJ2JvdHRvbScsXG5cdFx0XHRpZDogJ3gtYXhpcy0wJyAvLyBuZWVkIGFuIElEIHNvIGRhdGFzZXRzIGNhbiByZWZlcmVuY2UgdGhlIHNjYWxlXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCcsXG5cdFx0XHRpZDogJ3ktYXhpcy0wJ1xuXHRcdH1dXG5cdH0sXG5cblx0dG9vbHRpcHM6IHtcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdHRpdGxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gVGl0bGUgZG9lc24ndCBtYWtlIHNlbnNlIGZvciBzY2F0dGVyIHNpbmNlIHdlIGZvcm1hdCB0aGUgZGF0YSBhcyBhIHBvaW50XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgZGF0YXNldExhYmVsID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cdFx0XHRcdHZhciBkYXRhUG9pbnQgPSBkYXRhLmRhdGFzZXRzW2l0ZW0uZGF0YXNldEluZGV4XS5kYXRhW2l0ZW0uaW5kZXhdO1xuXHRcdFx0XHRyZXR1cm4gZGF0YXNldExhYmVsICsgJzogKCcgKyBpdGVtLnhMYWJlbCArICcsICcgKyBpdGVtLnlMYWJlbCArICcsICcgKyBkYXRhUG9pbnQuciArICcpJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9idWJibGUgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlBvaW50LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnaG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdFx0J2hvdmVyUmFkaXVzJyxcblx0XHQnaGl0UmFkaXVzJyxcblx0XHQncG9pbnRTdHlsZScsXG5cdFx0J3JvdGF0aW9uJ1xuXHRdLFxuXG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhO1xuXG5cdFx0Ly8gVXBkYXRlIFBvaW50c1xuXHRcdGhlbHBlcnMkMS5lYWNoKHBvaW50cywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KHBvaW50LCBpbmRleCwgcmVzZXQpO1xuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihwb2ludCwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciB4U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0dmFyIHlTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHBvaW50LCBpbmRleCk7XG5cdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YVtpbmRleF07XG5cdFx0dmFyIGRzSW5kZXggPSBtZS5pbmRleDtcblxuXHRcdHZhciB4ID0gcmVzZXQgPyB4U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhIDogTmFOLCBpbmRleCwgZHNJbmRleCk7XG5cdFx0dmFyIHkgPSByZXNldCA/IHlTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGRhdGEsIGluZGV4LCBkc0luZGV4KTtcblxuXHRcdHBvaW50Ll94U2NhbGUgPSB4U2NhbGU7XG5cdFx0cG9pbnQuX3lTY2FsZSA9IHlTY2FsZTtcblx0XHRwb2ludC5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0cG9pbnQuX2RhdGFzZXRJbmRleCA9IGRzSW5kZXg7XG5cdFx0cG9pbnQuX2luZGV4ID0gaW5kZXg7XG5cdFx0cG9pbnQuX21vZGVsID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHRoaXRSYWRpdXM6IG9wdGlvbnMuaGl0UmFkaXVzLFxuXHRcdFx0cG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuXHRcdFx0cm90YXRpb246IG9wdGlvbnMucm90YXRpb24sXG5cdFx0XHRyYWRpdXM6IHJlc2V0ID8gMCA6IG9wdGlvbnMucmFkaXVzLFxuXHRcdFx0c2tpcDogY3VzdG9tLnNraXAgfHwgaXNOYU4oeCkgfHwgaXNOYU4oeSksXG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeSxcblx0XHR9O1xuXG5cdFx0cG9pbnQucGl2b3QoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDQob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNChvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHRcdG1vZGVsLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5ob3ZlclJhZGl1cztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zOiBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0dmFyIGRhdGEgPSBkYXRhc2V0LmRhdGFbaW5kZXhdIHx8IHt9O1xuXHRcdHZhciB2YWx1ZXMgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucy5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdC8vIFNjcmlwdGFibGUgb3B0aW9uc1xuXHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0ZGF0YUluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXQ6IGRhdGFzZXQsXG5cdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0fTtcblxuXHRcdC8vIEluIGNhc2UgdmFsdWVzIHdlcmUgY2FjaGVkIChhbmQgdGh1cyBmcm96ZW4pLCB3ZSBuZWVkIHRvIGNsb25lIHRoZSB2YWx1ZXNcblx0XHRpZiAobWUuX2NhY2hlZERhdGFPcHRzID09PSB2YWx1ZXMpIHtcblx0XHRcdHZhbHVlcyA9IGhlbHBlcnMkMS5leHRlbmQoe30sIHZhbHVlcyk7XG5cdFx0fVxuXG5cdFx0Ly8gQ3VzdG9tIHJhZGl1cyByZXNvbHV0aW9uXG5cdFx0dmFsdWVzLnJhZGl1cyA9IHJlc29sdmUkMShbXG5cdFx0XHRjdXN0b20ucmFkaXVzLFxuXHRcdFx0ZGF0YS5yLFxuXHRcdFx0bWUuX2NvbmZpZy5yYWRpdXMsXG5cdFx0XHRjaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJhZGl1c1xuXHRcdF0sIGNvbnRleHQsIGluZGV4KTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH1cbn0pO1xuXG52YXIgdmFsdWVPckRlZmF1bHQkNSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxudmFyIFBJJDEgPSBNYXRoLlBJO1xudmFyIERPVUJMRV9QSSQxID0gUEkkMSAqIDI7XG52YXIgSEFMRl9QSSQxID0gUEkkMSAvIDI7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZG91Z2hudXQnLCB7XG5cdGFuaW1hdGlvbjoge1xuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGU6IGZhbHNlXG5cdH0sXG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblx0bGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuXHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHR2YXIgZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBsYWJlbHMgPSBkYXRhLmxhYmVscztcblx0XHR2YXIgaSwgaWxlbiwgbGlzdEl0ZW0sIGxpc3RJdGVtU3BhbjtcblxuXHRcdGxpc3Quc2V0QXR0cmlidXRlKCdjbGFzcycsIGNoYXJ0LmlkICsgJy1sZWdlbmQnKTtcblx0XHRpZiAoZGF0YXNldHMubGVuZ3RoKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHNbMF0uZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bGlzdEl0ZW0gPSBsaXN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpO1xuXHRcdFx0XHRsaXN0SXRlbVNwYW4gPSBsaXN0SXRlbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJykpO1xuXHRcdFx0XHRsaXN0SXRlbVNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldHNbMF0uYmFja2dyb3VuZENvbG9yW2ldO1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldKSB7XG5cdFx0XHRcdFx0bGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGFiZWxzW2ldKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdC5vdXRlckhUTUw7XG5cdH0sXG5cdGxlZ2VuZDoge1xuXHRcdGxhYmVsczoge1xuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdFx0aWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24obGFiZWwsIGkpIHtcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG5cdFx0XHRcdFx0XHR2YXIgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHRleHQ6IGxhYmVsLFxuXHRcdFx0XHRcdFx0XHRmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcblx0XHRcdFx0XHRcdFx0c3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdFx0XHRsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuXHRcdFx0XHRcdFx0XHRoaWRkZW46IGlzTmFOKGRhdGEuZGF0YXNldHNbMF0uZGF0YVtpXSkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbixcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBjb3JyZWN0IGl0ZW1cblx0XHRcdFx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRvbkNsaWNrOiBmdW5jdGlvbihlLCBsZWdlbmRJdGVtKSB7XG5cdFx0XHR2YXIgaW5kZXggPSBsZWdlbmRJdGVtLmluZGV4O1xuXHRcdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBpLCBpbGVuLCBtZXRhO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdC8vIHRvZ2dsZSB2aXNpYmlsaXR5IG9mIGluZGV4IGlmIGV4aXN0c1xuXHRcdFx0XHRpZiAobWV0YS5kYXRhW2luZGV4XSkge1xuXHRcdFx0XHRcdG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuID0gIW1ldGEuZGF0YVtpbmRleF0uaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJ0LnVwZGF0ZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBUaGUgcGVyY2VudGFnZSBvZiB0aGUgY2hhcnQgdGhhdCB3ZSBjdXQgb3V0IG9mIHRoZSBtaWRkbGUuXG5cdGN1dG91dFBlcmNlbnRhZ2U6IDUwLFxuXG5cdC8vIFRoZSByb3RhdGlvbiBvZiB0aGUgY2hhcnQsIHdoZXJlIHRoZSBmaXJzdCBkYXRhIGFyYyBiZWdpbnMuXG5cdHJvdGF0aW9uOiAtSEFMRl9QSSQxLFxuXG5cdC8vIFRoZSB0b3RhbCBjaXJjdW1mZXJlbmNlIG9mIHRoZSBjaGFydC5cblx0Y2lyY3VtZmVyZW5jZTogRE9VQkxFX1BJJDEsXG5cblx0Ly8gTmVlZCB0byBvdmVycmlkZSB0aGVzZSB0byBnaXZlIGEgbmljZSBkZWZhdWx0XG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGRhdGFMYWJlbCA9IGRhdGEubGFiZWxzW3Rvb2x0aXBJdGVtLmluZGV4XTtcblx0XHRcdFx0dmFyIHZhbHVlID0gJzogJyArIGRhdGEuZGF0YXNldHNbdG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4XS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcblxuXHRcdFx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkoZGF0YUxhYmVsKSkge1xuXHRcdFx0XHRcdC8vIHNob3cgdmFsdWUgb24gZmlyc3QgbGluZSBvZiBtdWx0aWxpbmUgbGFiZWxcblx0XHRcdFx0XHQvLyBuZWVkIHRvIGNsb25lIGJlY2F1c2Ugd2UgYXJlIGNoYW5naW5nIHRoZSB2YWx1ZVxuXHRcdFx0XHRcdGRhdGFMYWJlbCA9IGRhdGFMYWJlbC5zbGljZSgpO1xuXHRcdFx0XHRcdGRhdGFMYWJlbFswXSArPSB2YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhTGFiZWwgKz0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZGF0YUxhYmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX2RvdWdobnV0ID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuQXJjLFxuXG5cdGxpbmtTY2FsZXM6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RhdGFFbGVtZW50T3B0aW9uczogW1xuXHRcdCdiYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdib3JkZXJDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnYm9yZGVyQWxpZ24nLFxuXHRcdCdob3ZlckJhY2tncm91bmRDb2xvcicsXG5cdFx0J2hvdmVyQm9yZGVyQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlcldpZHRoJyxcblx0XSxcblxuXHQvLyBHZXQgaW5kZXggb2YgdGhlIGRhdGFzZXQgaW4gcmVsYXRpb24gdG8gdGhlIHZpc2libGUgZGF0YXNldHMuIFRoaXMgYWxsb3dzIGRldGVybWluaW5nIHRoZSBpbm5lciBhbmQgb3V0ZXIgcmFkaXVzIGNvcnJlY3RseVxuXHRnZXRSaW5nSW5kZXg6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciByaW5nSW5kZXggPSAwO1xuXG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkYXRhc2V0SW5kZXg7ICsraikge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShqKSkge1xuXHRcdFx0XHQrK3JpbmdJbmRleDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmluZ0luZGV4O1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciByYXRpb1ggPSAxO1xuXHRcdHZhciByYXRpb1kgPSAxO1xuXHRcdHZhciBvZmZzZXRYID0gMDtcblx0XHR2YXIgb2Zmc2V0WSA9IDA7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGFyY3MgPSBtZXRhLmRhdGE7XG5cdFx0dmFyIGN1dG91dCA9IG9wdHMuY3V0b3V0UGVyY2VudGFnZSAvIDEwMCB8fCAwO1xuXHRcdHZhciBjaXJjdW1mZXJlbmNlID0gb3B0cy5jaXJjdW1mZXJlbmNlO1xuXHRcdHZhciBjaGFydFdlaWdodCA9IG1lLl9nZXRSaW5nV2VpZ2h0KG1lLmluZGV4KTtcblx0XHR2YXIgbWF4V2lkdGgsIG1heEhlaWdodCwgaSwgaWxlbjtcblxuXHRcdC8vIElmIHRoZSBjaGFydCdzIGNpcmN1bWZlcmVuY2UgaXNuJ3QgYSBmdWxsIGNpcmNsZSwgY2FsY3VsYXRlIHNpemUgYXMgYSByYXRpbyBvZiB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBhcmNcblx0XHRpZiAoY2lyY3VtZmVyZW5jZSA8IERPVUJMRV9QSSQxKSB7XG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdHMucm90YXRpb24gJSBET1VCTEVfUEkkMTtcblx0XHRcdHN0YXJ0QW5nbGUgKz0gc3RhcnRBbmdsZSA+PSBQSSQxID8gLURPVUJMRV9QSSQxIDogc3RhcnRBbmdsZSA8IC1QSSQxID8gRE9VQkxFX1BJJDEgOiAwO1xuXHRcdFx0dmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG5cdFx0XHR2YXIgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG5cdFx0XHR2YXIgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG5cdFx0XHR2YXIgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcblx0XHRcdHZhciBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuXHRcdFx0dmFyIGNvbnRhaW5zMCA9IChzdGFydEFuZ2xlIDw9IDAgJiYgZW5kQW5nbGUgPj0gMCkgfHwgZW5kQW5nbGUgPj0gRE9VQkxFX1BJJDE7XG5cdFx0XHR2YXIgY29udGFpbnM5MCA9IChzdGFydEFuZ2xlIDw9IEhBTEZfUEkkMSAmJiBlbmRBbmdsZSA+PSBIQUxGX1BJJDEpIHx8IGVuZEFuZ2xlID49IERPVUJMRV9QSSQxICsgSEFMRl9QSSQxO1xuXHRcdFx0dmFyIGNvbnRhaW5zMTgwID0gc3RhcnRBbmdsZSA9PT0gLVBJJDEgfHwgZW5kQW5nbGUgPj0gUEkkMTtcblx0XHRcdHZhciBjb250YWluczI3MCA9IChzdGFydEFuZ2xlIDw9IC1IQUxGX1BJJDEgJiYgZW5kQW5nbGUgPj0gLUhBTEZfUEkkMSkgfHwgZW5kQW5nbGUgPj0gUEkkMSArIEhBTEZfUEkkMTtcblx0XHRcdHZhciBtaW5YID0gY29udGFpbnMxODAgPyAtMSA6IE1hdGgubWluKHN0YXJ0WCwgc3RhcnRYICogY3V0b3V0LCBlbmRYLCBlbmRYICogY3V0b3V0KTtcblx0XHRcdHZhciBtaW5ZID0gY29udGFpbnMyNzAgPyAtMSA6IE1hdGgubWluKHN0YXJ0WSwgc3RhcnRZICogY3V0b3V0LCBlbmRZLCBlbmRZICogY3V0b3V0KTtcblx0XHRcdHZhciBtYXhYID0gY29udGFpbnMwID8gMSA6IE1hdGgubWF4KHN0YXJ0WCwgc3RhcnRYICogY3V0b3V0LCBlbmRYLCBlbmRYICogY3V0b3V0KTtcblx0XHRcdHZhciBtYXhZID0gY29udGFpbnM5MCA/IDEgOiBNYXRoLm1heChzdGFydFksIHN0YXJ0WSAqIGN1dG91dCwgZW5kWSwgZW5kWSAqIGN1dG91dCk7XG5cdFx0XHRyYXRpb1ggPSAobWF4WCAtIG1pblgpIC8gMjtcblx0XHRcdHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuXHRcdFx0b2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcblx0XHRcdG9mZnNldFkgPSAtKG1heFkgKyBtaW5ZKSAvIDI7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRhcmNzW2ldLl9vcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoYXJjc1tpXSwgaSk7XG5cdFx0fVxuXG5cdFx0Y2hhcnQuYm9yZGVyV2lkdGggPSBtZS5nZXRNYXhCb3JkZXJXaWR0aCgpO1xuXHRcdG1heFdpZHRoID0gKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0IC0gY2hhcnQuYm9yZGVyV2lkdGgpIC8gcmF0aW9YO1xuXHRcdG1heEhlaWdodCA9IChjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCAtIGNoYXJ0LmJvcmRlcldpZHRoKSAvIHJhdGlvWTtcblx0XHRjaGFydC5vdXRlclJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG5cdFx0Y2hhcnQuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChjaGFydC5vdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG5cdFx0Y2hhcnQucmFkaXVzTGVuZ3RoID0gKGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQuaW5uZXJSYWRpdXMpIC8gKG1lLl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkgfHwgMSk7XG5cdFx0Y2hhcnQub2Zmc2V0WCA9IG9mZnNldFggKiBjaGFydC5vdXRlclJhZGl1cztcblx0XHRjaGFydC5vZmZzZXRZID0gb2Zmc2V0WSAqIGNoYXJ0Lm91dGVyUmFkaXVzO1xuXG5cdFx0bWV0YS50b3RhbCA9IG1lLmNhbGN1bGF0ZVRvdGFsKCk7XG5cblx0XHRtZS5vdXRlclJhZGl1cyA9IGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoICogbWUuX2dldFJpbmdXZWlnaHRPZmZzZXQobWUuaW5kZXgpO1xuXHRcdG1lLmlubmVyUmFkaXVzID0gTWF0aC5tYXgobWUub3V0ZXJSYWRpdXMgLSBjaGFydC5yYWRpdXNMZW5ndGggKiBjaGFydFdlaWdodCwgMCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQoYXJjc1tpXSwgaSwgcmVzZXQpO1xuXHRcdH1cblx0fSxcblxuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcblx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0dmFyIGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcblx0XHR2YXIgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuXHRcdHZhciBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uOyAvLyBub24gcmVzZXQgY2FzZSBoYW5kbGVkIGxhdGVyXG5cdFx0dmFyIGVuZEFuZ2xlID0gb3B0cy5yb3RhdGlvbjsgLy8gbm9uIHJlc2V0IGNhc2UgaGFuZGxlZCBsYXRlclxuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBjaXJjdW1mZXJlbmNlID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gMCA6IGFyYy5oaWRkZW4gPyAwIDogbWUuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShkYXRhc2V0LmRhdGFbaW5kZXhdKSAqIChvcHRzLmNpcmN1bWZlcmVuY2UgLyBET1VCTEVfUEkkMSk7XG5cdFx0dmFyIGlubmVyUmFkaXVzID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogbWUuaW5uZXJSYWRpdXM7XG5cdFx0dmFyIG91dGVyUmFkaXVzID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogbWUub3V0ZXJSYWRpdXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBhcmMuX29wdGlvbnMgfHwge307XG5cblx0XHRoZWxwZXJzJDEuZXh0ZW5kKGFyYywge1xuXHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRfaW5kZXg6IGluZGV4LFxuXG5cdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0X21vZGVsOiB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcblx0XHRcdFx0Ym9yZGVyQWxpZ246IG9wdGlvbnMuYm9yZGVyQWxpZ24sXG5cdFx0XHRcdHg6IGNlbnRlclggKyBjaGFydC5vZmZzZXRYLFxuXHRcdFx0XHR5OiBjZW50ZXJZICsgY2hhcnQub2Zmc2V0WSxcblx0XHRcdFx0c3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcblx0XHRcdFx0ZW5kQW5nbGU6IGVuZEFuZ2xlLFxuXHRcdFx0XHRjaXJjdW1mZXJlbmNlOiBjaXJjdW1mZXJlbmNlLFxuXHRcdFx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXG5cdFx0XHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRcdFx0bGFiZWw6IGhlbHBlcnMkMS52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5sYWJlbCwgaW5kZXgsIGNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XSlcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciBtb2RlbCA9IGFyYy5fbW9kZWw7XG5cblx0XHQvLyBTZXQgY29ycmVjdCBhbmdsZXMgaWYgbm90IHJlc2V0dGluZ1xuXHRcdGlmICghcmVzZXQgfHwgIWFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuXHRcdFx0aWYgKGluZGV4ID09PSAwKSB7XG5cdFx0XHRcdG1vZGVsLnN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bW9kZWwuc3RhcnRBbmdsZSA9IG1lLmdldE1ldGEoKS5kYXRhW2luZGV4IC0gMV0uX21vZGVsLmVuZEFuZ2xlO1xuXHRcdFx0fVxuXG5cdFx0XHRtb2RlbC5lbmRBbmdsZSA9IG1vZGVsLnN0YXJ0QW5nbGUgKyBtb2RlbC5jaXJjdW1mZXJlbmNlO1xuXHRcdH1cblxuXHRcdGFyYy5waXZvdCgpO1xuXHR9LFxuXG5cdGNhbGN1bGF0ZVRvdGFsOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBtZXRhID0gdGhpcy5nZXRNZXRhKCk7XG5cdFx0dmFyIHRvdGFsID0gMDtcblx0XHR2YXIgdmFsdWU7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChtZXRhLmRhdGEsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG5cdFx0XHR2YWx1ZSA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0dG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0LyogaWYgKHRvdGFsID09PSAwKSB7XG5cdFx0XHR0b3RhbCA9IE5hTjtcblx0XHR9Ki9cblxuXHRcdHJldHVybiB0b3RhbDtcblx0fSxcblxuXHRjYWxjdWxhdGVDaXJjdW1mZXJlbmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciB0b3RhbCA9IHRoaXMuZ2V0TWV0YSgpLnRvdGFsO1xuXHRcdGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIERPVUJMRV9QSSQxICogKE1hdGguYWJzKHZhbHVlKSAvIHRvdGFsKTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gZ2V0cyB0aGUgbWF4IGJvcmRlciBvciBob3ZlciB3aWR0aCB0byBwcm9wZXJseSBzY2FsZSBwaWUgY2hhcnRzXG5cdGdldE1heEJvcmRlcldpZHRoOiBmdW5jdGlvbihhcmNzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWF4ID0gMDtcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgaSwgaWxlbiwgbWV0YSwgYXJjLCBjb250cm9sbGVyLCBvcHRpb25zLCBib3JkZXJXaWR0aCwgaG92ZXJXaWR0aDtcblxuXHRcdGlmICghYXJjcykge1xuXHRcdFx0Ly8gRmluZCB0aGUgb3V0bW9zdCB2aXNpYmxlIGRhdGFzZXRcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0XHRhcmNzID0gbWV0YS5kYXRhO1xuXHRcdFx0XHRcdGlmIChpICE9PSBtZS5pbmRleCkge1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlciA9IG1ldGEuY29udHJvbGxlcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIWFyY3MpIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0YXJjID0gYXJjc1tpXTtcblx0XHRcdGlmIChjb250cm9sbGVyKSB7XG5cdFx0XHRcdGNvbnRyb2xsZXIuX2NvbmZpZ3VyZSgpO1xuXHRcdFx0XHRvcHRpb25zID0gY29udHJvbGxlci5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhhcmMsIGkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG5cdFx0XHRcdGJvcmRlcldpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcblx0XHRcdFx0aG92ZXJXaWR0aCA9IG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aDtcblxuXHRcdFx0XHRtYXggPSBib3JkZXJXaWR0aCA+IG1heCA/IGJvcmRlcldpZHRoIDogbWF4O1xuXHRcdFx0XHRtYXggPSBob3ZlcldpZHRoID4gbWF4ID8gaG92ZXJXaWR0aCA6IG1heDtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1heDtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0dmFyIG1vZGVsID0gYXJjLl9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0YXJjLiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBtb2RlbC5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDUob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNShvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNShvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXQgcmFkaXVzIGxlbmd0aCBvZmZzZXQgb2YgdGhlIGRhdGFzZXQgaW4gcmVsYXRpb24gdG8gdGhlIHZpc2libGUgZGF0YXNldHMgd2VpZ2h0cy4gVGhpcyBhbGxvd3MgZGV0ZXJtaW5pbmcgdGhlIGlubmVyIGFuZCBvdXRlciByYWRpdXMgY29ycmVjdGx5XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0UmluZ1dlaWdodE9mZnNldDogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0dmFyIHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7ICsraSkge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRyaW5nV2VpZ2h0T2Zmc2V0ICs9IHRoaXMuX2dldFJpbmdXZWlnaHQoaSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0UmluZ1dlaWdodDogZnVuY3Rpb24oZGF0YVNldEluZGV4KSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0JDUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFTZXRJbmRleF0ud2VpZ2h0LCAxKSwgMCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIHN1bSBvZiBhbGwgdmlzaWJpbGUgZGF0YSBzZXQgd2VpZ2h0cy4gIFRoaXMgdmFsdWUgY2FuIGJlIDAuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCk7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2hvcml6b250YWxCYXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2luZGV4Jyxcblx0XHRheGlzOiAneSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0cG9zaXRpb246ICdib3R0b20nXG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdFx0b2Zmc2V0OiB0cnVlLFxuXHRcdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lczogdHJ1ZVxuXHRcdFx0fVxuXHRcdH1dXG5cdH0sXG5cblx0ZWxlbWVudHM6IHtcblx0XHRyZWN0YW5nbGU6IHtcblx0XHRcdGJvcmRlclNraXBwZWQ6ICdsZWZ0J1xuXHRcdH1cblx0fSxcblxuXHR0b29sdGlwczoge1xuXHRcdG1vZGU6ICdpbmRleCcsXG5cdFx0YXhpczogJ3knXG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZGF0YXNldHM6IHtcblx0XHRob3Jpem9udGFsQmFyOiB7XG5cdFx0XHRjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcblx0XHRcdGJhclBlcmNlbnRhZ2U6IDAuOVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX2hvcml6b250YWxCYXIgPSBjb250cm9sbGVyX2Jhci5leHRlbmQoe1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS54QXhpc0lEO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0TWV0YSgpLnlBeGlzSUQ7XG5cdH1cbn0pO1xuXG52YXIgdmFsdWVPckRlZmF1bHQkNiA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcbnZhciByZXNvbHZlJDIgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xudmFyIGlzUG9pbnRJbkFyZWEgPSBoZWxwZXJzJDEuY2FudmFzLl9pc1BvaW50SW5BcmVhO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2xpbmUnLCB7XG5cdHNob3dMaW5lczogdHJ1ZSxcblx0c3BhbkdhcHM6IGZhbHNlLFxuXG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2xhYmVsJ1xuXHR9LFxuXG5cdHNjYWxlczoge1xuXHRcdHhBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2NhdGVnb3J5Jyxcblx0XHRcdGlkOiAneC1heGlzLTAnXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdGlkOiAneS1heGlzLTAnXG5cdFx0fV1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIHNjYWxlQ2xpcChzY2FsZSwgaGFsZkJvcmRlcldpZHRoKSB7XG5cdHZhciB0aWNrT3B0cyA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMudGlja3MgfHwge307XG5cdHZhciByZXZlcnNlID0gdGlja09wdHMucmV2ZXJzZTtcblx0dmFyIG1pbiA9IHRpY2tPcHRzLm1pbiA9PT0gdW5kZWZpbmVkID8gaGFsZkJvcmRlcldpZHRoIDogMDtcblx0dmFyIG1heCA9IHRpY2tPcHRzLm1heCA9PT0gdW5kZWZpbmVkID8gaGFsZkJvcmRlcldpZHRoIDogMDtcblx0cmV0dXJuIHtcblx0XHRzdGFydDogcmV2ZXJzZSA/IG1heCA6IG1pbixcblx0XHRlbmQ6IHJldmVyc2UgPyBtaW4gOiBtYXhcblx0fTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGJvcmRlcldpZHRoKSB7XG5cdHZhciBoYWxmQm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCAvIDI7XG5cdHZhciB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgaGFsZkJvcmRlcldpZHRoKTtcblx0dmFyIHkgPSBzY2FsZUNsaXAoeVNjYWxlLCBoYWxmQm9yZGVyV2lkdGgpO1xuXG5cdHJldHVybiB7XG5cdFx0dG9wOiB5LmVuZCxcblx0XHRyaWdodDogeC5lbmQsXG5cdFx0Ym90dG9tOiB5LnN0YXJ0LFxuXHRcdGxlZnQ6IHguc3RhcnRcblx0fTtcbn1cblxuZnVuY3Rpb24gdG9DbGlwKHZhbHVlKSB7XG5cdHZhciB0LCByLCBiLCBsO1xuXG5cdGlmIChoZWxwZXJzJDEuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0dCA9IHZhbHVlLnRvcDtcblx0XHRyID0gdmFsdWUucmlnaHQ7XG5cdFx0YiA9IHZhbHVlLmJvdHRvbTtcblx0XHRsID0gdmFsdWUubGVmdDtcblx0fSBlbHNlIHtcblx0XHR0ID0gciA9IGIgPSBsID0gdmFsdWU7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHRvcDogdCxcblx0XHRyaWdodDogcixcblx0XHRib3R0b206IGIsXG5cdFx0bGVmdDogbFxuXHR9O1xufVxuXG5cbnZhciBjb250cm9sbGVyX2xpbmUgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cblx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YXNldEVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlckNhcFN0eWxlJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJEYXNoJyxcblx0XHQnYm9yZGVyRGFzaE9mZnNldCcsXG5cdFx0J2JvcmRlckpvaW5TdHlsZScsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnY3ViaWNJbnRlcnBvbGF0aW9uTW9kZScsXG5cdFx0J2ZpbGwnXG5cdF0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YUVsZW1lbnRPcHRpb25zOiB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiAncG9pbnRCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdGJvcmRlckNvbG9yOiAncG9pbnRCb3JkZXJDb2xvcicsXG5cdFx0Ym9yZGVyV2lkdGg6ICdwb2ludEJvcmRlcldpZHRoJyxcblx0XHRoaXRSYWRpdXM6ICdwb2ludEhpdFJhZGl1cycsXG5cdFx0aG92ZXJCYWNrZ3JvdW5kQ29sb3I6ICdwb2ludEhvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHRob3ZlckJvcmRlckNvbG9yOiAncG9pbnRIb3ZlckJvcmRlckNvbG9yJyxcblx0XHRob3ZlckJvcmRlcldpZHRoOiAncG9pbnRIb3ZlckJvcmRlcldpZHRoJyxcblx0XHRob3ZlclJhZGl1czogJ3BvaW50SG92ZXJSYWRpdXMnLFxuXHRcdHBvaW50U3R5bGU6ICdwb2ludFN0eWxlJyxcblx0XHRyYWRpdXM6ICdwb2ludFJhZGl1cycsXG5cdFx0cm90YXRpb246ICdwb2ludFJvdGF0aW9uJ1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5jaGFydC5vcHRpb25zO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBzaG93TGluZSA9IG1lLl9zaG93TGluZSA9IHZhbHVlT3JEZWZhdWx0JDYoY29uZmlnLnNob3dMaW5lLCBvcHRpb25zLnNob3dMaW5lcyk7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRtZS5feFNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnhBeGlzSUQpO1xuXHRcdG1lLl95U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cblx0XHQvLyBVcGRhdGUgTGluZVxuXHRcdGlmIChzaG93TGluZSkge1xuXHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0aWYgKGNvbmZpZy50ZW5zaW9uICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmxpbmVUZW5zaW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29uZmlnLmxpbmVUZW5zaW9uID0gY29uZmlnLnRlbnNpb247XG5cdFx0XHR9XG5cblx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdGxpbmUuX3NjYWxlID0gbWUuX3lTY2FsZTtcblx0XHRcdGxpbmUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdFx0Ly8gRGF0YVxuXHRcdFx0bGluZS5fY2hpbGRyZW4gPSBwb2ludHM7XG5cdFx0XHQvLyBNb2RlbFxuXHRcdFx0bGluZS5fbW9kZWwgPSBtZS5fcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhsaW5lKTtcblxuXHRcdFx0bGluZS5waXZvdCgpO1xuXHRcdH1cblxuXHRcdC8vIFVwZGF0ZSBQb2ludHNcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludHNbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cblx0XHRpZiAoc2hvd0xpbmUgJiYgbGluZS5fbW9kZWwudGVuc2lvbiAhPT0gMCkge1xuXHRcdFx0bWUudXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cygpO1xuXHRcdH1cblxuXHRcdC8vIE5vdyBwaXZvdCB0aGUgcG9pbnQgZm9yIGFuaW1hdGlvblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwb2ludHNbaV0ucGl2b3QoKTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0dmFyIHZhbHVlID0gZGF0YXNldC5kYXRhW2luZGV4XTtcblx0XHR2YXIgeFNjYWxlID0gbWUuX3hTY2FsZTtcblx0XHR2YXIgeVNjYWxlID0gbWUuX3lTY2FsZTtcblx0XHR2YXIgbGluZU1vZGVsID0gbWV0YS5kYXRhc2V0Ll9tb2RlbDtcblx0XHR2YXIgeCwgeTtcblxuXHRcdHZhciBvcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMocG9pbnQsIGluZGV4KTtcblxuXHRcdHggPSB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBOYU4sIGluZGV4LCBkYXRhc2V0SW5kZXgpO1xuXHRcdHkgPSByZXNldCA/IHlTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IG1lLmNhbGN1bGF0ZVBvaW50WSh2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCk7XG5cblx0XHQvLyBVdGlsaXR5XG5cdFx0cG9pbnQuX3hTY2FsZSA9IHhTY2FsZTtcblx0XHRwb2ludC5feVNjYWxlID0geVNjYWxlO1xuXHRcdHBvaW50Ll9vcHRpb25zID0gb3B0aW9ucztcblx0XHRwb2ludC5fZGF0YXNldEluZGV4ID0gZGF0YXNldEluZGV4O1xuXHRcdHBvaW50Ll9pbmRleCA9IGluZGV4O1xuXG5cdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRwb2ludC5fbW9kZWwgPSB7XG5cdFx0XHR4OiB4LFxuXHRcdFx0eTogeSxcblx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdFx0cmFkaXVzOiBvcHRpb25zLnJhZGl1cyxcblx0XHRcdHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcblx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHR0ZW5zaW9uOiB2YWx1ZU9yRGVmYXVsdCQ2KGN1c3RvbS50ZW5zaW9uLCBsaW5lTW9kZWwgPyBsaW5lTW9kZWwudGVuc2lvbiA6IDApLFxuXHRcdFx0c3RlcHBlZExpbmU6IGxpbmVNb2RlbCA/IGxpbmVNb2RlbC5zdGVwcGVkTGluZSA6IGZhbHNlLFxuXHRcdFx0Ly8gVG9vbHRpcFxuXHRcdFx0aGl0UmFkaXVzOiBvcHRpb25zLmhpdFJhZGl1c1xuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9uczogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNvbmZpZyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGN1c3RvbSA9IGVsZW1lbnQuY3VzdG9tIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHR2YXIgbGluZU9wdGlvbnMgPSBvcHRpb25zLmVsZW1lbnRzLmxpbmU7XG5cdFx0dmFyIHZhbHVlcyA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLl9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0Ly8gVGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgbGluZXMgaXMgdG8gYnJlYWsgYXQgbnVsbCB2YWx1ZXMsIGFjY29yZGluZ1xuXHRcdC8vIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yNDM1I2lzc3VlY29tbWVudC0yMTY3MTgxNThcblx0XHQvLyBUaGlzIG9wdGlvbiBnaXZlcyBsaW5lcyB0aGUgYWJpbGl0eSB0byBzcGFuIGdhcHNcblx0XHR2YWx1ZXMuc3BhbkdhcHMgPSB2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5zcGFuR2Fwcywgb3B0aW9ucy5zcGFuR2Fwcyk7XG5cdFx0dmFsdWVzLnRlbnNpb24gPSB2YWx1ZU9yRGVmYXVsdCQ2KGNvbmZpZy5saW5lVGVuc2lvbiwgbGluZU9wdGlvbnMudGVuc2lvbik7XG5cdFx0dmFsdWVzLnN0ZXBwZWRMaW5lID0gcmVzb2x2ZSQyKFtjdXN0b20uc3RlcHBlZExpbmUsIGNvbmZpZy5zdGVwcGVkTGluZSwgbGluZU9wdGlvbnMuc3RlcHBlZF0pO1xuXHRcdHZhbHVlcy5jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0JDYoY29uZmlnLmNsaXAsIGRlZmF1bHRDbGlwKG1lLl94U2NhbGUsIG1lLl95U2NhbGUsIHZhbHVlcy5ib3JkZXJXaWR0aCkpKTtcblxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH0sXG5cblx0Y2FsY3VsYXRlUG9pbnRZOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIHlTY2FsZSA9IG1lLl95U2NhbGU7XG5cdFx0dmFyIHN1bVBvcyA9IDA7XG5cdFx0dmFyIHN1bU5lZyA9IDA7XG5cdFx0dmFyIGksIGRzLCBkc01ldGEsIHN0YWNrZWRSaWdodFZhbHVlLCByaWdodFZhbHVlLCBtZXRhc2V0cywgaWxlbjtcblxuXHRcdGlmICh5U2NhbGUub3B0aW9ucy5zdGFja2VkKSB7XG5cdFx0XHRyaWdodFZhbHVlID0gK3lTY2FsZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHRcdGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0ZHNNZXRhID0gbWV0YXNldHNbaV07XG5cdFx0XHRcdGlmIChkc01ldGEuaW5kZXggPT09IGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2RzTWV0YS5pbmRleF07XG5cdFx0XHRcdGlmIChkc01ldGEudHlwZSA9PT0gJ2xpbmUnICYmIGRzTWV0YS55QXhpc0lEID09PSB5U2NhbGUuaWQpIHtcblx0XHRcdFx0XHRzdGFja2VkUmlnaHRWYWx1ZSA9ICt5U2NhbGUuZ2V0UmlnaHRWYWx1ZShkcy5kYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0aWYgKHN0YWNrZWRSaWdodFZhbHVlIDwgMCkge1xuXHRcdFx0XHRcdFx0c3VtTmVnICs9IHN0YWNrZWRSaWdodFZhbHVlIHx8IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN1bVBvcyArPSBzdGFja2VkUmlnaHRWYWx1ZSB8fCAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocmlnaHRWYWx1ZSA8IDApIHtcblx0XHRcdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN1bU5lZyArIHJpZ2h0VmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN1bVBvcyArIHJpZ2h0VmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuXHR9LFxuXG5cdHVwZGF0ZUJlemllckNvbnRyb2xQb2ludHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0dmFyIGxpbmVNb2RlbCA9IG1ldGEuZGF0YXNldC5fbW9kZWw7XG5cdFx0dmFyIGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHR2YXIgaSwgaWxlbiwgbW9kZWwsIGNvbnRyb2xQb2ludHM7XG5cblx0XHQvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuXHRcdGlmIChsaW5lTW9kZWwuc3BhbkdhcHMpIHtcblx0XHRcdHBvaW50cyA9IHBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocHQpIHtcblx0XHRcdFx0cmV0dXJuICFwdC5fbW9kZWwuc2tpcDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNhcENvbnRyb2xQb2ludChwdCwgbWluLCBtYXgpIHtcblx0XHRcdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcblx0XHR9XG5cblx0XHRpZiAobGluZU1vZGVsLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcblx0XHRcdGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1vZGVsID0gcG9pbnRzW2ldLl9tb2RlbDtcblx0XHRcdFx0Y29udHJvbFBvaW50cyA9IGhlbHBlcnMkMS5zcGxpbmVDdXJ2ZShcblx0XHRcdFx0XHRoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaSkuX21vZGVsLFxuXHRcdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRcdGhlbHBlcnMkMS5uZXh0SXRlbShwb2ludHMsIGkpLl9tb2RlbCxcblx0XHRcdFx0XHRsaW5lTW9kZWwudGVuc2lvblxuXHRcdFx0XHQpO1xuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBjb250cm9sUG9pbnRzLm5leHQueDtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoY2hhcnQub3B0aW9ucy5lbGVtZW50cy5saW5lLmNhcEJlemllclBvaW50cykge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bW9kZWwgPSBwb2ludHNbaV0uX21vZGVsO1xuXHRcdFx0XHRpZiAoaXNQb2ludEluQXJlYShtb2RlbCwgYXJlYSkpIHtcblx0XHRcdFx0XHRpZiAoaSA+IDAgJiYgaXNQb2ludEluQXJlYShwb2ludHNbaSAtIDFdLl9tb2RlbCwgYXJlYSkpIHtcblx0XHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1gsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjYXBDb250cm9sUG9pbnQobW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaSA8IHBvaW50cy5sZW5ndGggLSAxICYmIGlzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXS5fbW9kZWwsIGFyZWEpKSB7XG5cdFx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnROZXh0WCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludE5leHRZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIGlsZW4gPSBwb2ludHMubGVuZ3RoO1xuXHRcdHZhciBjbGlwO1xuXG5cdFx0aWYgKG1lLl9zaG93TGluZSkge1xuXHRcdFx0Y2xpcCA9IG1ldGEuZGF0YXNldC5fbW9kZWwuY2xpcDtcblxuXHRcdFx0aGVscGVycyQxLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIHtcblx0XHRcdFx0bGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG5cdFx0XHRcdHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IGNhbnZhcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuXHRcdFx0XHR0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuXHRcdFx0XHRib3R0b206IGNsaXAuYm90dG9tID09PSBmYWxzZSA/IGNhbnZhcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG5cdFx0XHR9KTtcblxuXHRcdFx0bWV0YS5kYXRhc2V0LmRyYXcoKTtcblxuXHRcdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cdFx0fVxuXG5cdFx0Ly8gRHJhdyB0aGUgcG9pbnRzXG5cdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHBvaW50c1tpXS5kcmF3KGFyZWEpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXG5cdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBtb2RlbC5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0fTtcblxuXHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlckJhY2tncm91bmRDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlckNvbG9yID0gdmFsdWVPckRlZmF1bHQkNihvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQkNihvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuXHRcdG1vZGVsLnJhZGl1cyA9IHZhbHVlT3JEZWZhdWx0JDYob3B0aW9ucy5ob3ZlclJhZGl1cywgb3B0aW9ucy5yYWRpdXMpO1xuXHR9LFxufSk7XG5cbnZhciByZXNvbHZlJDMgPSBoZWxwZXJzJDEub3B0aW9ucy5yZXNvbHZlO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3BvbGFyQXJlYScsIHtcblx0c2NhbGU6IHtcblx0XHR0eXBlOiAncmFkaWFsTGluZWFyJyxcblx0XHRhbmdsZUxpbmVzOiB7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdH0sXG5cdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRjaXJjdWxhcjogdHJ1ZVxuXHRcdH0sXG5cdFx0cG9pbnRMYWJlbHM6IHtcblx0XHRcdGRpc3BsYXk6IGZhbHNlXG5cdFx0fSxcblx0XHR0aWNrczoge1xuXHRcdFx0YmVnaW5BdFplcm86IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0aGUgcm90YXRpb24gb2YgdGhlIGNoYXJ0XG5cdGFuaW1hdGlvbjoge1xuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0YW5pbWF0ZVNjYWxlOiB0cnVlXG5cdH0sXG5cblx0c3RhcnRBbmdsZTogLTAuNSAqIE1hdGguUEksXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0dmFyIGRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0dmFyIGksIGlsZW4sIGxpc3RJdGVtLCBsaXN0SXRlbVNwYW47XG5cblx0XHRsaXN0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjaGFydC5pZCArICctbGVnZW5kJyk7XG5cdFx0aWYgKGRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzWzBdLmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGxpc3RJdGVtID0gbGlzdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuID0gbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcblx0XHRcdFx0bGlzdEl0ZW1TcGFuLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXRzWzBdLmJhY2tncm91bmRDb2xvcltpXTtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXSkge1xuXHRcdFx0XHRcdGxpc3RJdGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsc1tpXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Qub3V0ZXJIVE1MO1xuXHR9LFxuXHRsZWdlbmQ6IHtcblx0XHRsYWJlbHM6IHtcblx0XHRcdGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHRcdGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YS5sYWJlbHMubWFwKGZ1bmN0aW9uKGxhYmVsLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuXHRcdFx0XHRcdFx0dmFyIHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBsYWJlbCxcblx0XHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcblx0XHRcdFx0XHRcdFx0bGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcblx0XHRcdFx0XHRcdFx0aGlkZGVuOiBpc05hTihkYXRhLmRhdGFzZXRzWzBdLmRhdGFbaV0pIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4sXG5cblx0XHRcdFx0XHRcdFx0Ly8gRXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgY29ycmVjdCBpdGVtXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5pbmRleDtcblx0XHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHRtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiA9ICFtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Y2hhcnQudXBkYXRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhlc2UgdG8gZ2l2ZSBhIG5pY2UgZGVmYXVsdFxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEubGFiZWxzW2l0ZW0uaW5kZXhdICsgJzogJyArIGl0ZW0ueUxhYmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbnZhciBjb250cm9sbGVyX3BvbGFyQXJlYSA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLkFyYyxcblxuXHRsaW5rU2NhbGVzOiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IFtcblx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0J2JvcmRlckFsaWduJyxcblx0XHQnaG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdF0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0SW5kZXhTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlLmlkO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBzdGFydCA9IG1lLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuXHRcdHZhciBzdGFydHMgPSBtZS5fc3RhcnRzID0gW107XG5cdFx0dmFyIGFuZ2xlcyA9IG1lLl9hbmdsZXMgPSBbXTtcblx0XHR2YXIgYXJjcyA9IG1ldGEuZGF0YTtcblx0XHR2YXIgaSwgaWxlbiwgYW5nbGU7XG5cblx0XHRtZS5fdXBkYXRlUmFkaXVzKCk7XG5cblx0XHRtZXRhLmNvdW50ID0gbWUuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0LmRhdGEubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHRzdGFydHNbaV0gPSBzdGFydDtcblx0XHRcdGFuZ2xlID0gbWUuX2NvbXB1dGVBbmdsZShpKTtcblx0XHRcdGFuZ2xlc1tpXSA9IGFuZ2xlO1xuXHRcdFx0c3RhcnQgKz0gYW5nbGU7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRhcmNzW2ldLl9vcHRpb25zID0gbWUuX3Jlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoYXJjc1tpXSwgaSk7XG5cdFx0XHRtZS51cGRhdGVFbGVtZW50KGFyY3NbaV0sIGksIHJlc2V0KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfdXBkYXRlUmFkaXVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcblxuXHRcdGNoYXJ0Lm91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuXHRcdGNoYXJ0LmlubmVyUmFkaXVzID0gTWF0aC5tYXgob3B0cy5jdXRvdXRQZXJjZW50YWdlID8gKGNoYXJ0Lm91dGVyUmFkaXVzIC8gMTAwKSAqIChvcHRzLmN1dG91dFBlcmNlbnRhZ2UpIDogMSwgMCk7XG5cdFx0Y2hhcnQucmFkaXVzTGVuZ3RoID0gKGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQuaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuXG5cdFx0bWUub3V0ZXJSYWRpdXMgPSBjaGFydC5vdXRlclJhZGl1cyAtIChjaGFydC5yYWRpdXNMZW5ndGggKiBtZS5pbmRleCk7XG5cdFx0bWUuaW5uZXJSYWRpdXMgPSBtZS5vdXRlclJhZGl1cyAtIGNoYXJ0LnJhZGl1c0xlbmd0aDtcblx0fSxcblxuXHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdHZhciBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG5cdFx0dmFyIHNjYWxlID0gY2hhcnQuc2NhbGU7XG5cdFx0dmFyIGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzO1xuXG5cdFx0dmFyIGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuXHRcdHZhciBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcblxuXHRcdC8vIHZhciBuZWdIYWxmUEkgPSAtMC41ICogTWF0aC5QSTtcblx0XHR2YXIgZGF0YXNldFN0YXJ0QW5nbGUgPSBvcHRzLnN0YXJ0QW5nbGU7XG5cdFx0dmFyIGRpc3RhbmNlID0gYXJjLmhpZGRlbiA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHR2YXIgc3RhcnRBbmdsZSA9IG1lLl9zdGFydHNbaW5kZXhdO1xuXHRcdHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoYXJjLmhpZGRlbiA/IDAgOiBtZS5fYW5nbGVzW2luZGV4XSk7XG5cblx0XHR2YXIgcmVzZXRSYWRpdXMgPSBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucyB8fCB7fTtcblxuXHRcdGhlbHBlcnMkMS5leHRlbmQoYXJjLCB7XG5cdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdF9pbmRleDogaW5kZXgsXG5cdFx0XHRfc2NhbGU6IHNjYWxlLFxuXG5cdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0X21vZGVsOiB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcblx0XHRcdFx0Ym9yZGVyQWxpZ246IG9wdGlvbnMuYm9yZGVyQWxpZ24sXG5cdFx0XHRcdHg6IGNlbnRlclgsXG5cdFx0XHRcdHk6IGNlbnRlclksXG5cdFx0XHRcdGlubmVyUmFkaXVzOiAwLFxuXHRcdFx0XHRvdXRlclJhZGl1czogcmVzZXQgPyByZXNldFJhZGl1cyA6IGRpc3RhbmNlLFxuXHRcdFx0XHRzdGFydEFuZ2xlOiByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyBkYXRhc2V0U3RhcnRBbmdsZSA6IHN0YXJ0QW5nbGUsXG5cdFx0XHRcdGVuZEFuZ2xlOiByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyBkYXRhc2V0U3RhcnRBbmdsZSA6IGVuZEFuZ2xlLFxuXHRcdFx0XHRsYWJlbDogaGVscGVycyQxLnZhbHVlQXRJbmRleE9yRGVmYXVsdChsYWJlbHMsIGluZGV4LCBsYWJlbHNbaW5kZXhdKVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXJjLnBpdm90KCk7XG5cdH0sXG5cblx0Y291bnRWaXNpYmxlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldE1ldGEoKTtcblx0XHR2YXIgY291bnQgPSAwO1xuXG5cdFx0aGVscGVycyQxLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuXHRcdFx0aWYgKCFpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBjb3VudDtcblx0fSxcblxuXHQvKipcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0dmFyIG1vZGVsID0gYXJjLl9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IGFyYy5fb3B0aW9ucztcblx0XHR2YXIgZ2V0SG92ZXJDb2xvciA9IGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yO1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuXHRcdGFyYy4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoLFxuXHRcdH07XG5cblx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGdldEhvdmVyQ29sb3Iob3B0aW9ucy5ib3JkZXJDb2xvcikpO1xuXHRcdG1vZGVsLmJvcmRlcldpZHRoID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jb21wdXRlQW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY291bnQgPSB0aGlzLmdldE1ldGEoKS5jb3VudDtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblxuXHRcdGlmIChpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0dmFyIGNvbnRleHQgPSB7XG5cdFx0XHRjaGFydDogbWUuY2hhcnQsXG5cdFx0XHRkYXRhSW5kZXg6IGluZGV4LFxuXHRcdFx0ZGF0YXNldDogZGF0YXNldCxcblx0XHRcdGRhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHJlc29sdmUkMyhbXG5cdFx0XHRtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYy5hbmdsZSxcblx0XHRcdCgyICogTWF0aC5QSSkgLyBjb3VudFxuXHRcdF0sIGNvbnRleHQsIGluZGV4KTtcblx0fVxufSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgncGllJywgaGVscGVycyQxLmNsb25lKGNvcmVfZGVmYXVsdHMuZG91Z2hudXQpKTtcbmNvcmVfZGVmYXVsdHMuX3NldCgncGllJywge1xuXHRjdXRvdXRQZXJjZW50YWdlOiAwXG59KTtcblxuLy8gUGllIGNoYXJ0cyBhcmUgRG91Z2hudXQgY2hhcnQgd2l0aCBkaWZmZXJlbnQgZGVmYXVsdHNcbnZhciBjb250cm9sbGVyX3BpZSA9IGNvbnRyb2xsZXJfZG91Z2hudXQ7XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ3ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3JhZGFyJywge1xuXHRzcGFuR2FwczogZmFsc2UsXG5cdHNjYWxlOiB7XG5cdFx0dHlwZTogJ3JhZGlhbExpbmVhcidcblx0fSxcblx0ZWxlbWVudHM6IHtcblx0XHRsaW5lOiB7XG5cdFx0XHRmaWxsOiAnc3RhcnQnLFxuXHRcdFx0dGVuc2lvbjogMCAvLyBubyBiZXppZXIgaW4gcmFkYXJcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgY29udHJvbGxlcl9yYWRhciA9IGNvcmVfZGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0bGlua1NjYWxlczogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZGF0YXNldEVsZW1lbnRPcHRpb25zOiBbXG5cdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0J2JvcmRlcldpZHRoJyxcblx0XHQnYm9yZGVyQ29sb3InLFxuXHRcdCdib3JkZXJDYXBTdHlsZScsXG5cdFx0J2JvcmRlckRhc2gnLFxuXHRcdCdib3JkZXJEYXNoT2Zmc2V0Jyxcblx0XHQnYm9yZGVySm9pblN0eWxlJyxcblx0XHQnZmlsbCdcblx0XSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9kYXRhRWxlbWVudE9wdGlvbnM6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICdwb2ludEJhY2tncm91bmRDb2xvcicsXG5cdFx0Ym9yZGVyQ29sb3I6ICdwb2ludEJvcmRlckNvbG9yJyxcblx0XHRib3JkZXJXaWR0aDogJ3BvaW50Qm9yZGVyV2lkdGgnLFxuXHRcdGhpdFJhZGl1czogJ3BvaW50SGl0UmFkaXVzJyxcblx0XHRob3ZlckJhY2tncm91bmRDb2xvcjogJ3BvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3InLFxuXHRcdGhvdmVyQm9yZGVyQ29sb3I6ICdwb2ludEhvdmVyQm9yZGVyQ29sb3InLFxuXHRcdGhvdmVyQm9yZGVyV2lkdGg6ICdwb2ludEhvdmVyQm9yZGVyV2lkdGgnLFxuXHRcdGhvdmVyUmFkaXVzOiAncG9pbnRIb3ZlclJhZGl1cycsXG5cdFx0cG9pbnRTdHlsZTogJ3BvaW50U3R5bGUnLFxuXHRcdHJhZGl1czogJ3BvaW50UmFkaXVzJyxcblx0XHRyb3RhdGlvbjogJ3BvaW50Um90YXRpb24nXG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0SW5kZXhTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5jaGFydC5zY2FsZS5pZDtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRWYWx1ZVNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0LnNjYWxlLmlkO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIHNjYWxlID0gbWUuY2hhcnQuc2NhbGU7XG5cdFx0dmFyIGNvbmZpZyA9IG1lLl9jb25maWc7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHQvLyBDb21wYXRpYmlsaXR5OiBJZiB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCB3aXRoIG9ubHkgdGhlIG9sZCBuYW1lLCB1c2UgdGhvc2UgdmFsdWVzXG5cdFx0aWYgKGNvbmZpZy50ZW5zaW9uICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLmxpbmVUZW5zaW9uID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGNvbmZpZy5saW5lVGVuc2lvbiA9IGNvbmZpZy50ZW5zaW9uO1xuXHRcdH1cblxuXHRcdC8vIFV0aWxpdHlcblx0XHRsaW5lLl9zY2FsZSA9IHNjYWxlO1xuXHRcdGxpbmUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdC8vIERhdGFcblx0XHRsaW5lLl9jaGlsZHJlbiA9IHBvaW50cztcblx0XHRsaW5lLl9sb29wID0gdHJ1ZTtcblx0XHQvLyBNb2RlbFxuXHRcdGxpbmUuX21vZGVsID0gbWUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobGluZSk7XG5cblx0XHRsaW5lLnBpdm90KCk7XG5cblx0XHQvLyBVcGRhdGUgUG9pbnRzXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocG9pbnRzW2ldLCBpLCByZXNldCk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIGJlemllciBjb250cm9sIHBvaW50c1xuXHRcdG1lLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcblxuXHRcdC8vIE5vdyBwaXZvdCB0aGUgcG9pbnQgZm9yIGFuaW1hdGlvblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwb2ludHNbaV0ucGl2b3QoKTtcblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHR2YXIgc2NhbGUgPSBtZS5jaGFydC5zY2FsZTtcblx0XHR2YXIgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgZGF0YXNldC5kYXRhW2luZGV4XSk7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5fcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhwb2ludCwgaW5kZXgpO1xuXHRcdHZhciBsaW5lTW9kZWwgPSBtZS5nZXRNZXRhKCkuZGF0YXNldC5fbW9kZWw7XG5cdFx0dmFyIHggPSByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLng7XG5cdFx0dmFyIHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG5cblx0XHQvLyBVdGlsaXR5XG5cdFx0cG9pbnQuX3NjYWxlID0gc2NhbGU7XG5cdFx0cG9pbnQuX29wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHBvaW50Ll9kYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRwb2ludC5faW5kZXggPSBpbmRleDtcblxuXHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0cG9pbnQuX21vZGVsID0ge1xuXHRcdFx0eDogeCwgLy8gdmFsdWUgbm90IHVzZWQgaW4gZGF0YXNldCBzY2FsZSwgYnV0IHdlIHdhbnQgYSBjb25zaXN0ZW50IEFQSSBiZXR3ZWVuIHNjYWxlc1xuXHRcdFx0eTogeSxcblx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdFx0cmFkaXVzOiBvcHRpb25zLnJhZGl1cyxcblx0XHRcdHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcblx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG5cdFx0XHR0ZW5zaW9uOiB2YWx1ZU9yRGVmYXVsdCQ3KGN1c3RvbS50ZW5zaW9uLCBsaW5lTW9kZWwgPyBsaW5lTW9kZWwudGVuc2lvbiA6IDApLFxuXG5cdFx0XHQvLyBUb29sdGlwXG5cdFx0XHRoaXRSYWRpdXM6IG9wdGlvbnMuaGl0UmFkaXVzXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjb25maWcgPSBtZS5fY29uZmlnO1xuXHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHR2YXIgdmFsdWVzID0gY29yZV9kYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuX3Jlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHR2YWx1ZXMuc3BhbkdhcHMgPSB2YWx1ZU9yRGVmYXVsdCQ3KGNvbmZpZy5zcGFuR2Fwcywgb3B0aW9ucy5zcGFuR2Fwcyk7XG5cdFx0dmFsdWVzLnRlbnNpb24gPSB2YWx1ZU9yRGVmYXVsdCQ3KGNvbmZpZy5saW5lVGVuc2lvbiwgb3B0aW9ucy5lbGVtZW50cy5saW5lLnRlbnNpb24pO1xuXG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fSxcblxuXHR1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdHZhciBhcmVhID0gbWUuY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0dmFyIGksIGlsZW4sIG1vZGVsLCBjb250cm9sUG9pbnRzO1xuXG5cdFx0Ly8gT25seSBjb25zaWRlciBwb2ludHMgdGhhdCBhcmUgZHJhd24gaW4gY2FzZSB0aGUgc3BhbkdhcHMgb3B0aW9uIGlzIHVzZWRcblx0XHRpZiAobWV0YS5kYXRhc2V0Ll9tb2RlbC5zcGFuR2Fwcykge1xuXHRcdFx0cG9pbnRzID0gcG9pbnRzLmZpbHRlcihmdW5jdGlvbihwdCkge1xuXHRcdFx0XHRyZXR1cm4gIXB0Ll9tb2RlbC5za2lwO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuXHRcdFx0cmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHB0LCBtYXgpLCBtaW4pO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtb2RlbCA9IHBvaW50c1tpXS5fbW9kZWw7XG5cdFx0XHRjb250cm9sUG9pbnRzID0gaGVscGVycyQxLnNwbGluZUN1cnZlKFxuXHRcdFx0XHRoZWxwZXJzJDEucHJldmlvdXNJdGVtKHBvaW50cywgaSwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRtb2RlbCxcblx0XHRcdFx0aGVscGVycyQxLm5leHRJdGVtKHBvaW50cywgaSwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRtb2RlbC50ZW5zaW9uXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRoZSBiZXppZXIgZ29pbmcgb3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHRoZSBncmFwaFxuXHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gY2FwQ29udHJvbFBvaW50KGNvbnRyb2xQb2ludHMucHJldmlvdXMueCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLnByZXZpb3VzLnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG5cdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNhcENvbnRyb2xQb2ludChjb250cm9sUG9pbnRzLm5leHQueCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY2FwQ29udHJvbFBvaW50KGNvbnRyb2xQb2ludHMubmV4dC55LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdH1cblx0fSxcblxuXHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdHZhciBtb2RlbCA9IHBvaW50Ll9tb2RlbDtcblx0XHR2YXIgb3B0aW9ucyA9IHBvaW50Ll9vcHRpb25zO1xuXHRcdHZhciBnZXRIb3ZlckNvbG9yID0gaGVscGVycyQxLmdldEhvdmVyQ29sb3I7XG5cblx0XHRwb2ludC4kcHJldmlvdXNTdHlsZSA9IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IG1vZGVsLmJvcmRlcldpZHRoLFxuXHRcdFx0cmFkaXVzOiBtb2RlbC5yYWRpdXNcblx0XHR9O1xuXG5cdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSB2YWx1ZU9yRGVmYXVsdCQ3KG9wdGlvbnMuaG92ZXJCb3JkZXJDb2xvciwgZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKSk7XG5cdFx0bW9kZWwuYm9yZGVyV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCQ3KG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG5cdFx0bW9kZWwucmFkaXVzID0gdmFsdWVPckRlZmF1bHQkNyhvcHRpb25zLmhvdmVyUmFkaXVzLCBvcHRpb25zLnJhZGl1cyk7XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ3NjYXR0ZXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdGlkOiAneC1heGlzLTEnLCAgICAvLyBuZWVkIGFuIElEIHNvIGRhdGFzZXRzIGNhbiByZWZlcmVuY2UgdGhlIHNjYWxlXG5cdFx0XHR0eXBlOiAnbGluZWFyJywgICAgLy8gc2NhdHRlciBzaG91bGQgbm90IHVzZSBhIGNhdGVnb3J5IGF4aXNcblx0XHRcdHBvc2l0aW9uOiAnYm90dG9tJ1xuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0aWQ6ICd5LWF4aXMtMScsXG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCdcblx0XHR9XVxuXHR9LFxuXG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJzsgICAgIC8vIGRvZXNuJ3QgbWFrZSBzZW5zZSBmb3Igc2NhdHRlciBzaW5jZSBkYXRhIGFyZSBmb3JtYXR0ZWQgYXMgYSBwb2ludFxuXHRcdFx0fSxcblx0XHRcdGxhYmVsOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHJldHVybiAnKCcgKyBpdGVtLnhMYWJlbCArICcsICcgKyBpdGVtLnlMYWJlbCArICcpJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZGF0YXNldHM6IHtcblx0XHRzY2F0dGVyOiB7XG5cdFx0XHRzaG93TGluZTogZmFsc2Vcblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBTY2F0dGVyIGNoYXJ0cyB1c2UgbGluZSBjb250cm9sbGVyc1xudmFyIGNvbnRyb2xsZXJfc2NhdHRlciA9IGNvbnRyb2xsZXJfbGluZTtcblxuLy8gTk9URSBleHBvcnQgYSBtYXAgaW4gd2hpY2ggdGhlIGtleSByZXByZXNlbnRzIHRoZSBjb250cm9sbGVyIHR5cGUsIG5vdFxuLy8gdGhlIGNsYXNzLCBhbmQgc28gbXVzdCBiZSBDYW1lbENhc2UgaW4gb3JkZXIgdG8gYmUgY29ycmVjdGx5IHJldHJpZXZlZFxuLy8gYnkgdGhlIGNvbnRyb2xsZXIgaW4gY29yZS5jb250cm9sbGVyLmpzIChgY29udHJvbGxlcnNbbWV0YS50eXBlXWApLlxuXG52YXIgY29udHJvbGxlcnMgPSB7XG5cdGJhcjogY29udHJvbGxlcl9iYXIsXG5cdGJ1YmJsZTogY29udHJvbGxlcl9idWJibGUsXG5cdGRvdWdobnV0OiBjb250cm9sbGVyX2RvdWdobnV0LFxuXHRob3Jpem9udGFsQmFyOiBjb250cm9sbGVyX2hvcml6b250YWxCYXIsXG5cdGxpbmU6IGNvbnRyb2xsZXJfbGluZSxcblx0cG9sYXJBcmVhOiBjb250cm9sbGVyX3BvbGFyQXJlYSxcblx0cGllOiBjb250cm9sbGVyX3BpZSxcblx0cmFkYXI6IGNvbnRyb2xsZXJfcmFkYXIsXG5cdHNjYXR0ZXI6IGNvbnRyb2xsZXJfc2NhdHRlclxufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHJlbGF0aXZlIHBvc2l0aW9uIGZvciBhbiBldmVudFxuICogQHBhcmFtIHtFdmVudHxJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGdldCB0aGUgcG9zaXRpb24gZm9yXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydFxuICogQHJldHVybnMge29iamVjdH0gdGhlIGV2ZW50IHBvc2l0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpIHtcblx0aWYgKGUubmF0aXZlKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IGUueCxcblx0XHRcdHk6IGUueVxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gaGVscGVycyQxLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byB0cmF2ZXJzZSBhbGwgb2YgdGhlIHZpc2libGUgZWxlbWVudHMgaW4gdGhlIGNoYXJ0XG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydFxuICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlciAtIHRoZSBjYWxsYmFjayB0byBleGVjdXRlIGZvciBlYWNoIHZpc2libGUgaXRlbVxuICovXG5mdW5jdGlvbiBwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgaGFuZGxlcikge1xuXHR2YXIgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuXHR2YXIgbWV0YWRhdGEsIGksIGosIGlsZW4sIGpsZW4sIGVsZW1lbnQ7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdG1ldGFkYXRhID0gbWV0YXNldHNbaV0uZGF0YTtcblx0XHRmb3IgKGogPSAwLCBqbGVuID0gbWV0YWRhdGEubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRlbGVtZW50ID0gbWV0YWRhdGFbal07XG5cdFx0XHRpZiAoIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0XHRoYW5kbGVyKGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBldmVudCBwb3NpdGlvblxuICogQHBhcmFtIHtDaGFydEVsZW1lbnRbXX0gaXRlbXMgLSBlbGVtZW50cyB0byBmaWx0ZXJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwb3NpdGlvbiAtIHRoZSBwb2ludCB0byBiZSBuZWFyZXN0IHRvXG4gKiBAcmV0dXJuIHtDaGFydEVsZW1lbnRbXX0gdGhlIG5lYXJlc3QgaXRlbXNcbiAqL1xuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSB7XG5cdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBpdGVtcyBuZWFyZXN0IHRvIHRoZSBldmVudCBwb3NpdGlvbiBjb25zaWRlcmluZyBhbGwgdmlzaWJsZSBpdGVtcyBpbiB0ZWggY2hhcnRcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIGxvb2sgYXQgZWxlbWVudHMgZnJvbVxuICogQHBhcmFtIHtvYmplY3R9IHBvc2l0aW9uIC0gdGhlIHBvaW50IHRvIGJlIG5lYXJlc3QgdG9cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW50ZXJzZWN0IC0gaWYgdHJ1ZSwgb25seSBjb25zaWRlciBpdGVtcyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGRpc3RhbmNlTWV0cmljIC0gZnVuY3Rpb24gdG8gcHJvdmlkZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHNcbiAqIEByZXR1cm4ge0NoYXJ0RWxlbWVudFtdfSB0aGUgbmVhcmVzdCBpdGVtc1xuICovXG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBpbnRlcnNlY3QsIGRpc3RhbmNlTWV0cmljKSB7XG5cdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0dmFyIG5lYXJlc3RJdGVtcyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGludGVyc2VjdCAmJiAhZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQoKTtcblx0XHR2YXIgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcblx0XHRpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuXHRcdFx0bmVhcmVzdEl0ZW1zID0gW2VsZW1lbnRdO1xuXHRcdFx0bWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuXHRcdFx0Ly8gQ2FuIGhhdmUgbXVsdGlwbGUgaXRlbXMgYXQgdGhlIHNhbWUgZGlzdGFuY2UgaW4gd2hpY2ggY2FzZSB3ZSBzb3J0IGJ5IHNpemVcblx0XHRcdG5lYXJlc3RJdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIG5lYXJlc3RJdGVtcztcbn1cblxuLyoqXG4gKiBHZXQgYSBkaXN0YW5jZSBtZXRyaWMgZnVuY3Rpb24gZm9yIHR3byBwb2ludHMgYmFzZWQgb24gdGhlXG4gKiBheGlzIG1vZGUgc2V0dGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGF4aXMgLSB0aGUgYXhpcyBtb2RlLiB4fHl8eHlcbiAqL1xuZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcblx0dmFyIHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG5cdHZhciB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuXG5cdHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuXHRcdHZhciBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuXHRcdHZhciBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBpbmRleE1vZGUoY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdC8vIERlZmF1bHQgYXhpcyBmb3IgaW5kZXggbW9kZSBpcyAneCcgdG8gbWF0Y2ggb2xkIGJlaGF2aW91clxuXHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuXHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0dmFyIGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24pIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgZmFsc2UsIGRpc3RhbmNlTWV0cmljKTtcblx0dmFyIGVsZW1lbnRzID0gW107XG5cblx0aWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmZvckVhY2goZnVuY3Rpb24obWV0YSkge1xuXHRcdHZhciBlbGVtZW50ID0gbWV0YS5kYXRhW2l0ZW1zWzBdLl9pbmRleF07XG5cblx0XHQvLyBkb24ndCBjb3VudCBpdGVtcyB0aGF0IGFyZSBza2lwcGVkIChudWxsIGRhdGEpXG5cdFx0aWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElJbnRlcmFjdGlvbk9wdGlvbnNcbiAqL1xuLyoqXG4gKiBJZiB0cnVlLCBvbmx5IGNvbnNpZGVyIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBwb2ludFxuICogQG5hbWUgSUludGVyZmFjZU9wdGlvbnMjYm9vbGVhblxuICogQHR5cGUgQm9vbGVhblxuICovXG5cbi8qKlxuICogQ29udGFpbnMgaW50ZXJhY3Rpb24gcmVsYXRlZCBmdW5jdGlvbnNcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuSW50ZXJhY3Rpb25cbiAqL1xudmFyIGNvcmVfaW50ZXJhY3Rpb24gPSB7XG5cdC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgZGlmZmVyZW50IG1vZGVzXG5cdG1vZGVzOiB7XG5cdFx0c2luZ2xlOiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSBbXTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzLnNsaWNlKDAsIDEpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMubGFiZWxcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNC4wXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0bGFiZWw6IGluZGV4TW9kZSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXguIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBtb2RlIGlzIGZhbHNlLCB3ZSBmaW5kIHRoZSBuZWFyZXN0IGl0ZW0gYW5kIHJldHVybiB0aGUgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXggYXMgdGhhdCBpdGVtXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmluZGV4XG5cdFx0ICogQHNpbmNlIHYyLjQuMFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIC0gb3B0aW9ucyB0byB1c2UgZHVyaW5nIGludGVyYWN0aW9uXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdGluZGV4OiBpbmRleE1vZGUsXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGl0ZW1zIGluIHRoZSBzYW1lIGRhdGFzZXQuIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBpcyBmYWxzZSwgd2UgZmluZCB0aGUgbmVhcmVzdCBpdGVtIGFuZCByZXR1cm4gdGhlIGl0ZW1zIGluIHRoYXQgZGF0YXNldFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5kYXRhc2V0XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZSBkdXJpbmcgaW50ZXJhY3Rpb25cblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0ZGF0YXNldDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG5cdFx0XHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0XHRcdHZhciBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGZhbHNlLCBkaXN0YW5jZU1ldHJpYyk7XG5cblx0XHRcdGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGl0ZW1zID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uX2RhdGFzZXRJbmRleCkuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueC1heGlzXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjQuMC4gVXNlIGluZGV4IG1vZGUgYW5kIGludGVyc2VjdCA9PSB0cnVlXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0J3gtYXhpcyc6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhNb2RlKGNoYXJ0LCBlLCB7aW50ZXJzZWN0OiBmYWxzZX0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBQb2ludCBtb2RlIHJldHVybnMgYWxsIGVsZW1lbnRzIHRoYXQgaGl0IHRlc3QgYmFzZWQgb24gdGhlIGV2ZW50IHBvc2l0aW9uXG5cdFx0ICogb2YgdGhlIGV2ZW50XG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmludGVyc2VjdFxuXHRcdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSB7RXZlbnR9IGUgLSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHBvaW50OiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRyZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogbmVhcmVzdCBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnQgY2xvc2VzdCB0byB0aGUgcG9pbnRcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMuaW50ZXJzZWN0XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRuZWFyZXN0OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5Jztcblx0XHRcdHZhciBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhvcHRpb25zLmF4aXMpO1xuXHRcdFx0cmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIG9wdGlvbnMuaW50ZXJzZWN0LCBkaXN0YW5jZU1ldHJpYyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIHggbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHggY29vcmRpbmF0ZVxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy54XG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIHtFdmVudH0gZSAtIHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0ge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgLSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHR4OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHRcdHZhciBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuXG5cdFx0XHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5pblhSYW5nZShwb3NpdGlvbi54KSkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSWYgd2Ugd2FudCB0byB0cmlnZ2VyIG9uIGFuIGludGVyc2VjdCBhbmQgd2UgZG9uJ3QgaGF2ZSBhbnkgaXRlbXNcblx0XHRcdC8vIHRoYXQgaW50ZXJzZWN0IHRoZSBwb3NpdGlvbiwgcmV0dXJuIG5vdGhpbmdcblx0XHRcdGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcblx0XHRcdFx0aXRlbXMgPSBbXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogeSBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnRzIHRoYXQgaGl0LXRlc3QgYXQgdGhlIGN1cnJlbnQgeSBjb29yZGluYXRlXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLnlcblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0ge0V2ZW50fSBlIC0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyAtIG9wdGlvbnMgdG8gdXNlXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHk6IGZ1bmN0aW9uKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdFx0dmFyIGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG5cblx0XHRcdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlbGVtZW50LmluWVJhbmdlKHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aXRlbXMucHVzaChlbGVtZW50KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdFx0XHRpbnRlcnNlY3RzSXRlbSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBJZiB3ZSB3YW50IHRvIHRyaWdnZXIgb24gYW4gaW50ZXJzZWN0IGFuZCB3ZSBkb24ndCBoYXZlIGFueSBpdGVtc1xuXHRcdFx0Ly8gdGhhdCBpbnRlcnNlY3QgdGhlIHBvc2l0aW9uLCByZXR1cm4gbm90aGluZ1xuXHRcdFx0aWYgKG9wdGlvbnMuaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuXHRcdFx0XHRpdGVtcyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH1cblx0fVxufTtcblxudmFyIGV4dGVuZCA9IGhlbHBlcnMkMS5leHRlbmQ7XG5cbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG5cdHJldHVybiBoZWxwZXJzJDEud2hlcmUoYXJyYXksIGZ1bmN0aW9uKHYpIHtcblx0XHRyZXR1cm4gdi5wb3MgPT09IHBvc2l0aW9uO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG5cdHJldHVybiBhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHR2YXIgdjAgPSByZXZlcnNlID8gYiA6IGE7XG5cdFx0dmFyIHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuXHRcdHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/XG5cdFx0XHR2MC5pbmRleCAtIHYxLmluZGV4IDpcblx0XHRcdHYwLndlaWdodCAtIHYxLndlaWdodDtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuXHR2YXIgbGF5b3V0Qm94ZXMgPSBbXTtcblx0dmFyIGksIGlsZW4sIGJveDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRib3ggPSBib3hlc1tpXTtcblx0XHRsYXlvdXRCb3hlcy5wdXNoKHtcblx0XHRcdGluZGV4OiBpLFxuXHRcdFx0Ym94OiBib3gsXG5cdFx0XHRwb3M6IGJveC5wb3NpdGlvbixcblx0XHRcdGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcblx0XHRcdHdlaWdodDogYm94LndlaWdodFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBsYXlvdXRCb3hlcztcbn1cblxuZnVuY3Rpb24gc2V0TGF5b3V0RGltcyhsYXlvdXRzLCBwYXJhbXMpIHtcblx0dmFyIGksIGlsZW4sIGxheW91dDtcblx0Zm9yIChpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGF5b3V0ID0gbGF5b3V0c1tpXTtcblx0XHQvLyBzdG9yZSB3aWR0aCB1c2VkIGluc3RlYWQgb2YgY2hhcnRBcmVhLncgaW4gZml0Qm94ZXNcblx0XHRsYXlvdXQud2lkdGggPSBsYXlvdXQuaG9yaXpvbnRhbFxuXHRcdFx0PyBsYXlvdXQuYm94LmZ1bGxXaWR0aCAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGhcblx0XHRcdDogcGFyYW1zLnZCb3hNYXhXaWR0aDtcblx0XHQvLyBzdG9yZSBoZWlnaHQgdXNlZCBpbnN0ZWFkIG9mIGNoYXJ0QXJlYS5oIGluIGZpdEJveGVzXG5cdFx0bGF5b3V0LmhlaWdodCA9IGxheW91dC5ob3Jpem9udGFsICYmIHBhcmFtcy5oQm94TWF4SGVpZ2h0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTGF5b3V0Qm94ZXMoYm94ZXMpIHtcblx0dmFyIGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcblx0dmFyIGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG5cdHZhciByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG5cdHZhciB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcblx0dmFyIGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuXG5cdHJldHVybiB7XG5cdFx0bGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcblx0XHRyaWdodEFuZEJvdHRvbTogcmlnaHQuY29uY2F0KGJvdHRvbSksXG5cdFx0Y2hhcnRBcmVhOiBmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnY2hhcnRBcmVhJyksXG5cdFx0dmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KSxcblx0XHRob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSlcblx0fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG5cdHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0KSB7XG5cdHZhciBib3ggPSBsYXlvdXQuYm94O1xuXHR2YXIgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuXHR2YXIgbmV3V2lkdGgsIG5ld0hlaWdodDtcblxuXHRpZiAobGF5b3V0LnNpemUpIHtcblx0XHQvLyB0aGlzIGxheW91dCB3YXMgYWxyZWFkeSBjb3VudGVkIGZvciwgbGV0cyBmaXJzdCByZWR1Y2Ugb2xkIHNpemVcblx0XHRjaGFydEFyZWFbbGF5b3V0LnBvc10gLT0gbGF5b3V0LnNpemU7XG5cdH1cblx0bGF5b3V0LnNpemUgPSBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGg7XG5cdGNoYXJ0QXJlYVtsYXlvdXQucG9zXSArPSBsYXlvdXQuc2l6ZTtcblxuXHRpZiAoYm94LmdldFBhZGRpbmcpIHtcblx0XHR2YXIgYm94UGFkZGluZyA9IGJveC5nZXRQYWRkaW5nKCk7XG5cdFx0bWF4UGFkZGluZy50b3AgPSBNYXRoLm1heChtYXhQYWRkaW5nLnRvcCwgYm94UGFkZGluZy50b3ApO1xuXHRcdG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcblx0XHRtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG5cdFx0bWF4UGFkZGluZy5yaWdodCA9IE1hdGgubWF4KG1heFBhZGRpbmcucmlnaHQsIGJveFBhZGRpbmcucmlnaHQpO1xuXHR9XG5cblx0bmV3V2lkdGggPSBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKTtcblx0bmV3SGVpZ2h0ID0gcGFyYW1zLm91dGVySGVpZ2h0IC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAndG9wJywgJ2JvdHRvbScpO1xuXG5cdGlmIChuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLncgfHwgbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaCkge1xuXHRcdGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG5cdFx0Y2hhcnRBcmVhLmggPSBuZXdIZWlnaHQ7XG5cblx0XHQvLyByZXR1cm4gdHJ1ZSBpZiBjaGFydCBhcmVhIGNoYW5nZWQgaW4gbGF5b3V0J3MgZGlyZWN0aW9uXG5cdFx0cmV0dXJuIGxheW91dC5ob3Jpem9udGFsID8gbmV3V2lkdGggIT09IGNoYXJ0QXJlYS53IDogbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcblx0fVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSkge1xuXHR2YXIgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZVBvcyhwb3MpIHtcblx0XHR2YXIgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuXHRcdGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcblx0XHRyZXR1cm4gY2hhbmdlO1xuXHR9XG5cdGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG5cdGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuXHR1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG5cdHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG5cdHZhciBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG5cblx0ZnVuY3Rpb24gbWFyZ2luRm9yUG9zaXRpb25zKHBvc2l0aW9ucykge1xuXHRcdHZhciBtYXJnaW4gPSB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfTtcblx0XHRwb3NpdGlvbnMuZm9yRWFjaChmdW5jdGlvbihwb3MpIHtcblx0XHRcdG1hcmdpbltwb3NdID0gTWF0aC5tYXgoY2hhcnRBcmVhW3Bvc10sIG1heFBhZGRpbmdbcG9zXSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG1hcmdpbjtcblx0fVxuXG5cdHJldHVybiBob3Jpem9udGFsXG5cdFx0PyBtYXJnaW5Gb3JQb3NpdGlvbnMoWydsZWZ0JywgJ3JpZ2h0J10pXG5cdFx0OiBtYXJnaW5Gb3JQb3NpdGlvbnMoWyd0b3AnLCAnYm90dG9tJ10pO1xufVxuXG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpIHtcblx0dmFyIHJlZml0Qm94ZXMgPSBbXTtcblx0dmFyIGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGF5b3V0ID0gYm94ZXNbaV07XG5cdFx0Ym94ID0gbGF5b3V0LmJveDtcblxuXHRcdGJveC51cGRhdGUoXG5cdFx0XHRsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsXG5cdFx0XHRsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLFxuXHRcdFx0Z2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKVxuXHRcdCk7XG5cdFx0aWYgKHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCkpIHtcblx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0aWYgKHJlZml0Qm94ZXMubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIERpbWVuc2lvbnMgY2hhbmdlZCBhbmQgdGhlcmUgd2VyZSBub24gZnVsbCB3aWR0aCBib3hlcyBiZWZvcmUgdGhpc1xuXHRcdFx0XHQvLyAtPiB3ZSBoYXZlIHRvIHJlZml0IHRob3NlXG5cdFx0XHRcdHJlZml0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFib3guZnVsbFdpZHRoKSB7IC8vIGZ1bGxXaWR0aCBib3hlcyBkb24ndCBuZWVkIHRvIGJlIHJlLWZpdHRlZCBpbiBhbnkgY2FzZVxuXHRcdFx0cmVmaXRCb3hlcy5wdXNoKGxheW91dCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlZml0ID8gZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpIHx8IGNoYW5nZWQgOiBjaGFuZ2VkO1xufVxuXG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcykge1xuXHR2YXIgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcblx0dmFyIHggPSBjaGFydEFyZWEueDtcblx0dmFyIHkgPSBjaGFydEFyZWEueTtcblx0dmFyIGksIGlsZW4sIGxheW91dCwgYm94O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRsYXlvdXQgPSBib3hlc1tpXTtcblx0XHRib3ggPSBsYXlvdXQuYm94O1xuXHRcdGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuXHRcdFx0Ym94LmxlZnQgPSBib3guZnVsbFdpZHRoID8gdXNlclBhZGRpbmcubGVmdCA6IGNoYXJ0QXJlYS5sZWZ0O1xuXHRcdFx0Ym94LnJpZ2h0ID0gYm94LmZ1bGxXaWR0aCA/IHBhcmFtcy5vdXRlcldpZHRoIC0gdXNlclBhZGRpbmcucmlnaHQgOiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53O1xuXHRcdFx0Ym94LnRvcCA9IHk7XG5cdFx0XHRib3guYm90dG9tID0geSArIGJveC5oZWlnaHQ7XG5cdFx0XHRib3gud2lkdGggPSBib3gucmlnaHQgLSBib3gubGVmdDtcblx0XHRcdHkgPSBib3guYm90dG9tO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRib3gubGVmdCA9IHg7XG5cdFx0XHRib3gucmlnaHQgPSB4ICsgYm94LndpZHRoO1xuXHRcdFx0Ym94LnRvcCA9IGNoYXJ0QXJlYS50b3A7XG5cdFx0XHRib3guYm90dG9tID0gY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5oO1xuXHRcdFx0Ym94LmhlaWdodCA9IGJveC5ib3R0b20gLSBib3gudG9wO1xuXHRcdFx0eCA9IGJveC5yaWdodDtcblx0XHR9XG5cdH1cblxuXHRjaGFydEFyZWEueCA9IHg7XG5cdGNoYXJ0QXJlYS55ID0geTtcbn1cblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGxheW91dDoge1xuXHRcdHBhZGRpbmc6IHtcblx0XHRcdHRvcDogMCxcblx0XHRcdHJpZ2h0OiAwLFxuXHRcdFx0Ym90dG9tOiAwLFxuXHRcdFx0bGVmdDogMFxuXHRcdH1cblx0fVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBJTGF5b3V0SXRlbVxuICogQHByb3Age3N0cmluZ30gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGNoYXJ0IGxheW91dC4gUG9zc2libGUgdmFsdWVzIGFyZVxuICogJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsIGFuZCAnY2hhcnRBcmVhJ1xuICogQHByb3Age251bWJlcn0gd2VpZ2h0IC0gVGhlIHdlaWdodCB1c2VkIHRvIHNvcnQgdGhlIGl0ZW0uIEhpZ2hlciB3ZWlnaHRzIGFyZSBmdXJ0aGVyIGF3YXkgZnJvbSB0aGUgY2hhcnQgYXJlYVxuICogQHByb3Age2Jvb2xlYW59IGZ1bGxXaWR0aCAtIGlmIHRydWUsIGFuZCB0aGUgaXRlbSBpcyBob3Jpem9udGFsLCB0aGVuIHB1c2ggdmVydGljYWwgYm94ZXMgZG93blxuICogQHByb3Age2Z1bmN0aW9ufSBpc0hvcml6b250YWwgLSByZXR1cm5zIHRydWUgaWYgdGhlIGxheW91dCBpdGVtIGlzIGhvcml6b250YWwgKGllLiB0b3Agb3IgYm90dG9tKVxuICogQHByb3Age2Z1bmN0aW9ufSB1cGRhdGUgLSBUYWtlcyB0d28gcGFyYW1ldGVyczogd2lkdGggYW5kIGhlaWdodC4gUmV0dXJucyBzaXplIG9mIGl0ZW1cbiAqIEBwcm9wIHtmdW5jdGlvbn0gZ2V0UGFkZGluZyAtICBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHBhZGRpbmcgb24gdGhlIGVkZ2VzXG4gKiBAcHJvcCB7bnVtYmVyfSB3aWR0aCAtIFdpZHRoIG9mIGl0ZW0uIE11c3QgYmUgdmFsaWQgYWZ0ZXIgdXBkYXRlKClcbiAqIEBwcm9wIHtudW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiBpdGVtLiBNdXN0IGJlIHZhbGlkIGFmdGVyIHVwZGF0ZSgpXG4gKiBAcHJvcCB7bnVtYmVyfSBsZWZ0IC0gTGVmdCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKiBAcHJvcCB7bnVtYmVyfSB0b3AgLSBUb3AgZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICogQHByb3Age251bWJlcn0gcmlnaHQgLSBSaWdodCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKiBAcHJvcCB7bnVtYmVyfSBib3R0b20gLSBCb3R0b20gZWRnZSBvZiB0aGUgaXRlbS4gU2V0IGJ5IGxheW91dCBzeXN0ZW0gYW5kIGNhbm5vdCBiZSB1c2VkIGluIHVwZGF0ZVxuICovXG5cbi8vIFRoZSBsYXlvdXQgc2VydmljZSBpcyB2ZXJ5IHNlbGYgZXhwbGFuYXRvcnkuICBJdCdzIHJlc3BvbnNpYmxlIGZvciB0aGUgbGF5b3V0IHdpdGhpbiBhIGNoYXJ0LlxuLy8gU2NhbGVzLCBMZWdlbmRzIGFuZCBQbHVnaW5zIGFsbCByZWx5IG9uIHRoZSBsYXlvdXQgc2VydmljZSBhbmQgY2FuIGVhc2lseSByZWdpc3RlciB0byBiZSBwbGFjZWQgYW55d2hlcmUgdGhleSBuZWVkXG4vLyBJdCBpcyB0aGlzIHNlcnZpY2UncyByZXNwb25zaWJpbGl0eSBvZiBjYXJyeWluZyBvdXQgdGhhdCBsYXlvdXQuXG52YXIgY29yZV9sYXlvdXRzID0ge1xuXHRkZWZhdWx0czoge30sXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVyIGEgYm94IHRvIGEgY2hhcnQuXG5cdCAqIEEgYm94IGlzIHNpbXBseSBhIHJlZmVyZW5jZSB0byBhbiBvYmplY3QgdGhhdCByZXF1aXJlcyBsYXlvdXQuIGVnLiBTY2FsZXMsIExlZ2VuZCwgVGl0bGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIHVzZVxuXHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBpdGVtIC0gdGhlIGl0ZW0gdG8gYWRkIHRvIGJlIGxheWVkIG91dFxuXHQgKi9cblx0YWRkQm94OiBmdW5jdGlvbihjaGFydCwgaXRlbSkge1xuXHRcdGlmICghY2hhcnQuYm94ZXMpIHtcblx0XHRcdGNoYXJ0LmJveGVzID0gW107XG5cdFx0fVxuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBpdGVtIHdpdGggZGVmYXVsdCB2YWx1ZXNcblx0XHRpdGVtLmZ1bGxXaWR0aCA9IGl0ZW0uZnVsbFdpZHRoIHx8IGZhbHNlO1xuXHRcdGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuXHRcdGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcblx0XHRpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gW3tcblx0XHRcdFx0ejogMCxcblx0XHRcdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5kcmF3LmFwcGx5KGl0ZW0sIGFyZ3VtZW50cyk7XG5cdFx0XHRcdH1cblx0XHRcdH1dO1xuXHRcdH07XG5cblx0XHRjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYSBsYXlvdXRJdGVtIGZyb20gYSBjaGFydFxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byByZW1vdmUgdGhlIGJveCBmcm9tXG5cdCAqIEBwYXJhbSB7SUxheW91dEl0ZW19IGxheW91dEl0ZW0gLSB0aGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgbGF5b3V0XG5cdCAqL1xuXHRyZW1vdmVCb3g6IGZ1bmN0aW9uKGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG5cdFx0dmFyIGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgKG9yIHVwZGF0ZXMpIG9wdGlvbnMgb24gdGhlIGdpdmVuIGBpdGVtYC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgaW4gd2hpY2ggdGhlIGl0ZW0gbGl2ZXMgKG9yIHdpbGwgYmUgYWRkZWQgdG8pXG5cdCAqIEBwYXJhbSB7SUxheW91dEl0ZW19IGl0ZW0gLSB0aGUgaXRlbSB0byBjb25maWd1cmUgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuXHQgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIHRoZSBuZXcgaXRlbSBvcHRpb25zLlxuXHQgKi9cblx0Y29uZmlndXJlOiBmdW5jdGlvbihjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuXHRcdHZhciBwcm9wcyA9IFsnZnVsbFdpZHRoJywgJ3Bvc2l0aW9uJywgJ3dlaWdodCddO1xuXHRcdHZhciBpbGVuID0gcHJvcHMubGVuZ3RoO1xuXHRcdHZhciBpID0gMDtcblx0XHR2YXIgcHJvcDtcblxuXHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbaV07XG5cdFx0XHRpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHRpdGVtW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEZpdHMgYm94ZXMgb2YgdGhlIGdpdmVuIGNoYXJ0IGludG8gdGhlIGdpdmVuIHNpemUgYnkgaGF2aW5nIGVhY2ggYm94IG1lYXN1cmUgaXRzZWxmXG5cdCAqIHRoZW4gcnVubmluZyBhIGZpdHRpbmcgYWxnb3JpdGhtXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0XG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIHRoZSB3aWR0aCB0byBmaXQgaW50b1xuXHQgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gdGhlIGhlaWdodCB0byBmaXQgaW50b1xuXHQgKi9cblx0dXBkYXRlOiBmdW5jdGlvbihjaGFydCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmICghY2hhcnQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbGF5b3V0T3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMubGF5b3V0IHx8IHt9O1xuXHRcdHZhciBwYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKGxheW91dE9wdGlvbnMucGFkZGluZyk7XG5cblx0XHR2YXIgYXZhaWxhYmxlV2lkdGggPSB3aWR0aCAtIHBhZGRpbmcud2lkdGg7XG5cdFx0dmFyIGF2YWlsYWJsZUhlaWdodCA9IGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0O1xuXHRcdHZhciBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuXHRcdHZhciB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG5cdFx0dmFyIGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG5cblx0XHQvLyBFc3NlbnRpYWxseSB3ZSBub3cgaGF2ZSBhbnkgbnVtYmVyIG9mIGJveGVzIG9uIGVhY2ggb2YgdGhlIDQgc2lkZXMuXG5cdFx0Ly8gT3VyIGNhbnZhcyBsb29rcyBsaWtlIHRoZSBmb2xsb3dpbmcuXG5cdFx0Ly8gVGhlIGFyZWFzIEwxIGFuZCBMMiBhcmUgdGhlIGxlZnQgYXhlcy4gUjEgaXMgdGhlIHJpZ2h0IGF4aXMsIFQxIGlzIHRoZSB0b3AgYXhpcyBhbmRcblx0XHQvLyBCMSBpcyB0aGUgYm90dG9tIGF4aXNcblx0XHQvLyBUaGVyZSBhcmUgYWxzbyA0IHF1YWRyYW50LWxpa2UgbG9jYXRpb25zIChsZWZ0IHRvIHJpZ2h0IGluc3RlYWQgb2YgY2xvY2t3aXNlKSByZXNlcnZlZCBmb3IgY2hhcnQgb3ZlcmxheXNcblx0XHQvLyBUaGVzZSBsb2NhdGlvbnMgYXJlIHNpbmdsZS1ib3ggbG9jYXRpb25zIG9ubHksIHdoZW4gdHJ5aW5nIHRvIHJlZ2lzdGVyIGEgY2hhcnRBcmVhIGxvY2F0aW9uIHRoYXQgaXMgYWxyZWFkeSB0YWtlbixcblx0XHQvLyBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cblx0XHQvL1xuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBUMSAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBUMiAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8IEMxIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEMyIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgTDEgfCBMMiB8ICAgICAgICAgICBDaGFydEFyZWEgKEMwKSAgICAgICAgICAgIHwgUjEgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8IEMzIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEM0IHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBCMSAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBCMiAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vXG5cblx0XHR2YXIgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG5cdFx0XHRvdXRlcldpZHRoOiB3aWR0aCxcblx0XHRcdG91dGVySGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRwYWRkaW5nOiBwYWRkaW5nLFxuXHRcdFx0YXZhaWxhYmxlV2lkdGg6IGF2YWlsYWJsZVdpZHRoLFxuXHRcdFx0dkJveE1heFdpZHRoOiBhdmFpbGFibGVXaWR0aCAvIDIgLyB2ZXJ0aWNhbEJveGVzLmxlbmd0aCxcblx0XHRcdGhCb3hNYXhIZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCAvIDJcblx0XHR9KTtcblx0XHR2YXIgY2hhcnRBcmVhID0gZXh0ZW5kKHtcblx0XHRcdG1heFBhZGRpbmc6IGV4dGVuZCh7fSwgcGFkZGluZyksXG5cdFx0XHR3OiBhdmFpbGFibGVXaWR0aCxcblx0XHRcdGg6IGF2YWlsYWJsZUhlaWdodCxcblx0XHRcdHg6IHBhZGRpbmcubGVmdCxcblx0XHRcdHk6IHBhZGRpbmcudG9wXG5cdFx0fSwgcGFkZGluZyk7XG5cblx0XHRzZXRMYXlvdXREaW1zKHZlcnRpY2FsQm94ZXMuY29uY2F0KGhvcml6b250YWxCb3hlcyksIHBhcmFtcyk7XG5cblx0XHQvLyBGaXJzdCBmaXQgdmVydGljYWwgYm94ZXNcblx0XHRmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cblx0XHQvLyBUaGVuIGZpdCBob3Jpem9udGFsIGJveGVzXG5cdFx0aWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMpKSB7XG5cdFx0XHQvLyBpZiB0aGUgYXJlYSBjaGFuZ2VkLCByZS1maXQgdmVydGljYWwgYm94ZXNcblx0XHRcdGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zKTtcblx0XHR9XG5cblx0XHRoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG5cblx0XHQvLyBGaW5hbGx5IHBsYWNlIHRoZSBib3hlcyB0byBjb3JyZWN0IGNvb3JkaW5hdGVzXG5cdFx0cGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcyk7XG5cblx0XHQvLyBNb3ZlIHRvIG9wcG9zaXRlIHNpZGUgb2YgY2hhcnRcblx0XHRjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcblx0XHRjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcblxuXHRcdHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zKTtcblxuXHRcdGNoYXJ0LmNoYXJ0QXJlYSA9IHtcblx0XHRcdGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuXHRcdFx0dG9wOiBjaGFydEFyZWEudG9wLFxuXHRcdFx0cmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG5cdFx0XHRib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaFxuXHRcdH07XG5cblx0XHQvLyBGaW5hbGx5IHVwZGF0ZSBib3hlcyBpbiBjaGFydEFyZWEgKHJhZGlhbCBzY2FsZSBmb3IgZXhhbXBsZSlcblx0XHRoZWxwZXJzJDEuZWFjaChib3hlcy5jaGFydEFyZWEsIGZ1bmN0aW9uKGxheW91dCkge1xuXHRcdFx0dmFyIGJveCA9IGxheW91dC5ib3g7XG5cdFx0XHRleHRlbmQoYm94LCBjaGFydC5jaGFydEFyZWEpO1xuXHRcdFx0Ym94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgpO1xuXHRcdH0pO1xuXHR9XG59O1xuXG4vKipcbiAqIFBsYXRmb3JtIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIChtaW5pbWFsKS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTkxI2lzc3VlY29tbWVudC0zMTk1NzU5MzlcbiAqL1xuXG52YXIgcGxhdGZvcm1fYmFzaWMgPSB7XG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFueSBvYmplY3QgYXNzb2NpYXRlZCB0byBhIGNhbnZhcyAoaW5jbHVkaW5nIGEgY29udGV4dDJkKVxuXHRcdFx0aXRlbSA9IGl0ZW0uY2FudmFzO1xuXHRcdH1cblxuXHRcdHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuXHR9XG59O1xuXG52YXIgcGxhdGZvcm1fZG9tID0gXCIvKlxcbiAqIERPTSBlbGVtZW50IHJlbmRlcmluZyBkZXRlY3Rpb25cXG4gKiBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9kZXRlY3Qtbm9kZS1pbnNlcnRpb25cXG4gKi9cXG5Aa2V5ZnJhbWVzIGNoYXJ0anMtcmVuZGVyLWFuaW1hdGlvbiB7XFxuXFx0ZnJvbSB7IG9wYWNpdHk6IDAuOTk7IH1cXG5cXHR0byB7IG9wYWNpdHk6IDE7IH1cXG59XFxuXFxuLmNoYXJ0anMtcmVuZGVyLW1vbml0b3Ige1xcblxcdGFuaW1hdGlvbjogY2hhcnRqcy1yZW5kZXItYW5pbWF0aW9uIDAuMDAxcztcXG59XFxuXFxuLypcXG4gKiBET00gZWxlbWVudCByZXNpemluZyBkZXRlY3Rpb25cXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllc1xcbiAqL1xcbi5jaGFydGpzLXNpemUtbW9uaXRvcixcXG4uY2hhcnRqcy1zaXplLW1vbml0b3ItZXhwYW5kLFxcbi5jaGFydGpzLXNpemUtbW9uaXRvci1zaHJpbmsge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHRkaXJlY3Rpb246IGx0cjtcXG5cXHRsZWZ0OiAwO1xcblxcdHRvcDogMDtcXG5cXHRyaWdodDogMDtcXG5cXHRib3R0b206IDA7XFxuXFx0b3ZlcmZsb3c6IGhpZGRlbjtcXG5cXHRwb2ludGVyLWV2ZW50czogbm9uZTtcXG5cXHR2aXNpYmlsaXR5OiBoaWRkZW47XFxuXFx0ei1pbmRleDogLTE7XFxufVxcblxcbi5jaGFydGpzLXNpemUtbW9uaXRvci1leHBhbmQgPiBkaXYge1xcblxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG5cXHR3aWR0aDogMTAwMDAwMHB4O1xcblxcdGhlaWdodDogMTAwMDAwMHB4O1xcblxcdGxlZnQ6IDA7XFxuXFx0dG9wOiAwO1xcbn1cXG5cXG4uY2hhcnRqcy1zaXplLW1vbml0b3Itc2hyaW5rID4gZGl2IHtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxuXFx0d2lkdGg6IDIwMCU7XFxuXFx0aGVpZ2h0OiAyMDAlO1xcblxcdGxlZnQ6IDA7XFxuXFx0dG9wOiAwO1xcbn1cXG5cIjtcblxudmFyIHBsYXRmb3JtX2RvbSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuJ2RlZmF1bHQnOiBwbGF0Zm9ybV9kb21cbn0pO1xuXG52YXIgc3R5bGVzaGVldCA9IGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UocGxhdGZvcm1fZG9tJDEpO1xuXG52YXIgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xudmFyIENTU19QUkVGSVggPSAnY2hhcnRqcy0nO1xudmFyIENTU19TSVpFX01PTklUT1IgPSBDU1NfUFJFRklYICsgJ3NpemUtbW9uaXRvcic7XG52YXIgQ1NTX1JFTkRFUl9NT05JVE9SID0gQ1NTX1BSRUZJWCArICdyZW5kZXItbW9uaXRvcic7XG52YXIgQ1NTX1JFTkRFUl9BTklNQVRJT04gPSBDU1NfUFJFRklYICsgJ3JlbmRlci1hbmltYXRpb24nO1xudmFyIEFOSU1BVElPTl9TVEFSVF9FVkVOVFMgPSBbJ2FuaW1hdGlvbnN0YXJ0JywgJ3dlYmtpdEFuaW1hdGlvblN0YXJ0J107XG5cbi8qKlxuICogRE9NIGV2ZW50IHR5cGVzIC0+IENoYXJ0LmpzIGV2ZW50IHR5cGVzLlxuICogTm90ZTogb25seSBldmVudHMgd2l0aCBkaWZmZXJlbnQgdHlwZXMgYXJlIG1hcHBlZC5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzXG4gKi9cbnZhciBFVkVOVF9UWVBFUyA9IHtcblx0dG91Y2hzdGFydDogJ21vdXNlZG93bicsXG5cdHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG5cdHRvdWNoZW5kOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuXHRwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG5cdHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcblx0cG9pbnRlcnVwOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0Jyxcblx0cG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcblxuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqL1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG5cdHZhciB2YWx1ZSA9IGhlbHBlcnMkMS5nZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG5cdHZhciBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG5cdHJldHVybiBtYXRjaGVzID8gTnVtYmVyKG1hdGNoZXNbMV0pIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRoZSBjYW52YXMgc3R5bGUgYW5kIHJlbmRlciBzaXplIHdpdGhvdXQgbW9kaWZ5aW5nIHRoZSBjYW52YXMgZGlzcGxheSBzaXplLFxuICogc2luY2UgcmVzcG9uc2l2ZW5lc3MgaXMgaGFuZGxlZCBieSB0aGUgY29udHJvbGxlci5yZXNpemUoKSBtZXRob2QuIFRoZSBjb25maWcgaXMgdXNlZFxuICogdG8gZGV0ZXJtaW5lIHRoZSBhc3BlY3QgcmF0aW8gdG8gYXBwbHkgaW4gY2FzZSBubyBleHBsaWNpdCBoZWlnaHQgaGFzIGJlZW4gc3BlY2lmaWVkLlxuICovXG5mdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgY29uZmlnKSB7XG5cdHZhciBzdHlsZSA9IGNhbnZhcy5zdHlsZTtcblxuXHQvLyBOT1RFKFNCKSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpICE9PSBjYW52YXMud2lkdGg6IGluIHRoZSBmaXJzdCBjYXNlIGl0XG5cdC8vIHJldHVybnMgbnVsbCBvciAnJyBpZiBubyBleHBsaWNpdCB2YWx1ZSBoYXMgYmVlbiBzZXQgdG8gdGhlIGNhbnZhcyBhdHRyaWJ1dGUuXG5cdHZhciByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcblx0dmFyIHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcblxuXHQvLyBDaGFydC5qcyBtb2RpZmllcyBzb21lIGNhbnZhcyB2YWx1ZXMgdGhhdCB3ZSB3YW50IHRvIHJlc3RvcmUgb24gZGVzdHJveVxuXHRjYW52YXNbRVhQQU5ET19LRVldID0ge1xuXHRcdGluaXRpYWw6IHtcblx0XHRcdGhlaWdodDogcmVuZGVySGVpZ2h0LFxuXHRcdFx0d2lkdGg6IHJlbmRlcldpZHRoLFxuXHRcdFx0c3R5bGU6IHtcblx0XHRcdFx0ZGlzcGxheTogc3R5bGUuZGlzcGxheSxcblx0XHRcdFx0aGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG5cdFx0XHRcdHdpZHRoOiBzdHlsZS53aWR0aFxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBGb3JjZSBjYW52YXMgdG8gZGlzcGxheSBhcyBibG9jayB0byBhdm9pZCBleHRyYSBzcGFjZSBjYXVzZWQgYnkgaW5saW5lXG5cdC8vIGVsZW1lbnRzLCB3aGljaCB3b3VsZCBpbnRlcmZlcmUgd2l0aCB0aGUgcmVzcG9uc2l2ZSByZXNpemUgcHJvY2Vzcy5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI1Mzhcblx0c3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcblxuXHRpZiAocmVuZGVyV2lkdGggPT09IG51bGwgfHwgcmVuZGVyV2lkdGggPT09ICcnKSB7XG5cdFx0dmFyIGRpc3BsYXlXaWR0aCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICd3aWR0aCcpO1xuXHRcdGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Y2FudmFzLndpZHRoID0gZGlzcGxheVdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdGlmIChyZW5kZXJIZWlnaHQgPT09IG51bGwgfHwgcmVuZGVySGVpZ2h0ID09PSAnJykge1xuXHRcdGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuXHRcdFx0Ly8gSWYgbm8gZXhwbGljaXQgcmVuZGVyIGhlaWdodCBhbmQgc3R5bGUgaGVpZ2h0LCBsZXQncyBhcHBseSB0aGUgYXNwZWN0IHJhdGlvLFxuXHRcdFx0Ly8gd2hpY2ggb25lIGNhbiBiZSBzcGVjaWZpZWQgYnkgdGhlIHVzZXIgYnV0IGFsc28gYnkgY2hhcnRzIGFzIGRlZmF1bHQgb3B0aW9uXG5cdFx0XHQvLyAoaS5lLiBvcHRpb25zLmFzcGVjdFJhdGlvKS4gSWYgbm90IHNwZWNpZmllZCwgdXNlIGNhbnZhcyBhc3BlY3QgcmF0aW8gb2YgMi5cblx0XHRcdGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoY29uZmlnLm9wdGlvbnMuYXNwZWN0UmF0aW8gfHwgMik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuXHRcdFx0aWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjYW52YXM7XG59XG5cbi8qKlxuICogRGV0ZWN0cyBzdXBwb3J0IGZvciBvcHRpb25zIG9iamVjdCBhcmd1bWVudCBpbiBhZGRFdmVudExpc3RlbmVyLlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuICogQHByaXZhdGVcbiAqL1xudmFyIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG5cdHZhciBzdXBwb3J0cyA9IGZhbHNlO1xuXHR0cnkge1xuXHRcdHZhciBvcHRpb25zID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnZXR0ZXItcmV0dXJuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdXBwb3J0cyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2UnLCBudWxsLCBvcHRpb25zKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3Jcblx0fVxuXHRyZXR1cm4gc3VwcG9ydHM7XG59KCkpO1xuXG4vLyBEZWZhdWx0IHBhc3NpdmUgdG8gdHJ1ZSBhcyBleHBlY3RlZCBieSBDaHJvbWUgZm9yICd0b3VjaHN0YXJ0JyBhbmQgJ3RvdWNoZW5kJyBldmVudHMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDI4N1xudmFyIGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtwYXNzaXZlOiB0cnVlfSA6IGZhbHNlO1xuXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuXHRub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcblx0bm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50KHR5cGUsIGNoYXJ0LCB4LCB5LCBuYXRpdmVFdmVudCkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IHR5cGUsXG5cdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdG5hdGl2ZTogbmF0aXZlRXZlbnQgfHwgbnVsbCxcblx0XHR4OiB4ICE9PSB1bmRlZmluZWQgPyB4IDogbnVsbCxcblx0XHR5OiB5ICE9PSB1bmRlZmluZWQgPyB5IDogbnVsbCxcblx0fTtcbn1cblxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuXHR2YXIgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG5cdHZhciBwb3MgPSBoZWxwZXJzJDEuZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuXHRyZXR1cm4gY3JlYXRlRXZlbnQodHlwZSwgY2hhcnQsIHBvcy54LCBwb3MueSwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcblx0dmFyIHRpY2tpbmcgPSBmYWxzZTtcblx0dmFyIGFyZ3MgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0dGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblxuXHRcdGlmICghdGlja2luZykge1xuXHRcdFx0dGlja2luZyA9IHRydWU7XG5cdFx0XHRoZWxwZXJzJDEucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRpY2tpbmcgPSBmYWxzZTtcblx0XHRcdFx0Zm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURpdihjbHMpIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdGVsLmNsYXNzTmFtZSA9IGNscyB8fCAnJztcblx0cmV0dXJuIGVsO1xufVxuXG4vLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllc1xuZnVuY3Rpb24gY3JlYXRlUmVzaXplcihoYW5kbGVyKSB7XG5cdHZhciBtYXhTaXplID0gMTAwMDAwMDtcblxuXHQvLyBOT1RFKFNCKSBEb24ndCB1c2UgaW5uZXJIVE1MIGJlY2F1c2UgaXQgY291bGQgYmUgY29uc2lkZXJlZCB1bnNhZmUuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81OTAyXG5cdHZhciByZXNpemVyID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IpO1xuXHR2YXIgZXhwYW5kID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IgKyAnLWV4cGFuZCcpO1xuXHR2YXIgc2hyaW5rID0gY3JlYXRlRGl2KENTU19TSVpFX01PTklUT1IgKyAnLXNocmluaycpO1xuXG5cdGV4cGFuZC5hcHBlbmRDaGlsZChjcmVhdGVEaXYoKSk7XG5cdHNocmluay5hcHBlbmRDaGlsZChjcmVhdGVEaXYoKSk7XG5cblx0cmVzaXplci5hcHBlbmRDaGlsZChleHBhbmQpO1xuXHRyZXNpemVyLmFwcGVuZENoaWxkKHNocmluayk7XG5cdHJlc2l6ZXIuX3Jlc2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZXhwYW5kLnNjcm9sbExlZnQgPSBtYXhTaXplO1xuXHRcdGV4cGFuZC5zY3JvbGxUb3AgPSBtYXhTaXplO1xuXHRcdHNocmluay5zY3JvbGxMZWZ0ID0gbWF4U2l6ZTtcblx0XHRzaHJpbmsuc2Nyb2xsVG9wID0gbWF4U2l6ZTtcblx0fTtcblxuXHR2YXIgb25TY3JvbGwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdGhhbmRsZXIoKTtcblx0fTtcblxuXHRhZGRMaXN0ZW5lcihleHBhbmQsICdzY3JvbGwnLCBvblNjcm9sbC5iaW5kKGV4cGFuZCwgJ2V4cGFuZCcpKTtcblx0YWRkTGlzdGVuZXIoc2hyaW5rLCAnc2Nyb2xsJywgb25TY3JvbGwuYmluZChzaHJpbmssICdzaHJpbmsnKSk7XG5cblx0cmV0dXJuIHJlc2l6ZXI7XG59XG5cbi8vIGh0dHBzOi8vZGF2aWR3YWxzaC5uYW1lL2RldGVjdC1ub2RlLWluc2VydGlvblxuZnVuY3Rpb24gd2F0Y2hGb3JSZW5kZXIobm9kZSwgaGFuZGxlcikge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IChub2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eSA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5hbmltYXRpb25OYW1lID09PSBDU1NfUkVOREVSX0FOSU1BVElPTikge1xuXHRcdFx0aGFuZGxlcigpO1xuXHRcdH1cblx0fTtcblxuXHRoZWxwZXJzJDEuZWFjaChBTklNQVRJT05fU1RBUlRfRVZFTlRTLCBmdW5jdGlvbih0eXBlKSB7XG5cdFx0YWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgcHJveHkpO1xuXHR9KTtcblxuXHQvLyAjNDczNzogQ2hyb21lIG1pZ2h0IHNraXAgdGhlIENTUyBhbmltYXRpb24gd2hlbiB0aGUgQ1NTX1JFTkRFUl9NT05JVE9SIGNsYXNzXG5cdC8vIGlzIHJlbW92ZWQgdGhlbiBhZGRlZCBiYWNrIGltbWVkaWF0ZWx5IChzYW1lIGFuaW1hdGlvbiBmcmFtZT8pLiBBY2Nlc3NpbmcgdGhlXG5cdC8vIGBvZmZzZXRQYXJlbnRgIHByb3BlcnR5IHdpbGwgZm9yY2UgYSByZWZsb3cgYW5kIHJlLWV2YWx1YXRlIHRoZSBDU1MgYW5pbWF0aW9uLlxuXHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvNWQ1MmZiMDgxYjM1NzBjODFlM2EjYm94LW1ldHJpY3Ncblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ3Mzdcblx0ZXhwYW5kby5yZWZsb3cgPSAhIW5vZGUub2Zmc2V0UGFyZW50O1xuXG5cdG5vZGUuY2xhc3NMaXN0LmFkZChDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiB1bndhdGNoRm9yUmVuZGVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eTtcblxuXHRpZiAocHJveHkpIHtcblx0XHRoZWxwZXJzJDEuZWFjaChBTklNQVRJT05fU1RBUlRfRVZFTlRTLCBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRyZW1vdmVMaXN0ZW5lcihub2RlLCB0eXBlLCBwcm94eSk7XG5cdFx0fSk7XG5cblx0XHRkZWxldGUgZXhwYW5kby5yZW5kZXJQcm94eTtcblx0fVxuXG5cdG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiBhZGRSZXNpemVMaXN0ZW5lcihub2RlLCBsaXN0ZW5lciwgY2hhcnQpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCAobm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cblx0Ly8gTGV0J3Mga2VlcCB0cmFjayBvZiB0aGlzIGFkZGVkIHJlc2l6ZXIgYW5kIHRodXMgYXZvaWQgRE9NIHF1ZXJ5IHdoZW4gcmVtb3ZpbmcgaXQuXG5cdHZhciByZXNpemVyID0gZXhwYW5kby5yZXNpemVyID0gY3JlYXRlUmVzaXplcih0aHJvdHRsZWQoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGV4cGFuZG8ucmVzaXplcikge1xuXHRcdFx0dmFyIGNvbnRhaW5lciA9IGNoYXJ0Lm9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBub2RlLnBhcmVudE5vZGU7XG5cdFx0XHR2YXIgdyA9IGNvbnRhaW5lciA/IGNvbnRhaW5lci5jbGllbnRXaWR0aCA6IDA7XG5cdFx0XHRsaXN0ZW5lcihjcmVhdGVFdmVudCgncmVzaXplJywgY2hhcnQpKTtcblx0XHRcdGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLmNsaWVudFdpZHRoIDwgdyAmJiBjaGFydC5jYW52YXMpIHtcblx0XHRcdFx0Ly8gSWYgdGhlIGNvbnRhaW5lciBzaXplIHNocmFuayBkdXJpbmcgY2hhcnQgcmVzaXplLCBsZXQncyBhc3N1bWVcblx0XHRcdFx0Ly8gc2Nyb2xsYmFyIGFwcGVhcmVkLiBTbyB3ZSByZXNpemUgYWdhaW4gd2l0aCB0aGUgc2Nyb2xsYmFyIHZpc2libGUgLVxuXHRcdFx0XHQvLyBlZmZlY3RpdmVseSBtYWtpbmcgY2hhcnQgc21hbGxlciBhbmQgdGhlIHNjcm9sbGJhciBoaWRkZW4gYWdhaW4uXG5cdFx0XHRcdC8vIEJlY2F1c2Ugd2UgYXJlIGluc2lkZSBgdGhyb3R0bGVkYCwgYW5kIGN1cnJlbnRseSBgdGlja2luZ2AsIHNjcm9sbFxuXHRcdFx0XHQvLyBldmVudHMgYXJlIGlnbm9yZWQgZHVyaW5nIHRoaXMgd2hvbGUgMiByZXNpemUgcHJvY2Vzcy5cblx0XHRcdFx0Ly8gSWYgd2UgYXNzdW1lZCB3cm9uZyBhbmQgc29tZXRoaW5nIGVsc2UgaGFwcGVuZWQsIHdlIGFyZSByZXNpemluZ1xuXHRcdFx0XHQvLyB0d2ljZSBpbiBhIGZyYW1lIChwb3RlbnRpYWwgcGVyZm9ybWFuY2UgaXNzdWUpXG5cdFx0XHRcdGxpc3RlbmVyKGNyZWF0ZUV2ZW50KCdyZXNpemUnLCBjaGFydCkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSkpO1xuXG5cdC8vIFRoZSByZXNpemVyIG5lZWRzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBub2RlIHBhcmVudCwgc28gd2UgZmlyc3QgbmVlZCB0byBiZVxuXHQvLyBzdXJlIHRoYXQgYG5vZGVgIGlzIGF0dGFjaGVkIHRvIHRoZSBET00gYmVmb3JlIGluamVjdGluZyB0aGUgcmVzaXplciBlbGVtZW50LlxuXHR3YXRjaEZvclJlbmRlcihub2RlLCBmdW5jdGlvbigpIHtcblx0XHRpZiAoZXhwYW5kby5yZXNpemVyKSB7XG5cdFx0XHR2YXIgY29udGFpbmVyID0gbm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIgIT09IHJlc2l6ZXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRjb250YWluZXIuaW5zZXJ0QmVmb3JlKHJlc2l6ZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGNvbnRhaW5lciBzaXplIG1pZ2h0IGhhdmUgY2hhbmdlZCwgbGV0J3MgcmVzZXQgdGhlIHJlc2l6ZXIgc3RhdGUuXG5cdFx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHJlc2l6ZXIgPSBleHBhbmRvLnJlc2l6ZXI7XG5cblx0ZGVsZXRlIGV4cGFuZG8ucmVzaXplcjtcblx0dW53YXRjaEZvclJlbmRlcihub2RlKTtcblxuXHRpZiAocmVzaXplciAmJiByZXNpemVyLnBhcmVudE5vZGUpIHtcblx0XHRyZXNpemVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVzaXplcik7XG5cdH1cbn1cblxuLyoqXG4gKiBJbmplY3RzIENTUyBzdHlsZXMgaW5saW5lIGlmIHRoZSBzdHlsZXMgYXJlIG5vdCBhbHJlYWR5IHByZXNlbnQuXG4gKiBAcGFyYW0ge0hUTUxEb2N1bWVudHxTaGFkb3dSb290fSByb290Tm9kZSAtIHRoZSBub2RlIHRvIGNvbnRhaW4gdGhlIDxzdHlsZT4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzIC0gdGhlIENTUyB0byBiZSBpbmplY3RlZC5cbiAqL1xuZnVuY3Rpb24gaW5qZWN0Q1NTKHJvb3ROb2RlLCBjc3MpIHtcblx0Ly8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzM5MjIxMzlcblx0dmFyIGV4cGFuZG8gPSByb290Tm9kZVtFWFBBTkRPX0tFWV0gfHwgKHJvb3ROb2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0aWYgKCFleHBhbmRvLmNvbnRhaW5zU3R5bGVzKSB7XG5cdFx0ZXhwYW5kby5jb250YWluc1N0eWxlcyA9IHRydWU7XG5cdFx0Y3NzID0gJy8qIENoYXJ0LmpzICovXFxuJyArIGNzcztcblx0XHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHRcdHJvb3ROb2RlLmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fVxufVxuXG52YXIgcGxhdGZvcm1fZG9tJDIgPSB7XG5cdC8qKlxuXHQgKiBXaGVuIGB0cnVlYCwgcHJldmVudHMgdGhlIGF1dG9tYXRpYyBpbmplY3Rpb24gb2YgdGhlIHN0eWxlc2hlZXQgcmVxdWlyZWQgdG9cblx0ICogY29ycmVjdGx5IGRldGVjdCB3aGVuIHRoZSBjaGFydCBpcyBhZGRlZCB0byB0aGUgRE9NIGFuZCB0aGVuIHJlc2l6ZWQuIFRoaXNcblx0ICogc3dpdGNoIGhhcyBiZWVuIGFkZGVkIHRvIGFsbG93IGV4dGVybmFsIHN0eWxlc2hlZXQgKGBkaXN0L0NoYXJ0KC5taW4pPy5qc2ApXG5cdCAqIHRvIGJlIG1hbnVhbGx5IGltcG9ydGVkIHRvIG1ha2UgdGhpcyBsaWJyYXJ5IGNvbXBhdGlibGUgd2l0aCBhbnkgQ1NQLlxuXHQgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzUyMDhcblx0ICovXG5cdGRpc2FibGVDU1NJbmplY3Rpb246IGZhbHNlLFxuXG5cdC8qKlxuXHQgKiBUaGlzIHByb3BlcnR5IGhvbGRzIHdoZXRoZXIgdGhpcyBwbGF0Zm9ybSBpcyBlbmFibGVkIGZvciB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cblx0ICogQ3VycmVudGx5IHVzZWQgYnkgcGxhdGZvcm0uanMgdG8gc2VsZWN0IHRoZSBwcm9wZXIgaW1wbGVtZW50YXRpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZW5hYmxlZDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgcmVzb3VyY2VzIHRoYXQgZGVwZW5kIG9uIHBsYXRmb3JtIG9wdGlvbnMuXG5cdCAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyAtIFRoZSBDYW52YXMgZWxlbWVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9lbnN1cmVMb2FkZWQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuXHRcdGlmICghdGhpcy5kaXNhYmxlQ1NTSW5qZWN0aW9uKSB7XG5cdFx0XHQvLyBJZiB0aGUgY2FudmFzIGlzIGluIGEgc2hhZG93IERPTSwgdGhlbiB0aGUgc3R5bGVzIG11c3QgYWxzbyBiZSBpbnNlcnRlZFxuXHRcdFx0Ly8gaW50byB0aGUgc2FtZSBzaGFkb3cgRE9NLlxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU3NjNcblx0XHRcdHZhciByb290ID0gY2FudmFzLmdldFJvb3ROb2RlID8gY2FudmFzLmdldFJvb3ROb2RlKCkgOiBkb2N1bWVudDtcblx0XHRcdHZhciB0YXJnZXROb2RlID0gcm9vdC5ob3N0ID8gcm9vdCA6IGRvY3VtZW50LmhlYWQ7XG5cdFx0XHRpbmplY3RDU1ModGFyZ2V0Tm9kZSwgc3R5bGVzaGVldCk7XG5cdFx0fVxuXHR9LFxuXG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbihpdGVtLCBjb25maWcpIHtcblx0XHRpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG5cdFx0fSBlbHNlIGlmIChpdGVtLmxlbmd0aCkge1xuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgYXJyYXkgYmFzZWQgcXVlcmllcyAoc3VjaCBhcyBqUXVlcnkpXG5cdFx0XHRpdGVtID0gaXRlbVswXTtcblx0XHR9XG5cblx0XHRpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgYW55IG9iamVjdCBhc3NvY2lhdGVkIHRvIGEgY2FudmFzIChpbmNsdWRpbmcgYSBjb250ZXh0MmQpXG5cdFx0XHRpdGVtID0gaXRlbS5jYW52YXM7XG5cdFx0fVxuXG5cdFx0Ly8gVG8gcHJldmVudCBjYW52YXMgZmluZ2VycHJpbnRpbmcsIHNvbWUgYWRkLW9ucyB1bmRlZmluZSB0aGUgZ2V0Q29udGV4dFxuXHRcdC8vIG1ldGhvZCwgZm9yIGV4YW1wbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ra2Fwc25lci9DYW52YXNCbG9ja2VyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI4MDdcblx0XHR2YXIgY29udGV4dCA9IGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKTtcblxuXHRcdC8vIGBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50L0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRGAgZmFpbHMgd2hlbiB0aGUgaXRlbSBpc1xuXHRcdC8vIGluc2lkZSBhbiBpZnJhbWUgb3Igd2hlbiBydW5uaW5nIGluIGEgcHJvdGVjdGVkIGVudmlyb25tZW50LiBXZSBjb3VsZCBndWVzcyB0aGVcblx0XHQvLyB0eXBlcyBmcm9tIHRoZWlyIHRvU3RyaW5nKCkgdmFsdWUgYnV0IGxldCdzIGtlZXAgdGhpbmdzIGZsZXhpYmxlIGFuZCBhc3N1bWUgaXQnc1xuXHRcdC8vIGEgc3VmZmljaWVudCBjb25kaXRpb24gaWYgdGhlIGl0ZW0gaGFzIGEgY29udGV4dDJEIHdoaWNoIGhhcyBpdGVtIGFzIGBjYW52YXNgLlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zODg3XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQxMDJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDE1MlxuXHRcdGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBpdGVtKSB7XG5cdFx0XHQvLyBMb2FkIHBsYXRmb3JtIHJlc291cmNlcyBvbiBmaXJzdCBjaGFydCBjcmVhdGlvbiwgdG8gbWFrZSBpdCBwb3NzaWJsZSB0b1xuXHRcdFx0Ly8gaW1wb3J0IHRoZSBsaWJyYXJ5IGJlZm9yZSBzZXR0aW5nIHBsYXRmb3JtIG9wdGlvbnMuXG5cdFx0XHR0aGlzLl9lbnN1cmVMb2FkZWQoaXRlbSk7XG5cdFx0XHRpbml0Q2FudmFzKGl0ZW0sIGNvbmZpZyk7XG5cdFx0XHRyZXR1cm4gY29udGV4dDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblxuXHRyZWxlYXNlQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuXHRcdHZhciBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcblx0XHRpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcblx0XHRbJ2hlaWdodCcsICd3aWR0aCddLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0dmFyIHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcblx0XHRcdGlmIChoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcblx0XHRcdFx0Y2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aGVscGVycyQxLmVhY2goaW5pdGlhbC5zdHlsZSB8fCB7fSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0Y2FudmFzLnN0eWxlW2tleV0gPSB2YWx1ZTtcblx0XHR9KTtcblxuXHRcdC8vIFRoZSBjYW52YXMgcmVuZGVyIHNpemUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWQgKGFuZCB0aHVzIHRoZSBzdGF0ZSBzdGFjayBkaXNjYXJkZWQpLFxuXHRcdC8vIHdlIGNhbid0IHVzZSBzYXZlKCkgYW5kIHJlc3RvcmUoKSB0byByZXN0b3JlIHRoZSBpbml0aWFsIHN0YXRlLiBTbyBtYWtlIHN1cmUgdGhhdCBhdFxuXHRcdC8vIGxlYXN0IHRoZSBjYW52YXMgY29udGV4dCBpcyByZXNldCB0byB0aGUgZGVmYXVsdCBzdGF0ZSBieSBzZXR0aW5nIHRoZSBjYW52YXMgd2lkdGguXG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvV0QtaHRtbDUtMjAxMTA1MjUvdGhlLWNhbnZhcy1lbGVtZW50Lmh0bWxcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ25cblx0XHRjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG5cblx0XHRkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcblx0fSxcblxuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdGlmICh0eXBlID09PSAncmVzaXplJykge1xuXHRcdFx0Ly8gTm90ZTogdGhlIHJlc2l6ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cblx0XHRcdGFkZFJlc2l6ZUxpc3RlbmVyKGNhbnZhcywgbGlzdGVuZXIsIGNoYXJ0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZXhwYW5kbyA9IGxpc3RlbmVyW0VYUEFORE9fS0VZXSB8fCAobGlzdGVuZXJbRVhQQU5ET19LRVldID0ge30pO1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IChleHBhbmRvLnByb3hpZXMgPSB7fSk7XG5cdFx0dmFyIHByb3h5ID0gcHJveGllc1tjaGFydC5pZCArICdfJyArIHR5cGVdID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcblx0XHR9O1xuXG5cdFx0YWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH0sXG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHRpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcblx0XHRcdC8vIE5vdGU6IHRoZSByZXNpemUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXG5cdFx0XHRyZW1vdmVSZXNpemVMaXN0ZW5lcihjYW52YXMpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBleHBhbmRvID0gbGlzdGVuZXJbRVhQQU5ET19LRVldIHx8IHt9O1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IHt9O1xuXHRcdHZhciBwcm94eSA9IHByb3hpZXNbY2hhcnQuaWQgKyAnXycgKyB0eXBlXTtcblx0XHRpZiAoIXByb3h5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cmVtb3ZlTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH1cbn07XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBpbnN0ZWFkLlxuICogRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhIDcsIFNhZmFyaSwgRkYxLjUrLCBJRTkrXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5hZGRFdmVudFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLmFkZEV2ZW50ID0gYWRkTGlzdGVuZXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGluc3RlYWQuXG4gKiBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGNvbXBhdGliaWxpdHk6IENocm9tZSwgT3BlcmEgNywgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L3JlbW92ZUV2ZW50TGlzdGVuZXJcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLnJlbW92ZUV2ZW50XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzJDEucmVtb3ZlRXZlbnQgPSByZW1vdmVMaXN0ZW5lcjtcblxuLy8gQFRPRE8gTWFrZSBwb3NzaWJsZSB0byBzZWxlY3QgYW5vdGhlciBwbGF0Zm9ybSBhdCBidWlsZCB0aW1lLlxudmFyIGltcGxlbWVudGF0aW9uID0gcGxhdGZvcm1fZG9tJDIuX2VuYWJsZWQgPyBwbGF0Zm9ybV9kb20kMiA6IHBsYXRmb3JtX2Jhc2ljO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGxhdGZvcm1cbiAqIEBzZWUgaHR0cHM6Ly9jaGFydGpzLmdpdGJvb2tzLmlvL3Byb3Bvc2Fscy9jb250ZW50L1BsYXRmb3JtLmh0bWxcbiAqIEBzaW5jZSAyLjQuMFxuICovXG52YXIgcGxhdGZvcm0gPSBoZWxwZXJzJDEuZXh0ZW5kKHtcblx0LyoqXG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogQ2FsbGVkIGF0IGNoYXJ0IGNvbnN0cnVjdGlvbiB0aW1lLCByZXR1cm5zIGEgY29udGV4dDJkIGluc3RhbmNlIGltcGxlbWVudGluZ1xuXHQgKiB0aGUgW1czQyBDYW52YXMgMkQgQ29udGV4dCBBUEkgc3RhbmRhcmRde0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yZGNvbnRleHQvfS5cblx0ICogQHBhcmFtIHsqfSBpdGVtIC0gVGhlIG5hdGl2ZSBpdGVtIGZyb20gd2hpY2ggdG8gYWNxdWlyZSBjb250ZXh0IChwbGF0Zm9ybSBzcGVjaWZpYylcblx0ICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUaGUgY2hhcnQgb3B0aW9uc1xuXHQgKiBAcmV0dXJucyB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0MmQgaW5zdGFuY2Vcblx0ICovXG5cdGFjcXVpcmVDb250ZXh0OiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBDYWxsZWQgYXQgY2hhcnQgZGVzdHJ1Y3Rpb24gdGltZSwgcmVsZWFzZXMgYW55IHJlc291cmNlcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZXh0XG5cdCAqIHByZXZpb3VzbHkgcmV0dXJuZWQgYnkgdGhlIGFjcXVpcmVDb250ZXh0KCkgbWV0aG9kLlxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCAtIFRoZSBjb250ZXh0MmQgaW5zdGFuY2Vcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIG1ldGhvZCBzdWNjZWVkZWQsIGVsc2UgZmFsc2Vcblx0ICovXG5cdHJlbGVhc2VDb250ZXh0OiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciBvbiB0aGUgZ2l2ZW4gY2hhcnQuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gQ2hhcnQgZnJvbSB3aGljaCB0byBsaXN0ZW4gZm9yIGV2ZW50XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlICh7QGxpbmsgSUV2ZW50fSkgdHlwZSB0byBsaXN0ZW4gZm9yXG5cdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gUmVjZWl2ZXMgYSBub3RpZmljYXRpb24gKGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHNcblx0ICogdGhlIHtAbGluayBJRXZlbnR9IGludGVyZmFjZSkgd2hlbiBhbiBldmVudCBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgb2NjdXJzLlxuXHQgKi9cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7fSxcblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgc3BlY2lmaWVkIGxpc3RlbmVyIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCB3aXRoIGFkZEV2ZW50TGlzdGVuZXIuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gQ2hhcnQgZnJvbSB3aGljaCB0byByZW1vdmUgdGhlIGxpc3RlbmVyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlICh7QGxpbmsgSUV2ZW50fSkgdHlwZSB0byByZW1vdmVcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gdG8gcmVtb3ZlIGZyb20gdGhlIGV2ZW50IHRhcmdldC5cblx0ICovXG5cdHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKCkge31cblxufSwgaW1wbGVtZW50YXRpb24pO1xuXG5jb3JlX2RlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cGx1Z2luczoge31cbn0pO1xuXG4vKipcbiAqIFRoZSBwbHVnaW4gc2VydmljZSBzaW5nbGV0b25cbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGx1Z2luc1xuICogQHNpbmNlIDIuMS4wXG4gKi9cbnZhciBjb3JlX3BsdWdpbnMgPSB7XG5cdC8qKlxuXHQgKiBHbG9iYWxseSByZWdpc3RlcmVkIHBsdWdpbnMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfcGx1Z2luczogW10sXG5cblx0LyoqXG5cdCAqIFRoaXMgaWRlbnRpZmllciBpcyB1c2VkIHRvIGludmFsaWRhdGUgdGhlIGRlc2NyaXB0b3JzIGNhY2hlIGF0dGFjaGVkIHRvIGVhY2ggY2hhcnRcblx0ICogd2hlbiBhIGdsb2JhbCBwbHVnaW4gaXMgcmVnaXN0ZXJlZCBvciB1bnJlZ2lzdGVyZWQuIEluIHRoaXMgY2FzZSwgdGhlIGNhY2hlIElEIGlzXG5cdCAqIGluY3JlbWVudGVkIGFuZCBkZXNjcmlwdG9ycyBhcmUgcmVnZW5lcmF0ZWQgZHVyaW5nIGZvbGxvd2luZyBBUEkgY2FsbHMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY2FjaGVJZDogMCxcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIHRoZSBnaXZlbiBwbHVnaW4ocykgaWYgbm90IGFscmVhZHkgcmVnaXN0ZXJlZC5cblx0ICogQHBhcmFtIHtJUGx1Z2luW118SVBsdWdpbn0gcGx1Z2lucyBwbHVnaW4gaW5zdGFuY2UocykuXG5cdCAqL1xuXHRyZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdHZhciBwID0gdGhpcy5fcGx1Z2lucztcblx0XHQoW10pLmNvbmNhdChwbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0aWYgKHAuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuXHRcdFx0XHRwLnB1c2gocGx1Z2luKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2NhY2hlSWQrKztcblx0fSxcblxuXHQvKipcblx0ICogVW5yZWdpc3RlcnMgdGhlIGdpdmVuIHBsdWdpbihzKSBvbmx5IGlmIHJlZ2lzdGVyZWQuXG5cdCAqIEBwYXJhbSB7SVBsdWdpbltdfElQbHVnaW59IHBsdWdpbnMgcGx1Z2luIGluc3RhbmNlKHMpLlxuXHQgKi9cblx0dW5yZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdHZhciBwID0gdGhpcy5fcGx1Z2lucztcblx0XHQoW10pLmNvbmNhdChwbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0dmFyIGlkeCA9IHAuaW5kZXhPZihwbHVnaW4pO1xuXHRcdFx0aWYgKGlkeCAhPT0gLTEpIHtcblx0XHRcdFx0cC5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2NhY2hlSWQrKztcblx0fSxcblxuXHQvKipcblx0ICogUmVtb3ZlIGFsbCByZWdpc3RlcmVkIHBsdWdpbnMuXG5cdCAqIEBzaW5jZSAyLjEuNVxuXHQgKi9cblx0Y2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3BsdWdpbnMgPSBbXTtcblx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiByZWdpc3RlcmVkIHBsdWdpbnM/XG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XG5cdCAqIEBzaW5jZSAyLjEuNVxuXHQgKi9cblx0Y291bnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbHVnaW5zLmxlbmd0aDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhbGwgcmVnaXN0ZXJlZCBwbHVnaW4gaW5zdGFuY2VzLlxuXHQgKiBAcmV0dXJucyB7SVBsdWdpbltdfSBhcnJheSBvZiBwbHVnaW4gb2JqZWN0cy5cblx0ICogQHNpbmNlIDIuMS41XG5cdCAqL1xuXHRnZXRBbGw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbHVnaW5zO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxscyBlbmFibGVkIHBsdWdpbnMgZm9yIGBjaGFydGAgb24gdGhlIHNwZWNpZmllZCBob29rIGFuZCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuXHQgKiBUaGlzIG1ldGhvZCBpbW1lZGlhdGVseSByZXR1cm5zIGFzIHNvb24gYXMgYSBwbHVnaW4gZXhwbGljaXRseSByZXR1cm5zIGZhbHNlLiBUaGVcblx0ICogcmV0dXJuZWQgdmFsdWUgY2FuIGJlIHVzZWQsIGZvciBpbnN0YW5jZSwgdG8gaW50ZXJydXB0IHRoZSBjdXJyZW50IGFjdGlvbi5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UgZm9yIHdoaWNoIHBsdWdpbnMgc2hvdWxkIGJlIGNhbGxlZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIG1ldGhvZCB0byBjYWxsIChlLmcuICdiZWZvcmVVcGRhdGUnKS5cblx0ICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdIC0gRXh0cmEgYXJndW1lbnRzIHRvIGFwcGx5IHRvIHRoZSBob29rIGNhbGwuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBmYWxzZSBpZiBhbnkgb2YgdGhlIHBsdWdpbnMgcmV0dXJuIGZhbHNlLCBlbHNlIHJldHVybnMgdHJ1ZS5cblx0ICovXG5cdG5vdGlmeTogZnVuY3Rpb24oY2hhcnQsIGhvb2ssIGFyZ3MpIHtcblx0XHR2YXIgZGVzY3JpcHRvcnMgPSB0aGlzLmRlc2NyaXB0b3JzKGNoYXJ0KTtcblx0XHR2YXIgaWxlbiA9IGRlc2NyaXB0b3JzLmxlbmd0aDtcblx0XHR2YXIgaSwgZGVzY3JpcHRvciwgcGx1Z2luLCBwYXJhbXMsIG1ldGhvZDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1tpXTtcblx0XHRcdHBsdWdpbiA9IGRlc2NyaXB0b3IucGx1Z2luO1xuXHRcdFx0bWV0aG9kID0gcGx1Z2luW2hvb2tdO1xuXHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cGFyYW1zID0gW2NoYXJ0XS5jb25jYXQoYXJncyB8fCBbXSk7XG5cdFx0XHRcdHBhcmFtcy5wdXNoKGRlc2NyaXB0b3Iub3B0aW9ucyk7XG5cdFx0XHRcdGlmIChtZXRob2QuYXBwbHkocGx1Z2luLCBwYXJhbXMpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGRlc2NyaXB0b3JzIG9mIGVuYWJsZWQgcGx1Z2lucyBmb3IgdGhlIGdpdmVuIGNoYXJ0LlxuXHQgKiBAcmV0dXJucyB7b2JqZWN0W119IFt7IHBsdWdpbiwgb3B0aW9ucyB9XVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZGVzY3JpcHRvcnM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGNhY2hlID0gY2hhcnQuJHBsdWdpbnMgfHwgKGNoYXJ0LiRwbHVnaW5zID0ge30pO1xuXHRcdGlmIChjYWNoZS5pZCA9PT0gdGhpcy5fY2FjaGVJZCkge1xuXHRcdFx0cmV0dXJuIGNhY2hlLmRlc2NyaXB0b3JzO1xuXHRcdH1cblxuXHRcdHZhciBwbHVnaW5zID0gW107XG5cdFx0dmFyIGRlc2NyaXB0b3JzID0gW107XG5cdFx0dmFyIGNvbmZpZyA9IChjaGFydCAmJiBjaGFydC5jb25maWcpIHx8IHt9O1xuXHRcdHZhciBvcHRpb25zID0gKGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMpIHx8IHt9O1xuXG5cdFx0dGhpcy5fcGx1Z2lucy5jb25jYXQoY29uZmlnLnBsdWdpbnMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24ocGx1Z2luKSB7XG5cdFx0XHR2YXIgaWR4ID0gcGx1Z2lucy5pbmRleE9mKHBsdWdpbik7XG5cdFx0XHRpZiAoaWR4ICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpZCA9IHBsdWdpbi5pZDtcblx0XHRcdHZhciBvcHRzID0gb3B0aW9uc1tpZF07XG5cdFx0XHRpZiAob3B0cyA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRvcHRzID0gaGVscGVycyQxLmNsb25lKGNvcmVfZGVmYXVsdHMuZ2xvYmFsLnBsdWdpbnNbaWRdKTtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5wdXNoKHBsdWdpbik7XG5cdFx0XHRkZXNjcmlwdG9ycy5wdXNoKHtcblx0XHRcdFx0cGx1Z2luOiBwbHVnaW4sXG5cdFx0XHRcdG9wdGlvbnM6IG9wdHMgfHwge31cblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0Y2FjaGUuZGVzY3JpcHRvcnMgPSBkZXNjcmlwdG9ycztcblx0XHRjYWNoZS5pZCA9IHRoaXMuX2NhY2hlSWQ7XG5cdFx0cmV0dXJuIGRlc2NyaXB0b3JzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBJbnZhbGlkYXRlcyBjYWNoZSBmb3IgdGhlIGdpdmVuIGNoYXJ0OiBkZXNjcmlwdG9ycyBob2xkIGEgcmVmZXJlbmNlIG9uIHBsdWdpbiBvcHRpb24sXG5cdCAqIGJ1dCBpbiBzb21lIGNhc2VzLCB0aGlzIHJlZmVyZW5jZSBjYW4gYmUgY2hhbmdlZCBieSB0aGUgdXNlciB3aGVuIHVwZGF0aW5nIG9wdGlvbnMuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MTExI2lzc3VlY29tbWVudC0zNTU5MzQxNjdcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pbnZhbGlkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdGRlbGV0ZSBjaGFydC4kcGx1Z2lucztcblx0fVxufTtcblxudmFyIGNvcmVfc2NhbGVTZXJ2aWNlID0ge1xuXHQvLyBTY2FsZSByZWdpc3RyYXRpb24gb2JqZWN0LiBFeHRlbnNpb25zIGNhbiByZWdpc3RlciBuZXcgc2NhbGUgdHlwZXMgKHN1Y2ggYXMgbG9nIG9yIERCIHNjYWxlcykgYW5kIHRoZW5cblx0Ly8gdXNlIHRoZSBuZXcgY2hhcnQgb3B0aW9ucyB0byBncmFiIHRoZSBjb3JyZWN0IHNjYWxlXG5cdGNvbnN0cnVjdG9yczoge30sXG5cdC8vIFVzZSBhIHJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBzbyB0aGF0IHdlIGNhbiBtb3ZlIHRvIGFuIEVTNiBtYXAgd2hlbiB3ZSBubyBsb25nZXIgbmVlZCB0byBzdXBwb3J0XG5cdC8vIG9sZCBicm93c2Vyc1xuXG5cdC8vIFNjYWxlIGNvbmZpZyBkZWZhdWx0c1xuXHRkZWZhdWx0czoge30sXG5cdHJlZ2lzdGVyU2NhbGVUeXBlOiBmdW5jdGlvbih0eXBlLCBzY2FsZUNvbnN0cnVjdG9yLCBzY2FsZURlZmF1bHRzKSB7XG5cdFx0dGhpcy5jb25zdHJ1Y3RvcnNbdHlwZV0gPSBzY2FsZUNvbnN0cnVjdG9yO1xuXHRcdHRoaXMuZGVmYXVsdHNbdHlwZV0gPSBoZWxwZXJzJDEuY2xvbmUoc2NhbGVEZWZhdWx0cyk7XG5cdH0sXG5cdGdldFNjYWxlQ29uc3RydWN0b3I6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyB0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA6IHVuZGVmaW5lZDtcblx0fSxcblx0Z2V0U2NhbGVEZWZhdWx0czogZnVuY3Rpb24odHlwZSkge1xuXHRcdC8vIFJldHVybiB0aGUgc2NhbGUgZGVmYXVsdHMgbWVyZ2VkIHdpdGggdGhlIGdsb2JhbCBzZXR0aW5ncyBzbyB0aGF0IHdlIGFsd2F5cyB1c2UgdGhlIGxhdGVzdCBvbmVzXG5cdFx0cmV0dXJuIHRoaXMuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkgPyBoZWxwZXJzJDEubWVyZ2Uoe30sIFtjb3JlX2RlZmF1bHRzLnNjYWxlLCB0aGlzLmRlZmF1bHRzW3R5cGVdXSkgOiB7fTtcblx0fSxcblx0dXBkYXRlU2NhbGVEZWZhdWx0czogZnVuY3Rpb24odHlwZSwgYWRkaXRpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAobWUuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcblx0XHRcdG1lLmRlZmF1bHRzW3R5cGVdID0gaGVscGVycyQxLmV4dGVuZChtZS5kZWZhdWx0c1t0eXBlXSwgYWRkaXRpb25zKTtcblx0XHR9XG5cdH0sXG5cdGFkZFNjYWxlc1RvTGF5b3V0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdC8vIEFkZHMgZWFjaCBzY2FsZSB0byB0aGUgY2hhcnQuYm94ZXMgYXJyYXkgdG8gYmUgc2l6ZWQgYWNjb3JkaW5nbHlcblx0XHRoZWxwZXJzJDEuZWFjaChjaGFydC5zY2FsZXMsIGZ1bmN0aW9uKHNjYWxlKSB7XG5cdFx0XHQvLyBTZXQgSUxheW91dEl0ZW0gcGFyYW1ldGVycyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdHNjYWxlLmZ1bGxXaWR0aCA9IHNjYWxlLm9wdGlvbnMuZnVsbFdpZHRoO1xuXHRcdFx0c2NhbGUucG9zaXRpb24gPSBzY2FsZS5vcHRpb25zLnBvc2l0aW9uO1xuXHRcdFx0c2NhbGUud2VpZ2h0ID0gc2NhbGUub3B0aW9ucy53ZWlnaHQ7XG5cdFx0XHRjb3JlX2xheW91dHMuYWRkQm94KGNoYXJ0LCBzY2FsZSk7XG5cdFx0fSk7XG5cdH1cbn07XG5cbnZhciB2YWx1ZU9yRGVmYXVsdCQ4ID0gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0O1xudmFyIGdldFJ0bEhlbHBlciA9IGhlbHBlcnMkMS5ydGwuZ2V0UnRsQWRhcHRlcjtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHRvb2x0aXBzOiB7XG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRjdXN0b206IG51bGwsXG5cdFx0bW9kZTogJ25lYXJlc3QnLFxuXHRcdHBvc2l0aW9uOiAnYXZlcmFnZScsXG5cdFx0aW50ZXJzZWN0OiB0cnVlLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG5cdFx0dGl0bGVGb250U3R5bGU6ICdib2xkJyxcblx0XHR0aXRsZVNwYWNpbmc6IDIsXG5cdFx0dGl0bGVNYXJnaW5Cb3R0b206IDYsXG5cdFx0dGl0bGVGb250Q29sb3I6ICcjZmZmJyxcblx0XHR0aXRsZUFsaWduOiAnbGVmdCcsXG5cdFx0Ym9keVNwYWNpbmc6IDIsXG5cdFx0Ym9keUZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGJvZHlBbGlnbjogJ2xlZnQnLFxuXHRcdGZvb3RlckZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZvb3RlclNwYWNpbmc6IDIsXG5cdFx0Zm9vdGVyTWFyZ2luVG9wOiA2LFxuXHRcdGZvb3RlckZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGZvb3RlckFsaWduOiAnbGVmdCcsXG5cdFx0eVBhZGRpbmc6IDYsXG5cdFx0eFBhZGRpbmc6IDYsXG5cdFx0Y2FyZXRQYWRkaW5nOiAyLFxuXHRcdGNhcmV0U2l6ZTogNSxcblx0XHRjb3JuZXJSYWRpdXM6IDYsXG5cdFx0bXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG5cdFx0ZGlzcGxheUNvbG9yczogdHJ1ZSxcblx0XHRib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuXHRcdGJvcmRlcldpZHRoOiAwLFxuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVUaXRsZTogaGVscGVycyQxLm5vb3AsXG5cdFx0XHR0aXRsZTogZnVuY3Rpb24odG9vbHRpcEl0ZW1zLCBkYXRhKSB7XG5cdFx0XHRcdHZhciB0aXRsZSA9ICcnO1xuXHRcdFx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0XHRcdHZhciBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG5cblx0XHRcdFx0aWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSB0b29sdGlwSXRlbXNbMF07XG5cdFx0XHRcdFx0aWYgKGl0ZW0ubGFiZWwpIHtcblx0XHRcdFx0XHRcdHRpdGxlID0gaXRlbS5sYWJlbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGl0ZW0ueExhYmVsKSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGl0ZW0ueExhYmVsO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5pbmRleCA8IGxhYmVsQ291bnQpIHtcblx0XHRcdFx0XHRcdHRpdGxlID0gbGFiZWxzW2l0ZW0uaW5kZXhdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0aXRsZTtcblx0XHRcdH0sXG5cdFx0XHRhZnRlclRpdGxlOiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVCb2R5OiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0XHRcdGJlZm9yZUxhYmVsOiBoZWxwZXJzJDEubm9vcCxcblx0XHRcdGxhYmVsOiBmdW5jdGlvbih0b29sdGlwSXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgbGFiZWwgPSBkYXRhLmRhdGFzZXRzW3Rvb2x0aXBJdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cblx0XHRcdFx0aWYgKGxhYmVsKSB7XG5cdFx0XHRcdFx0bGFiZWwgKz0gJzogJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWhlbHBlcnMkMS5pc051bGxPclVuZGVmKHRvb2x0aXBJdGVtLnZhbHVlKSkge1xuXHRcdFx0XHRcdGxhYmVsICs9IHRvb2x0aXBJdGVtLnZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxhYmVsICs9IHRvb2x0aXBJdGVtLnlMYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWxDb2xvcjogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcblx0XHRcdFx0dmFyIGFjdGl2ZUVsZW1lbnQgPSBtZXRhLmRhdGFbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuXHRcdFx0XHR2YXIgdmlldyA9IGFjdGl2ZUVsZW1lbnQuX3ZpZXc7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IHZpZXcuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiB2aWV3LmJhY2tncm91bmRDb2xvclxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsVGV4dENvbG9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX29wdGlvbnMuYm9keUZvbnRDb2xvcjtcblx0XHRcdH0sXG5cdFx0XHRhZnRlckxhYmVsOiBoZWxwZXJzJDEubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRhZnRlckJvZHk6IGhlbHBlcnMkMS5ub29wLFxuXG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGJlZm9yZUZvb3RlcjogaGVscGVycyQxLm5vb3AsXG5cdFx0XHRmb290ZXI6IGhlbHBlcnMkMS5ub29wLFxuXHRcdFx0YWZ0ZXJGb290ZXI6IGhlbHBlcnMkMS5ub29wXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIHBvc2l0aW9uZXJzID0ge1xuXHQvKipcblx0ICogQXZlcmFnZSBtb2RlIHBsYWNlcyB0aGUgdG9vbHRpcCBhdCB0aGUgYXZlcmFnZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudHMgc2hvd25cblx0ICogQGZ1bmN0aW9uIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnMuYXZlcmFnZVxuXHQgKiBAcGFyYW0gZWxlbWVudHMge0NoYXJ0RWxlbWVudFtdfSB0aGUgZWxlbWVudHMgYmVpbmcgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IHRvb2x0aXAgcG9zaXRpb25cblx0ICovXG5cdGF2ZXJhZ2U6IGZ1bmN0aW9uKGVsZW1lbnRzKSB7XG5cdFx0aWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgaSwgbGVuO1xuXHRcdHZhciB4ID0gMDtcblx0XHR2YXIgeSA9IDA7XG5cdFx0dmFyIGNvdW50ID0gMDtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdHZhciBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcblx0XHRcdFx0eCArPSBwb3MueDtcblx0XHRcdFx0eSArPSBwb3MueTtcblx0XHRcdFx0Kytjb3VudDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogeCAvIGNvdW50LFxuXHRcdFx0eTogeSAvIGNvdW50XG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0cyB0aGUgdG9vbHRpcCBwb3NpdGlvbiBuZWFyZXN0IG9mIHRoZSBpdGVtIG5lYXJlc3QgdG8gdGhlIGV2ZW50IHBvc2l0aW9uXG5cdCAqIEBmdW5jdGlvbiBDaGFydC5Ub29sdGlwLnBvc2l0aW9uZXJzLm5lYXJlc3Rcblx0ICogQHBhcmFtIGVsZW1lbnRzIHtDaGFydC5FbGVtZW50W119IHRoZSB0b29sdGlwIGVsZW1lbnRzXG5cdCAqIEBwYXJhbSBldmVudFBvc2l0aW9uIHtvYmplY3R9IHRoZSBwb3NpdGlvbiBvZiB0aGUgZXZlbnQgaW4gY2FudmFzIGNvb3JkaW5hdGVzXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9IHRoZSB0b29sdGlwIHBvc2l0aW9uXG5cdCAqL1xuXHRuZWFyZXN0OiBmdW5jdGlvbihlbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuXHRcdHZhciB4ID0gZXZlbnRQb3NpdGlvbi54O1xuXHRcdHZhciB5ID0gZXZlbnRQb3NpdGlvbi55O1xuXHRcdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR2YXIgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdHZhciBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuXHRcdFx0XHR2YXIgZCA9IGhlbHBlcnMkMS5kaXN0YW5jZUJldHdlZW5Qb2ludHMoZXZlbnRQb3NpdGlvbiwgY2VudGVyKTtcblxuXHRcdFx0XHRpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG5cdFx0XHRcdFx0bWluRGlzdGFuY2UgPSBkO1xuXHRcdFx0XHRcdG5lYXJlc3RFbGVtZW50ID0gZWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobmVhcmVzdEVsZW1lbnQpIHtcblx0XHRcdHZhciB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuXHRcdFx0eCA9IHRwLng7XG5cdFx0XHR5ID0gdHAueTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogeCxcblx0XHRcdHk6IHlcblx0XHR9O1xuXHR9XG59O1xuXG4vLyBIZWxwZXIgdG8gcHVzaCBvciBjb25jYXQgYmFzZWQgb24gaWYgdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb3Igbm90XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG5cdGlmICh0b1B1c2gpIHtcblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkodG9QdXNoKSkge1xuXHRcdFx0Ly8gYmFzZSA9IGJhc2UuY29uY2F0KHRvUHVzaCk7XG5cdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRiYXNlLnB1c2godG9QdXNoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYmFzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFycmF5IG9mIHN0cmluZ3Mgc3BsaXQgYnkgbmV3bGluZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNwbGl0IGJ5IG5ld2xpbmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IHZhbHVlIGlmIG5ld2xpbmUgcHJlc2VudCAtIFJldHVybmVkIGZyb20gU3RyaW5nIHNwbGl0KCkgbWV0aG9kXG4gKiBAZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcblx0aWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cblxuXG4vKipcbiAqIFByaXZhdGUgaGVscGVyIHRvIGNyZWF0ZSBhIHRvb2x0aXAgaXRlbSBtb2RlbFxuICogQHBhcmFtIGVsZW1lbnQgLSB0aGUgY2hhcnQgZWxlbWVudCAocG9pbnQsIGFyYywgYmFyKSB0byBjcmVhdGUgdGhlIHRvb2x0aXAgaXRlbSBmb3JcbiAqIEByZXR1cm4gbmV3IHRvb2x0aXAgaXRlbVxuICovXG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwSXRlbShlbGVtZW50KSB7XG5cdHZhciB4U2NhbGUgPSBlbGVtZW50Ll94U2NhbGU7XG5cdHZhciB5U2NhbGUgPSBlbGVtZW50Ll95U2NhbGUgfHwgZWxlbWVudC5fc2NhbGU7IC8vIGhhbmRsZSByYWRhciB8fCBwb2xhckFyZWEgY2hhcnRzXG5cdHZhciBpbmRleCA9IGVsZW1lbnQuX2luZGV4O1xuXHR2YXIgZGF0YXNldEluZGV4ID0gZWxlbWVudC5fZGF0YXNldEluZGV4O1xuXHR2YXIgY29udHJvbGxlciA9IGVsZW1lbnQuX2NoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcblx0dmFyIGluZGV4U2NhbGUgPSBjb250cm9sbGVyLl9nZXRJbmRleFNjYWxlKCk7XG5cdHZhciB2YWx1ZVNjYWxlID0gY29udHJvbGxlci5fZ2V0VmFsdWVTY2FsZSgpO1xuXG5cdHJldHVybiB7XG5cdFx0eExhYmVsOiB4U2NhbGUgPyB4U2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdHlMYWJlbDogeVNjYWxlID8geVNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHRsYWJlbDogaW5kZXhTY2FsZSA/ICcnICsgaW5kZXhTY2FsZS5nZXRMYWJlbEZvckluZGV4KGluZGV4LCBkYXRhc2V0SW5kZXgpIDogJycsXG5cdFx0dmFsdWU6IHZhbHVlU2NhbGUgPyAnJyArIHZhbHVlU2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdGluZGV4OiBpbmRleCxcblx0XHRkYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCxcblx0XHR4OiBlbGVtZW50Ll9tb2RlbC54LFxuXHRcdHk6IGVsZW1lbnQuX21vZGVsLnlcblx0fTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSByZXNldCBtb2RlbCBmb3IgdGhlIHRvb2x0aXBcbiAqIEBwYXJhbSB0b29sdGlwT3B0cyB7b2JqZWN0fSB0aGUgdG9vbHRpcCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGdldEJhc2VNb2RlbCh0b29sdGlwT3B0cykge1xuXHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBjb3JlX2RlZmF1bHRzLmdsb2JhbDtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIFBvc2l0aW9uaW5nXG5cdFx0eFBhZGRpbmc6IHRvb2x0aXBPcHRzLnhQYWRkaW5nLFxuXHRcdHlQYWRkaW5nOiB0b29sdGlwT3B0cy55UGFkZGluZyxcblx0XHR4QWxpZ246IHRvb2x0aXBPcHRzLnhBbGlnbixcblx0XHR5QWxpZ246IHRvb2x0aXBPcHRzLnlBbGlnbixcblxuXHRcdC8vIERyYXdpbmcgZGlyZWN0aW9uIGFuZCB0ZXh0IGRpcmVjdGlvblxuXHRcdHJ0bDogdG9vbHRpcE9wdHMucnRsLFxuXHRcdHRleHREaXJlY3Rpb246IHRvb2x0aXBPcHRzLnRleHREaXJlY3Rpb24sXG5cblx0XHQvLyBCb2R5XG5cdFx0Ym9keUZvbnRDb2xvcjogdG9vbHRpcE9wdHMuYm9keUZvbnRDb2xvcixcblx0XHRfYm9keUZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMuYm9keUZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfYm9keUZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy5ib2R5Rm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKSxcblx0XHRfYm9keUFsaWduOiB0b29sdGlwT3B0cy5ib2R5QWxpZ24sXG5cdFx0Ym9keUZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmJvZHlGb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKSxcblx0XHRib2R5U3BhY2luZzogdG9vbHRpcE9wdHMuYm9keVNwYWNpbmcsXG5cblx0XHQvLyBUaXRsZVxuXHRcdHRpdGxlRm9udENvbG9yOiB0b29sdGlwT3B0cy50aXRsZUZvbnRDb2xvcixcblx0XHRfdGl0bGVGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLnRpdGxlRm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpLFxuXHRcdF90aXRsZUZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy50aXRsZUZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0dGl0bGVGb250U2l6ZTogdmFsdWVPckRlZmF1bHQkOCh0b29sdGlwT3B0cy50aXRsZUZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdF90aXRsZUFsaWduOiB0b29sdGlwT3B0cy50aXRsZUFsaWduLFxuXHRcdHRpdGxlU3BhY2luZzogdG9vbHRpcE9wdHMudGl0bGVTcGFjaW5nLFxuXHRcdHRpdGxlTWFyZ2luQm90dG9tOiB0b29sdGlwT3B0cy50aXRsZU1hcmdpbkJvdHRvbSxcblxuXHRcdC8vIEZvb3RlclxuXHRcdGZvb3RlckZvbnRDb2xvcjogdG9vbHRpcE9wdHMuZm9vdGVyRm9udENvbG9yLFxuXHRcdF9mb290ZXJGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfZm9vdGVyRm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCQ4KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0Zm9vdGVyRm9udFNpemU6IHZhbHVlT3JEZWZhdWx0JDgodG9vbHRpcE9wdHMuZm9vdGVyRm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSksXG5cdFx0X2Zvb3RlckFsaWduOiB0b29sdGlwT3B0cy5mb290ZXJBbGlnbixcblx0XHRmb290ZXJTcGFjaW5nOiB0b29sdGlwT3B0cy5mb290ZXJTcGFjaW5nLFxuXHRcdGZvb3Rlck1hcmdpblRvcDogdG9vbHRpcE9wdHMuZm9vdGVyTWFyZ2luVG9wLFxuXG5cdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdGNhcmV0U2l6ZTogdG9vbHRpcE9wdHMuY2FyZXRTaXplLFxuXHRcdGNvcm5lclJhZGl1czogdG9vbHRpcE9wdHMuY29ybmVyUmFkaXVzLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdG9vbHRpcE9wdHMuYmFja2dyb3VuZENvbG9yLFxuXHRcdG9wYWNpdHk6IDAsXG5cdFx0bGVnZW5kQ29sb3JCYWNrZ3JvdW5kOiB0b29sdGlwT3B0cy5tdWx0aUtleUJhY2tncm91bmQsXG5cdFx0ZGlzcGxheUNvbG9yczogdG9vbHRpcE9wdHMuZGlzcGxheUNvbG9ycyxcblx0XHRib3JkZXJDb2xvcjogdG9vbHRpcE9wdHMuYm9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyV2lkdGg6IHRvb2x0aXBPcHRzLmJvcmRlcldpZHRoXG5cdH07XG59XG5cbi8qKlxuICogR2V0IHRoZSBzaXplIG9mIHRoZSB0b29sdGlwXG4gKi9cbmZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG1vZGVsKSB7XG5cdHZhciBjdHggPSB0b29sdGlwLl9jaGFydC5jdHg7XG5cblx0dmFyIGhlaWdodCA9IG1vZGVsLnlQYWRkaW5nICogMjsgLy8gVG9vbHRpcCBQYWRkaW5nXG5cdHZhciB3aWR0aCA9IDA7XG5cblx0Ly8gQ291bnQgb2YgYWxsIGxpbmVzIGluIHRoZSBib2R5XG5cdHZhciBib2R5ID0gbW9kZWwuYm9keTtcblx0dmFyIGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKGZ1bmN0aW9uKGNvdW50LCBib2R5SXRlbSkge1xuXHRcdHJldHVybiBjb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGg7XG5cdH0sIDApO1xuXHRjb21iaW5lZEJvZHlMZW5ndGggKz0gbW9kZWwuYmVmb3JlQm9keS5sZW5ndGggKyBtb2RlbC5hZnRlckJvZHkubGVuZ3RoO1xuXG5cdHZhciB0aXRsZUxpbmVDb3VudCA9IG1vZGVsLnRpdGxlLmxlbmd0aDtcblx0dmFyIGZvb3RlckxpbmVDb3VudCA9IG1vZGVsLmZvb3Rlci5sZW5ndGg7XG5cdHZhciB0aXRsZUZvbnRTaXplID0gbW9kZWwudGl0bGVGb250U2l6ZTtcblx0dmFyIGJvZHlGb250U2l6ZSA9IG1vZGVsLmJvZHlGb250U2l6ZTtcblx0dmFyIGZvb3RlckZvbnRTaXplID0gbW9kZWwuZm9vdGVyRm9udFNpemU7XG5cblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ICogdGl0bGVGb250U2l6ZTsgLy8gVGl0bGUgTGluZXNcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gKHRpdGxlTGluZUNvdW50IC0gMSkgKiBtb2RlbC50aXRsZVNwYWNpbmcgOiAwOyAvLyBUaXRsZSBMaW5lIFNwYWNpbmdcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gbW9kZWwudGl0bGVNYXJnaW5Cb3R0b20gOiAwOyAvLyBUaXRsZSdzIGJvdHRvbSBNYXJnaW5cblx0aGVpZ2h0ICs9IGNvbWJpbmVkQm9keUxlbmd0aCAqIGJvZHlGb250U2l6ZTsgLy8gQm9keSBMaW5lc1xuXHRoZWlnaHQgKz0gY29tYmluZWRCb2R5TGVuZ3RoID8gKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogbW9kZWwuYm9keVNwYWNpbmcgOiAwOyAvLyBCb2R5IExpbmUgU3BhY2luZ1xuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ID8gbW9kZWwuZm9vdGVyTWFyZ2luVG9wIDogMDsgLy8gRm9vdGVyIE1hcmdpblxuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ICogKGZvb3RlckZvbnRTaXplKTsgLy8gRm9vdGVyIExpbmVzXG5cdGhlaWdodCArPSBmb290ZXJMaW5lQ291bnQgPyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBtb2RlbC5mb290ZXJTcGFjaW5nIDogMDsgLy8gRm9vdGVyIExpbmUgU3BhY2luZ1xuXG5cdC8vIFRpdGxlIHdpZHRoXG5cdHZhciB3aWR0aFBhZGRpbmcgPSAwO1xuXHR2YXIgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuXHRcdHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG5cdH07XG5cblx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyh0aXRsZUZvbnRTaXplLCBtb2RlbC5fdGl0bGVGb250U3R5bGUsIG1vZGVsLl90aXRsZUZvbnRGYW1pbHkpO1xuXHRoZWxwZXJzJDEuZWFjaChtb2RlbC50aXRsZSwgbWF4TGluZVdpZHRoKTtcblxuXHQvLyBCb2R5IHdpZHRoXG5cdGN0eC5mb250ID0gaGVscGVycyQxLmZvbnRTdHJpbmcoYm9keUZvbnRTaXplLCBtb2RlbC5fYm9keUZvbnRTdHlsZSwgbW9kZWwuX2JvZHlGb250RmFtaWx5KTtcblx0aGVscGVycyQxLmVhY2gobW9kZWwuYmVmb3JlQm9keS5jb25jYXQobW9kZWwuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcblxuXHQvLyBCb2R5IGxpbmVzIG1heSBpbmNsdWRlIHNvbWUgZXh0cmEgd2lkdGggZHVlIHRvIHRoZSBjb2xvciBib3hcblx0d2lkdGhQYWRkaW5nID0gbW9kZWwuZGlzcGxheUNvbG9ycyA/IChib2R5Rm9udFNpemUgKyAyKSA6IDA7XG5cdGhlbHBlcnMkMS5lYWNoKGJvZHksIGZ1bmN0aW9uKGJvZHlJdGVtKSB7XG5cdFx0aGVscGVycyQxLmVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGJvZHlJdGVtLmxpbmVzLCBtYXhMaW5lV2lkdGgpO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGJvZHlJdGVtLmFmdGVyLCBtYXhMaW5lV2lkdGgpO1xuXHR9KTtcblxuXHQvLyBSZXNldCBiYWNrIHRvIDBcblx0d2lkdGhQYWRkaW5nID0gMDtcblxuXHQvLyBGb290ZXIgd2lkdGhcblx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgbW9kZWwuX2Zvb3RlckZvbnRTdHlsZSwgbW9kZWwuX2Zvb3RlckZvbnRGYW1pbHkpO1xuXHRoZWxwZXJzJDEuZWFjaChtb2RlbC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG5cblx0Ly8gQWRkIHBhZGRpbmdcblx0d2lkdGggKz0gMiAqIG1vZGVsLnhQYWRkaW5nO1xuXG5cdHJldHVybiB7XG5cdFx0d2lkdGg6IHdpZHRoLFxuXHRcdGhlaWdodDogaGVpZ2h0XG5cdH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgYWxpZ25tZW50IG9mIGEgdG9vbHRpcCBnaXZlbiB0aGUgc2l6ZVxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQodG9vbHRpcCwgc2l6ZSkge1xuXHR2YXIgbW9kZWwgPSB0b29sdGlwLl9tb2RlbDtcblx0dmFyIGNoYXJ0ID0gdG9vbHRpcC5fY2hhcnQ7XG5cdHZhciBjaGFydEFyZWEgPSB0b29sdGlwLl9jaGFydC5jaGFydEFyZWE7XG5cdHZhciB4QWxpZ24gPSAnY2VudGVyJztcblx0dmFyIHlBbGlnbiA9ICdjZW50ZXInO1xuXG5cdGlmIChtb2RlbC55IDwgc2l6ZS5oZWlnaHQpIHtcblx0XHR5QWxpZ24gPSAndG9wJztcblx0fSBlbHNlIGlmIChtb2RlbC55ID4gKGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KSkge1xuXHRcdHlBbGlnbiA9ICdib3R0b20nO1xuXHR9XG5cblx0dmFyIGxmLCByZjsgLy8gZnVuY3Rpb25zIHRvIGRldGVybWluZSBsZWZ0LCByaWdodCBhbGlnbm1lbnRcblx0dmFyIG9sZiwgb3JmOyAvLyBmdW5jdGlvbnMgdG8gZGV0ZXJtaW5lIGlmIGxlZnQvcmlnaHQgYWxpZ25tZW50IGNhdXNlcyB0b29sdGlwIHRvIGdvIG91dHNpZGUgY2hhcnRcblx0dmFyIHlmOyAvLyBmdW5jdGlvbiB0byBnZXQgdGhlIHkgYWxpZ25tZW50IGlmIHRoZSB0b29sdGlwIGdvZXMgb3V0c2lkZSBvZiB0aGUgbGVmdCBvciByaWdodCBlZGdlc1xuXHR2YXIgbWlkWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuXHR2YXIgbWlkWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuXG5cdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0bGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA8PSBtaWRYO1xuXHRcdH07XG5cdFx0cmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA+IG1pZFg7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRsZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4IDw9IChzaXplLndpZHRoIC8gMik7XG5cdFx0fTtcblx0XHRyZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4ID49IChjaGFydC53aWR0aCAtIChzaXplLndpZHRoIC8gMikpO1xuXHRcdH07XG5cdH1cblxuXHRvbGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0cmV0dXJuIHggKyBzaXplLndpZHRoICsgbW9kZWwuY2FyZXRTaXplICsgbW9kZWwuY2FyZXRQYWRkaW5nID4gY2hhcnQud2lkdGg7XG5cdH07XG5cdG9yZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRyZXR1cm4geCAtIHNpemUud2lkdGggLSBtb2RlbC5jYXJldFNpemUgLSBtb2RlbC5jYXJldFBhZGRpbmcgPCAwO1xuXHR9O1xuXHR5ZiA9IGZ1bmN0aW9uKHkpIHtcblx0XHRyZXR1cm4geSA8PSBtaWRZID8gJ3RvcCcgOiAnYm90dG9tJztcblx0fTtcblxuXHRpZiAobGYobW9kZWwueCkpIHtcblx0XHR4QWxpZ24gPSAnbGVmdCc7XG5cblx0XHQvLyBJcyB0b29sdGlwIHRvbyB3aWRlIGFuZCBnb2VzIG92ZXIgdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGNoYXJ0Lj9cblx0XHRpZiAob2xmKG1vZGVsLngpKSB7XG5cdFx0XHR4QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdHlBbGlnbiA9IHlmKG1vZGVsLnkpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChyZihtb2RlbC54KSkge1xuXHRcdHhBbGlnbiA9ICdyaWdodCc7XG5cblx0XHQvLyBJcyB0b29sdGlwIHRvbyB3aWRlIGFuZCBnb2VzIG91dHNpZGUgbGVmdCBlZGdlIG9mIGNhbnZhcz9cblx0XHRpZiAob3JmKG1vZGVsLngpKSB7XG5cdFx0XHR4QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdHlBbGlnbiA9IHlmKG1vZGVsLnkpO1xuXHRcdH1cblx0fVxuXG5cdHZhciBvcHRzID0gdG9vbHRpcC5fb3B0aW9ucztcblx0cmV0dXJuIHtcblx0XHR4QWxpZ246IG9wdHMueEFsaWduID8gb3B0cy54QWxpZ24gOiB4QWxpZ24sXG5cdFx0eUFsaWduOiBvcHRzLnlBbGlnbiA/IG9wdHMueUFsaWduIDogeUFsaWduXG5cdH07XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGdldCB0aGUgbG9jYXRpb24gYSB0b29sdGlwIG5lZWRzIHRvIGJlIHBsYWNlZCBhdCBnaXZlbiB0aGUgaW5pdGlhbCBwb3NpdGlvbiAodmlhIHRoZSB2bSkgYW5kIHRoZSBzaXplIGFuZCBhbGlnbm1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZFBvaW50KHZtLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG5cdC8vIEJhY2tncm91bmQgUG9zaXRpb25cblx0dmFyIHggPSB2bS54O1xuXHR2YXIgeSA9IHZtLnk7XG5cblx0dmFyIGNhcmV0U2l6ZSA9IHZtLmNhcmV0U2l6ZTtcblx0dmFyIGNhcmV0UGFkZGluZyA9IHZtLmNhcmV0UGFkZGluZztcblx0dmFyIGNvcm5lclJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblx0dmFyIHhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG5cdHZhciB5QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuXHR2YXIgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG5cdHZhciByYWRpdXNBbmRQYWRkaW5nID0gY29ybmVyUmFkaXVzICsgY2FyZXRQYWRkaW5nO1xuXG5cdGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHR4IC09IHNpemUud2lkdGg7XG5cdH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuXHRcdHggLT0gKHNpemUud2lkdGggLyAyKTtcblx0XHRpZiAoeCArIHNpemUud2lkdGggPiBjaGFydC53aWR0aCkge1xuXHRcdFx0eCA9IGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aDtcblx0XHR9XG5cdFx0aWYgKHggPCAwKSB7XG5cdFx0XHR4ID0gMDtcblx0XHR9XG5cdH1cblxuXHRpZiAoeUFsaWduID09PSAndG9wJykge1xuXHRcdHkgKz0gcGFkZGluZ0FuZFNpemU7XG5cdH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuXHRcdHkgLT0gc2l6ZS5oZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcblx0fSBlbHNlIHtcblx0XHR5IC09IChzaXplLmhlaWdodCAvIDIpO1xuXHR9XG5cblx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdHggKz0gcGFkZGluZ0FuZFNpemU7XG5cdFx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdHggLT0gcGFkZGluZ0FuZFNpemU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0eCAtPSByYWRpdXNBbmRQYWRkaW5nO1xuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdHggKz0gcmFkaXVzQW5kUGFkZGluZztcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0eDogeCxcblx0XHR5OiB5XG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldEFsaWduZWRYKHZtLCBhbGlnbikge1xuXHRyZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInXG5cdFx0PyB2bS54ICsgdm0ud2lkdGggLyAyXG5cdFx0OiBhbGlnbiA9PT0gJ3JpZ2h0J1xuXHRcdFx0PyB2bS54ICsgdm0ud2lkdGggLSB2bS54UGFkZGluZ1xuXHRcdFx0OiB2bS54ICsgdm0ueFBhZGRpbmc7XG59XG5cbi8qKlxuICogSGVscGVyIHRvIGJ1aWxkIGJlZm9yZSBhbmQgYWZ0ZXIgYm9keSBsaW5lc1xuICovXG5mdW5jdGlvbiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhjYWxsYmFjaykge1xuXHRyZXR1cm4gcHVzaE9yQ29uY2F0KFtdLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrKSk7XG59XG5cbnZhciBleHBvcnRzJDQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fbW9kZWwgPSBnZXRCYXNlTW9kZWwodGhpcy5fb3B0aW9ucyk7XG5cdFx0dGhpcy5fbGFzdEFjdGl2ZSA9IFtdO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgdGl0bGVcblx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0Z2V0VGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5fb3B0aW9ucztcblx0XHR2YXIgY2FsbGJhY2tzID0gb3B0cy5jYWxsYmFja3M7XG5cblx0XHR2YXIgYmVmb3JlVGl0bGUgPSBjYWxsYmFja3MuYmVmb3JlVGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0dmFyIHRpdGxlID0gY2FsbGJhY2tzLnRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBhZnRlclRpdGxlID0gY2FsbGJhY2tzLmFmdGVyVGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cblx0XHR2YXIgbGluZXMgPSBbXTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG5cdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuXG5cdFx0cmV0dXJuIGxpbmVzO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEJlZm9yZUJvZHk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyh0aGlzLl9vcHRpb25zLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEJvZHk6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtcywgZGF0YSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblx0XHR2YXIgYm9keUl0ZW1zID0gW107XG5cblx0XHRoZWxwZXJzJDEuZWFjaCh0b29sdGlwSXRlbXMsIGZ1bmN0aW9uKHRvb2x0aXBJdGVtKSB7XG5cdFx0XHR2YXIgYm9keUl0ZW0gPSB7XG5cdFx0XHRcdGJlZm9yZTogW10sXG5cdFx0XHRcdGxpbmVzOiBbXSxcblx0XHRcdFx0YWZ0ZXI6IFtdXG5cdFx0XHR9O1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhjYWxsYmFja3MuYmVmb3JlTGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKSk7XG5cdFx0XHRwdXNoT3JDb25jYXQoYm9keUl0ZW0ubGluZXMsIGNhbGxiYWNrcy5sYWJlbC5jYWxsKG1lLCB0b29sdGlwSXRlbSwgZGF0YSkpO1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrcy5hZnRlckxhYmVsLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBkYXRhKSkpO1xuXG5cdFx0XHRib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYm9keUl0ZW1zO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEFmdGVyQm9keTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKHRoaXMuX29wdGlvbnMuY2FsbGJhY2tzLmFmdGVyQm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIGZvb3RlciBhbmQgYmVmb3JlRm9vdGVyIGFuZCBhZnRlckZvb3RlciBsaW5lc1xuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRGb290ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblxuXHRcdHZhciBiZWZvcmVGb290ZXIgPSBjYWxsYmFja3MuYmVmb3JlRm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBhZnRlckZvb3RlciA9IGNhbGxiYWNrcy5hZnRlckZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdHZhciBsaW5lcyA9IFtdO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG5cblx0XHRyZXR1cm4gbGluZXM7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbihjaGFuZ2VkKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLl9vcHRpb25zO1xuXG5cdFx0Ly8gTmVlZCB0byByZWdlbmVyYXRlIHRoZSBtb2RlbCBiZWNhdXNlIGl0cyBmYXN0ZXIgdGhhbiB1c2luZyBleHRlbmQgYW5kIGl0IGlzIG5lY2Vzc2FyeSBkdWUgdG8gdGhlIG9wdGltaXphdGlvbiBpbiBDaGFydC5FbGVtZW50LnRyYW5zaXRpb25cblx0XHQvLyB0aGF0IGRvZXMgX3ZpZXcgPSBfbW9kZWwgaWYgZWFzZSA9PT0gMS4gVGhpcyBjYXVzZXMgdGhlIDJuZCB0b29sdGlwIHVwZGF0ZSB0byBzZXQgcHJvcGVydGllcyBpbiBib3RoIHRoZSB2aWV3IGFuZCBtb2RlbCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0Ly8gd2hpY2ggYnJlYWtzIGFueSBhbmltYXRpb25zLlxuXHRcdHZhciBleGlzdGluZ01vZGVsID0gbWUuX21vZGVsO1xuXHRcdHZhciBtb2RlbCA9IG1lLl9tb2RlbCA9IGdldEJhc2VNb2RlbChvcHRzKTtcblx0XHR2YXIgYWN0aXZlID0gbWUuX2FjdGl2ZTtcblxuXHRcdHZhciBkYXRhID0gbWUuX2RhdGE7XG5cblx0XHQvLyBJbiB0aGUgY2FzZSB3aGVyZSBhY3RpdmUubGVuZ3RoID09PSAwIHdlIG5lZWQgdG8ga2VlcCB0aGVzZSBhdCBleGlzdGluZyB2YWx1ZXMgZm9yIGdvb2QgYW5pbWF0aW9uc1xuXHRcdHZhciBhbGlnbm1lbnQgPSB7XG5cdFx0XHR4QWxpZ246IGV4aXN0aW5nTW9kZWwueEFsaWduLFxuXHRcdFx0eUFsaWduOiBleGlzdGluZ01vZGVsLnlBbGlnblxuXHRcdH07XG5cdFx0dmFyIGJhY2tncm91bmRQb2ludCA9IHtcblx0XHRcdHg6IGV4aXN0aW5nTW9kZWwueCxcblx0XHRcdHk6IGV4aXN0aW5nTW9kZWwueVxuXHRcdH07XG5cdFx0dmFyIHRvb2x0aXBTaXplID0ge1xuXHRcdFx0d2lkdGg6IGV4aXN0aW5nTW9kZWwud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGV4aXN0aW5nTW9kZWwuaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgdG9vbHRpcFBvc2l0aW9uID0ge1xuXHRcdFx0eDogZXhpc3RpbmdNb2RlbC5jYXJldFgsXG5cdFx0XHR5OiBleGlzdGluZ01vZGVsLmNhcmV0WVxuXHRcdH07XG5cblx0XHR2YXIgaSwgbGVuO1xuXG5cdFx0aWYgKGFjdGl2ZS5sZW5ndGgpIHtcblx0XHRcdG1vZGVsLm9wYWNpdHkgPSAxO1xuXG5cdFx0XHR2YXIgbGFiZWxDb2xvcnMgPSBbXTtcblx0XHRcdHZhciBsYWJlbFRleHRDb2xvcnMgPSBbXTtcblx0XHRcdHRvb2x0aXBQb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdHMucG9zaXRpb25dLmNhbGwobWUsIGFjdGl2ZSwgbWUuX2V2ZW50UG9zaXRpb24pO1xuXG5cdFx0XHR2YXIgdG9vbHRpcEl0ZW1zID0gW107XG5cdFx0XHRmb3IgKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0oYWN0aXZlW2ldKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZSB1c2VyIHByb3ZpZGVkIGEgZmlsdGVyIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5maWx0ZXIpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcihmdW5jdGlvbihhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuZmlsdGVyKGEsIGRhdGEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSBzb3J0aW5nIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5pdGVtU29ydCkge1xuXHRcdFx0XHR0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuaXRlbVNvcnQoYSwgYiwgZGF0YSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlcm1pbmUgY29sb3JzIGZvciBib3hlc1xuXHRcdFx0aGVscGVycyQxLmVhY2godG9vbHRpcEl0ZW1zLCBmdW5jdGlvbih0b29sdGlwSXRlbSkge1xuXHRcdFx0XHRsYWJlbENvbG9ycy5wdXNoKG9wdHMuY2FsbGJhY2tzLmxhYmVsQ29sb3IuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIG1lLl9jaGFydCkpO1xuXHRcdFx0XHRsYWJlbFRleHRDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbFRleHRDb2xvci5jYWxsKG1lLCB0b29sdGlwSXRlbSwgbWUuX2NoYXJ0KSk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHQvLyBCdWlsZCB0aGUgVGV4dCBMaW5lc1xuXHRcdFx0bW9kZWwudGl0bGUgPSBtZS5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0bW9kZWwuYmVmb3JlQm9keSA9IG1lLmdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmJvZHkgPSBtZS5nZXRCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5hZnRlckJvZHkgPSBtZS5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmZvb3RlciA9IG1lLmdldEZvb3Rlcih0b29sdGlwSXRlbXMsIGRhdGEpO1xuXG5cdFx0XHQvLyBJbml0aWFsIHBvc2l0aW9uaW5nIGFuZCBjb2xvcnNcblx0XHRcdG1vZGVsLnggPSB0b29sdGlwUG9zaXRpb24ueDtcblx0XHRcdG1vZGVsLnkgPSB0b29sdGlwUG9zaXRpb24ueTtcblx0XHRcdG1vZGVsLmNhcmV0UGFkZGluZyA9IG9wdHMuY2FyZXRQYWRkaW5nO1xuXHRcdFx0bW9kZWwubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcblx0XHRcdG1vZGVsLmxhYmVsVGV4dENvbG9ycyA9IGxhYmVsVGV4dENvbG9ycztcblxuXHRcdFx0Ly8gZGF0YSBwb2ludHNcblx0XHRcdG1vZGVsLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG5cblx0XHRcdC8vIFdlIG5lZWQgdG8gZGV0ZXJtaW5lIGFsaWdubWVudCBvZiB0aGUgdG9vbHRpcFxuXHRcdFx0dG9vbHRpcFNpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBtb2RlbCk7XG5cdFx0XHRhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcywgdG9vbHRpcFNpemUpO1xuXHRcdFx0Ly8gRmluYWwgU2l6ZSBhbmQgUG9zaXRpb25cblx0XHRcdGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChtb2RlbCwgdG9vbHRpcFNpemUsIGFsaWdubWVudCwgbWUuX2NoYXJ0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bW9kZWwub3BhY2l0eSA9IDA7XG5cdFx0fVxuXG5cdFx0bW9kZWwueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcblx0XHRtb2RlbC55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuXHRcdG1vZGVsLnggPSBiYWNrZ3JvdW5kUG9pbnQueDtcblx0XHRtb2RlbC55ID0gYmFja2dyb3VuZFBvaW50Lnk7XG5cdFx0bW9kZWwud2lkdGggPSB0b29sdGlwU2l6ZS53aWR0aDtcblx0XHRtb2RlbC5oZWlnaHQgPSB0b29sdGlwU2l6ZS5oZWlnaHQ7XG5cblx0XHQvLyBQb2ludCB3aGVyZSB0aGUgY2FyZXQgb24gdGhlIHRvb2x0aXAgcG9pbnRzIHRvXG5cdFx0bW9kZWwuY2FyZXRYID0gdG9vbHRpcFBvc2l0aW9uLng7XG5cdFx0bW9kZWwuY2FyZXRZID0gdG9vbHRpcFBvc2l0aW9uLnk7XG5cblx0XHRtZS5fbW9kZWwgPSBtb2RlbDtcblxuXHRcdGlmIChjaGFuZ2VkICYmIG9wdHMuY3VzdG9tKSB7XG5cdFx0XHRvcHRzLmN1c3RvbS5jYWxsKG1lLCBtb2RlbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdGRyYXdDYXJldDogZnVuY3Rpb24odG9vbHRpcFBvaW50LCBzaXplKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgdm0pO1xuXG5cdFx0Y3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngxLCBjYXJldFBvc2l0aW9uLnkxKTtcblx0XHRjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuXHRcdGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG5cdH0sXG5cdGdldENhcmV0UG9zaXRpb246IGZ1bmN0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgdm0pIHtcblx0XHR2YXIgeDEsIHgyLCB4MywgeTEsIHkyLCB5Mztcblx0XHR2YXIgY2FyZXRTaXplID0gdm0uY2FyZXRTaXplO1xuXHRcdHZhciBjb3JuZXJSYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cdFx0dmFyIHhBbGlnbiA9IHZtLnhBbGlnbjtcblx0XHR2YXIgeUFsaWduID0gdm0ueUFsaWduO1xuXHRcdHZhciBwdFggPSB0b29sdGlwUG9pbnQueDtcblx0XHR2YXIgcHRZID0gdG9vbHRpcFBvaW50Lnk7XG5cdFx0dmFyIHdpZHRoID0gc2l6ZS53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuXHRcdFx0eTIgPSBwdFkgKyAoaGVpZ2h0IC8gMik7XG5cblx0XHRcdGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0XHR4MSA9IHB0WDtcblx0XHRcdFx0eDIgPSB4MSAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHR5MSA9IHkyICsgY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkyIC0gY2FyZXRTaXplO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eDEgPSBwdFggKyB3aWR0aDtcblx0XHRcdFx0eDIgPSB4MSArIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHR5MSA9IHkyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkyICsgY2FyZXRTaXplO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdFx0eDIgPSBwdFggKyBjb3JuZXJSYWRpdXMgKyAoY2FyZXRTaXplKTtcblx0XHRcdFx0eDEgPSB4MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MiArIGNhcmV0U2l6ZTtcblx0XHRcdH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHRcdHgyID0gcHRYICsgd2lkdGggLSBjb3JuZXJSYWRpdXMgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR4MiA9IHZtLmNhcmV0WDtcblx0XHRcdFx0eDEgPSB4MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eDMgPSB4MiArIGNhcmV0U2l6ZTtcblx0XHRcdH1cblx0XHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHRcdHkxID0gcHRZO1xuXHRcdFx0XHR5MiA9IHkxIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkxO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eTEgPSBwdFkgKyBoZWlnaHQ7XG5cdFx0XHRcdHkyID0geTEgKyBjYXJldFNpemU7XG5cdFx0XHRcdHkzID0geTE7XG5cdFx0XHRcdC8vIGludmVydCBkcmF3aW5nIG9yZGVyXG5cdFx0XHRcdHZhciB0bXAgPSB4Mztcblx0XHRcdFx0eDMgPSB4MTtcblx0XHRcdFx0eDEgPSB0bXA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB7eDE6IHgxLCB4MjogeDIsIHgzOiB4MywgeTE6IHkxLCB5MjogeTIsIHkzOiB5M307XG5cdH0sXG5cblx0ZHJhd1RpdGxlOiBmdW5jdGlvbihwdCwgdm0sIGN0eCkge1xuXHRcdHZhciB0aXRsZSA9IHZtLnRpdGxlO1xuXHRcdHZhciBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG5cdFx0dmFyIHRpdGxlRm9udFNpemUsIHRpdGxlU3BhY2luZywgaTtcblxuXHRcdGlmIChsZW5ndGgpIHtcblx0XHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIodm0ucnRsLCB2bS54LCB2bS53aWR0aCk7XG5cblx0XHRcdHB0LnggPSBnZXRBbGlnbmVkWCh2bSwgdm0uX3RpdGxlQWxpZ24pO1xuXG5cdFx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbih2bS5fdGl0bGVBbGlnbik7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHRcdHRpdGxlRm9udFNpemUgPSB2bS50aXRsZUZvbnRTaXplO1xuXHRcdFx0dGl0bGVTcGFjaW5nID0gdm0udGl0bGVTcGFjaW5nO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdm0udGl0bGVGb250Q29sb3I7XG5cdFx0XHRjdHguZm9udCA9IGhlbHBlcnMkMS5mb250U3RyaW5nKHRpdGxlRm9udFNpemUsIHZtLl90aXRsZUZvbnRTdHlsZSwgdm0uX3RpdGxlRm9udEZhbWlseSk7XG5cblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250U2l6ZSAvIDIpO1xuXHRcdFx0XHRwdC55ICs9IHRpdGxlRm9udFNpemUgKyB0aXRsZVNwYWNpbmc7IC8vIExpbmUgSGVpZ2h0IGFuZCBzcGFjaW5nXG5cblx0XHRcdFx0aWYgKGkgKyAxID09PSBsZW5ndGgpIHtcblx0XHRcdFx0XHRwdC55ICs9IHZtLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nOyAvLyBJZiBMYXN0LCBhZGQgbWFyZ2luLCByZW1vdmUgc3BhY2luZ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXdCb2R5OiBmdW5jdGlvbihwdCwgdm0sIGN0eCkge1xuXHRcdHZhciBib2R5Rm9udFNpemUgPSB2bS5ib2R5Rm9udFNpemU7XG5cdFx0dmFyIGJvZHlTcGFjaW5nID0gdm0uYm9keVNwYWNpbmc7XG5cdFx0dmFyIGJvZHlBbGlnbiA9IHZtLl9ib2R5QWxpZ247XG5cdFx0dmFyIGJvZHkgPSB2bS5ib2R5O1xuXHRcdHZhciBkcmF3Q29sb3JCb3hlcyA9IHZtLmRpc3BsYXlDb2xvcnM7XG5cdFx0dmFyIHhMaW5lUGFkZGluZyA9IDA7XG5cdFx0dmFyIGNvbG9yWCA9IGRyYXdDb2xvckJveGVzID8gZ2V0QWxpZ25lZFgodm0sICdsZWZ0JykgOiAwO1xuXG5cdFx0dmFyIHJ0bEhlbHBlciA9IGdldFJ0bEhlbHBlcih2bS5ydGwsIHZtLngsIHZtLndpZHRoKTtcblxuXHRcdHZhciBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRcdGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlGb250U2l6ZSAvIDIpO1xuXHRcdFx0cHQueSArPSBib2R5Rm9udFNpemUgKyBib2R5U3BhY2luZztcblx0XHR9O1xuXG5cdFx0dmFyIGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxhYmVsQ29sb3JzLCBsaW5lcywgaSwgaiwgaWxlbiwgamxlbjtcblx0XHR2YXIgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG5cblx0XHRjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHguZm9udCA9IGhlbHBlcnMkMS5mb250U3RyaW5nKGJvZHlGb250U2l6ZSwgdm0uX2JvZHlGb250U3R5bGUsIHZtLl9ib2R5Rm9udEZhbWlseSk7XG5cblx0XHRwdC54ID0gZ2V0QWxpZ25lZFgodm0sIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uKTtcblxuXHRcdC8vIEJlZm9yZSBib2R5IGxpbmVzXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJvZHlGb250Q29sb3I7XG5cdFx0aGVscGVycyQxLmVhY2godm0uYmVmb3JlQm9keSwgZmlsbExpbmVPZlRleHQpO1xuXG5cdFx0eExpbmVQYWRkaW5nID0gZHJhd0NvbG9yQm94ZXMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCdcblx0XHRcdD8gYm9keUFsaWduID09PSAnY2VudGVyJyA/IChib2R5Rm9udFNpemUgLyAyICsgMSkgOiAoYm9keUZvbnRTaXplICsgMilcblx0XHRcdDogMDtcblxuXHRcdC8vIERyYXcgYm9keSBsaW5lcyBub3dcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGJvZHlJdGVtID0gYm9keVtpXTtcblx0XHRcdHRleHRDb2xvciA9IHZtLmxhYmVsVGV4dENvbG9yc1tpXTtcblx0XHRcdGxhYmVsQ29sb3JzID0gdm0ubGFiZWxDb2xvcnNbaV07XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG5cdFx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdFx0bGluZXMgPSBib2R5SXRlbS5saW5lcztcblx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSBsaW5lcy5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0Ly8gRHJhdyBMZWdlbmQtbGlrZSBib3hlcyBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKGRyYXdDb2xvckJveGVzKSB7XG5cdFx0XHRcdFx0dmFyIHJ0bENvbG9yWCA9IHJ0bEhlbHBlci54KGNvbG9yWCk7XG5cblx0XHRcdFx0XHQvLyBGaWxsIGEgd2hpdGUgcmVjdCBzbyB0aGF0IGNvbG91cnMgbWVyZ2UgbmljZWx5IGlmIHRoZSBvcGFjaXR5IGlzIDwgMVxuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB2bS5sZWdlbmRDb2xvckJhY2tncm91bmQ7XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm9keUZvbnRTaXplKSwgcHQueSwgYm9keUZvbnRTaXplLCBib2R5Rm9udFNpemUpO1xuXG5cdFx0XHRcdFx0Ly8gQm9yZGVyXG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib2R5Rm9udFNpemUpLCBwdC55LCBib2R5Rm9udFNpemUsIGJvZHlGb250U2l6ZSk7XG5cblx0XHRcdFx0XHQvLyBJbm5lciBzcXVhcmVcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdChydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueFBsdXMocnRsQ29sb3JYLCAxKSwgYm9keUZvbnRTaXplIC0gMiksIHB0LnkgKyAxLCBib2R5Rm9udFNpemUgLSAyLCBib2R5Rm9udFNpemUgLSAyKTtcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzJDEuZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IGJhY2sgdG8gMCBmb3IgYWZ0ZXIgYm9keVxuXHRcdHhMaW5lUGFkZGluZyA9IDA7XG5cblx0XHQvLyBBZnRlciBib2R5IGxpbmVzXG5cdFx0aGVscGVycyQxLmVhY2godm0uYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG5cdFx0cHQueSAtPSBib2R5U3BhY2luZzsgLy8gUmVtb3ZlIGxhc3QgYm9keSBzcGFjaW5nXG5cdH0sXG5cblx0ZHJhd0Zvb3RlcjogZnVuY3Rpb24ocHQsIHZtLCBjdHgpIHtcblx0XHR2YXIgZm9vdGVyID0gdm0uZm9vdGVyO1xuXHRcdHZhciBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuXHRcdHZhciBmb290ZXJGb250U2l6ZSwgaTtcblxuXHRcdGlmIChsZW5ndGgpIHtcblx0XHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIodm0ucnRsLCB2bS54LCB2bS53aWR0aCk7XG5cblx0XHRcdHB0LnggPSBnZXRBbGlnbmVkWCh2bSwgdm0uX2Zvb3RlckFsaWduKTtcblx0XHRcdHB0LnkgKz0gdm0uZm9vdGVyTWFyZ2luVG9wO1xuXG5cdFx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbih2bS5fZm9vdGVyQWxpZ24pO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXG5cdFx0XHRmb290ZXJGb250U2l6ZSA9IHZtLmZvb3RlckZvbnRTaXplO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdm0uZm9vdGVyRm9udENvbG9yO1xuXHRcdFx0Y3R4LmZvbnQgPSBoZWxwZXJzJDEuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgdm0uX2Zvb3RlckZvbnRTdHlsZSwgdm0uX2Zvb3RlckZvbnRGYW1pbHkpO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250U2l6ZSAvIDIpO1xuXHRcdFx0XHRwdC55ICs9IGZvb3RlckZvbnRTaXplICsgdm0uZm9vdGVyU3BhY2luZztcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0ZHJhd0JhY2tncm91bmQ6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCB0b29sdGlwU2l6ZSkge1xuXHRcdGN0eC5maWxsU3R5bGUgPSB2bS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3I7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHR2YXIgeCA9IHB0Lng7XG5cdFx0dmFyIHkgPSBwdC55O1xuXHRcdHZhciB3aWR0aCA9IHRvb2x0aXBTaXplLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0b29sdGlwU2l6ZS5oZWlnaHQ7XG5cdFx0dmFyIHJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHR0aGlzLmRyYXdDYXJldChwdCwgdG9vbHRpcFNpemUpO1xuXHRcdH1cblx0XHRjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByYWRpdXMpO1xuXHRcdGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgcmFkaXVzLCB5KTtcblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoID4gMCkge1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0ub3BhY2l0eSA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciB0b29sdGlwU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiB2bS53aWR0aCxcblx0XHRcdGhlaWdodDogdm0uaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgcHQgPSB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cblx0XHQvLyBJRTExL0VkZ2UgZG9lcyBub3QgbGlrZSB2ZXJ5IHNtYWxsIG9wYWNpdGllcywgc28gc25hcCB0byAwXG5cdFx0dmFyIG9wYWNpdHkgPSBNYXRoLmFicyh2bS5vcGFjaXR5IDwgMWUtMykgPyAwIDogdm0ub3BhY2l0eTtcblxuXHRcdC8vIFRydXRoeS9mYWxzZXkgdmFsdWUgZm9yIGVtcHR5IHRvb2x0aXBcblx0XHR2YXIgaGFzVG9vbHRpcENvbnRlbnQgPSB2bS50aXRsZS5sZW5ndGggfHwgdm0uYmVmb3JlQm9keS5sZW5ndGggfHwgdm0uYm9keS5sZW5ndGggfHwgdm0uYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB2bS5mb290ZXIubGVuZ3RoO1xuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuXHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG5cblx0XHRcdC8vIERyYXcgQmFja2dyb3VuZFxuXHRcdFx0dGhpcy5kcmF3QmFja2dyb3VuZChwdCwgdm0sIGN0eCwgdG9vbHRpcFNpemUpO1xuXG5cdFx0XHQvLyBEcmF3IFRpdGxlLCBCb2R5LCBhbmQgRm9vdGVyXG5cdFx0XHRwdC55ICs9IHZtLnlQYWRkaW5nO1xuXG5cdFx0XHRoZWxwZXJzJDEucnRsLm92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIHZtLnRleHREaXJlY3Rpb24pO1xuXG5cdFx0XHQvLyBUaXRsZXNcblx0XHRcdHRoaXMuZHJhd1RpdGxlKHB0LCB2bSwgY3R4KTtcblxuXHRcdFx0Ly8gQm9keVxuXHRcdFx0dGhpcy5kcmF3Qm9keShwdCwgdm0sIGN0eCk7XG5cblx0XHRcdC8vIEZvb3RlclxuXHRcdFx0dGhpcy5kcmF3Rm9vdGVyKHB0LCB2bSwgY3R4KTtcblxuXHRcdFx0aGVscGVycyQxLnJ0bC5yZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIHZtLnRleHREaXJlY3Rpb24pO1xuXG5cdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7SUV2ZW50fSBldmVudCAtIFRoZSBldmVudCB0byBoYW5kbGVcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIHRvb2x0aXAgY2hhbmdlZFxuXHQgKi9cblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUuX29wdGlvbnM7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdG1lLl9sYXN0QWN0aXZlID0gbWUuX2xhc3RBY3RpdmUgfHwgW107XG5cblx0XHQvLyBGaW5kIEFjdGl2ZSBFbGVtZW50cyBmb3IgdG9vbHRpcHNcblx0XHRpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG5cdFx0XHRtZS5fYWN0aXZlID0gW107XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLl9hY3RpdmUgPSBtZS5fY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMpO1xuXHRcdFx0aWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuXHRcdFx0XHRtZS5fYWN0aXZlLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciBMYXN0IEFjdGl2ZXNcblx0XHRjaGFuZ2VkID0gIWhlbHBlcnMkMS5hcnJheUVxdWFscyhtZS5fYWN0aXZlLCBtZS5fbGFzdEFjdGl2ZSk7XG5cblx0XHQvLyBPbmx5IGhhbmRsZSB0YXJnZXQgZXZlbnQgb24gdG9vbHRpcCBjaGFuZ2Vcblx0XHRpZiAoY2hhbmdlZCkge1xuXHRcdFx0bWUuX2xhc3RBY3RpdmUgPSBtZS5fYWN0aXZlO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuY3VzdG9tKSB7XG5cdFx0XHRcdG1lLl9ldmVudFBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdHg6IGUueCxcblx0XHRcdFx0XHR5OiBlLnlcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRtZS51cGRhdGUodHJ1ZSk7XG5cdFx0XHRcdG1lLnBpdm90KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdH1cbn0pO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuVG9vbHRpcC5wb3NpdGlvbmVyc1xuICovXG52YXIgcG9zaXRpb25lcnNfMSA9IHBvc2l0aW9uZXJzO1xuXG52YXIgY29yZV90b29sdGlwID0gZXhwb3J0cyQ0O1xuY29yZV90b29sdGlwLnBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnNfMTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JDkgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge30sXG5cdGV2ZW50czogW1xuXHRcdCdtb3VzZW1vdmUnLFxuXHRcdCdtb3VzZW91dCcsXG5cdFx0J2NsaWNrJyxcblx0XHQndG91Y2hzdGFydCcsXG5cdFx0J3RvdWNobW92ZSdcblx0XSxcblx0aG92ZXI6IHtcblx0XHRvbkhvdmVyOiBudWxsLFxuXHRcdG1vZGU6ICduZWFyZXN0Jyxcblx0XHRpbnRlcnNlY3Q6IHRydWUsXG5cdFx0YW5pbWF0aW9uRHVyYXRpb246IDQwMFxuXHR9LFxuXHRvbkNsaWNrOiBudWxsLFxuXHRtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuXHRyZXNwb25zaXZlOiB0cnVlLFxuXHRyZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb246IDBcbn0pO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IG1lcmdlIHRoZSBnaXZlbiBjb25maWcgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIGBzY2FsZXNgIG9wdGlvblxuICogYnkgaW5jb3Jwb3JhdGluZyBzY2FsZSBkZWZhdWx0cyBpbiBgeEF4ZXNgIGFuZCBgeUF4ZXNgIGFycmF5IGl0ZW1zLCB0aGVuXG4gKiByZXR1cm5zIGEgZGVlcCBjb3B5IG9mIHRoZSByZXN1bHQsIHRodXMgZG9lc24ndCBhbHRlciBpbnB1dHMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoLyogY29uZmlnIG9iamVjdHMgLi4uICovKSB7XG5cdHJldHVybiBoZWxwZXJzJDEubWVyZ2Uoe30sIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSwge1xuXHRcdG1lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdFx0aWYgKGtleSA9PT0gJ3hBeGVzJyB8fCBrZXkgPT09ICd5QXhlcycpIHtcblx0XHRcdFx0dmFyIHNsZW4gPSBzb3VyY2Vba2V5XS5sZW5ndGg7XG5cdFx0XHRcdHZhciBpLCB0eXBlLCBzY2FsZTtcblxuXHRcdFx0XHRpZiAoIXRhcmdldFtrZXldKSB7XG5cdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBzbGVuOyArK2kpIHtcblx0XHRcdFx0XHRzY2FsZSA9IHNvdXJjZVtrZXldW2ldO1xuXHRcdFx0XHRcdHR5cGUgPSB2YWx1ZU9yRGVmYXVsdCQ5KHNjYWxlLnR5cGUsIGtleSA9PT0gJ3hBeGVzJyA/ICdjYXRlZ29yeScgOiAnbGluZWFyJyk7XG5cblx0XHRcdFx0XHRpZiAoaSA+PSB0YXJnZXRba2V5XS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHRhcmdldFtrZXldLnB1c2goe30pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghdGFyZ2V0W2tleV1baV0udHlwZSB8fCAoc2NhbGUudHlwZSAmJiBzY2FsZS50eXBlICE9PSB0YXJnZXRba2V5XVtpXS50eXBlKSkge1xuXHRcdFx0XHRcdFx0Ly8gbmV3L3VudHlwZWQgc2NhbGUgb3IgdHlwZSBjaGFuZ2VkOiBsZXQncyBhcHBseSB0aGUgbmV3IGRlZmF1bHRzXG5cdFx0XHRcdFx0XHQvLyB0aGVuIG1lcmdlIHNvdXJjZSBzY2FsZSB0byBjb3JyZWN0bHkgb3ZlcndyaXRlIHRoZSBkZWZhdWx0cy5cblx0XHRcdFx0XHRcdGhlbHBlcnMkMS5tZXJnZSh0YXJnZXRba2V5XVtpXSwgW2NvcmVfc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHModHlwZSksIHNjYWxlXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIHNjYWxlcyB0eXBlIGFyZSB0aGUgc2FtZVxuXHRcdFx0XHRcdFx0aGVscGVycyQxLm1lcmdlKHRhcmdldFtrZXldW2ldLCBzY2FsZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IG1lcmdlIHRoZSBnaXZlbiBjb25maWcgb2JqZWN0cyBhcyB0aGUgcm9vdCBvcHRpb25zIGJ5IGhhbmRsaW5nXG4gKiBkZWZhdWx0IHNjYWxlIG9wdGlvbnMgZm9yIHRoZSBgc2NhbGVzYCBhbmQgYHNjYWxlYCBwcm9wZXJ0aWVzLCB0aGVuIHJldHVybnNcbiAqIGEgZGVlcCBjb3B5IG9mIHRoZSByZXN1bHQsIHRodXMgZG9lc24ndCBhbHRlciBpbnB1dHMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlnKC8qIGNvbmZpZyBvYmplY3RzIC4uLiAqLykge1xuXHRyZXR1cm4gaGVscGVycyQxLm1lcmdlKHt9LCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIHtcblx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRcdHZhciB0dmFsID0gdGFyZ2V0W2tleV0gfHwge307XG5cdFx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0XHRpZiAoa2V5ID09PSAnc2NhbGVzJykge1xuXHRcdFx0XHQvLyBzY2FsZSBjb25maWcgbWVyZ2luZyBpcyBjb21wbGV4LiBBZGQgb3VyIG93biBmdW5jdGlvbiBoZXJlIGZvciB0aGF0XG5cdFx0XHRcdHRhcmdldFtrZXldID0gbWVyZ2VTY2FsZUNvbmZpZyh0dmFsLCBzdmFsKTtcblx0XHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnc2NhbGUnKSB7XG5cdFx0XHRcdC8vIHVzZWQgaW4gcG9sYXIgYXJlYSAmIHJhZGFyIGNoYXJ0cyBzaW5jZSB0aGVyZSBpcyBvbmx5IG9uZSBzY2FsZVxuXHRcdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMkMS5tZXJnZSh0dmFsLCBbY29yZV9zY2FsZVNlcnZpY2UuZ2V0U2NhbGVEZWZhdWx0cyhzdmFsLnR5cGUpLCBzdmFsXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzJDEuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuXHRjb25maWcgPSBjb25maWcgfHwge307XG5cblx0Ly8gRG8gTk9UIHVzZSBtZXJnZUNvbmZpZyBmb3IgdGhlIGRhdGEgb2JqZWN0IGJlY2F1c2UgdGhpcyBtZXRob2QgbWVyZ2VzIGFycmF5c1xuXHQvLyBhbmQgc28gd291bGQgY2hhbmdlIHJlZmVyZW5jZXMgdG8gbGFiZWxzIGFuZCBkYXRhc2V0cywgcHJldmVudGluZyBkYXRhIHVwZGF0ZXMuXG5cdHZhciBkYXRhID0gY29uZmlnLmRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblx0ZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG5cdGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG5cblx0Y29uZmlnLm9wdGlvbnMgPSBtZXJnZUNvbmZpZyhcblx0XHRjb3JlX2RlZmF1bHRzLmdsb2JhbCxcblx0XHRjb3JlX2RlZmF1bHRzW2NvbmZpZy50eXBlXSxcblx0XHRjb25maWcub3B0aW9ucyB8fCB7fSk7XG5cblx0cmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNoYXJ0KSB7XG5cdHZhciBuZXdPcHRpb25zID0gY2hhcnQub3B0aW9ucztcblxuXHRoZWxwZXJzJDEuZWFjaChjaGFydC5zY2FsZXMsIGZ1bmN0aW9uKHNjYWxlKSB7XG5cdFx0Y29yZV9sYXlvdXRzLnJlbW92ZUJveChjaGFydCwgc2NhbGUpO1xuXHR9KTtcblxuXHRuZXdPcHRpb25zID0gbWVyZ2VDb25maWcoXG5cdFx0Y29yZV9kZWZhdWx0cy5nbG9iYWwsXG5cdFx0Y29yZV9kZWZhdWx0c1tjaGFydC5jb25maWcudHlwZV0sXG5cdFx0bmV3T3B0aW9ucyk7XG5cblx0Y2hhcnQub3B0aW9ucyA9IGNoYXJ0LmNvbmZpZy5vcHRpb25zID0gbmV3T3B0aW9ucztcblx0Y2hhcnQuZW5zdXJlU2NhbGVzSGF2ZUlEcygpO1xuXHRjaGFydC5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG5cblx0Ly8gVG9vbHRpcFxuXHRjaGFydC50b29sdGlwLl9vcHRpb25zID0gbmV3T3B0aW9ucy50b29sdGlwcztcblx0Y2hhcnQudG9vbHRpcC5pbml0aWFsaXplKCk7XG59XG5cbmZ1bmN0aW9uIG5leHRBdmFpbGFibGVTY2FsZUlkKGF4ZXNPcHRzLCBwcmVmaXgsIGluZGV4KSB7XG5cdHZhciBpZDtcblx0dmFyIGhhc0lkID0gZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIG9iai5pZCA9PT0gaWQ7XG5cdH07XG5cblx0ZG8ge1xuXHRcdGlkID0gcHJlZml4ICsgaW5kZXgrKztcblx0fSB3aGlsZSAoaGVscGVycyQxLmZpbmRJbmRleChheGVzT3B0cywgaGFzSWQpID49IDApO1xuXG5cdHJldHVybiBpZDtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24pIHtcblx0cmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUyTGV2ZWwobDEsIGwyKSB7XG5cdHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuIGFbbDFdID09PSBiW2wxXVxuXHRcdFx0PyBhW2wyXSAtIGJbbDJdXG5cdFx0XHQ6IGFbbDFdIC0gYltsMV07XG5cdH07XG59XG5cbnZhciBDaGFydCA9IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHR0aGlzLmNvbnN0cnVjdChpdGVtLCBjb25maWcpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmhlbHBlcnMkMS5leHRlbmQoQ2hhcnQucHJvdG90eXBlLCAvKiogQGxlbmRzIENoYXJ0ICovIHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRjb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG5cblx0XHR2YXIgY29udGV4dCA9IHBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGl0ZW0sIGNvbmZpZyk7XG5cdFx0dmFyIGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG5cdFx0dmFyIGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuXHRcdHZhciB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG5cblx0XHRtZS5pZCA9IGhlbHBlcnMkMS51aWQoKTtcblx0XHRtZS5jdHggPSBjb250ZXh0O1xuXHRcdG1lLmNhbnZhcyA9IGNhbnZhcztcblx0XHRtZS5jb25maWcgPSBjb25maWc7XG5cdFx0bWUud2lkdGggPSB3aWR0aDtcblx0XHRtZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0bWUuYXNwZWN0UmF0aW8gPSBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG5cdFx0bWUub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuXHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdG1lLl9sYXllcnMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBDaGFydCBhbmQgQ2hhcnQuQ29udHJvbGxlciBoYXZlIGJlZW4gbWVyZ2VkLFxuXHRcdCAqIHRoZSBcImluc3RhbmNlXCIgc3RpbGwgbmVlZCB0byBiZSBkZWZpbmVkIHNpbmNlIGl0IG1pZ2h0IGJlIGNhbGxlZCBmcm9tIHBsdWdpbnMuXG5cdFx0ICogQHByb3AgQ2hhcnQjY2hhcnRcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0bWUuY2hhcnQgPSBtZTtcblx0XHRtZS5jb250cm9sbGVyID0gbWU7IC8vIGNoYXJ0LmNoYXJ0LmNvbnRyb2xsZXIgI2luY2VwdGlvblxuXG5cdFx0Ly8gQWRkIHRoZSBjaGFydCBpbnN0YW5jZSB0byB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxuXHRcdENoYXJ0Lmluc3RhbmNlc1ttZS5pZF0gPSBtZTtcblxuXHRcdC8vIERlZmluZSBhbGlhcyB0byB0aGUgY29uZmlnIGRhdGE6IGBjaGFydC5kYXRhID09PSBjaGFydC5jb25maWcuZGF0YWBcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsICdkYXRhJywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1lLmNvbmZpZy5kYXRhO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0bWUuY29uZmlnLmRhdGEgPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGlmICghY29udGV4dCB8fCAhY2FudmFzKSB7XG5cdFx0XHQvLyBUaGUgZ2l2ZW4gaXRlbSBpcyBub3QgYSBjb21wYXRpYmxlIGNvbnRleHQyZCBlbGVtZW50LCBsZXQncyByZXR1cm4gYmVmb3JlIGZpbmFsaXppbmdcblx0XHRcdC8vIHRoZSBjaGFydCBpbml0aWFsaXphdGlvbiBidXQgYWZ0ZXIgc2V0dGluZyBiYXNpYyBjaGFydCAvIGNvbnRyb2xsZXIgcHJvcGVydGllcyB0aGF0XG5cdFx0XHQvLyBjYW4gaGVscCB0byBmaWd1cmUgb3V0IHRoYXQgdGhlIGNoYXJ0IGlzIG5vdCB2YWxpZCAoZS5nIGNoYXJ0LmNhbnZhcyAhPT0gbnVsbCk7XG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjgwN1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1lLmluaXRpYWxpemUoKTtcblx0XHRtZS51cGRhdGUoKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBCZWZvcmUgaW5pdCBwbHVnaW4gbm90aWZpY2F0aW9uXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUluaXQnKTtcblxuXHRcdGhlbHBlcnMkMS5yZXRpbmFTY2FsZShtZSwgbWUub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdG1lLmJpbmRFdmVudHMoKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLnJlc3BvbnNpdmUpIHtcblx0XHRcdC8vIEluaXRpYWwgcmVzaXplIGJlZm9yZSBjaGFydCBkcmF3cyAobXVzdCBiZSBzaWxlbnQgdG8gcHJlc2VydmUgaW5pdGlhbCBhbmltYXRpb25zKS5cblx0XHRcdG1lLnJlc2l6ZSh0cnVlKTtcblx0XHR9XG5cblx0XHRtZS5pbml0VG9vbFRpcCgpO1xuXG5cdFx0Ly8gQWZ0ZXIgaW5pdCBwbHVnaW4gbm90aWZpY2F0aW9uXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVySW5pdCcpO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FudmFzLmNsZWFyKHRoaXMpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHN0b3A6IGZ1bmN0aW9uKCkge1xuXHRcdC8vIFN0b3BzIGFueSBjdXJyZW50IGFuaW1hdGlvbiBsb29wIG9jY3VycmluZ1xuXHRcdGNvcmVfYW5pbWF0aW9ucy5jYW5jZWxBbmltYXRpb24odGhpcyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVzaXplOiBmdW5jdGlvbihzaWxlbnQpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgY2FudmFzID0gbWUuY2FudmFzO1xuXHRcdHZhciBhc3BlY3RSYXRpbyA9IChvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgbWUuYXNwZWN0UmF0aW8pIHx8IG51bGw7XG5cblx0XHQvLyB0aGUgY2FudmFzIHJlbmRlciB3aWR0aCBhbmQgaGVpZ2h0IHdpbGwgYmUgY2FzdGVkIHRvIGludGVnZXJzIHNvIG1ha2Ugc3VyZSB0aGF0XG5cdFx0Ly8gdGhlIGNhbnZhcyBkaXNwbGF5IHN0eWxlIHVzZXMgdGhlIHNhbWUgaW50ZWdlciB2YWx1ZXMgdG8gYXZvaWQgYmx1cnJpbmcgZWZmZWN0LlxuXG5cdFx0Ly8gU2V0IHRvIDAgaW5zdGVhZCBvZiBjYW52YXMuc2l6ZSBiZWNhdXNlIHRoZSBzaXplIGRlZmF1bHRzIHRvIDMwMHgxNTAgaWYgdGhlIGVsZW1lbnQgaXMgY29sbGFwc2VkXG5cdFx0dmFyIG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihoZWxwZXJzJDEuZ2V0TWF4aW11bVdpZHRoKGNhbnZhcykpKTtcblx0XHR2YXIgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihhc3BlY3RSYXRpbyA/IG5ld1dpZHRoIC8gYXNwZWN0UmF0aW8gOiBoZWxwZXJzJDEuZ2V0TWF4aW11bUhlaWdodChjYW52YXMpKSk7XG5cblx0XHRpZiAobWUud2lkdGggPT09IG5ld1dpZHRoICYmIG1lLmhlaWdodCA9PT0gbmV3SGVpZ2h0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y2FudmFzLndpZHRoID0gbWUud2lkdGggPSBuZXdXaWR0aDtcblx0XHRjYW52YXMuaGVpZ2h0ID0gbWUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4Jztcblx0XHRjYW52YXMuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4JztcblxuXHRcdGhlbHBlcnMkMS5yZXRpbmFTY2FsZShtZSwgb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdGlmICghc2lsZW50KSB7XG5cdFx0XHQvLyBOb3RpZnkgYW55IHBsdWdpbnMgYWJvdXQgdGhlIHJlc2l6ZVxuXHRcdFx0dmFyIG5ld1NpemUgPSB7d2lkdGg6IG5ld1dpZHRoLCBoZWlnaHQ6IG5ld0hlaWdodH07XG5cdFx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAncmVzaXplJywgW25ld1NpemVdKTtcblxuXHRcdFx0Ly8gTm90aWZ5IG9mIHJlc2l6ZVxuXHRcdFx0aWYgKG9wdGlvbnMub25SZXNpemUpIHtcblx0XHRcdFx0b3B0aW9ucy5vblJlc2l6ZShtZSwgbmV3U2l6ZSk7XG5cdFx0XHR9XG5cblx0XHRcdG1lLnN0b3AoKTtcblx0XHRcdG1lLnVwZGF0ZSh7XG5cdFx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLnJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvblxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdGVuc3VyZVNjYWxlc0hhdmVJRHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdHZhciBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG5cdFx0dmFyIHNjYWxlT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGU7XG5cblx0XHRoZWxwZXJzJDEuZWFjaChzY2FsZXNPcHRpb25zLnhBeGVzLCBmdW5jdGlvbih4QXhpc09wdGlvbnMsIGluZGV4KSB7XG5cdFx0XHRpZiAoIXhBeGlzT3B0aW9ucy5pZCkge1xuXHRcdFx0XHR4QXhpc09wdGlvbnMuaWQgPSBuZXh0QXZhaWxhYmxlU2NhbGVJZChzY2FsZXNPcHRpb25zLnhBeGVzLCAneC1heGlzLScsIGluZGV4KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKHNjYWxlc09wdGlvbnMueUF4ZXMsIGZ1bmN0aW9uKHlBeGlzT3B0aW9ucywgaW5kZXgpIHtcblx0XHRcdGlmICgheUF4aXNPcHRpb25zLmlkKSB7XG5cdFx0XHRcdHlBeGlzT3B0aW9ucy5pZCA9IG5leHRBdmFpbGFibGVTY2FsZUlkKHNjYWxlc09wdGlvbnMueUF4ZXMsICd5LWF4aXMtJywgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHNjYWxlT3B0aW9ucykge1xuXHRcdFx0c2NhbGVPcHRpb25zLmlkID0gc2NhbGVPcHRpb25zLmlkIHx8ICdzY2FsZSc7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBCdWlsZHMgYSBtYXAgb2Ygc2NhbGUgSUQgdG8gc2NhbGUgb2JqZWN0IGZvciBmdXR1cmUgbG9va3VwLlxuXHQgKi9cblx0YnVpbGRPclVwZGF0ZVNjYWxlczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHNjYWxlcyA9IG1lLnNjYWxlcyB8fCB7fTtcblx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHR2YXIgdXBkYXRlZCA9IE9iamVjdC5rZXlzKHNjYWxlcykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgaWQpIHtcblx0XHRcdG9ialtpZF0gPSBmYWxzZTtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fSwge30pO1xuXG5cdFx0aWYgKG9wdGlvbnMuc2NhbGVzKSB7XG5cdFx0XHRpdGVtcyA9IGl0ZW1zLmNvbmNhdChcblx0XHRcdFx0KG9wdGlvbnMuc2NhbGVzLnhBeGVzIHx8IFtdKS5tYXAoZnVuY3Rpb24oeEF4aXNPcHRpb25zKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtvcHRpb25zOiB4QXhpc09wdGlvbnMsIGR0eXBlOiAnY2F0ZWdvcnknLCBkcG9zaXRpb246ICdib3R0b20nfTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdChvcHRpb25zLnNjYWxlcy55QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uKHlBeGlzT3B0aW9ucykge1xuXHRcdFx0XHRcdHJldHVybiB7b3B0aW9uczogeUF4aXNPcHRpb25zLCBkdHlwZTogJ2xpbmVhcicsIGRwb3NpdGlvbjogJ2xlZnQnfTtcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuc2NhbGUpIHtcblx0XHRcdGl0ZW1zLnB1c2goe1xuXHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLnNjYWxlLFxuXHRcdFx0XHRkdHlwZTogJ3JhZGlhbExpbmVhcicsXG5cdFx0XHRcdGlzRGVmYXVsdDogdHJ1ZSxcblx0XHRcdFx0ZHBvc2l0aW9uOiAnY2hhcnRBcmVhJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aGVscGVycyQxLmVhY2goaXRlbXMsIGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG5cdFx0XHR2YXIgaWQgPSBzY2FsZU9wdGlvbnMuaWQ7XG5cdFx0XHR2YXIgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQkOShzY2FsZU9wdGlvbnMudHlwZSwgaXRlbS5kdHlwZSk7XG5cblx0XHRcdGlmIChwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24pICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcblx0XHRcdFx0c2NhbGVPcHRpb25zLnBvc2l0aW9uID0gaXRlbS5kcG9zaXRpb247XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZWRbaWRdID0gdHJ1ZTtcblx0XHRcdHZhciBzY2FsZSA9IG51bGw7XG5cdFx0XHRpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG5cdFx0XHRcdHNjYWxlID0gc2NhbGVzW2lkXTtcblx0XHRcdFx0c2NhbGUub3B0aW9ucyA9IHNjYWxlT3B0aW9ucztcblx0XHRcdFx0c2NhbGUuY3R4ID0gbWUuY3R4O1xuXHRcdFx0XHRzY2FsZS5jaGFydCA9IG1lO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHNjYWxlQ2xhc3MgPSBjb3JlX3NjYWxlU2VydmljZS5nZXRTY2FsZUNvbnN0cnVjdG9yKHNjYWxlVHlwZSk7XG5cdFx0XHRcdGlmICghc2NhbGVDbGFzcykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcblx0XHRcdFx0XHRpZDogaWQsXG5cdFx0XHRcdFx0dHlwZTogc2NhbGVUeXBlLFxuXHRcdFx0XHRcdG9wdGlvbnM6IHNjYWxlT3B0aW9ucyxcblx0XHRcdFx0XHRjdHg6IG1lLmN0eCxcblx0XHRcdFx0XHRjaGFydDogbWVcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcblx0XHRcdH1cblxuXHRcdFx0c2NhbGUubWVyZ2VUaWNrc09wdGlvbnMoKTtcblxuXHRcdFx0Ly8gVE9ETyhTQik6IEkgdGhpbmsgd2Ugc2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlIHRoaXMgY3VzdG9tIGNhc2UgKG9wdGlvbnMuc2NhbGUpXG5cdFx0XHQvLyBhbmQgY29uc2lkZXIgaXQgYXMgYSByZWd1bGFyIHNjYWxlIHBhcnQgb2YgdGhlIFwic2NhbGVzXCJcIiBtYXAgb25seSEgVGhpcyB3b3VsZFxuXHRcdFx0Ly8gbWFrZSB0aGUgbG9naWMgZWFzaWVyIGFuZCByZW1vdmUgc29tZSB1c2VsZXNzPyBjdXN0b20gY29kZS5cblx0XHRcdGlmIChpdGVtLmlzRGVmYXVsdCkge1xuXHRcdFx0XHRtZS5zY2FsZSA9IHNjYWxlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdC8vIGNsZWFyIHVwIGRpc2NhcmRlZCBzY2FsZXNcblx0XHRoZWxwZXJzJDEuZWFjaCh1cGRhdGVkLCBmdW5jdGlvbihoYXNVcGRhdGVkLCBpZCkge1xuXHRcdFx0aWYgKCFoYXNVcGRhdGVkKSB7XG5cdFx0XHRcdGRlbGV0ZSBzY2FsZXNbaWRdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bWUuc2NhbGVzID0gc2NhbGVzO1xuXG5cdFx0Y29yZV9zY2FsZVNlcnZpY2UuYWRkU2NhbGVzVG9MYXlvdXQodGhpcyk7XG5cdH0sXG5cblx0YnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBuZXdDb250cm9sbGVycyA9IFtdO1xuXHRcdHZhciBkYXRhc2V0cyA9IG1lLmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0XHR2YXIgZGF0YXNldCA9IGRhdGFzZXRzW2ldO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdHZhciB0eXBlID0gZGF0YXNldC50eXBlIHx8IG1lLmNvbmZpZy50eXBlO1xuXG5cdFx0XHRpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuXHRcdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdG1ldGEgPSBtZS5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdH1cblx0XHRcdG1ldGEudHlwZSA9IHR5cGU7XG5cdFx0XHRtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuXHRcdFx0bWV0YS5pbmRleCA9IGk7XG5cblx0XHRcdGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcblx0XHRcdFx0bWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGkpO1xuXHRcdFx0XHRtZXRhLmNvbnRyb2xsZXIubGlua1NjYWxlcygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIENvbnRyb2xsZXJDbGFzcyA9IGNvbnRyb2xsZXJzW21ldGEudHlwZV07XG5cdFx0XHRcdGlmIChDb250cm9sbGVyQ2xhc3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCInICsgbWV0YS50eXBlICsgJ1wiIGlzIG5vdCBhIGNoYXJ0IHR5cGUuJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKG1lLCBpKTtcblx0XHRcdFx0bmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBuZXdDb250cm9sbGVycztcblx0fSxcblxuXHQvKipcblx0ICogUmVzZXQgdGhlIGVsZW1lbnRzIG9mIGFsbCBkYXRhc2V0c1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cmVzZXRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRoZWxwZXJzJDEuZWFjaChtZS5kYXRhLmRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdG1lLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuXHRcdH0sIG1lKTtcblx0fSxcblxuXHQvKipcblx0KiBSZXNldHMgdGhlIGNoYXJ0IGJhY2sgdG8gaXQncyBzdGF0ZSBiZWZvcmUgdGhlIGluaXRpYWwgYW5pbWF0aW9uXG5cdCovXG5cdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnJlc2V0RWxlbWVudHMoKTtcblx0XHR0aGlzLnRvb2x0aXAuaW5pdGlhbGl6ZSgpO1xuXHR9LFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGlmICghY29uZmlnIHx8IHR5cGVvZiBjb25maWcgIT09ICdvYmplY3QnKSB7XG5cdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0Y29uZmlnID0ge1xuXHRcdFx0XHRkdXJhdGlvbjogY29uZmlnLFxuXHRcdFx0XHRsYXp5OiBhcmd1bWVudHNbMV1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dXBkYXRlQ29uZmlnKG1lKTtcblxuXHRcdC8vIHBsdWdpbnMgb3B0aW9ucyByZWZlcmVuY2VzIG1pZ2h0IGhhdmUgY2hhbmdlLCBsZXQncyBpbnZhbGlkYXRlIHRoZSBjYWNoZVxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MTExI2lzc3VlY29tbWVudC0zNTU5MzQxNjdcblx0XHRjb3JlX3BsdWdpbnMuX2ludmFsaWRhdGUobWUpO1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVVcGRhdGUnKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJbiBjYXNlIHRoZSBlbnRpcmUgZGF0YSBvYmplY3QgY2hhbmdlZFxuXHRcdG1lLnRvb2x0aXAuX2RhdGEgPSBtZS5kYXRhO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGRhdGFzZXQgY29udHJvbGxlcnMgYXJlIHVwZGF0ZWQgYW5kIG5ldyBjb250cm9sbGVycyBhcmUgcmVzZXRcblx0XHR2YXIgbmV3Q29udHJvbGxlcnMgPSBtZS5idWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSBhbGwgZGF0YXNldCBjb250cm9sbGVycyBoYXZlIGNvcnJlY3QgbWV0YSBkYXRhIGNvdW50c1xuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0bWUuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMoKTtcblx0XHR9XG5cblx0XHRtZS51cGRhdGVMYXlvdXQoKTtcblxuXHRcdC8vIENhbiBvbmx5IHJlc2V0IHRoZSBuZXcgY29udHJvbGxlcnMgYWZ0ZXIgdGhlIHNjYWxlcyBoYXZlIGJlZW4gdXBkYXRlZFxuXHRcdGlmIChtZS5vcHRpb25zLmFuaW1hdGlvbiAmJiBtZS5vcHRpb25zLmFuaW1hdGlvbi5kdXJhdGlvbikge1xuXHRcdFx0aGVscGVycyQxLmVhY2gobmV3Q29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0Y29udHJvbGxlci5yZXNldCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0bWUudXBkYXRlRGF0YXNldHMoKTtcblxuXHRcdC8vIE5lZWQgdG8gcmVzZXQgdG9vbHRpcCBpbiBjYXNlIGl0IGlzIGRpc3BsYXllZCB3aXRoIGVsZW1lbnRzIHRoYXQgYXJlIHJlbW92ZWRcblx0XHQvLyBhZnRlciB1cGRhdGUuXG5cdFx0bWUudG9vbHRpcC5pbml0aWFsaXplKCk7XG5cblx0XHQvLyBMYXN0IGFjdGl2ZSBjb250YWlucyBpdGVtcyB0aGF0IHdlcmUgcHJldmlvdXNseSBpbiB0aGUgdG9vbHRpcC5cblx0XHQvLyBXaGVuIHdlIHJlc2V0IHRoZSB0b29sdGlwLCB3ZSBuZWVkIHRvIGNsZWFyIGl0XG5cdFx0bWUubGFzdEFjdGl2ZSA9IFtdO1xuXG5cdFx0Ly8gRG8gdGhpcyBiZWZvcmUgcmVuZGVyIHNvIHRoYXQgYW55IHBsdWdpbnMgdGhhdCBuZWVkIGZpbmFsIHNjYWxlIHVwZGF0ZXMgY2FuIHVzZSBpdFxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclVwZGF0ZScpO1xuXG5cdFx0bWUuX2xheWVycy5zb3J0KGNvbXBhcmUyTGV2ZWwoJ3onLCAnX2lkeCcpKTtcblxuXHRcdGlmIChtZS5fYnVmZmVyZWRSZW5kZXIpIHtcblx0XHRcdG1lLl9idWZmZXJlZFJlcXVlc3QgPSB7XG5cdFx0XHRcdGR1cmF0aW9uOiBjb25maWcuZHVyYXRpb24sXG5cdFx0XHRcdGVhc2luZzogY29uZmlnLmVhc2luZyxcblx0XHRcdFx0bGF6eTogY29uZmlnLmxhenlcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLnJlbmRlcihjb25maWcpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgY2hhcnQgbGF5b3V0IHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVMYXlvdXRgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckxheW91dGAuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHR1cGRhdGVMYXlvdXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUxheW91dCcpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvcmVfbGF5b3V0cy51cGRhdGUodGhpcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXG5cdFx0bWUuX2xheWVycyA9IFtdO1xuXHRcdGhlbHBlcnMkMS5lYWNoKG1lLmJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdC8vIF9jb25maWd1cmUgaXMgY2FsbGVkIHR3aWNlLCBvbmNlIGluIGNvcmUuc2NhbGUudXBkYXRlIGFuZCBvbmNlIGhlcmUuXG5cdFx0XHQvLyBIZXJlIHRoZSBib3hlcyBhcmUgZnVsbHkgdXBkYXRlZCBhbmQgYXQgdGhlaXIgZmluYWwgcG9zaXRpb25zLlxuXHRcdFx0aWYgKGJveC5fY29uZmlndXJlKSB7XG5cdFx0XHRcdGJveC5fY29uZmlndXJlKCk7XG5cdFx0XHR9XG5cdFx0XHRtZS5fbGF5ZXJzLnB1c2guYXBwbHkobWUuX2xheWVycywgYm94Ll9sYXllcnMoKSk7XG5cdFx0fSwgbWUpO1xuXG5cdFx0bWUuX2xheWVycy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRpdGVtLl9pZHggPSBpbmRleDtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgYGFmdGVyTGF5b3V0YCBpbnN0ZWFkLlxuXHRcdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlclNjYWxlVXBkYXRlXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjUuMFxuXHRcdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclNjYWxlVXBkYXRlJyk7XG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyTGF5b3V0Jyk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c1VwZGF0ZWBcblx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyRGF0YXNldHNVcGRhdGVgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dXBkYXRlRGF0YXNldHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0bWUudXBkYXRlRGF0YXNldChpKTtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIGRhdGFzZXQgYXQgaW5kZXggdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXRVcGRhdGVgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRVcGRhdGVgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dXBkYXRlRGF0YXNldDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXHRcdHZhciBhcmdzID0ge1xuXHRcdFx0bWV0YTogbWV0YSxcblx0XHRcdGluZGV4OiBpbmRleFxuXHRcdH07XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBbYXJnc10pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1ldGEuY29udHJvbGxlci5fdXBkYXRlKCk7XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgW2FyZ3NdKTtcblx0fSxcblxuXHRyZW5kZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoIWNvbmZpZyB8fCB0eXBlb2YgY29uZmlnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdGNvbmZpZyA9IHtcblx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZyxcblx0XHRcdFx0bGF6eTogYXJndW1lbnRzWzFdXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHZhciBhbmltYXRpb25PcHRpb25zID0gbWUub3B0aW9ucy5hbmltYXRpb247XG5cdFx0dmFyIGR1cmF0aW9uID0gdmFsdWVPckRlZmF1bHQkOShjb25maWcuZHVyYXRpb24sIGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5kdXJhdGlvbik7XG5cdFx0dmFyIGxhenkgPSBjb25maWcubGF6eTtcblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlUmVuZGVyJykgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbihhbmltYXRpb24pIHtcblx0XHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclJlbmRlcicpO1xuXHRcdFx0aGVscGVycyQxLmNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgbWUpO1xuXHRcdH07XG5cblx0XHRpZiAoYW5pbWF0aW9uT3B0aW9ucyAmJiBkdXJhdGlvbikge1xuXHRcdFx0dmFyIGFuaW1hdGlvbiA9IG5ldyBjb3JlX2FuaW1hdGlvbih7XG5cdFx0XHRcdG51bVN0ZXBzOiBkdXJhdGlvbiAvIDE2LjY2LCAvLyA2MCBmcHNcblx0XHRcdFx0ZWFzaW5nOiBjb25maWcuZWFzaW5nIHx8IGFuaW1hdGlvbk9wdGlvbnMuZWFzaW5nLFxuXG5cdFx0XHRcdHJlbmRlcjogZnVuY3Rpb24oY2hhcnQsIGFuaW1hdGlvbk9iamVjdCkge1xuXHRcdFx0XHRcdHZhciBlYXNpbmdGdW5jdGlvbiA9IGhlbHBlcnMkMS5lYXNpbmcuZWZmZWN0c1thbmltYXRpb25PYmplY3QuZWFzaW5nXTtcblx0XHRcdFx0XHR2YXIgY3VycmVudFN0ZXAgPSBhbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXA7XG5cdFx0XHRcdFx0dmFyIHN0ZXBEZWNpbWFsID0gY3VycmVudFN0ZXAgLyBhbmltYXRpb25PYmplY3QubnVtU3RlcHM7XG5cblx0XHRcdFx0XHRjaGFydC5kcmF3KGVhc2luZ0Z1bmN0aW9uKHN0ZXBEZWNpbWFsKSwgc3RlcERlY2ltYWwsIGN1cnJlbnRTdGVwKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHRvbkFuaW1hdGlvblByb2dyZXNzOiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uQW5pbWF0aW9uQ29tcGxldGU6IG9uQ29tcGxldGVcblx0XHRcdH0pO1xuXG5cdFx0XHRjb3JlX2FuaW1hdGlvbnMuYWRkQW5pbWF0aW9uKG1lLCBhbmltYXRpb24sIGR1cmF0aW9uLCBsYXp5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuZHJhdygpO1xuXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM3ODFcblx0XHRcdG9uQ29tcGxldGUobmV3IGNvcmVfYW5pbWF0aW9uKHtudW1TdGVwczogMCwgY2hhcnQ6IG1lfSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGksIGxheWVycztcblxuXHRcdG1lLmNsZWFyKCk7XG5cblx0XHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYoZWFzaW5nVmFsdWUpKSB7XG5cdFx0XHRlYXNpbmdWYWx1ZSA9IDE7XG5cdFx0fVxuXG5cdFx0bWUudHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cblx0XHRpZiAobWUud2lkdGggPD0gMCB8fCBtZS5oZWlnaHQgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRHJhdycsIFtlYXNpbmdWYWx1ZV0pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEJlY2F1c2Ugb2YgcGx1Z2luIGhvb2tzIChiZWZvcmUvYWZ0ZXJEYXRhc2V0c0RyYXcpLCBkYXRhc2V0cyBjYW4ndFxuXHRcdC8vIGN1cnJlbnRseSBiZSBwYXJ0IG9mIGxheWVycy4gSW5zdGVhZCwgd2UgZHJhd1xuXHRcdC8vIGxheWVycyA8PSAwIGJlZm9yZShkZWZhdWx0LCBiYWNrd2FyZCBjb21wYXQpLCBhbmQgdGhlIHJlc3QgYWZ0ZXJcblx0XHRsYXllcnMgPSBtZS5fbGF5ZXJzO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoICYmIGxheWVyc1tpXS56IDw9IDA7ICsraSkge1xuXHRcdFx0bGF5ZXJzW2ldLmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHR9XG5cblx0XHRtZS5kcmF3RGF0YXNldHMoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Ly8gUmVzdCBvZiBsYXllcnNcblx0XHRmb3IgKDsgaSA8IGxheWVycy5sZW5ndGg7ICsraSkge1xuXHRcdFx0bGF5ZXJzW2ldLmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHR9XG5cblx0XHRtZS5fZHJhd1Rvb2x0aXAoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRHJhdycsIFtlYXNpbmdWYWx1ZV0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSAobWUuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpZiAobWUuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLnRvb2x0aXAudHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0U29ydGVkRGF0YXNldE1ldGFzOiBmdW5jdGlvbihmaWx0ZXJWaXNpYmxlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGF0YXNldHMgPSBtZS5kYXRhLmRhdGFzZXRzIHx8IFtdO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZS5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKG1lLmdldERhdGFzZXRNZXRhKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXN1bHQuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcblx0fSxcblxuXHQvKipcblx0ICogRHJhd3MgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c0RyYXdgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRzRHJhd2AuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkcmF3RGF0YXNldHM6IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWV0YXNldHMsIGk7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzRHJhdycsIFtlYXNpbmdWYWx1ZV0pID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG1ldGFzZXRzID0gbWUuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHRmb3IgKGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0bWUuZHJhd0RhdGFzZXQobWV0YXNldHNbaV0sIGVhc2luZ1ZhbHVlKTtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0c0RyYXcnLCBbZWFzaW5nVmFsdWVdKTtcblx0fSxcblxuXHQvKipcblx0ICogRHJhd3MgZGF0YXNldCBhdCBpbmRleCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldERyYXdgXG5cdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXREcmF3YC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGRyYXdEYXRhc2V0OiBmdW5jdGlvbihtZXRhLCBlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFyZ3MgPSB7XG5cdFx0XHRtZXRhOiBtZXRhLFxuXHRcdFx0aW5kZXg6IG1ldGEuaW5kZXgsXG5cdFx0XHRlYXNpbmdWYWx1ZTogZWFzaW5nVmFsdWVcblx0XHR9O1xuXG5cdFx0aWYgKGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0RHJhdycsIFthcmdzXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWV0YS5jb250cm9sbGVyLmRyYXcoZWFzaW5nVmFsdWUpO1xuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldERyYXcnLCBbYXJnc10pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0b29sdGlwIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVUb29sdGlwRHJhd2Bcblx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyVG9vbHRpcERyYXdgLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2RyYXdUb29sdGlwOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRvb2x0aXAgPSBtZS50b29sdGlwO1xuXHRcdHZhciBhcmdzID0ge1xuXHRcdFx0dG9vbHRpcDogdG9vbHRpcCxcblx0XHRcdGVhc2luZ1ZhbHVlOiBlYXNpbmdWYWx1ZVxuXHRcdH07XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZVRvb2x0aXBEcmF3JywgW2FyZ3NdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0b29sdGlwLmRyYXcoKTtcblxuXHRcdGNvcmVfcGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclRvb2x0aXBEcmF3JywgW2FyZ3NdKTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0IHRoZSBzaW5nbGUgZWxlbWVudCB0aGF0IHdhcyBjbGlja2VkIG9uXG5cdCAqIEByZXR1cm4gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRhdGFzZXQgaW5kZXggYW5kIGVsZW1lbnQgaW5kZXggb2YgdGhlIG1hdGNoaW5nIGVsZW1lbnQuIEFsc28gY29udGFpbnMgdGhlIHJlY3RhbmdsZSB0aGF0IHdhcyBkcmF3XG5cdCAqL1xuXHRnZXRFbGVtZW50QXRFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdHJldHVybiBjb3JlX2ludGVyYWN0aW9uLm1vZGVzLnNpbmdsZSh0aGlzLCBlKTtcblx0fSxcblxuXHRnZXRFbGVtZW50c0F0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRyZXR1cm4gY29yZV9pbnRlcmFjdGlvbi5tb2Rlcy5sYWJlbCh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdH0sXG5cblx0Z2V0RWxlbWVudHNBdFhBeGlzOiBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGNvcmVfaW50ZXJhY3Rpb24ubW9kZXNbJ3gtYXhpcyddKHRoaXMsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0fSxcblxuXHRnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlOiBmdW5jdGlvbihlLCBtb2RlLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1ldGhvZCA9IGNvcmVfaW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG5cdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtdO1xuXHR9LFxuXG5cdGdldERhdGFzZXRBdEV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0cmV0dXJuIGNvcmVfaW50ZXJhY3Rpb24ubW9kZXMuZGF0YXNldCh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdH0sXG5cblx0Z2V0RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRhdGFzZXQgPSBtZS5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG5cdFx0aWYgKCFkYXRhc2V0Ll9tZXRhKSB7XG5cdFx0XHRkYXRhc2V0Ll9tZXRhID0ge307XG5cdFx0fVxuXG5cdFx0dmFyIG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXTtcblx0XHRpZiAoIW1ldGEpIHtcblx0XHRcdG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXSA9IHtcblx0XHRcdFx0dHlwZTogbnVsbCxcblx0XHRcdFx0ZGF0YTogW10sXG5cdFx0XHRcdGRhdGFzZXQ6IG51bGwsXG5cdFx0XHRcdGNvbnRyb2xsZXI6IG51bGwsXG5cdFx0XHRcdGhpZGRlbjogbnVsbCxcdFx0XHQvLyBTZWUgaXNEYXRhc2V0VmlzaWJsZSgpIGNvbW1lbnRcblx0XHRcdFx0eEF4aXNJRDogbnVsbCxcblx0XHRcdFx0eUF4aXNJRDogbnVsbCxcblx0XHRcdFx0b3JkZXI6IGRhdGFzZXQub3JkZXIgfHwgMCxcblx0XHRcdFx0aW5kZXg6IGRhdGFzZXRJbmRleFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWV0YTtcblx0fSxcblxuXHRnZXRWaXNpYmxlRGF0YXNldENvdW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0aWYgKHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY291bnQ7XG5cdH0sXG5cblx0aXNEYXRhc2V0VmlzaWJsZTogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0dmFyIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cblx0XHQvLyBtZXRhLmhpZGRlbiBpcyBhIHBlciBjaGFydCBkYXRhc2V0IGhpZGRlbiBmbGFnIG92ZXJyaWRlIHdpdGggMyBzdGF0ZXM6IGlmIHRydWUgb3IgZmFsc2UsXG5cdFx0Ly8gdGhlIGRhdGFzZXQuaGlkZGVuIHZhbHVlIGlzIGlnbm9yZWQsIGVsc2UgaWYgbnVsbCwgdGhlIGRhdGFzZXQgaGlkZGVuIHN0YXRlIGlzIHJldHVybmVkLlxuXHRcdHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICF0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5oaWRkZW47XG5cdH0sXG5cblx0Z2VuZXJhdGVMZWdlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGVnZW5kQ2FsbGJhY2sodGhpcyk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRkZXN0cm95RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBpZCA9IHRoaXMuaWQ7XG5cdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcblx0XHR2YXIgbWV0YSA9IGRhdGFzZXQuX21ldGEgJiYgZGF0YXNldC5fbWV0YVtpZF07XG5cblx0XHRpZiAobWV0YSkge1xuXHRcdFx0bWV0YS5jb250cm9sbGVyLmRlc3Ryb3koKTtcblx0XHRcdGRlbGV0ZSBkYXRhc2V0Ll9tZXRhW2lkXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2FudmFzID0gbWUuY2FudmFzO1xuXHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0bWUuc3RvcCgpO1xuXG5cdFx0Ly8gZGF0YXNldCBjb250cm9sbGVycyBuZWVkIHRvIGNsZWFudXAgYXNzb2NpYXRlZCBkYXRhXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoaSk7XG5cdFx0fVxuXG5cdFx0aWYgKGNhbnZhcykge1xuXHRcdFx0bWUudW5iaW5kRXZlbnRzKCk7XG5cdFx0XHRoZWxwZXJzJDEuY2FudmFzLmNsZWFyKG1lKTtcblx0XHRcdHBsYXRmb3JtLnJlbGVhc2VDb250ZXh0KG1lLmN0eCk7XG5cdFx0XHRtZS5jYW52YXMgPSBudWxsO1xuXHRcdFx0bWUuY3R4ID0gbnVsbDtcblx0XHR9XG5cblx0XHRjb3JlX3BsdWdpbnMubm90aWZ5KG1lLCAnZGVzdHJveScpO1xuXG5cdFx0ZGVsZXRlIENoYXJ0Lmluc3RhbmNlc1ttZS5pZF07XG5cdH0sXG5cblx0dG9CYXNlNjRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTC5hcHBseSh0aGlzLmNhbnZhcywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRpbml0VG9vbFRpcDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRtZS50b29sdGlwID0gbmV3IGNvcmVfdG9vbHRpcCh7XG5cdFx0XHRfY2hhcnQ6IG1lLFxuXHRcdFx0X2NoYXJ0SW5zdGFuY2U6IG1lLCAvLyBkZXByZWNhdGVkLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0XHRfZGF0YTogbWUuZGF0YSxcblx0XHRcdF9vcHRpb25zOiBtZS5vcHRpb25zLnRvb2x0aXBzXG5cdFx0fSwgbWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0YmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycyA9IHt9O1xuXHRcdHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWUuZXZlbnRIYW5kbGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdH07XG5cblx0XHRoZWxwZXJzJDEuZWFjaChtZS5vcHRpb25zLmV2ZW50cywgZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0cGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihtZSwgdHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0bGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG5cdFx0fSk7XG5cblx0XHQvLyBFbGVtZW50cyB1c2VkIHRvIGRldGVjdCBzaXplIGNoYW5nZSBzaG91bGQgbm90IGJlIGluamVjdGVkIGZvciBub24gcmVzcG9uc2l2ZSBjaGFydHMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yMjEwXG5cdFx0aWYgKG1lLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuXHRcdFx0bGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWUucmVzaXplKCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKG1lLCAncmVzaXplJywgbGlzdGVuZXIpO1xuXHRcdFx0bGlzdGVuZXJzLnJlc2l6ZSA9IGxpc3RlbmVyO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHVuYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycztcblx0XHRpZiAoIWxpc3RlbmVycykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRlbGV0ZSBtZS5fbGlzdGVuZXJzO1xuXHRcdGhlbHBlcnMkMS5lYWNoKGxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIsIHR5cGUpIHtcblx0XHRcdHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIobWUsIHR5cGUsIGxpc3RlbmVyKTtcblx0XHR9KTtcblx0fSxcblxuXHR1cGRhdGVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50cywgbW9kZSwgZW5hYmxlZCkge1xuXHRcdHZhciBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcblx0XHR2YXIgZWxlbWVudCwgaSwgaWxlbjtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdHRoaXMuZ2V0RGF0YXNldE1ldGEoZWxlbWVudC5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1vZGUgPT09ICdkYXRhc2V0Jykge1xuXHRcdFx0dGhpcy5nZXREYXRhc2V0TWV0YShlbGVtZW50c1swXS5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZXZlbnRIYW5kbGVyOiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdG9vbHRpcCA9IG1lLnRvb2x0aXA7XG5cblx0XHRpZiAoY29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUV2ZW50JywgW2VdKSA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBCdWZmZXIgYW55IHVwZGF0ZSBjYWxscyBzbyB0aGF0IHJlbmRlcnMgZG8gbm90IG9jY3VyXG5cdFx0bWUuX2J1ZmZlcmVkUmVuZGVyID0gdHJ1ZTtcblx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuXHRcdHZhciBjaGFuZ2VkID0gbWUuaGFuZGxlRXZlbnQoZSk7XG5cdFx0Ly8gZm9yIHNtb290aCB0b29sdGlwIGFuaW1hdGlvbnMgaXNzdWUgIzQ5ODlcblx0XHQvLyB0aGUgdG9vbHRpcCBzaG91bGQgYmUgdGhlIHNvdXJjZSBvZiBjaGFuZ2Vcblx0XHQvLyBBbmltYXRpb24gY2hlY2sgd29ya2Fyb3VuZDpcblx0XHQvLyB0b29sdGlwLl9zdGFydCB3aWxsIGJlIG51bGwgd2hlbiB0b29sdGlwIGlzbid0IGFuaW1hdGluZ1xuXHRcdGlmICh0b29sdGlwKSB7XG5cdFx0XHRjaGFuZ2VkID0gdG9vbHRpcC5fc3RhcnRcblx0XHRcdFx0PyB0b29sdGlwLmhhbmRsZUV2ZW50KGUpXG5cdFx0XHRcdDogY2hhbmdlZCB8IHRvb2x0aXAuaGFuZGxlRXZlbnQoZSk7XG5cdFx0fVxuXG5cdFx0Y29yZV9wbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRXZlbnQnLCBbZV0pO1xuXG5cdFx0dmFyIGJ1ZmZlcmVkUmVxdWVzdCA9IG1lLl9idWZmZXJlZFJlcXVlc3Q7XG5cdFx0aWYgKGJ1ZmZlcmVkUmVxdWVzdCkge1xuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhbiB1cGRhdGUgdGhhdCB3YXMgdHJpZ2dlcmVkLCB3ZSBuZWVkIHRvIGRvIGEgbm9ybWFsIHJlbmRlclxuXHRcdFx0bWUucmVuZGVyKGJ1ZmZlcmVkUmVxdWVzdCk7XG5cdFx0fSBlbHNlIGlmIChjaGFuZ2VkICYmICFtZS5hbmltYXRpbmcpIHtcblx0XHRcdC8vIElmIGVudGVyaW5nLCBsZWF2aW5nLCBvciBjaGFuZ2luZyBlbGVtZW50cywgYW5pbWF0ZSB0aGUgY2hhbmdlIHZpYSBwaXZvdFxuXHRcdFx0bWUuc3RvcCgpO1xuXG5cdFx0XHQvLyBXZSBvbmx5IG5lZWQgdG8gcmVuZGVyIGF0IHRoaXMgcG9pbnQuIFVwZGF0aW5nIHdpbGwgY2F1c2Ugc2NhbGVzIHRvIGJlXG5cdFx0XHQvLyByZWNvbXB1dGVkIGdlbmVyYXRpbmcgZmxpY2tlciAmIHVzaW5nIG1vcmUgbWVtb3J5IHRoYW4gbmVjZXNzYXJ5LlxuXHRcdFx0bWUucmVuZGVyKHtcblx0XHRcdFx0ZHVyYXRpb246IG1lLm9wdGlvbnMuaG92ZXIuYW5pbWF0aW9uRHVyYXRpb24sXG5cdFx0XHRcdGxhenk6IHRydWVcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdG1lLl9idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW4gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IHRoZSBldmVudCB0byBoYW5kbGVcblx0ICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgY2hhcnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cdCAqL1xuXHRoYW5kbGVFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zIHx8IHt9O1xuXHRcdHZhciBob3Zlck9wdGlvbnMgPSBvcHRpb25zLmhvdmVyO1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRtZS5sYXN0QWN0aXZlID0gbWUubGFzdEFjdGl2ZSB8fCBbXTtcblxuXHRcdC8vIEZpbmQgQWN0aXZlIEVsZW1lbnRzIGZvciBob3ZlciBhbmQgdG9vbHRpcHNcblx0XHRpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG5cdFx0XHRtZS5hY3RpdmUgPSBbXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuYWN0aXZlID0gbWUuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zKTtcblx0XHR9XG5cblx0XHQvLyBJbnZva2Ugb25Ib3ZlciBob29rXG5cdFx0Ly8gTmVlZCB0byBjYWxsIHdpdGggbmF0aXZlIGV2ZW50IGhlcmUgdG8gbm90IGJyZWFrIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciB8fCBvcHRpb25zLmhvdmVyLm9uSG92ZXIsIFtlLm5hdGl2ZSwgbWUuYWN0aXZlXSwgbWUpO1xuXG5cdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0aWYgKG9wdGlvbnMub25DbGljaykge1xuXHRcdFx0XHQvLyBVc2UgZS5uYXRpdmUgaGVyZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0b3B0aW9ucy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBtZS5hY3RpdmUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBzdHlsaW5nIGZvciBsYXN0IGFjdGl2ZSAoZXZlbiBpZiBpdCBtYXkgc3RpbGwgYmUgYWN0aXZlKVxuXHRcdGlmIChtZS5sYXN0QWN0aXZlLmxlbmd0aCkge1xuXHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5sYXN0QWN0aXZlLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuXHRcdH1cblxuXHRcdC8vIEJ1aWx0IGluIGhvdmVyIHN0eWxpbmdcblx0XHRpZiAobWUuYWN0aXZlLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuXHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5hY3RpdmUsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcblx0XHR9XG5cblx0XHRjaGFuZ2VkID0gIWhlbHBlcnMkMS5hcnJheUVxdWFscyhtZS5hY3RpdmUsIG1lLmxhc3RBY3RpdmUpO1xuXG5cdFx0Ly8gUmVtZW1iZXIgTGFzdCBBY3RpdmVzXG5cdFx0bWUubGFzdEFjdGl2ZSA9IG1lLmFjdGl2ZTtcblxuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG59KTtcblxuLyoqXG4gKiBOT1RFKFNCKSBXZSBhY3R1YWxseSBkb24ndCB1c2UgdGhpcyBjb250YWluZXIgYW55bW9yZSBidXQgd2UgbmVlZCB0byBrZWVwIGl0XG4gKiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS4gVGhvdWdoLCBpdCBjYW4gc3RpbGwgYmUgdXNlZnVsIGZvciBwbHVnaW5zIHRoYXRcbiAqIHdvdWxkIG5lZWQgdG8gd29yayBvbiBtdWx0aXBsZSBjaGFydHM/IVxuICovXG5DaGFydC5pbnN0YW5jZXMgPSB7fTtcblxudmFyIGNvcmVfY29udHJvbGxlciA9IENoYXJ0O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0IGluc3RlYWQuXG4gKiBAY2xhc3MgQ2hhcnQuQ29udHJvbGxlclxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjZcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LkNvbnRyb2xsZXIgPSBDaGFydDtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlLlxuICogQG5hbWVzcGFjZSBDaGFydFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjhcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LnR5cGVzID0ge307XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jb25maWdNZXJnZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycyQxLmNvbmZpZ01lcmdlID0gbWVyZ2VDb25maWc7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZS5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5zY2FsZU1lcmdlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzJDEuc2NhbGVNZXJnZSA9IG1lcmdlU2NhbGVDb25maWc7XG5cbnZhciBjb3JlX2hlbHBlcnMgPSBmdW5jdGlvbigpIHtcblxuXHQvLyAtLSBCYXNpYyBqcyB1dGlsaXR5IG1ldGhvZHNcblxuXHRoZWxwZXJzJDEud2hlcmUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBmaWx0ZXJDYWxsYmFjaykge1xuXHRcdGlmIChoZWxwZXJzJDEuaXNBcnJheShjb2xsZWN0aW9uKSAmJiBBcnJheS5wcm90b3R5cGUuZmlsdGVyKSB7XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbi5maWx0ZXIoZmlsdGVyQ2FsbGJhY2spO1xuXHRcdH1cblx0XHR2YXIgZmlsdGVyZWQgPSBbXTtcblxuXHRcdGhlbHBlcnMkMS5lYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmIChmaWx0ZXJDYWxsYmFjayhpdGVtKSkge1xuXHRcdFx0XHRmaWx0ZXJlZC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGZpbHRlcmVkO1xuXHR9O1xuXHRoZWxwZXJzJDEuZmluZEluZGV4ID0gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA/XG5cdFx0ZnVuY3Rpb24oYXJyYXksIGNhbGxiYWNrLCBzY29wZSkge1xuXHRcdFx0cmV0dXJuIGFycmF5LmZpbmRJbmRleChjYWxsYmFjaywgc2NvcGUpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKGFycmF5LCBjYWxsYmFjaywgc2NvcGUpIHtcblx0XHRcdHNjb3BlID0gc2NvcGUgPT09IHVuZGVmaW5lZCA/IGFycmF5IDogc2NvcGU7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChzY29wZSwgYXJyYXlbaV0sIGksIGFycmF5KSkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fTtcblx0aGVscGVycyQxLmZpbmROZXh0V2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCkge1xuXHRcdC8vIERlZmF1bHQgdG8gc3RhcnQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHN0YXJ0SW5kZXgpKSB7XG5cdFx0XHRzdGFydEluZGV4ID0gLTE7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IGFycmF5VG9TZWFyY2gubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBjdXJyZW50SXRlbSA9IGFycmF5VG9TZWFyY2hbaV07XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50SXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGhlbHBlcnMkMS5maW5kUHJldmlvdXNXaGVyZSA9IGZ1bmN0aW9uKGFycmF5VG9TZWFyY2gsIGZpbHRlckNhbGxiYWNrLCBzdGFydEluZGV4KSB7XG5cdFx0Ly8gRGVmYXVsdCB0byBlbmQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKHN0YXJ0SW5kZXgpKSB7XG5cdFx0XHRzdGFydEluZGV4ID0gYXJyYXlUb1NlYXJjaC5sZW5ndGg7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBjdXJyZW50SXRlbSA9IGFycmF5VG9TZWFyY2hbaV07XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50SXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gLS0gTWF0aCBtZXRob2RzXG5cdGhlbHBlcnMkMS5pc051bWJlciA9IGZ1bmN0aW9uKG4pIHtcblx0XHRyZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xuXHR9O1xuXHRoZWxwZXJzJDEuYWxtb3N0RXF1YWxzID0gZnVuY3Rpb24oeCwgeSwgZXBzaWxvbikge1xuXHRcdHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xuXHR9O1xuXHRoZWxwZXJzJDEuYWxtb3N0V2hvbGUgPSBmdW5jdGlvbih4LCBlcHNpbG9uKSB7XG5cdFx0dmFyIHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuXHRcdHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcblx0fTtcblx0aGVscGVycyQxLm1heCA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdFx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihtYXgsIHZhbHVlKSB7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgobWF4LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4O1xuXHRcdH0sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG5cdH07XG5cdGhlbHBlcnMkMS5taW4gPSBmdW5jdGlvbihhcnJheSkge1xuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24obWluLCB2YWx1ZSkge1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgubWluKG1pbiwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1pbjtcblx0XHR9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuXHR9O1xuXHRoZWxwZXJzJDEuc2lnbiA9IE1hdGguc2lnbiA/XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIE1hdGguc2lnbih4KTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih4KSB7XG5cdFx0XHR4ID0gK3g7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcblx0XHRcdGlmICh4ID09PSAwIHx8IGlzTmFOKHgpKSB7XG5cdFx0XHRcdHJldHVybiB4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHggPiAwID8gMSA6IC0xO1xuXHRcdH07XG5cdGhlbHBlcnMkMS50b1JhZGlhbnMgPSBmdW5jdGlvbihkZWdyZWVzKSB7XG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCk7XG5cdH07XG5cdGhlbHBlcnMkMS50b0RlZ3JlZXMgPSBmdW5jdGlvbihyYWRpYW5zKSB7XG5cdFx0cmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuXHQgKiBpLmUuIHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIHRoZSBkZWNpbWFsIHBvaW50LCBvZiB0aGUgdmFsdWUgb2YgdGhpcyBOdW1iZXIuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gQSBudW1iZXIuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzJDEuX2RlY2ltYWxQbGFjZXMgPSBmdW5jdGlvbih4KSB7XG5cdFx0aWYgKCFoZWxwZXJzJDEuaXNGaW5pdGUoeCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dmFyIGUgPSAxO1xuXHRcdHZhciBwID0gMDtcblx0XHR3aGlsZSAoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KSB7XG5cdFx0XHRlICo9IDEwO1xuXHRcdFx0cCsrO1xuXHRcdH1cblx0XHRyZXR1cm4gcDtcblx0fTtcblxuXHQvLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuXHRoZWxwZXJzJDEuZ2V0QW5nbGVGcm9tUG9pbnQgPSBmdW5jdGlvbihjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuXHRcdHZhciBkaXN0YW5jZUZyb21YQ2VudGVyID0gYW5nbGVQb2ludC54IC0gY2VudHJlUG9pbnQueDtcblx0XHR2YXIgZGlzdGFuY2VGcm9tWUNlbnRlciA9IGFuZ2xlUG9pbnQueSAtIGNlbnRyZVBvaW50Lnk7XG5cdFx0dmFyIHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcblxuXHRcdHZhciBhbmdsZSA9IE1hdGguYXRhbjIoZGlzdGFuY2VGcm9tWUNlbnRlciwgZGlzdGFuY2VGcm9tWENlbnRlcik7XG5cblx0XHRpZiAoYW5nbGUgPCAoLTAuNSAqIE1hdGguUEkpKSB7XG5cdFx0XHRhbmdsZSArPSAyLjAgKiBNYXRoLlBJOyAvLyBtYWtlIHN1cmUgdGhlIHJldHVybmVkIGFuZ2xlIGlzIGluIHRoZSByYW5nZSBvZiAoLVBJLzIsIDNQSS8yXVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbmdsZTogYW5nbGUsXG5cdFx0XHRkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG5cdFx0fTtcblx0fTtcblx0aGVscGVycyQxLmRpc3RhbmNlQmV0d2VlblBvaW50cyA9IGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwdDIueCAtIHB0MS54LCAyKSArIE1hdGgucG93KHB0Mi55IC0gcHQxLnksIDIpKTtcblx0fTtcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIG5vdCBhdmFpbGFibGUgYW55bW9yZVxuXHQgKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5hbGlhc1BpeGVsXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKi9cblx0aGVscGVycyQxLmFsaWFzUGl4ZWwgPSBmdW5jdGlvbihwaXhlbFdpZHRoKSB7XG5cdFx0cmV0dXJuIChwaXhlbFdpZHRoICUgMiA9PT0gMCkgPyAwIDogMC41O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhbGlnbmVkIHBpeGVsIHZhbHVlIHRvIGF2b2lkIGFudGktYWxpYXNpbmcgYmx1clxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsIC0gQSBwaXhlbCB2YWx1ZS5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuXHQgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYWxpZ25lZCBwaXhlbCB2YWx1ZS5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGhlbHBlcnMkMS5fYWxpZ25QaXhlbCA9IGZ1bmN0aW9uKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcblx0XHR2YXIgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuXHRcdHZhciBoYWxmV2lkdGggPSB3aWR0aCAvIDI7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcblx0fTtcblxuXHRoZWxwZXJzJDEuc3BsaW5lQ3VydmUgPSBmdW5jdGlvbihmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuXHRcdC8vIFByb3BzIHRvIFJvYiBTcGVuY2VyIGF0IHNjYWxlZCBpbm5vdmF0aW9uIGZvciBoaXMgcG9zdCBvbiBzcGxpbmluZyBiZXR3ZWVuIHBvaW50c1xuXHRcdC8vIGh0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuXG5cdFx0Ly8gVGhpcyBmdW5jdGlvbiBtdXN0IGFsc28gcmVzcGVjdCBcInNraXBwZWRcIiBwb2ludHNcblxuXHRcdHZhciBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcblx0XHR2YXIgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuXHRcdHZhciBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuXG5cdFx0dmFyIGQwMSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50LnggLSBwcmV2aW91cy54LCAyKSArIE1hdGgucG93KGN1cnJlbnQueSAtIHByZXZpb3VzLnksIDIpKTtcblx0XHR2YXIgZDEyID0gTWF0aC5zcXJ0KE1hdGgucG93KG5leHQueCAtIGN1cnJlbnQueCwgMikgKyBNYXRoLnBvdyhuZXh0LnkgLSBjdXJyZW50LnksIDIpKTtcblxuXHRcdHZhciBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcblx0XHR2YXIgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG5cblx0XHQvLyBJZiBhbGwgcG9pbnRzIGFyZSB0aGUgc2FtZSwgczAxICYgczAyIHdpbGwgYmUgaW5mXG5cdFx0czAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG5cdFx0czEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG5cblx0XHR2YXIgZmEgPSB0ICogczAxOyAvLyBzY2FsaW5nIGZhY3RvciBmb3IgdHJpYW5nbGUgVGFcblx0XHR2YXIgZmIgPSB0ICogczEyO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHByZXZpb3VzOiB7XG5cdFx0XHRcdHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuXHRcdFx0XHR5OiBjdXJyZW50LnkgLSBmYSAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuXHRcdFx0fSxcblx0XHRcdG5leHQ6IHtcblx0XHRcdFx0eDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG5cdFx0XHRcdHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0aGVscGVycyQxLkVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcblx0aGVscGVycyQxLnNwbGluZUN1cnZlTW9ub3RvbmUgPSBmdW5jdGlvbihwb2ludHMpIHtcblx0XHQvLyBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgQsOpemllciBjb250cm9sIHBvaW50cyBpbiBhIHNpbWlsYXIgd2F5IHRoYW4gfHNwbGluZUN1cnZlfCxcblx0XHQvLyBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG5cdFx0Ly8gYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuXHRcdC8vIFNlZSA6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vbm90b25lX2N1YmljX2ludGVycG9sYXRpb25cblxuXHRcdHZhciBwb2ludHNXaXRoVGFuZ2VudHMgPSAocG9pbnRzIHx8IFtdKS5tYXAoZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG1vZGVsOiBwb2ludC5fbW9kZWwsXG5cdFx0XHRcdGRlbHRhSzogMCxcblx0XHRcdFx0bUs6IDBcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHQvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcblx0XHR2YXIgcG9pbnRzTGVuID0gcG9pbnRzV2l0aFRhbmdlbnRzLmxlbmd0aDtcblx0XHR2YXIgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudCwgcG9pbnRBZnRlcjtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcblx0XHRcdHBvaW50Q3VycmVudCA9IHBvaW50c1dpdGhUYW5nZW50c1tpXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRCZWZvcmUgPSBpID4gMCA/IHBvaW50c1dpdGhUYW5nZW50c1tpIC0gMV0gOiBudWxsO1xuXHRcdFx0cG9pbnRBZnRlciA9IGkgPCBwb2ludHNMZW4gLSAxID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXSA6IG51bGw7XG5cdFx0XHRpZiAocG9pbnRBZnRlciAmJiAhcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdHZhciBzbG9wZURlbHRhWCA9IChwb2ludEFmdGVyLm1vZGVsLnggLSBwb2ludEN1cnJlbnQubW9kZWwueCk7XG5cblx0XHRcdFx0Ly8gSW4gdGhlIGNhc2Ugb2YgdHdvIHBvaW50cyB0aGF0IGFwcGVhciBhdCB0aGUgc2FtZSB4IHBpeGVsLCBzbG9wZURlbHRhWCBpcyAwXG5cdFx0XHRcdHBvaW50Q3VycmVudC5kZWx0YUsgPSBzbG9wZURlbHRhWCAhPT0gMCA/IChwb2ludEFmdGVyLm1vZGVsLnkgLSBwb2ludEN1cnJlbnQubW9kZWwueSkgLyBzbG9wZURlbHRhWCA6IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghcG9pbnRCZWZvcmUgfHwgcG9pbnRCZWZvcmUubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICghcG9pbnRBZnRlciB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRCZWZvcmUuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnNpZ24ocG9pbnRCZWZvcmUuZGVsdGFLKSAhPT0gdGhpcy5zaWduKHBvaW50Q3VycmVudC5kZWx0YUspKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSAocG9pbnRCZWZvcmUuZGVsdGFLICsgcG9pbnRDdXJyZW50LmRlbHRhSykgLyAyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcblx0XHR2YXIgYWxwaGFLLCBiZXRhSywgdGF1Sywgc3F1YXJlZE1hZ25pdHVkZTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuIC0gMTsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRwb2ludEFmdGVyID0gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoZWxwZXJzJDEuYWxtb3N0RXF1YWxzKHBvaW50Q3VycmVudC5kZWx0YUssIDAsIHRoaXMuRVBTSUxPTikpIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRBZnRlci5tSyA9IDA7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRhbHBoYUsgPSBwb2ludEN1cnJlbnQubUsgLyBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0YmV0YUsgPSBwb2ludEFmdGVyLm1LIC8gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuXHRcdFx0aWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0dGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG5cdFx0XHRwb2ludEN1cnJlbnQubUsgPSBhbHBoYUsgKiB0YXVLICogcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdHBvaW50QWZ0ZXIubUsgPSBiZXRhSyAqIHRhdUsgKiBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGUgY29udHJvbCBwb2ludHNcblx0XHR2YXIgZGVsdGFYO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuXHRcdFx0cG9pbnRDdXJyZW50ID0gcG9pbnRzV2l0aFRhbmdlbnRzW2ldO1xuXHRcdFx0aWYgKHBvaW50Q3VycmVudC5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRwb2ludEJlZm9yZSA9IGkgPiAwID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgLSAxXSA6IG51bGw7XG5cdFx0XHRwb2ludEFmdGVyID0gaSA8IHBvaW50c0xlbiAtIDEgPyBwb2ludHNXaXRoVGFuZ2VudHNbaSArIDFdIDogbnVsbDtcblx0XHRcdGlmIChwb2ludEJlZm9yZSAmJiAhcG9pbnRCZWZvcmUubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRkZWx0YVggPSAocG9pbnRDdXJyZW50Lm1vZGVsLnggLSBwb2ludEJlZm9yZS5tb2RlbC54KSAvIDM7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBwb2ludEN1cnJlbnQubW9kZWwueCAtIGRlbHRhWDtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IHBvaW50Q3VycmVudC5tb2RlbC55IC0gZGVsdGFYICogcG9pbnRDdXJyZW50Lm1LO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBvaW50QWZ0ZXIgJiYgIXBvaW50QWZ0ZXIubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRkZWx0YVggPSAocG9pbnRBZnRlci5tb2RlbC54IC0gcG9pbnRDdXJyZW50Lm1vZGVsLngpIC8gMztcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludE5leHRYID0gcG9pbnRDdXJyZW50Lm1vZGVsLnggKyBkZWx0YVg7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IHBvaW50Q3VycmVudC5tb2RlbC55ICsgZGVsdGFYICogcG9pbnRDdXJyZW50Lm1LO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aGVscGVycyQxLm5leHRJdGVtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgsIGxvb3ApIHtcblx0XHRpZiAobG9vcCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ID49IGNvbGxlY3Rpb24ubGVuZ3RoIC0gMSA/IGNvbGxlY3Rpb25bMF0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCA+PSBjb2xsZWN0aW9uLmxlbmd0aCAtIDEgPyBjb2xsZWN0aW9uW2NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdH07XG5cdGhlbHBlcnMkMS5wcmV2aW91c0l0ZW0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBpbmRleCwgbG9vcCkge1xuXHRcdGlmIChsb29wKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggPD0gMCA/IGNvbGxlY3Rpb25bY29sbGVjdGlvbi5sZW5ndGggLSAxXSA6IGNvbGxlY3Rpb25baW5kZXggLSAxXTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4IDw9IDAgPyBjb2xsZWN0aW9uWzBdIDogY29sbGVjdGlvbltpbmRleCAtIDFdO1xuXHR9O1xuXHQvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgbmljZSBudW1iZXIgYWxnb3JpdGhtIHVzZWQgaW4gZGV0ZXJtaW5pbmcgd2hlcmUgYXhpcyBsYWJlbHMgd2lsbCBnb1xuXHRoZWxwZXJzJDEubmljZU51bSA9IGZ1bmN0aW9uKHJhbmdlLCByb3VuZCkge1xuXHRcdHZhciBleHBvbmVudCA9IE1hdGguZmxvb3IoaGVscGVycyQxLmxvZzEwKHJhbmdlKSk7XG5cdFx0dmFyIGZyYWN0aW9uID0gcmFuZ2UgLyBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuXHRcdHZhciBuaWNlRnJhY3Rpb247XG5cblx0XHRpZiAocm91bmQpIHtcblx0XHRcdGlmIChmcmFjdGlvbiA8IDEuNSkge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxO1xuXHRcdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8IDMpIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gMjtcblx0XHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPCA3KSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDEuMCkge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gMTtcblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDIpIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDI7XG5cdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8PSA1KSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSA1O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmljZUZyYWN0aW9uICogTWF0aC5wb3coMTAsIGV4cG9uZW50KTtcblx0fTtcblx0Ly8gUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGwgLSBodHRwczovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG5cdGhlbHBlcnMkMS5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0ZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHRcdFx0fTtcblx0fSgpKTtcblx0Ly8gLS0gRE9NIG1ldGhvZHNcblx0aGVscGVycyQxLmdldFJlbGF0aXZlUG9zaXRpb24gPSBmdW5jdGlvbihldnQsIGNoYXJ0KSB7XG5cdFx0dmFyIG1vdXNlWCwgbW91c2VZO1xuXHRcdHZhciBlID0gZXZ0Lm9yaWdpbmFsRXZlbnQgfHwgZXZ0O1xuXHRcdHZhciBjYW52YXMgPSBldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50O1xuXHRcdHZhciBib3VuZGluZ1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR2YXIgdG91Y2hlcyA9IGUudG91Y2hlcztcblx0XHRpZiAodG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdG1vdXNlWCA9IHRvdWNoZXNbMF0uY2xpZW50WDtcblx0XHRcdG1vdXNlWSA9IHRvdWNoZXNbMF0uY2xpZW50WTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtb3VzZVggPSBlLmNsaWVudFg7XG5cdFx0XHRtb3VzZVkgPSBlLmNsaWVudFk7XG5cdFx0fVxuXG5cdFx0Ly8gU2NhbGUgbW91c2UgY29vcmRpbmF0ZXMgaW50byBjYW52YXMgY29vcmRpbmF0ZXNcblx0XHQvLyBieSBmb2xsb3dpbmcgdGhlIHBhdHRlcm4gbGFpZCBvdXQgYnkgJ2plcnJ5aicgaW4gdGhlIGNvbW1lbnRzIG9mXG5cdFx0Ly8gaHR0cHM6Ly93d3cuaHRtbDVjYW52YXN0dXRvcmlhbHMuY29tL2FkdmFuY2VkL2h0bWw1LWNhbnZhcy1tb3VzZS1jb29yZGluYXRlcy9cblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KGhlbHBlcnMkMS5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLWxlZnQnKSk7XG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KGhlbHBlcnMkMS5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLXRvcCcpKTtcblx0XHR2YXIgcGFkZGluZ1JpZ2h0ID0gcGFyc2VGbG9hdChoZWxwZXJzJDEuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1yaWdodCcpKTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoaGVscGVycyQxLmdldFN0eWxlKGNhbnZhcywgJ3BhZGRpbmctYm90dG9tJykpO1xuXHRcdHZhciB3aWR0aCA9IGJvdW5kaW5nUmVjdC5yaWdodCAtIGJvdW5kaW5nUmVjdC5sZWZ0IC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG5cdFx0dmFyIGhlaWdodCA9IGJvdW5kaW5nUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QudG9wIC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG5cblx0XHQvLyBXZSBkaXZpZGUgYnkgdGhlIGN1cnJlbnQgZGV2aWNlIHBpeGVsIHJhdGlvLCBiZWNhdXNlIHRoZSBjYW52YXMgaXMgc2NhbGVkIHVwIGJ5IHRoYXQgYW1vdW50IGluIGVhY2ggZGlyZWN0aW9uLiBIb3dldmVyXG5cdFx0Ly8gdGhlIGJhY2tlbmQgbW9kZWwgaXMgaW4gdW5zY2FsZWQgY29vcmRpbmF0ZXMuIFNpbmNlIHdlIGFyZSBnb2luZyB0byBkZWFsIHdpdGggb3VyIG1vZGVsIGNvb3JkaW5hdGVzLCB3ZSBnbyBiYWNrIGhlcmVcblx0XHRtb3VzZVggPSBNYXRoLnJvdW5kKChtb3VzZVggLSBib3VuZGluZ1JlY3QubGVmdCAtIHBhZGRpbmdMZWZ0KSAvICh3aWR0aCkgKiBjYW52YXMud2lkdGggLyBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyk7XG5cdFx0bW91c2VZID0gTWF0aC5yb3VuZCgobW91c2VZIC0gYm91bmRpbmdSZWN0LnRvcCAtIHBhZGRpbmdUb3ApIC8gKGhlaWdodCkgKiBjYW52YXMuaGVpZ2h0IC8gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IG1vdXNlWCxcblx0XHRcdHk6IG1vdXNlWVxuXHRcdH07XG5cblx0fTtcblxuXHQvLyBQcml2YXRlIGhlbHBlciBmdW5jdGlvbiB0byBjb252ZXJ0IG1heC13aWR0aC9tYXgtaGVpZ2h0IHZhbHVlcyB0aGF0IG1heSBiZSBwZXJjZW50YWdlcyBpbnRvIGEgbnVtYmVyXG5cdGZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcblx0XHR2YXIgdmFsdWVJblBpeGVscztcblx0XHRpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR2YWx1ZUluUGl4ZWxzID0gcGFyc2VJbnQoc3R5bGVWYWx1ZSwgMTApO1xuXG5cdFx0XHRpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG5cdFx0XHRcdC8vIHBlcmNlbnRhZ2UgKiBzaXplIGluIGRpbWVuc2lvblxuXHRcdFx0XHR2YWx1ZUluUGl4ZWxzID0gdmFsdWVJblBpeGVscyAvIDEwMCAqIG5vZGUucGFyZW50Tm9kZVtwYXJlbnRQcm9wZXJ0eV07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZUluUGl4ZWxzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgaWYgdGhlIGdpdmVuIHZhbHVlIGNvbnRhaW5zIGFuIGVmZmVjdGl2ZSBjb25zdHJhaW50LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gaXNDb25zdHJhaW5lZFZhbHVlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICdub25lJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBtYXggd2lkdGggb3IgaGVpZ2h0IG9mIHRoZSBnaXZlbiBET00gbm9kZSBpbiBhIGNyb3NzLWJyb3dzZXIgY29tcGF0aWJsZSBmYXNoaW9uXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRvbU5vZGUgLSB0aGUgbm9kZSB0byBjaGVjayB0aGUgY29uc3RyYWludCBvblxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbWF4U3R5bGUgLSB0aGUgc3R5bGUgdGhhdCBkZWZpbmVzIHRoZSBtYXhpbXVtIGZvciB0aGUgZGlyZWN0aW9uIHdlIGFyZSB1c2luZyAoJ21heC13aWR0aCcgLyAnbWF4LWhlaWdodCcpXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwZXJjZW50YWdlUHJvcGVydHkgLSBwcm9wZXJ0eSBvZiBwYXJlbnQgdG8gdXNlIHdoZW4gY2FsY3VsYXRpbmcgd2lkdGggYXMgYSBwZXJjZW50YWdlXG5cdCAqIEBzZWUge0BsaW5rIGh0dHBzOi8vd3d3Lm5hdGhhbmFlbGpvbmVzLmNvbS9ibG9nLzIwMTMvcmVhZGluZy1tYXgtd2lkdGgtY3Jvc3MtYnJvd3Nlcn1cblx0ICovXG5cdGZ1bmN0aW9uIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgbWF4U3R5bGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkge1xuXHRcdHZhciB2aWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0dmFyIHBhcmVudE5vZGUgPSBoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUoZG9tTm9kZSk7XG5cdFx0dmFyIGNvbnN0cmFpbmVkTm9kZSA9IHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShkb21Ob2RlKVttYXhTdHlsZV07XG5cdFx0dmFyIGNvbnN0cmFpbmVkQ29udGFpbmVyID0gdmlldy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudE5vZGUpW21heFN0eWxlXTtcblx0XHR2YXIgaGFzQ05vZGUgPSBpc0NvbnN0cmFpbmVkVmFsdWUoY29uc3RyYWluZWROb2RlKTtcblx0XHR2YXIgaGFzQ0NvbnRhaW5lciA9IGlzQ29uc3RyYWluZWRWYWx1ZShjb25zdHJhaW5lZENvbnRhaW5lcik7XG5cdFx0dmFyIGluZmluaXR5ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG5cdFx0aWYgKGhhc0NOb2RlIHx8IGhhc0NDb250YWluZXIpIHtcblx0XHRcdHJldHVybiBNYXRoLm1pbihcblx0XHRcdFx0aGFzQ05vZGUgPyBwYXJzZU1heFN0eWxlKGNvbnN0cmFpbmVkTm9kZSwgZG9tTm9kZSwgcGVyY2VudGFnZVByb3BlcnR5KSA6IGluZmluaXR5LFxuXHRcdFx0XHRoYXNDQ29udGFpbmVyID8gcGFyc2VNYXhTdHlsZShjb25zdHJhaW5lZENvbnRhaW5lciwgcGFyZW50Tm9kZSwgcGVyY2VudGFnZVByb3BlcnR5KSA6IGluZmluaXR5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJ25vbmUnO1xuXHR9XG5cdC8vIHJldHVybnMgTnVtYmVyIG9yIHVuZGVmaW5lZCBpZiBubyBjb25zdHJhaW50XG5cdGhlbHBlcnMkMS5nZXRDb25zdHJhaW50V2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0cmV0dXJuIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgJ21heC13aWR0aCcsICdjbGllbnRXaWR0aCcpO1xuXHR9O1xuXHQvLyByZXR1cm5zIE51bWJlciBvciB1bmRlZmluZWQgaWYgbm8gY29uc3RyYWludFxuXHRoZWxwZXJzJDEuZ2V0Q29uc3RyYWludEhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHRyZXR1cm4gZ2V0Q29uc3RyYWludERpbWVuc2lvbihkb21Ob2RlLCAnbWF4LWhlaWdodCcsICdjbGllbnRIZWlnaHQnKTtcblx0fTtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG4gXHQgKi9cblx0aGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nID0gZnVuY3Rpb24oY29udGFpbmVyLCBwYWRkaW5nLCBwYXJlbnREaW1lbnNpb24pIHtcblx0XHRwYWRkaW5nID0gaGVscGVycyQxLmdldFN0eWxlKGNvbnRhaW5lciwgcGFkZGluZyk7XG5cblx0XHRyZXR1cm4gcGFkZGluZy5pbmRleE9mKCclJykgPiAtMSA/IHBhcmVudERpbWVuc2lvbiAqIHBhcnNlSW50KHBhZGRpbmcsIDEwKSAvIDEwMCA6IHBhcnNlSW50KHBhZGRpbmcsIDEwKTtcblx0fTtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0dmFyIHBhcmVudCA9IGRvbU5vZGUucGFyZW50Tm9kZTtcblx0XHRpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcblx0XHRcdHBhcmVudCA9IHBhcmVudC5ob3N0O1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyZW50O1xuXHR9O1xuXHRoZWxwZXJzJDEuZ2V0TWF4aW11bVdpZHRoID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBjb250YWluZXIgPSBoZWxwZXJzJDEuX2dldFBhcmVudE5vZGUoZG9tTm9kZSk7XG5cdFx0aWYgKCFjb250YWluZXIpIHtcblx0XHRcdHJldHVybiBkb21Ob2RlLmNsaWVudFdpZHRoO1xuXHRcdH1cblxuXHRcdHZhciBjbGllbnRXaWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1sZWZ0JywgY2xpZW50V2lkdGgpO1xuXHRcdHZhciBwYWRkaW5nUmlnaHQgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1yaWdodCcsIGNsaWVudFdpZHRoKTtcblxuXHRcdHZhciB3ID0gY2xpZW50V2lkdGggLSBwYWRkaW5nTGVmdCAtIHBhZGRpbmdSaWdodDtcblx0XHR2YXIgY3cgPSBoZWxwZXJzJDEuZ2V0Q29uc3RyYWludFdpZHRoKGRvbU5vZGUpO1xuXHRcdHJldHVybiBpc05hTihjdykgPyB3IDogTWF0aC5taW4odywgY3cpO1xuXHR9O1xuXHRoZWxwZXJzJDEuZ2V0TWF4aW11bUhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHR2YXIgY29udGFpbmVyID0gaGVscGVycyQxLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0dmFyIGNsaWVudEhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBoZWxwZXJzJDEuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy10b3AnLCBjbGllbnRIZWlnaHQpO1xuXHRcdHZhciBwYWRkaW5nQm90dG9tID0gaGVscGVycyQxLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctYm90dG9tJywgY2xpZW50SGVpZ2h0KTtcblxuXHRcdHZhciBoID0gY2xpZW50SGVpZ2h0IC0gcGFkZGluZ1RvcCAtIHBhZGRpbmdCb3R0b207XG5cdFx0dmFyIGNoID0gaGVscGVycyQxLmdldENvbnN0cmFpbnRIZWlnaHQoZG9tTm9kZSk7XG5cdFx0cmV0dXJuIGlzTmFOKGNoKSA/IGggOiBNYXRoLm1pbihoLCBjaCk7XG5cdH07XG5cdGhlbHBlcnMkMS5nZXRTdHlsZSA9IGZ1bmN0aW9uKGVsLCBwcm9wZXJ0eSkge1xuXHRcdHJldHVybiBlbC5jdXJyZW50U3R5bGUgP1xuXHRcdFx0ZWwuY3VycmVudFN0eWxlW3Byb3BlcnR5XSA6XG5cdFx0XHRkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcblx0fTtcblx0aGVscGVycyQxLnJldGluYVNjYWxlID0gZnVuY3Rpb24oY2hhcnQsIGZvcmNlUmF0aW8pIHtcblx0XHR2YXIgcGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRldmljZVBpeGVsUmF0aW8pIHx8IDE7XG5cdFx0aWYgKHBpeGVsUmF0aW8gPT09IDEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdHZhciBoZWlnaHQgPSBjaGFydC5oZWlnaHQ7XG5cdFx0dmFyIHdpZHRoID0gY2hhcnQud2lkdGg7XG5cblx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogcGl4ZWxSYXRpbztcblx0XHRjYW52YXMud2lkdGggPSB3aWR0aCAqIHBpeGVsUmF0aW87XG5cdFx0Y2hhcnQuY3R4LnNjYWxlKHBpeGVsUmF0aW8sIHBpeGVsUmF0aW8pO1xuXG5cdFx0Ly8gSWYgbm8gc3R5bGUgaGFzIGJlZW4gc2V0IG9uIHRoZSBjYW52YXMsIHRoZSByZW5kZXIgc2l6ZSBpcyB1c2VkIGFzIGRpc3BsYXkgc2l6ZSxcblx0XHQvLyBtYWtpbmcgdGhlIGNoYXJ0IHZpc3VhbGx5IGJpZ2dlciwgc28gbGV0J3MgZW5mb3JjZSBpdCB0byB0aGUgXCJjb3JyZWN0XCIgdmFsdWVzLlxuXHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMzU3NVxuXHRcdGlmICghY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSB7XG5cdFx0XHRjYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4Jztcblx0XHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHR9XG5cdH07XG5cdC8vIC0tIENhbnZhcyBtZXRob2RzXG5cdGhlbHBlcnMkMS5mb250U3RyaW5nID0gZnVuY3Rpb24ocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcblx0XHRyZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xuXHR9O1xuXHRoZWxwZXJzJDEubG9uZ2VzdFRleHQgPSBmdW5jdGlvbihjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG5cdFx0Y2FjaGUgPSBjYWNoZSB8fCB7fTtcblx0XHR2YXIgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuXHRcdHZhciBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG5cblx0XHRpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuXHRcdFx0ZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcblx0XHRcdGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcblx0XHRcdGNhY2hlLmZvbnQgPSBmb250O1xuXHRcdH1cblxuXHRcdGN0eC5mb250ID0gZm9udDtcblx0XHR2YXIgbG9uZ2VzdCA9IDA7XG5cdFx0dmFyIGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcblx0XHR2YXIgaSwgaiwgamxlbiwgdGhpbmcsIG5lc3RlZFRoaW5nO1xuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcblxuXHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBoZWxwZXJzJDEuaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcblx0XHRcdFx0bG9uZ2VzdCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG5cdFx0XHR9IGVsc2UgaWYgKGhlbHBlcnMkMS5pc0FycmF5KHRoaW5nKSkge1xuXHRcdFx0XHQvLyBpZiBpdCBpcyBhbiBhcnJheSBsZXRzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG5cdFx0XHRcdC8vIHRvIGRvIG1heWJlIHNpbXBsaWZ5IHRoaXMgZnVuY3Rpb24gYSBiaXQgc28gd2UgY2FuIGRvIHRoaXMgbW9yZSByZWN1cnNpdmVseT9cblx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuXHRcdFx0XHRcdG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG5cdFx0XHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRcdFx0aWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWhlbHBlcnMkMS5pc0FycmF5KG5lc3RlZFRoaW5nKSkge1xuXHRcdFx0XHRcdFx0bG9uZ2VzdCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcblx0XHRpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGdjTGVuOyBpKyspIHtcblx0XHRcdFx0ZGVsZXRlIGRhdGFbZ2NbaV1dO1xuXHRcdFx0fVxuXHRcdFx0Z2Muc3BsaWNlKDAsIGdjTGVuKTtcblx0XHR9XG5cdFx0cmV0dXJuIGxvbmdlc3Q7XG5cdH07XG5cdGhlbHBlcnMkMS5tZWFzdXJlVGV4dCA9IGZ1bmN0aW9uKGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuXHRcdHZhciB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG5cdFx0aWYgKCF0ZXh0V2lkdGgpIHtcblx0XHRcdHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuXHRcdFx0Z2MucHVzaChzdHJpbmcpO1xuXHRcdH1cblx0XHRpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuXHRcdFx0bG9uZ2VzdCA9IHRleHRXaWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGxvbmdlc3Q7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBkZXByZWNhdGVkXG5cdCAqL1xuXHRoZWxwZXJzJDEubnVtYmVyT2ZMYWJlbExpbmVzID0gZnVuY3Rpb24oYXJyYXlPZlRoaW5ncykge1xuXHRcdHZhciBudW1iZXJPZkxpbmVzID0gMTtcblx0XHRoZWxwZXJzJDEuZWFjaChhcnJheU9mVGhpbmdzLCBmdW5jdGlvbih0aGluZykge1xuXHRcdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KHRoaW5nKSkge1xuXHRcdFx0XHRpZiAodGhpbmcubGVuZ3RoID4gbnVtYmVyT2ZMaW5lcykge1xuXHRcdFx0XHRcdG51bWJlck9mTGluZXMgPSB0aGluZy5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gbnVtYmVyT2ZMaW5lcztcblx0fTtcblxuXHRoZWxwZXJzJDEuY29sb3IgPSAhY2hhcnRqc0NvbG9yID9cblx0XHRmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignQ29sb3IuanMgbm90IGZvdW5kIScpO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHQvKiBnbG9iYWwgQ2FudmFzR3JhZGllbnQgKi9cblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIENhbnZhc0dyYWRpZW50KSB7XG5cdFx0XHRcdHZhbHVlID0gY29yZV9kZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY2hhcnRqc0NvbG9yKHZhbHVlKTtcblx0XHR9O1xuXG5cdGhlbHBlcnMkMS5nZXRIb3ZlckNvbG9yID0gZnVuY3Rpb24oY29sb3JWYWx1ZSkge1xuXHRcdC8qIGdsb2JhbCBDYW52YXNQYXR0ZXJuICovXG5cdFx0cmV0dXJuIChjb2xvclZhbHVlIGluc3RhbmNlb2YgQ2FudmFzUGF0dGVybiB8fCBjb2xvclZhbHVlIGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnQpID9cblx0XHRcdGNvbG9yVmFsdWUgOlxuXHRcdFx0aGVscGVycyQxLmNvbG9yKGNvbG9yVmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkucmdiU3RyaW5nKCk7XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhYnN0cmFjdCgpIHtcblx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IGVpdGhlciBubyBhZGFwdGVyIGNhbiAnICtcblx0XHQnYmUgZm91bmQgb3IgYW4gaW5jb21wbGV0ZSBpbnRlZ3JhdGlvbiB3YXMgcHJvdmlkZWQuJ1xuXHQpO1xufVxuXG4vKipcbiAqIERhdGUgYWRhcHRlciAoY3VycmVudCB1c2VkIGJ5IHRoZSB0aW1lIHNjYWxlKVxuICogQG5hbWVzcGFjZSBDaGFydC5fYWRhcHRlcnMuX2RhdGVcbiAqIEBtZW1iZXJvZiBDaGFydC5fYWRhcHRlcnNcbiAqIEBwcml2YXRlXG4gKi9cblxuLyoqXG4gKiBDdXJyZW50bHkgc3VwcG9ydGVkIHVuaXQgc3RyaW5nIHZhbHVlcy5cbiAqIEB0eXBlZGVmIHsoJ21pbGxpc2Vjb25kJ3wnc2Vjb25kJ3wnbWludXRlJ3wnaG91cid8J2RheSd8J3dlZWsnfCdtb250aCd8J3F1YXJ0ZXInfCd5ZWFyJyl9XG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbmFtZSBVbml0XG4gKi9cblxuLyoqXG4gKiBAY2xhc3NcbiAqL1xuZnVuY3Rpb24gRGF0ZUFkYXB0ZXIob3B0aW9ucykge1xuXHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xufVxuXG5oZWxwZXJzJDEuZXh0ZW5kKERhdGVBZGFwdGVyLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBEYXRlQWRhcHRlciAqLyB7XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbWFwIG9mIHRpbWUgZm9ybWF0cyBmb3IgdGhlIHN1cHBvcnRlZCBmb3JtYXR0aW5nIHVuaXRzIGRlZmluZWRcblx0ICogaW4gVW5pdCBhcyB3ZWxsIGFzICdkYXRldGltZScgcmVwcmVzZW50aW5nIGEgZGV0YWlsZWQgZGF0ZS90aW1lIHN0cmluZy5cblx0ICogQHJldHVybnMge3tzdHJpbmc6IHN0cmluZ319XG5cdCAqL1xuXHRmb3JtYXRzOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUGFyc2VzIHRoZSBnaXZlbiBgdmFsdWVgIGFuZCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgdGltZXN0YW1wLlxuXHQgKiBAcGFyYW0ge2FueX0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gcGFyc2UgKHVzdWFsbHkgY29tZXMgZnJvbSB0aGUgZGF0YSlcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtmb3JtYXRdIC0gdGhlIGV4cGVjdGVkIGRhdGEgZm9ybWF0XG5cdCAqIEByZXR1cm5zIHsobnVtYmVyfG51bGwpfVxuXHQgKiBAZnVuY3Rpb25cblx0ICovXG5cdHBhcnNlOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgZm9ybWF0dGVkIGRhdGUgaW4gdGhlIHNwZWNpZmllZCBgZm9ybWF0YCBmb3IgYSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSB0aW1lc3RhbXAgdG8gZm9ybWF0XG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtYXQgLSB0aGUgZGF0ZS90aW1lIHRva2VuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRmb3JtYXQ6IGFic3RyYWN0LFxuXG5cdC8qKlxuXHQgKiBBZGRzIHRoZSBzcGVjaWZpZWQgYGFtb3VudGAgb2YgYHVuaXRgIHRvIHRoZSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSBpbnB1dCB0aW1lc3RhbXBcblx0ICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgdG8gYWRkXG5cdCAqIEBwYXJhbSB7VW5pdH0gdW5pdCAtIHRoZSB1bml0IGFzIHN0cmluZ1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0YWRkOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGB1bml0YCBiZXR3ZWVuIHRoZSBnaXZlbiB0aW1lc3RhbXBzLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWF4IC0gdGhlIGlucHV0IHRpbWVzdGFtcCAocmVmZXJlbmNlKVxuXHQgKiBAcGFyYW0ge251bWJlcn0gbWluIC0gdGhlIHRpbWVzdGFtcCB0byBzdWJzdHJhY3Rcblx0ICogQHBhcmFtIHtVbml0fSB1bml0IC0gdGhlIHVuaXQgYXMgc3RyaW5nXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRkaWZmOiBhYnN0cmFjdCxcblxuXHQvKipcblx0ICogUmV0dXJucyBzdGFydCBvZiBgdW5pdGAgZm9yIHRoZSBnaXZlbiBgdGltZXN0YW1wYC5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIHRoZSBpbnB1dCB0aW1lc3RhbXBcblx0ICogQHBhcmFtIHtVbml0fSB1bml0IC0gdGhlIHVuaXQgYXMgc3RyaW5nXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBbd2Vla2RheV0gLSB0aGUgSVNPIGRheSBvZiB0aGUgd2VlayB3aXRoIDEgYmVpbmcgTW9uZGF5XG5cdCAqIGFuZCA3IGJlaW5nIFN1bmRheSAob25seSBuZWVkZWQgaWYgcGFyYW0gKnVuaXQqIGlzIGBpc29XZWVrYCkuXG5cdCAqIEBmdW5jdGlvblxuXHQgKi9cblx0c3RhcnRPZjogYWJzdHJhY3QsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgZW5kIG9mIGB1bml0YCBmb3IgdGhlIGdpdmVuIGB0aW1lc3RhbXBgLlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wIC0gdGhlIGlucHV0IHRpbWVzdGFtcFxuXHQgKiBAcGFyYW0ge1VuaXR9IHVuaXQgLSB0aGUgdW5pdCBhcyBzdHJpbmdcblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRlbmRPZjogYWJzdHJhY3QsXG5cblx0Ly8gREVQUkVDQVRJT05TXG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGZvciBzY2FsZS5nZXRWYWx1ZUZvclBpeGVsKCksXG5cdCAqIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVycmlkZGVuIG9ubHkgYnkgdGhlIG1vbWVudCBhZGFwdGVyLlxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jcmVhdGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG59KTtcblxuRGF0ZUFkYXB0ZXIub3ZlcnJpZGUgPSBmdW5jdGlvbihtZW1iZXJzKSB7XG5cdGhlbHBlcnMkMS5leHRlbmQoRGF0ZUFkYXB0ZXIucHJvdG90eXBlLCBtZW1iZXJzKTtcbn07XG5cbnZhciBfZGF0ZSA9IERhdGVBZGFwdGVyO1xuXG52YXIgY29yZV9hZGFwdGVycyA9IHtcblx0X2RhdGU6IF9kYXRlXG59O1xuXG4vKipcbiAqIE5hbWVzcGFjZSB0byBob2xkIHN0YXRpYyB0aWNrIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRpY2tzXG4gKi9cbnZhciBjb3JlX3RpY2tzID0ge1xuXHQvKipcblx0ICogTmFtZXNwYWNlIHRvIGhvbGQgZm9ybWF0dGVycyBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIHRpY2tzXG5cdCAqIEBuYW1lc3BhY2UgQ2hhcnQuVGlja3MuZm9ybWF0dGVyc1xuXHQgKi9cblx0Zm9ybWF0dGVyczoge1xuXHRcdC8qKlxuXHRcdCAqIEZvcm1hdHRlciBmb3IgdmFsdWUgbGFiZWxzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzLnZhbHVlc1xuXHRcdCAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gZGlzcGxheVxuXHRcdCAqIEByZXR1cm4ge3N0cmluZ3xzdHJpbmdbXX0gdGhlIGxhYmVsIHRvIGRpc3BsYXlcblx0XHQgKi9cblx0XHR2YWx1ZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaGVscGVycyQxLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGb3JtYXR0ZXIgZm9yIGxpbmVhciBudW1lcmljIHRpY2tzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHRcdCAqIEBwYXJhbSB0aWNrVmFsdWUge251bWJlcn0gdGhlIHZhbHVlIHRvIGJlIGZvcm1hdHRlZFxuXHRcdCAqIEBwYXJhbSBpbmRleCB7bnVtYmVyfSB0aGUgcG9zaXRpb24gb2YgdGhlIHRpY2tWYWx1ZSBwYXJhbWV0ZXIgaW4gdGhlIHRpY2tzIGFycmF5XG5cdFx0ICogQHBhcmFtIHRpY2tzIHtudW1iZXJbXX0gdGhlIGxpc3Qgb2YgdGlja3MgYmVpbmcgY29udmVydGVkXG5cdFx0ICogQHJldHVybiB7c3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRpY2tWYWx1ZSBwYXJhbWV0ZXJcblx0XHQgKi9cblx0XHRsaW5lYXI6IGZ1bmN0aW9uKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGxvdHMgb2YgdGlja3MsIGRvbid0IHVzZSB0aGUgb25lc1xuXHRcdFx0dmFyIGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdIC0gdGlja3NbMV0gOiB0aWNrc1sxXSAtIHRpY2tzWzBdO1xuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlIGEgbnVtYmVyIGxpa2UgMi41IGFzIHRoZSBkZWx0YSwgZmlndXJlIG91dCBob3cgbWFueSBkZWNpbWFsIHBsYWNlcyB3ZSBuZWVkXG5cdFx0XHRpZiAoTWF0aC5hYnMoZGVsdGEpID4gMSkge1xuXHRcdFx0XHRpZiAodGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcblx0XHRcdFx0XHQvLyBub3QgYW4gaW50ZWdlclxuXHRcdFx0XHRcdGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsb2dEZWx0YSA9IGhlbHBlcnMkMS5sb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuXHRcdFx0dmFyIHRpY2tTdHJpbmcgPSAnJztcblxuXHRcdFx0aWYgKHRpY2tWYWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR2YXIgbWF4VGljayA9IE1hdGgubWF4KE1hdGguYWJzKHRpY2tzWzBdKSwgTWF0aC5hYnModGlja3NbdGlja3MubGVuZ3RoIC0gMV0pKTtcblx0XHRcdFx0aWYgKG1heFRpY2sgPCAxZS00KSB7IC8vIGFsbCB0aWNrcyBhcmUgc21hbGwgbnVtYmVyczsgdXNlIHNjaWVudGlmaWMgbm90YXRpb25cblx0XHRcdFx0XHR2YXIgbG9nVGljayA9IGhlbHBlcnMkMS5sb2cxMChNYXRoLmFicyh0aWNrVmFsdWUpKTtcblx0XHRcdFx0XHR2YXIgbnVtRXhwb25lbnRpYWwgPSBNYXRoLmZsb29yKGxvZ1RpY2spIC0gTWF0aC5mbG9vcihsb2dEZWx0YSk7XG5cdFx0XHRcdFx0bnVtRXhwb25lbnRpYWwgPSBNYXRoLm1heChNYXRoLm1pbihudW1FeHBvbmVudGlhbCwgMjApLCAwKTtcblx0XHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRXhwb25lbnRpYWwobnVtRXhwb25lbnRpYWwpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBudW1EZWNpbWFsID0gLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKTtcblx0XHRcdFx0XHRudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4obnVtRGVjaW1hbCwgMjApLCAwKTsgLy8gdG9GaXhlZCBoYXMgYSBtYXggb2YgMjAgZGVjaW1hbCBwbGFjZXNcblx0XHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRml4ZWQobnVtRGVjaW1hbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRpY2tTdHJpbmcgPSAnMCc7IC8vIG5ldmVyIHNob3cgZGVjaW1hbCBwbGFjZXMgZm9yIDBcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRpY2tTdHJpbmc7XG5cdFx0fSxcblxuXHRcdGxvZ2FyaXRobWljOiBmdW5jdGlvbih0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuXHRcdFx0dmFyIHJlbWFpbiA9IHRpY2tWYWx1ZSAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihoZWxwZXJzJDEubG9nMTAodGlja1ZhbHVlKSkpKTtcblxuXHRcdFx0aWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gJzAnO1xuXHRcdFx0fSBlbHNlIGlmIChyZW1haW4gPT09IDEgfHwgcmVtYWluID09PSAyIHx8IHJlbWFpbiA9PT0gNSB8fCBpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gdGlja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRyZXR1cm4gdGlja1ZhbHVlLnRvRXhwb25lbnRpYWwoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn07XG5cbnZhciBpc0FycmF5ID0gaGVscGVycyQxLmlzQXJyYXk7XG52YXIgaXNOdWxsT3JVbmRlZiA9IGhlbHBlcnMkMS5pc051bGxPclVuZGVmO1xudmFyIHZhbHVlT3JEZWZhdWx0JGEgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgdmFsdWVBdEluZGV4T3JEZWZhdWx0ID0gaGVscGVycyQxLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdzY2FsZScsIHtcblx0ZGlzcGxheTogdHJ1ZSxcblx0cG9zaXRpb246ICdsZWZ0Jyxcblx0b2Zmc2V0OiBmYWxzZSxcblxuXHQvLyBncmlkIGxpbmUgc2V0dGluZ3Ncblx0Z3JpZExpbmVzOiB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRjb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdFx0bGluZVdpZHRoOiAxLFxuXHRcdGRyYXdCb3JkZXI6IHRydWUsXG5cdFx0ZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuXHRcdGRyYXdUaWNrczogdHJ1ZSxcblx0XHR0aWNrTWFya0xlbmd0aDogMTAsXG5cdFx0emVyb0xpbmVXaWR0aDogMSxcblx0XHR6ZXJvTGluZUNvbG9yOiAncmdiYSgwLDAsMCwwLjI1KScsXG5cdFx0emVyb0xpbmVCb3JkZXJEYXNoOiBbXSxcblx0XHR6ZXJvTGluZUJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRvZmZzZXRHcmlkTGluZXM6IGZhbHNlLFxuXHRcdGJvcmRlckRhc2g6IFtdLFxuXHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuXHR9LFxuXG5cdC8vIHNjYWxlIGxhYmVsXG5cdHNjYWxlTGFiZWw6IHtcblx0XHQvLyBkaXNwbGF5IHByb3BlcnR5XG5cdFx0ZGlzcGxheTogZmFsc2UsXG5cblx0XHQvLyBhY3R1YWwgbGFiZWxcblx0XHRsYWJlbFN0cmluZzogJycsXG5cblx0XHQvLyB0b3AvYm90dG9tIHBhZGRpbmdcblx0XHRwYWRkaW5nOiB7XG5cdFx0XHR0b3A6IDQsXG5cdFx0XHRib3R0b206IDRcblx0XHR9XG5cdH0sXG5cblx0Ly8gbGFiZWwgc2V0dGluZ3Ncblx0dGlja3M6IHtcblx0XHRiZWdpbkF0WmVybzogZmFsc2UsXG5cdFx0bWluUm90YXRpb246IDAsXG5cdFx0bWF4Um90YXRpb246IDUwLFxuXHRcdG1pcnJvcjogZmFsc2UsXG5cdFx0cGFkZGluZzogMCxcblx0XHRyZXZlcnNlOiBmYWxzZSxcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGF1dG9Ta2lwOiB0cnVlLFxuXHRcdGF1dG9Ta2lwUGFkZGluZzogMCxcblx0XHRsYWJlbE9mZnNldDogMCxcblx0XHQvLyBXZSBwYXNzIHRocm91Z2ggYXJyYXlzIHRvIGJlIHJlbmRlcmVkIGFzIG11bHRpbGluZSBsYWJlbHMsIHdlIGNvbnZlcnQgT3RoZXJzIHRvIHN0cmluZ3MgaGVyZS5cblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcblx0XHRtaW5vcjoge30sXG5cdFx0bWFqb3I6IHt9XG5cdH1cbn0pO1xuXG4vKiogUmV0dXJucyBhIG5ldyBhcnJheSBjb250YWluaW5nIG51bUl0ZW1zIGZyb20gYXJyICovXG5mdW5jdGlvbiBzYW1wbGUoYXJyLCBudW1JdGVtcykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdHZhciBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG5cdHZhciBpID0gMDtcblx0dmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cblx0Zm9yICg7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KSB7XG5cdFx0cmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG5cdHZhciBsZW5ndGggPSBzY2FsZS5nZXRUaWNrcygpLmxlbmd0aDtcblx0dmFyIHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG5cdHZhciBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG5cdHZhciBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuXHR2YXIgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuXHR2YXIgZXBzaWxvbiA9IDFlLTY7IC8vIDFlLTYgaXMgbWFyZ2luIGluIHBpeGVscyBmb3IgYWNjdW11bGF0ZWQgZXJyb3IuXG5cdHZhciBvZmZzZXQ7XG5cblx0aWYgKG9mZnNldEdyaWRMaW5lcykge1xuXHRcdGlmIChsZW5ndGggPT09IDEpIHtcblx0XHRcdG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuXHRcdH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcblx0XHRcdG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcblx0XHR9XG5cdFx0bGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG5cblx0XHQvLyBSZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBwaXhlbCBpcyBvdXQgb2YgdGhlIHJhbmdlXG5cdFx0aWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdHJldHVybiBsaW5lVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKSB7XG5cdGhlbHBlcnMkMS5lYWNoKGNhY2hlcywgZnVuY3Rpb24oY2FjaGUpIHtcblx0XHR2YXIgZ2MgPSBjYWNoZS5nYztcblx0XHR2YXIgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuXHRcdHZhciBpO1xuXHRcdGlmIChnY0xlbiA+IGxlbmd0aCkge1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGdjTGVuOyArK2kpIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuXHRcdFx0fVxuXHRcdFx0Z2Muc3BsaWNlKDAsIGdjTGVuKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMge3dpZHRoLCBoZWlnaHQsIG9mZnNldH0gb2JqZWN0cyBmb3IgdGhlIGZpcnN0LCBsYXN0LCB3aWRlc3QsIGhpZ2hlc3QgdGlja1xuICogbGFiZWxzIHdoZXJlIG9mZnNldCBpbmRpY2F0ZXMgdGhlIGFuY2hvciBwb2ludCBvZmZzZXQgZnJvbSB0aGUgdG9wIGluIHBpeGVscy5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUxhYmVsU2l6ZXMoY3R4LCB0aWNrRm9udHMsIHRpY2tzLCBjYWNoZXMpIHtcblx0dmFyIGxlbmd0aCA9IHRpY2tzLmxlbmd0aDtcblx0dmFyIHdpZHRocyA9IFtdO1xuXHR2YXIgaGVpZ2h0cyA9IFtdO1xuXHR2YXIgb2Zmc2V0cyA9IFtdO1xuXHR2YXIgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWwsIHdpZGVzdCwgaGlnaGVzdDtcblxuXHRmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcblx0XHRsYWJlbCA9IHRpY2tzW2ldLmxhYmVsO1xuXHRcdHRpY2tGb250ID0gdGlja3NbaV0ubWFqb3IgPyB0aWNrRm9udHMubWFqb3IgOiB0aWNrRm9udHMubWlub3I7XG5cdFx0Y3R4LmZvbnQgPSBmb250U3RyaW5nID0gdGlja0ZvbnQuc3RyaW5nO1xuXHRcdGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtkYXRhOiB7fSwgZ2M6IFtdfTtcblx0XHRsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcblx0XHR3aWR0aCA9IGhlaWdodCA9IDA7XG5cdFx0Ly8gVW5kZWZpbmVkIGxhYmVscyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcblx0XHRpZiAoIWlzTnVsbE9yVW5kZWYobGFiZWwpICYmICFpc0FycmF5KGxhYmVsKSkge1xuXHRcdFx0d2lkdGggPSBoZWxwZXJzJDEubWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcblx0XHRcdGhlaWdodCA9IGxpbmVIZWlnaHQ7XG5cdFx0fSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuXHRcdFx0Ly8gaWYgaXQgaXMgYW4gYXJyYXkgbGV0J3MgbWVhc3VyZSBlYWNoIGVsZW1lbnRcblx0XHRcdGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0bmVzdGVkTGFiZWwgPSBsYWJlbFtqXTtcblx0XHRcdFx0Ly8gVW5kZWZpbmVkIGxhYmVscyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcblx0XHRcdFx0aWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcblx0XHRcdFx0XHR3aWR0aCA9IGhlbHBlcnMkMS5tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuXHRcdFx0XHRcdGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdpZHRocy5wdXNoKHdpZHRoKTtcblx0XHRoZWlnaHRzLnB1c2goaGVpZ2h0KTtcblx0XHRvZmZzZXRzLnB1c2gobGluZUhlaWdodCAvIDIpO1xuXHR9XG5cdGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcblxuXHR3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZihNYXRoLm1heC5hcHBseShudWxsLCB3aWR0aHMpKTtcblx0aGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKSk7XG5cblx0ZnVuY3Rpb24gdmFsdWVBdChpZHgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0d2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodHNbaWR4XSB8fCAwLFxuXHRcdFx0b2Zmc2V0OiBvZmZzZXRzW2lkeF0gfHwgMFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGZpcnN0OiB2YWx1ZUF0KDApLFxuXHRcdGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG5cdFx0d2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG5cdFx0aGlnaGVzdDogdmFsdWVBdChoaWdoZXN0KVxuXHR9O1xufVxuXG5mdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG5cdHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja01hcmtMZW5ndGggOiAwO1xufVxuXG5mdW5jdGlvbiBnZXRTY2FsZUxhYmVsSGVpZ2h0KG9wdGlvbnMpIHtcblx0dmFyIGZvbnQsIHBhZGRpbmc7XG5cblx0aWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KG9wdGlvbnMpO1xuXHRwYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG5cblx0cmV0dXJuIGZvbnQubGluZUhlaWdodCArIHBhZGRpbmcuaGVpZ2h0O1xufVxuXG5mdW5jdGlvbiBwYXJzZUZvbnRPcHRpb25zKG9wdGlvbnMsIG5lc3RlZE9wdHMpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5leHRlbmQoaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udCh7XG5cdFx0Zm9udEZhbWlseTogdmFsdWVPckRlZmF1bHQkYShuZXN0ZWRPcHRzLmZvbnRGYW1pbHksIG9wdGlvbnMuZm9udEZhbWlseSksXG5cdFx0Zm9udFNpemU6IHZhbHVlT3JEZWZhdWx0JGEobmVzdGVkT3B0cy5mb250U2l6ZSwgb3B0aW9ucy5mb250U2l6ZSksXG5cdFx0Zm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCRhKG5lc3RlZE9wdHMuZm9udFN0eWxlLCBvcHRpb25zLmZvbnRTdHlsZSksXG5cdFx0bGluZUhlaWdodDogdmFsdWVPckRlZmF1bHQkYShuZXN0ZWRPcHRzLmxpbmVIZWlnaHQsIG9wdGlvbnMubGluZUhlaWdodClcblx0fSksIHtcblx0XHRjb2xvcjogaGVscGVycyQxLm9wdGlvbnMucmVzb2x2ZShbbmVzdGVkT3B0cy5mb250Q29sb3IsIG9wdGlvbnMuZm9udENvbG9yLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yXSlcblx0fSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGlja0ZvbnRPcHRpb25zKG9wdGlvbnMpIHtcblx0dmFyIG1pbm9yID0gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zLCBvcHRpb25zLm1pbm9yKTtcblx0dmFyIG1ham9yID0gb3B0aW9ucy5tYWpvci5lbmFibGVkID8gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zLCBvcHRpb25zLm1ham9yKSA6IG1pbm9yO1xuXG5cdHJldHVybiB7bWlub3I6IG1pbm9yLCBtYWpvcjogbWFqb3J9O1xufVxuXG5mdW5jdGlvbiBub25Ta2lwcGVkKHRpY2tzVG9GaWx0ZXIpIHtcblx0dmFyIGZpbHRlcmVkID0gW107XG5cdHZhciBpdGVtLCBpbmRleCwgbGVuO1xuXHRmb3IgKGluZGV4ID0gMCwgbGVuID0gdGlja3NUb0ZpbHRlci5sZW5ndGg7IGluZGV4IDwgbGVuOyArK2luZGV4KSB7XG5cdFx0aXRlbSA9IHRpY2tzVG9GaWx0ZXJbaW5kZXhdO1xuXHRcdGlmICh0eXBlb2YgaXRlbS5faW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRmaWx0ZXJlZC5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmlsdGVyZWQ7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuXHR2YXIgbGVuID0gYXJyLmxlbmd0aDtcblx0dmFyIGksIGRpZmY7XG5cblx0aWYgKGxlbiA8IDIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmb3IgKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpIHtcblx0XHRpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGlmZjtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCBheGlzTGVuZ3RoLCB0aWNrc0xpbWl0KSB7XG5cdHZhciBldmVuTWFqb3JTcGFjaW5nID0gZ2V0RXZlblNwYWNpbmcobWFqb3JJbmRpY2VzKTtcblx0dmFyIHNwYWNpbmcgPSAodGlja3MubGVuZ3RoIC0gMSkgLyB0aWNrc0xpbWl0O1xuXHR2YXIgZmFjdG9ycywgZmFjdG9yLCBpLCBpbGVuO1xuXG5cdC8vIElmIHRoZSBtYWpvciB0aWNrcyBhcmUgZXZlbmx5IHNwYWNlZCBhcGFydCwgcGxhY2UgdGhlIG1pbm9yIHRpY2tzXG5cdC8vIHNvIHRoYXQgdGhleSBkaXZpZGUgdGhlIG1ham9yIHRpY2tzIGludG8gZXZlbiBjaHVua3Ncblx0aWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuXHR9XG5cblx0ZmFjdG9ycyA9IGhlbHBlcnMkMS5tYXRoLl9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG5cdGZvciAoaSA9IDAsIGlsZW4gPSBmYWN0b3JzLmxlbmd0aCAtIDE7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRmYWN0b3IgPSBmYWN0b3JzW2ldO1xuXHRcdGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG5cdFx0XHRyZXR1cm4gZmFjdG9yO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG59XG5cbmZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuXHR2YXIgcmVzdWx0ID0gW107XG5cdHZhciBpLCBpbGVuO1xuXHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG5cdFx0aWYgKHRpY2tzW2ldLm1ham9yKSB7XG5cdFx0XHRyZXN1bHQucHVzaChpKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG5cdHZhciBjb3VudCA9IDA7XG5cdHZhciBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuXHR2YXIgaSwgdGljaztcblxuXHRzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuXHRmb3IgKGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspIHtcblx0XHR0aWNrID0gdGlja3NbaV07XG5cdFx0aWYgKGkgPT09IG5leHQpIHtcblx0XHRcdHRpY2suX2luZGV4ID0gaTtcblx0XHRcdGNvdW50Kys7XG5cdFx0XHRuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSB0aWNrLmxhYmVsO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBza2lwKHRpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuXHR2YXIgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdCRhKG1ham9yU3RhcnQsIDApO1xuXHR2YXIgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQkYShtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcblx0dmFyIGNvdW50ID0gMDtcblx0dmFyIGxlbmd0aCwgaSwgdGljaywgbmV4dDtcblxuXHRzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcpO1xuXHRpZiAobWFqb3JFbmQpIHtcblx0XHRsZW5ndGggPSBtYWpvckVuZCAtIG1ham9yU3RhcnQ7XG5cdFx0c3BhY2luZyA9IGxlbmd0aCAvIE1hdGguZmxvb3IobGVuZ3RoIC8gc3BhY2luZyk7XG5cdH1cblxuXHRuZXh0ID0gc3RhcnQ7XG5cblx0d2hpbGUgKG5leHQgPCAwKSB7XG5cdFx0Y291bnQrKztcblx0XHRuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG5cdH1cblxuXHRmb3IgKGkgPSBNYXRoLm1heChzdGFydCwgMCk7IGkgPCBlbmQ7IGkrKykge1xuXHRcdHRpY2sgPSB0aWNrc1tpXTtcblx0XHRpZiAoaSA9PT0gbmV4dCkge1xuXHRcdFx0dGljay5faW5kZXggPSBpO1xuXHRcdFx0Y291bnQrKztcblx0XHRcdG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVsZXRlIHRpY2subGFiZWw7XG5cdFx0fVxuXHR9XG59XG5cbnZhciBTY2FsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXG5cdHplcm9MaW5lSW5kZXg6IDAsXG5cblx0LyoqXG5cdCAqIEdldCB0aGUgcGFkZGluZyBuZWVkZWQgZm9yIHRoZSBzY2FsZVxuXHQgKiBAbWV0aG9kIGdldFBhZGRpbmdcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybnMge1BhZGRpbmd9IHRoZSBuZWNlc3NhcnkgcGFkZGluZ1xuXHQgKi9cblx0Z2V0UGFkZGluZzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRyZXR1cm4ge1xuXHRcdFx0bGVmdDogbWUucGFkZGluZ0xlZnQgfHwgMCxcblx0XHRcdHRvcDogbWUucGFkZGluZ1RvcCB8fCAwLFxuXHRcdFx0cmlnaHQ6IG1lLnBhZGRpbmdSaWdodCB8fCAwLFxuXHRcdFx0Ym90dG9tOiBtZS5wYWRkaW5nQm90dG9tIHx8IDBcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBzY2FsZSB0aWNrIG9iamVjdHMgKHtsYWJlbCwgbWFqb3J9KVxuXHQgKiBAc2luY2UgMi43XG5cdCAqL1xuXHRnZXRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RpY2tzO1xuXHR9LFxuXG5cdC8qKlxuXHQqIEBwcml2YXRlXG5cdCovXG5cdF9nZXRMYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGFiZWxzIHx8ICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gZGF0YS54TGFiZWxzIDogZGF0YS55TGFiZWxzKSB8fCBkYXRhLmxhYmVscyB8fCBbXTtcblx0fSxcblxuXHQvLyBUaGVzZSBtZXRob2RzIGFyZSBvcmRlcmVkIGJ5IGxpZmVjeWxlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cdC8vIEFueSBmdW5jdGlvbiBkZWZpbmVkIGhlcmUgaXMgaW5oZXJpdGVkIGJ5IGFsbCBzY2FsZSB0eXBlcy5cblx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgc2NhbGUgdHlwZVxuXG5cdC8qKlxuXHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG5cdCAqIEBmdW5jdGlvbiBDaGFydC5TY2FsZS5tZXJnZVRpY2tzT3B0aW9uc1xuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuOC4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICovXG5cdG1lcmdlVGlja3NPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHQvLyBub29wXG5cdH0sXG5cblx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcblx0fSxcblxuXHQvKipcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heFdpZHRoIC0gdGhlIG1heCB3aWR0aCBpbiBwaXhlbHNcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1heEhlaWdodCAtIHRoZSBtYXggaGVpZ2h0IGluIHBpeGVsc1xuXHQgKiBAcGFyYW0ge29iamVjdH0gbWFyZ2lucyAtIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSBlZGdlIG9mIHRoZSBvdGhlciBzY2FsZXMgYW5kIGVkZ2Ugb2YgdGhlIGNoYXJ0XG5cdCAqICAgVGhpcyBzcGFjZSBjb21lcyBmcm9tIHR3byBzb3VyY2VzOlxuXHQgKiAgICAgLSBwYWRkaW5nIC0gc3BhY2UgdGhhdCdzIHJlcXVpcmVkIHRvIHNob3cgdGhlIGxhYmVscyBhdCB0aGUgZWRnZXMgb2YgdGhlIHNjYWxlXG5cdCAqICAgICAtIHRoaWNrbmVzcyBvZiBzY2FsZXMgb3IgbGVnZW5kcyBpbiBhbm90aGVyIG9yaWVudGF0aW9uXG5cdCAqL1xuXHR1cGRhdGU6IGZ1bmN0aW9uKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHNhbXBsZVNpemUgPSB0aWNrT3B0cy5zYW1wbGVTaXplO1xuXHRcdHZhciBpLCBpbGVuLCBsYWJlbHMsIHRpY2tzLCBzYW1wbGluZ0VuYWJsZWQ7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IGhlbHBlcnMkMS5leHRlbmQoe1xuXHRcdFx0bGVmdDogMCxcblx0XHRcdHJpZ2h0OiAwLFxuXHRcdFx0dG9wOiAwLFxuXHRcdFx0Ym90dG9tOiAwXG5cdFx0fSwgbWFyZ2lucyk7XG5cblx0XHRtZS5fdGlja3MgPSBudWxsO1xuXHRcdG1lLnRpY2tzID0gbnVsbDtcblx0XHRtZS5fbGFiZWxTaXplcyA9IG51bGw7XG5cdFx0bWUuX21heExhYmVsTGluZXMgPSAwO1xuXHRcdG1lLmxvbmdlc3RMYWJlbFdpZHRoID0gMDtcblx0XHRtZS5sb25nZXN0VGV4dENhY2hlID0gbWUubG9uZ2VzdFRleHRDYWNoZSB8fCB7fTtcblx0XHRtZS5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG5cdFx0bWUuX2xhYmVsSXRlbXMgPSBudWxsO1xuXG5cdFx0Ly8gRGltZW5zaW9uc1xuXHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5zZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG5cblx0XHQvLyBEYXRhIG1pbi9tYXhcblx0XHRtZS5iZWZvcmVEYXRhTGltaXRzKCk7XG5cdFx0bWUuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuXHRcdG1lLmFmdGVyRGF0YUxpbWl0cygpO1xuXG5cdFx0Ly8gVGlja3MgLSBgdGhpcy50aWNrc2AgaXMgbm93IERFUFJFQ0FURUQhXG5cdFx0Ly8gSW50ZXJuYWwgdGlja3MgYXJlIG5vdyBzdG9yZWQgYXMgb2JqZWN0cyBpbiB0aGUgUFJJVkFURSBgdGhpcy5fdGlja3NgIG1lbWJlclxuXHRcdC8vIGFuZCBtdXN0IG5vdCBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIG91dHNpZGUgdGhpcyBjbGFzcy4gYHRoaXMudGlja3NgIGJlaW5nXG5cdFx0Ly8gYXJvdW5kIGZvciBsb25nIHRpbWUgYW5kIG5vdCBtYXJrZWQgYXMgcHJpdmF0ZSwgd2UgY2FuJ3QgY2hhbmdlIGl0cyBzdHJ1Y3R1cmVcblx0XHQvLyB3aXRob3V0IHVuZXhwZWN0ZWQgYnJlYWtpbmcgY2hhbmdlcy4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzY2FsZSB0aWNrcyxcblx0XHQvLyB1c2Ugc2NhbGUuZ2V0VGlja3MoKSBpbnN0ZWFkLlxuXG5cdFx0bWUuYmVmb3JlQnVpbGRUaWNrcygpO1xuXG5cdFx0Ly8gTmV3IGltcGxlbWVudGF0aW9ucyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIG9iamVjdHMgYnV0IGZvciBCQUNLV0FSRCBDT01QQVQsXG5cdFx0Ly8gd2Ugc3RpbGwgc3VwcG9ydCBubyByZXR1cm4gKGB0aGlzLnRpY2tzYCBpbnRlcm5hbGx5IHNldCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kKS5cblx0XHR0aWNrcyA9IG1lLmJ1aWxkVGlja3MoKSB8fCBbXTtcblxuXHRcdC8vIEFsbG93IG1vZGlmaWNhdGlvbiBvZiB0aWNrcyBpbiBjYWxsYmFjay5cblx0XHR0aWNrcyA9IG1lLmFmdGVyQnVpbGRUaWNrcyh0aWNrcykgfHwgdGlja3M7XG5cblx0XHQvLyBFbnN1cmUgdGlja3MgY29udGFpbnMgdGlja3MgaW4gbmV3IHRpY2sgZm9ybWF0XG5cdFx0aWYgKCghdGlja3MgfHwgIXRpY2tzLmxlbmd0aCkgJiYgbWUudGlja3MpIHtcblx0XHRcdHRpY2tzID0gW107XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbWUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdHRpY2tzLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtZS50aWNrc1tpXSxcblx0XHRcdFx0XHRtYWpvcjogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUuX3RpY2tzID0gdGlja3M7XG5cblx0XHQvLyBDb21wdXRlIHRpY2sgcm90YXRpb24gYW5kIGZpdCB1c2luZyBhIHNhbXBsZWQgc3Vic2V0IG9mIGxhYmVsc1xuXHRcdC8vIFdlIGdlbmVyYWxseSBkb24ndCBuZWVkIHRvIGNvbXB1dGUgdGhlIHNpemUgb2YgZXZlcnkgc2luZ2xlIGxhYmVsIGZvciBkZXRlcm1pbmluZyBzY2FsZSBzaXplXG5cdFx0c2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aDtcblx0XHRsYWJlbHMgPSBtZS5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKSA6IHRpY2tzKTtcblxuXHRcdC8vIF9jb25maWd1cmUgaXMgY2FsbGVkIHR3aWNlLCBvbmNlIGhlcmUsIG9uY2UgZnJvbSBjb3JlLmNvbnRyb2xsZXIudXBkYXRlTGF5b3V0LlxuXHRcdC8vIEhlcmUgd2UgaGF2ZW4ndCBiZWVuIHBvc2l0aW9uZWQgeWV0LCBidXQgZGltZW5zaW9ucyBhcmUgY29ycmVjdC5cblx0XHQvLyBWYXJpYWJsZXMgc2V0IGluIF9jb25maWd1cmUgYXJlIG5lZWRlZCBmb3IgY2FsY3VsYXRlVGlja1JvdGF0aW9uLCBhbmRcblx0XHQvLyBpdCdzIG9rIHRoYXQgY29vcmRpbmF0ZXMgYXJlIG5vdCBjb3JyZWN0IHRoZXJlLCBvbmx5IGRpbWVuc2lvbnMgbWF0dGVyLlxuXHRcdG1lLl9jb25maWd1cmUoKTtcblxuXHRcdC8vIFRpY2sgUm90YXRpb25cblx0XHRtZS5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5jYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpO1xuXG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblxuXHRcdC8vIEF1dG8tc2tpcFxuXHRcdG1lLl90aWNrc1RvRHJhdyA9IHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSA/IG1lLl9hdXRvU2tpcCh0aWNrcykgOiB0aWNrcztcblxuXHRcdGlmIChzYW1wbGluZ0VuYWJsZWQpIHtcblx0XHRcdC8vIEdlbmVyYXRlIGxhYmVscyB1c2luZyBhbGwgbm9uLXNraXBwZWQgdGlja3Ncblx0XHRcdGxhYmVscyA9IG1lLl9jb252ZXJ0VGlja3NUb0xhYmVscyhtZS5fdGlja3NUb0RyYXcpO1xuXHRcdH1cblxuXHRcdG1lLnRpY2tzID0gbGFiZWxzOyAgIC8vIEJBQ0tXQVJEIENPTVBBVElCSUxJVFlcblxuXHRcdC8vIElNUE9SVEFOVDogYWZ0ZXIgdGhpcyBwb2ludCwgd2UgY29uc2lkZXIgdGhhdCBgdGhpcy50aWNrc2Agd2lsbCBORVZFUiBjaGFuZ2UhXG5cblx0XHRtZS5hZnRlclVwZGF0ZSgpO1xuXG5cdFx0Ly8gVE9ETyh2Myk6IHJlbW92ZSBtaW5TaXplIGFzIGEgcHVibGljIHByb3BlcnR5IGFuZCByZXR1cm4gdmFsdWUgZnJvbSBhbGwgbGF5b3V0IGJveGVzLiBJdCBpcyB1bnVzZWRcblx0XHQvLyBtYWtlIG1heFdpZHRoIGFuZCBtYXhIZWlnaHQgcHJpdmF0ZVxuXHRcdHJldHVybiBtZS5taW5TaXplO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NvbmZpZ3VyZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgcmV2ZXJzZVBpeGVscyA9IG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZTtcblx0XHR2YXIgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHN0YXJ0UGl4ZWwgPSBtZS5sZWZ0O1xuXHRcdFx0ZW5kUGl4ZWwgPSBtZS5yaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhcnRQaXhlbCA9IG1lLnRvcDtcblx0XHRcdGVuZFBpeGVsID0gbWUuYm90dG9tO1xuXHRcdFx0Ly8gYnkgZGVmYXVsdCB2ZXJ0aWNhbCBzY2FsZXMgYXJlIGZyb20gYm90dG9tIHRvIHRvcCwgc28gcGl4ZWxzIGFyZSByZXZlcnNlZFxuXHRcdFx0cmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuXHRcdH1cblx0XHRtZS5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG5cdFx0bWUuX2VuZFBpeGVsID0gZW5kUGl4ZWw7XG5cdFx0bWUuX3JldmVyc2VQaXhlbHMgPSByZXZlcnNlUGl4ZWxzO1xuXHRcdG1lLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG5cdH0sXG5cblx0YWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJVcGRhdGUsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblxuXHRiZWZvcmVTZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG5cdH0sXG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gU2V0IHRoZSB1bmNvbnN0cmFpbmVkIGRpbWVuc2lvbiBiZWZvcmUgbGFiZWwgcm90YXRpb25cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0bWUucmlnaHQgPSBtZS53aWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLnRvcCA9IDA7XG5cdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgcGFkZGluZ1xuXHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRtZS5wYWRkaW5nVG9wID0gMDtcblx0XHRtZS5wYWRkaW5nUmlnaHQgPSAwO1xuXHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vIERhdGEgbGltaXRzXG5cdGJlZm9yZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMkMS5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlRGF0YUxpbWl0cywgW3RoaXNdKTtcblx0fSxcblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogaGVscGVycyQxLm5vb3AsXG5cdGFmdGVyRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckRhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblx0YmVmb3JlQnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVCdWlsZFRpY2tzLCBbdGhpc10pO1xuXHR9LFxuXHRidWlsZFRpY2tzOiBoZWxwZXJzJDEubm9vcCxcblx0YWZ0ZXJCdWlsZFRpY2tzOiBmdW5jdGlvbih0aWNrcykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gdGlja3MgaXMgZW1wdHkgZm9yIG9sZCBheGlzIGltcGxlbWVudGF0aW9ucyBoZXJlXG5cdFx0aWYgKGlzQXJyYXkodGlja3MpICYmIHRpY2tzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGhlbHBlcnMkMS5jYWxsYmFjayhtZS5vcHRpb25zLmFmdGVyQnVpbGRUaWNrcywgW21lLCB0aWNrc10pO1xuXHRcdH1cblx0XHQvLyBTdXBwb3J0IG9sZCBpbXBsZW1lbnRhdGlvbnMgKHRoYXQgbW9kaWZpZWQgYHRoaXMudGlja3NgIGRpcmVjdGx5IGluIGJ1aWxkVGlja3MpXG5cdFx0bWUudGlja3MgPSBoZWxwZXJzJDEuY2FsbGJhY2sobWUub3B0aW9ucy5hZnRlckJ1aWxkVGlja3MsIFttZSwgbWUudGlja3NdKSB8fCBtZS50aWNrcztcblx0XHRyZXR1cm4gdGlja3M7XG5cdH0sXG5cblx0YmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzJDEuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0fSxcblx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gQ29udmVydCB0aWNrcyB0byBzdHJpbmdzXG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHRtZS50aWNrcyA9IG1lLnRpY2tzLm1hcCh0aWNrT3B0cy51c2VyQ2FsbGJhY2sgfHwgdGlja09wdHMuY2FsbGJhY2ssIHRoaXMpO1xuXHR9LFxuXHRhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0fSxcblxuXHQvL1xuXG5cdGJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24sIFt0aGlzXSk7XG5cdH0sXG5cdGNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcblx0XHR2YXIgbnVtVGlja3MgPSBtZS5nZXRUaWNrcygpLmxlbmd0aDtcblx0XHR2YXIgbWluUm90YXRpb24gPSB0aWNrT3B0cy5taW5Sb3RhdGlvbiB8fCAwO1xuXHRcdHZhciBtYXhSb3RhdGlvbiA9IHRpY2tPcHRzLm1heFJvdGF0aW9uO1xuXHRcdHZhciBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG5cdFx0dmFyIGxhYmVsU2l6ZXMsIG1heExhYmVsV2lkdGgsIG1heExhYmVsSGVpZ2h0LCBtYXhXaWR0aCwgdGlja1dpZHRoLCBtYXhIZWlnaHQsIG1heExhYmVsRGlhZ29uYWw7XG5cblx0XHRpZiAoIW1lLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICFtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0bWUubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGxhYmVsU2l6ZXMgPSBtZS5fZ2V0TGFiZWxTaXplcygpO1xuXHRcdG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcblx0XHRtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsYWJlbFNpemVzLmhpZ2hlc3Qub2Zmc2V0O1xuXG5cdFx0Ly8gRXN0aW1hdGUgdGhlIHdpZHRoIG9mIGVhY2ggZ3JpZCBiYXNlZCBvbiB0aGUgY2FudmFzIHdpZHRoLCB0aGUgbWF4aW11bVxuXHRcdC8vIGxhYmVsIHdpZHRoIGFuZCB0aGUgbnVtYmVyIG9mIHRpY2sgaW50ZXJ2YWxzXG5cdFx0bWF4V2lkdGggPSBNYXRoLm1pbihtZS5tYXhXaWR0aCwgbWUuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoKTtcblx0XHR0aWNrV2lkdGggPSBvcHRpb25zLm9mZnNldCA/IG1lLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuXG5cdFx0Ly8gQWxsb3cgMyBwaXhlbHMgeDIgcGFkZGluZyBlaXRoZXIgc2lkZSBmb3IgbGFiZWwgcmVhZGFiaWxpdHlcblx0XHRpZiAobWF4TGFiZWxXaWR0aCArIDYgPiB0aWNrV2lkdGgpIHtcblx0XHRcdHRpY2tXaWR0aCA9IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gKG9wdGlvbnMub2Zmc2V0ID8gMC41IDogMSkpO1xuXHRcdFx0bWF4SGVpZ2h0ID0gbWUubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkTGluZXMpXG5cdFx0XHRcdC0gdGlja09wdHMucGFkZGluZyAtIGdldFNjYWxlTGFiZWxIZWlnaHQob3B0aW9ucy5zY2FsZUxhYmVsKTtcblx0XHRcdG1heExhYmVsRGlhZ29uYWwgPSBNYXRoLnNxcnQobWF4TGFiZWxXaWR0aCAqIG1heExhYmVsV2lkdGggKyBtYXhMYWJlbEhlaWdodCAqIG1heExhYmVsSGVpZ2h0KTtcblx0XHRcdGxhYmVsUm90YXRpb24gPSBoZWxwZXJzJDEudG9EZWdyZWVzKE1hdGgubWluKFxuXHRcdFx0XHRNYXRoLmFzaW4oTWF0aC5taW4oKGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyA2KSAvIHRpY2tXaWR0aCwgMSkpLFxuXHRcdFx0XHRNYXRoLmFzaW4oTWF0aC5taW4obWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgMSkpIC0gTWF0aC5hc2luKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbClcblx0XHRcdCkpO1xuXHRcdFx0bGFiZWxSb3RhdGlvbiA9IE1hdGgubWF4KG1pblJvdGF0aW9uLCBNYXRoLm1pbihtYXhSb3RhdGlvbiwgbGFiZWxSb3RhdGlvbikpO1xuXHRcdH1cblxuXHRcdG1lLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuXHR9LFxuXHRhZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbiwgW3RoaXNdKTtcblx0fSxcblxuXHQvL1xuXG5cdGJlZm9yZUZpdDogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG5cdH0sXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBSZXNldFxuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fTtcblxuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdHZhciBzY2FsZUxhYmVsT3B0cyA9IG9wdHMuc2NhbGVMYWJlbDtcblx0XHR2YXIgZ3JpZExpbmVPcHRzID0gb3B0cy5ncmlkTGluZXM7XG5cdFx0dmFyIGRpc3BsYXkgPSBtZS5faXNWaXNpYmxlKCk7XG5cdFx0dmFyIGlzQm90dG9tID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0Ly8gV2lkdGhcblx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtaW5TaXplLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0fSBlbHNlIGlmIChkaXNwbGF5KSB7XG5cdFx0XHRtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZExpbmVPcHRzKSArIGdldFNjYWxlTGFiZWxIZWlnaHQoc2NhbGVMYWJlbE9wdHMpO1xuXHRcdH1cblxuXHRcdC8vIGhlaWdodFxuXHRcdGlmICghaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH0gZWxzZSBpZiAoZGlzcGxheSkge1xuXHRcdFx0bWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkTGluZU9wdHMpICsgZ2V0U2NhbGVMYWJlbEhlaWdodChzY2FsZUxhYmVsT3B0cyk7XG5cdFx0fVxuXG5cdFx0Ly8gRG9uJ3QgYm90aGVyIGZpdHRpbmcgdGhlIHRpY2tzIGlmIHdlIGFyZSBub3Qgc2hvd2luZyB0aGUgbGFiZWxzXG5cdFx0aWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgZGlzcGxheSkge1xuXHRcdFx0dmFyIHRpY2tGb250cyA9IHBhcnNlVGlja0ZvbnRPcHRpb25zKHRpY2tPcHRzKTtcblx0XHRcdHZhciBsYWJlbFNpemVzID0gbWUuX2dldExhYmVsU2l6ZXMoKTtcblx0XHRcdHZhciBmaXJzdExhYmVsU2l6ZSA9IGxhYmVsU2l6ZXMuZmlyc3Q7XG5cdFx0XHR2YXIgbGFzdExhYmVsU2l6ZSA9IGxhYmVsU2l6ZXMubGFzdDtcblx0XHRcdHZhciB3aWRlc3RMYWJlbFNpemUgPSBsYWJlbFNpemVzLndpZGVzdDtcblx0XHRcdHZhciBoaWdoZXN0TGFiZWxTaXplID0gbGFiZWxTaXplcy5oaWdoZXN0O1xuXHRcdFx0dmFyIGxpbmVTcGFjZSA9IHRpY2tGb250cy5taW5vci5saW5lSGVpZ2h0ICogMC40O1xuXHRcdFx0dmFyIHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZztcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHQvLyBBIGhvcml6b250YWwgYXhpcyBpcyBtb3JlIGNvbnN0cmFpbmVkIGJ5IHRoZSBoZWlnaHQuXG5cdFx0XHRcdHZhciBpc1JvdGF0ZWQgPSBtZS5sYWJlbFJvdGF0aW9uICE9PSAwO1xuXHRcdFx0XHR2YXIgYW5nbGVSYWRpYW5zID0gaGVscGVycyQxLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHRcdFx0dmFyIGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcblx0XHRcdFx0dmFyIHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcblxuXHRcdFx0XHR2YXIgbGFiZWxIZWlnaHQgPSBzaW5Sb3RhdGlvbiAqIHdpZGVzdExhYmVsU2l6ZS53aWR0aFxuXHRcdFx0XHRcdCsgY29zUm90YXRpb24gKiAoaGlnaGVzdExhYmVsU2l6ZS5oZWlnaHQgLSAoaXNSb3RhdGVkID8gaGlnaGVzdExhYmVsU2l6ZS5vZmZzZXQgOiAwKSlcblx0XHRcdFx0XHQrIChpc1JvdGF0ZWQgPyAwIDogbGluZVNwYWNlKTsgLy8gcGFkZGluZ1xuXG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4obWUubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuXG5cdFx0XHRcdHZhciBvZmZzZXRMZWZ0ID0gbWUuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gbWUubGVmdDtcblx0XHRcdFx0dmFyIG9mZnNldFJpZ2h0ID0gbWUucmlnaHQgLSBtZS5nZXRQaXhlbEZvclRpY2sobWUuZ2V0VGlja3MoKS5sZW5ndGggLSAxKTtcblx0XHRcdFx0dmFyIHBhZGRpbmdMZWZ0LCBwYWRkaW5nUmlnaHQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgb3VyIHRpY2tzIGFyZSBhbHdheXMgaW5zaWRlIHRoZSBjYW52YXMuIFdoZW4gcm90YXRlZCwgdGlja3MgYXJlIHJpZ2h0IGFsaWduZWRcblx0XHRcdFx0Ly8gd2hpY2ggbWVhbnMgdGhhdCB0aGUgcmlnaHQgcGFkZGluZyBpcyBkb21pbmF0ZWQgYnkgdGhlIGZvbnQgaGVpZ2h0XG5cdFx0XHRcdGlmIChpc1JvdGF0ZWQpIHtcblx0XHRcdFx0XHRwYWRkaW5nTGVmdCA9IGlzQm90dG9tID9cblx0XHRcdFx0XHRcdGNvc1JvdGF0aW9uICogZmlyc3RMYWJlbFNpemUud2lkdGggKyBzaW5Sb3RhdGlvbiAqIGZpcnN0TGFiZWxTaXplLm9mZnNldCA6XG5cdFx0XHRcdFx0XHRzaW5Sb3RhdGlvbiAqIChmaXJzdExhYmVsU2l6ZS5oZWlnaHQgLSBmaXJzdExhYmVsU2l6ZS5vZmZzZXQpO1xuXHRcdFx0XHRcdHBhZGRpbmdSaWdodCA9IGlzQm90dG9tID9cblx0XHRcdFx0XHRcdHNpblJvdGF0aW9uICogKGxhc3RMYWJlbFNpemUuaGVpZ2h0IC0gbGFzdExhYmVsU2l6ZS5vZmZzZXQpIDpcblx0XHRcdFx0XHRcdGNvc1JvdGF0aW9uICogbGFzdExhYmVsU2l6ZS53aWR0aCArIHNpblJvdGF0aW9uICogbGFzdExhYmVsU2l6ZS5vZmZzZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cGFkZGluZ0xlZnQgPSBmaXJzdExhYmVsU2l6ZS53aWR0aCAvIDI7XG5cdFx0XHRcdFx0cGFkZGluZ1JpZ2h0ID0gbGFzdExhYmVsU2l6ZS53aWR0aCAvIDI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGp1c3QgcGFkZGluZyB0YWtpbmcgaW50byBhY2NvdW50IGNoYW5nZXMgaW4gb2Zmc2V0c1xuXHRcdFx0XHQvLyBhbmQgYWRkIDMgcHggdG8gbW92ZSBhd2F5IGZyb20gY2FudmFzIGVkZ2VzXG5cdFx0XHRcdG1lLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCkgKiBtZS53aWR0aCAvIChtZS53aWR0aCAtIG9mZnNldExlZnQpLCAwKSArIDM7XG5cdFx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCkgKiBtZS53aWR0aCAvIChtZS53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCkgKyAzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gQSB2ZXJ0aWNhbCBheGlzIGlzIG1vcmUgY29uc3RyYWluZWQgYnkgdGhlIHdpZHRoLiBMYWJlbHMgYXJlIHRoZVxuXHRcdFx0XHQvLyBkb21pbmFudCBmYWN0b3IgaGVyZSwgc28gZ2V0IHRoYXQgbGVuZ3RoIGZpcnN0IGFuZCBhY2NvdW50IGZvciBwYWRkaW5nXG5cdFx0XHRcdHZhciBsYWJlbFdpZHRoID0gdGlja09wdHMubWlycm9yID8gMCA6XG5cdFx0XHRcdFx0Ly8gdXNlIGxpbmVTcGFjZSBmb3IgY29uc2lzdGVuY3kgd2l0aCBob3Jpem9udGFsIGF4aXNcblx0XHRcdFx0XHQvLyB0aWNrUGFkZGluZyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGhvcml6b250YWxcblx0XHRcdFx0XHR3aWRlc3RMYWJlbFNpemUud2lkdGggKyB0aWNrUGFkZGluZyArIGxpbmVTcGFjZTtcblxuXHRcdFx0XHRtaW5TaXplLndpZHRoID0gTWF0aC5taW4obWUubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYWJlbFdpZHRoKTtcblxuXHRcdFx0XHRtZS5wYWRkaW5nVG9wID0gZmlyc3RMYWJlbFNpemUuaGVpZ2h0IC8gMjtcblx0XHRcdFx0bWUucGFkZGluZ0JvdHRvbSA9IGxhc3RMYWJlbFNpemUuaGVpZ2h0IC8gMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5oYW5kbGVNYXJnaW5zKCk7XG5cblx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRtZS53aWR0aCA9IG1lLl9sZW5ndGggPSBjaGFydC53aWR0aCAtIG1lLm1hcmdpbnMubGVmdCAtIG1lLm1hcmdpbnMucmlnaHQ7XG5cdFx0XHRtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUud2lkdGggPSBtaW5TaXplLndpZHRoO1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUuX2xlbmd0aCA9IGNoYXJ0LmhlaWdodCAtIG1lLm1hcmdpbnMudG9wIC0gbWUubWFyZ2lucy5ib3R0b207XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgbWFyZ2lucyBhbmQgcGFkZGluZyBpbnRlcmFjdGlvbnNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGhhbmRsZU1hcmdpbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0aWYgKG1lLm1hcmdpbnMpIHtcblx0XHRcdG1lLm1hcmdpbnMubGVmdCA9IE1hdGgubWF4KG1lLnBhZGRpbmdMZWZ0LCBtZS5tYXJnaW5zLmxlZnQpO1xuXHRcdFx0bWUubWFyZ2lucy50b3AgPSBNYXRoLm1heChtZS5wYWRkaW5nVG9wLCBtZS5tYXJnaW5zLnRvcCk7XG5cdFx0XHRtZS5tYXJnaW5zLnJpZ2h0ID0gTWF0aC5tYXgobWUucGFkZGluZ1JpZ2h0LCBtZS5tYXJnaW5zLnJpZ2h0KTtcblx0XHRcdG1lLm1hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgobWUucGFkZGluZ0JvdHRvbSwgbWUubWFyZ2lucy5ib3R0b20pO1xuXHRcdH1cblx0fSxcblxuXHRhZnRlckZpdDogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycyQxLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcblx0fSxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0cmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcblx0fSxcblx0aXNGdWxsV2lkdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMuZnVsbFdpZHRoO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgY29ycmVjdCB2YWx1ZS4gTmFOIGJhZCBpbnB1dHMsIElmIHRoZSB2YWx1ZSB0eXBlIGlzIG9iamVjdCBnZXQgdGhlIHggb3IgeSBiYXNlZCBvbiB3aGV0aGVyIHdlIGFyZSBob3Jpem9udGFsIG9yIG5vdFxuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdC8vIE51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMgZmlyc3Rcblx0XHRpZiAoaXNOdWxsT3JVbmRlZihyYXdWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fVxuXHRcdC8vIGlzTmFOKG9iamVjdCkgcmV0dXJucyB0cnVlLCBzbyBtYWtlIHN1cmUgTmFOIGlzIGNoZWNraW5nIGZvciBhIG51bWJlcjsgRGlzY2FyZCBJbmZpbml0ZSB2YWx1ZXNcblx0XHRpZiAoKHR5cGVvZiByYXdWYWx1ZSA9PT0gJ251bWJlcicgfHwgcmF3VmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZShyYXdWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgaXQgaXMgaW4gZmFjdCBhbiBvYmplY3QsIGRpdmUgaW4gb25lIG1vcmUgbGV2ZWxcblx0XHRpZiAocmF3VmFsdWUpIHtcblx0XHRcdGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdGlmIChyYXdWYWx1ZS54ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlLngpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHJhd1ZhbHVlLnkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlLnkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFZhbHVlIGlzIGdvb2QsIHJldHVybiBpdFxuXHRcdHJldHVybiByYXdWYWx1ZTtcblx0fSxcblxuXHRfY29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxzLCBpLCBpbGVuO1xuXG5cdFx0bWUudGlja3MgPSB0aWNrcy5tYXAoZnVuY3Rpb24odGljaykge1xuXHRcdFx0cmV0dXJuIHRpY2sudmFsdWU7XG5cdFx0fSk7XG5cblx0XHRtZS5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcblxuXHRcdC8vIE5ldyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiB0aGUgZm9ybWF0dGVkIHRpY2sgbGFiZWxzIGJ1dCBmb3IgQkFDS1dBUkRcblx0XHQvLyBDT01QQVQsIHdlIHN0aWxsIHN1cHBvcnQgbm8gcmV0dXJuIChgdGhpcy50aWNrc2AgaW50ZXJuYWxseSBjaGFuZ2VkIGJ5IGNhbGxpbmdcblx0XHQvLyB0aGlzIG1ldGhvZCBhbmQgc3VwcG9zZWQgdG8gY29udGFpbiBvbmx5IHN0cmluZyB2YWx1ZXMpLlxuXHRcdGxhYmVscyA9IG1lLmNvbnZlcnRUaWNrc1RvTGFiZWxzKHRpY2tzKSB8fCBtZS50aWNrcztcblxuXHRcdG1lLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG5cblx0XHQvLyBCQUNLV0FSRCBDT01QQVQ6IHN5bmNocm9uaXplIGBfdGlja3NgIHdpdGggbGFiZWxzIChzbyBwb3RlbnRpYWxseSBgdGhpcy50aWNrc2ApXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0dGlja3NbaV0ubGFiZWwgPSBsYWJlbHNbaV07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxhYmVscztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMYWJlbFNpemVzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbFNpemVzID0gbWUuX2xhYmVsU2l6ZXM7XG5cblx0XHRpZiAoIWxhYmVsU2l6ZXMpIHtcblx0XHRcdG1lLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IGNvbXB1dGVMYWJlbFNpemVzKG1lLmN0eCwgcGFyc2VUaWNrRm9udE9wdGlvbnMobWUub3B0aW9ucy50aWNrcyksIG1lLmdldFRpY2tzKCksIG1lLmxvbmdlc3RUZXh0Q2FjaGUpO1xuXHRcdFx0bWUubG9uZ2VzdExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGFiZWxTaXplcztcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9wYXJzZVZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBzdGFydCwgZW5kLCBtaW4sIG1heDtcblxuXHRcdGlmIChpc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0c3RhcnQgPSArdGhpcy5nZXRSaWdodFZhbHVlKHZhbHVlWzBdKTtcblx0XHRcdGVuZCA9ICt0aGlzLmdldFJpZ2h0VmFsdWUodmFsdWVbMV0pO1xuXHRcdFx0bWluID0gTWF0aC5taW4oc3RhcnQsIGVuZCk7XG5cdFx0XHRtYXggPSBNYXRoLm1heChzdGFydCwgZW5kKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFsdWUgPSArdGhpcy5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdHN0YXJ0ID0gdW5kZWZpbmVkO1xuXHRcdFx0ZW5kID0gdmFsdWU7XG5cdFx0XHRtaW4gPSB2YWx1ZTtcblx0XHRcdG1heCA9IHZhbHVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRtaW46IG1pbixcblx0XHRcdG1heDogbWF4LFxuXHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0ZW5kOiBlbmRcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQqIEBwcml2YXRlXG5cdCovXG5cdF9nZXRTY2FsZUxhYmVsOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdHZhciB2ID0gdGhpcy5fcGFyc2VWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0aWYgKHYuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICdbJyArIHYuc3RhcnQgKyAnLCAnICsgdi5lbmQgKyAnXSc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUocmF3VmFsdWUpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGdldCB0aGUgdmFsdWUgdG8gZGlzcGxheSBpbiB0aGUgdG9vbHRpcCBmb3IgdGhlIGRhdGEgYXQgdGhlIGdpdmVuIGluZGV4XG5cdCAqIEBwYXJhbSBpbmRleFxuXHQgKiBAcGFyYW0gZGF0YXNldEluZGV4XG5cdCAqL1xuXHRnZXRMYWJlbEZvckluZGV4OiBoZWxwZXJzJDEubm9vcCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlIGdpdmVuIGRhdGEgcG9pbnQuIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqIEBwYXJhbSB2YWx1ZVxuXHQgKiBAcGFyYW0gaW5kZXhcblx0ICogQHBhcmFtIGRhdGFzZXRJbmRleFxuXHQgKi9cblx0Z2V0UGl4ZWxGb3JWYWx1ZTogaGVscGVycyQxLm5vb3AsXG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZ2V0IHRoZSBkYXRhIHZhbHVlIGZyb20gYSBnaXZlbiBwaXhlbC4gVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBnZXRQaXhlbEZvclZhbHVlXG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKiBAcGFyYW0gcGl4ZWxcblx0ICovXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGhlbHBlcnMkMS5ub29wLFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBsb2NhdGlvbiBvZiB0aGUgdGljayBhdCB0aGUgZ2l2ZW4gaW5kZXhcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqL1xuXHRnZXRQaXhlbEZvclRpY2s6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0dmFyIG51bVRpY2tzID0gbWUuX3RpY2tzLmxlbmd0aDtcblx0XHR2YXIgdGlja1dpZHRoID0gMSAvIE1hdGgubWF4KG51bVRpY2tzIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG5cblx0XHRyZXR1cm4gaW5kZXggPCAwIHx8IGluZGV4ID4gbnVtVGlja3MgLSAxXG5cdFx0XHQ/IG51bGxcblx0XHRcdDogbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKGluZGV4ICogdGlja1dpZHRoICsgKG9mZnNldCA/IHRpY2tXaWR0aCAvIDIgOiAwKSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFV0aWxpdHkgZm9yIGdldHRpbmcgdGhlIHBpeGVsIGxvY2F0aW9uIG9mIGEgcGVyY2VudGFnZSBvZiBzY2FsZVxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICovXG5cdGdldFBpeGVsRm9yRGVjaW1hbDogZnVuY3Rpb24oZGVjaW1hbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAobWUuX3JldmVyc2VQaXhlbHMpIHtcblx0XHRcdGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWUuX3N0YXJ0UGl4ZWwgKyBkZWNpbWFsICogbWUuX2xlbmd0aDtcblx0fSxcblxuXHRnZXREZWNpbWFsRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIGRlY2ltYWwgPSAocGl4ZWwgLSB0aGlzLl9zdGFydFBpeGVsKSAvIHRoaXMuX2xlbmd0aDtcblx0XHRyZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgcGl4ZWwgZm9yIHRoZSBtaW5pbXVtIGNoYXJ0IHZhbHVlXG5cdCAqIFRoZSBjb29yZGluYXRlICgwLCAwKSBpcyBhdCB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhc1xuXHQgKi9cblx0Z2V0QmFzZVBpeGVsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuXHR9LFxuXG5cdGdldEJhc2VWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdHZhciBtYXggPSBtZS5tYXg7XG5cblx0XHRyZXR1cm4gbWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG5cdFx0XHRtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOlxuXHRcdFx0MDtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHN1YnNldCBvZiB0aWNrcyB0byBiZSBwbG90dGVkIHRvIGF2b2lkIG92ZXJsYXBwaW5nIGxhYmVscy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9hdXRvU2tpcDogZnVuY3Rpb24odGlja3MpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIGF4aXNMZW5ndGggPSBtZS5fbGVuZ3RoO1xuXHRcdHZhciB0aWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBheGlzTGVuZ3RoIC8gbWUuX3RpY2tTaXplKCkgKyAxO1xuXHRcdHZhciBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuXHRcdHZhciBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuXHRcdHZhciBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcblx0XHR2YXIgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcblx0XHR2YXIgaSwgaWxlbiwgc3BhY2luZywgYXZnTWFqb3JTcGFjaW5nO1xuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIHRvbyBtYW55IG1ham9yIHRpY2tzIHRvIGRpc3BsYXkgdGhlbSBhbGxcblx0XHRpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuXHRcdFx0c2tpcE1ham9ycyh0aWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcblx0XHRcdHJldHVybiBub25Ta2lwcGVkKHRpY2tzKTtcblx0XHR9XG5cblx0XHRzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCBheGlzTGVuZ3RoLCB0aWNrc0xpbWl0KTtcblxuXHRcdGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0XHRza2lwKHRpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuXHRcdFx0fVxuXHRcdFx0YXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpIDogbnVsbDtcblx0XHRcdHNraXAodGlja3MsIHNwYWNpbmcsIGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcblx0XHRcdHNraXAodGlja3MsIHNwYWNpbmcsIGxhc3QsIGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcblx0XHRcdHJldHVybiBub25Ta2lwcGVkKHRpY2tzKTtcblx0XHR9XG5cdFx0c2tpcCh0aWNrcywgc3BhY2luZyk7XG5cdFx0cmV0dXJuIG5vblNraXBwZWQodGlja3MpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X3RpY2tTaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25UaWNrcyA9IG1lLm9wdGlvbnMudGlja3M7XG5cblx0XHQvLyBDYWxjdWxhdGUgc3BhY2UgbmVlZGVkIGJ5IGxhYmVsIGluIGF4aXMgZGlyZWN0aW9uLlxuXHRcdHZhciByb3QgPSBoZWxwZXJzJDEudG9SYWRpYW5zKG1lLmxhYmVsUm90YXRpb24pO1xuXHRcdHZhciBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcblx0XHR2YXIgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG5cblx0XHR2YXIgbGFiZWxTaXplcyA9IG1lLl9nZXRMYWJlbFNpemVzKCk7XG5cdFx0dmFyIHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcblx0XHR2YXIgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuXHRcdHZhciBoID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBwYWRkaW5nIDogMDtcblxuXHRcdC8vIENhbGN1bGF0ZSBzcGFjZSBuZWVkZWQgZm9yIDEgdGljayBpbiBheGlzIGRpcmVjdGlvbi5cblx0XHRyZXR1cm4gbWUuaXNIb3Jpem9udGFsKClcblx0XHRcdD8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpblxuXHRcdFx0OiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2lzVmlzaWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgZGlzcGxheSA9IG1lLm9wdGlvbnMuZGlzcGxheTtcblx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcblx0XHRcdHJldHVybiAhIWRpc3BsYXk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiAnYXV0bycsIHRoZSBzY2FsZSBpcyB2aXNpYmxlIGlmIGF0IGxlYXN0IG9uZSBhc3NvY2lhdGVkIGRhdGFzZXQgaXMgdmlzaWJsZS5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0aWYgKG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgfHwgbWV0YS55QXhpc0lEID09PSBtZS5pZCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2NvbXB1dGVHcmlkTGluZUl0ZW1zOiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgZ3JpZExpbmVzID0gb3B0aW9ucy5ncmlkTGluZXM7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgb2Zmc2V0R3JpZExpbmVzID0gZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcztcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHRpY2tzID0gbWUuX3RpY2tzVG9EcmF3O1xuXHRcdHZhciB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXRHcmlkTGluZXMgPyAxIDogMCk7XG5cblx0XHR2YXIgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkTGluZXMpO1xuXHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdHZhciBheGlzV2lkdGggPSBncmlkTGluZXMuZHJhd0JvcmRlciA/IHZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMubGluZVdpZHRoLCAwLCAwKSA6IDA7XG5cdFx0dmFyIGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuXHRcdHZhciBhbGlnblBpeGVsID0gaGVscGVycyQxLl9hbGlnblBpeGVsO1xuXHRcdHZhciBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRcdHJldHVybiBhbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcblx0XHR9O1xuXHRcdHZhciBib3JkZXJWYWx1ZSwgaSwgdGljaywgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuXHRcdHZhciB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyLCBsaW5lV2lkdGgsIGxpbmVDb2xvciwgYm9yZGVyRGFzaCwgYm9yZGVyRGFzaE9mZnNldDtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcblx0XHRcdGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZShtZS5ib3R0b20pO1xuXHRcdFx0dHkxID0gbWUuYm90dG9tIC0gdGw7XG5cdFx0XHR0eTIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR5MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnRvcCkgKyBheGlzSGFsZldpZHRoO1xuXHRcdFx0eTIgPSBjaGFydEFyZWEuYm90dG9tO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG5cdFx0XHRib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUobWUudG9wKTtcblx0XHRcdHkxID0gY2hhcnRBcmVhLnRvcDtcblx0XHRcdHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR0eTIgPSBtZS50b3AgKyB0bDtcblx0XHR9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcblx0XHRcdGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZShtZS5yaWdodCk7XG5cdFx0XHR0eDEgPSBtZS5yaWdodCAtIHRsO1xuXHRcdFx0dHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuXHRcdFx0eDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG5cdFx0XHR4MiA9IGNoYXJ0QXJlYS5yaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ym9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKG1lLmxlZnQpO1xuXHRcdFx0eDEgPSBjaGFydEFyZWEubGVmdDtcblx0XHRcdHgyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEucmlnaHQpIC0gYXhpc0hhbGZXaWR0aDtcblx0XHRcdHR4MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcblx0XHRcdHR4MiA9IG1lLmxlZnQgKyB0bDtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgdGlja3NMZW5ndGg7ICsraSkge1xuXHRcdFx0dGljayA9IHRpY2tzW2ldIHx8IHt9O1xuXG5cdFx0XHQvLyBhdXRvc2tpcHBlciBza2lwcGVkIHRoaXMgdGljayAoIzQ2MzUpXG5cdFx0XHRpZiAoaXNOdWxsT3JVbmRlZih0aWNrLmxhYmVsKSAmJiBpIDwgdGlja3MubGVuZ3RoKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaSA9PT0gbWUuemVyb0xpbmVJbmRleCAmJiBvcHRpb25zLm9mZnNldCA9PT0gb2Zmc2V0R3JpZExpbmVzKSB7XG5cdFx0XHRcdC8vIERyYXcgdGhlIGZpcnN0IGluZGV4IHNwZWNpYWxseVxuXHRcdFx0XHRsaW5lV2lkdGggPSBncmlkTGluZXMuemVyb0xpbmVXaWR0aDtcblx0XHRcdFx0bGluZUNvbG9yID0gZ3JpZExpbmVzLnplcm9MaW5lQ29sb3I7XG5cdFx0XHRcdGJvcmRlckRhc2ggPSBncmlkTGluZXMuemVyb0xpbmVCb3JkZXJEYXNoIHx8IFtdO1xuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaE9mZnNldCB8fCAwLjA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmxpbmVXaWR0aCwgaSwgMSk7XG5cdFx0XHRcdGxpbmVDb2xvciA9IHZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMuY29sb3IsIGksICdyZ2JhKDAsMCwwLDAuMSknKTtcblx0XHRcdFx0Ym9yZGVyRGFzaCA9IGdyaWRMaW5lcy5ib3JkZXJEYXNoIHx8IFtdO1xuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLmJvcmRlckRhc2hPZmZzZXQgfHwgMC4wO1xuXHRcdFx0fVxuXG5cdFx0XHRsaW5lVmFsdWUgPSBnZXRQaXhlbEZvckdyaWRMaW5lKG1lLCB0aWNrLl9pbmRleCB8fCBpLCBvZmZzZXRHcmlkTGluZXMpO1xuXG5cdFx0XHQvLyBTa2lwIGlmIHRoZSBwaXhlbCBpcyBvdXQgb2YgdGhlIHJhbmdlXG5cdFx0XHRpZiAobGluZVZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGFsaWduZWRMaW5lVmFsdWUgPSBhbGlnblBpeGVsKGNoYXJ0LCBsaW5lVmFsdWUsIGxpbmVXaWR0aCk7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0dHgxID0gdHgyID0geDEgPSB4MiA9IGFsaWduZWRMaW5lVmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0eTEgPSB0eTIgPSB5MSA9IHkyID0gYWxpZ25lZExpbmVWYWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aXRlbXMucHVzaCh7XG5cdFx0XHRcdHR4MTogdHgxLFxuXHRcdFx0XHR0eTE6IHR5MSxcblx0XHRcdFx0dHgyOiB0eDIsXG5cdFx0XHRcdHR5MjogdHkyLFxuXHRcdFx0XHR4MTogeDEsXG5cdFx0XHRcdHkxOiB5MSxcblx0XHRcdFx0eDI6IHgyLFxuXHRcdFx0XHR5MjogeTIsXG5cdFx0XHRcdHdpZHRoOiBsaW5lV2lkdGgsXG5cdFx0XHRcdGNvbG9yOiBsaW5lQ29sb3IsXG5cdFx0XHRcdGJvcmRlckRhc2g6IGJvcmRlckRhc2gsXG5cdFx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IGJvcmRlckRhc2hPZmZzZXQsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpdGVtcy50aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuXHRcdGl0ZW1zLmJvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG5cblx0XHRyZXR1cm4gaXRlbXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY29tcHV0ZUxhYmVsSXRlbXM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBvcHRpb25UaWNrcyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgaXNNaXJyb3JlZCA9IG9wdGlvblRpY2tzLm1pcnJvcjtcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIHRpY2tzID0gbWUuX3RpY2tzVG9EcmF3O1xuXHRcdHZhciBmb250cyA9IHBhcnNlVGlja0ZvbnRPcHRpb25zKG9wdGlvblRpY2tzKTtcblx0XHR2YXIgdGlja1BhZGRpbmcgPSBvcHRpb25UaWNrcy5wYWRkaW5nO1xuXHRcdHZhciB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZExpbmVzKTtcblx0XHR2YXIgcm90YXRpb24gPSAtaGVscGVycyQxLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHR2YXIgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcblx0XHRcdHkgPSBtZS5ib3R0b20gLSB0bCAtIHRpY2tQYWRkaW5nO1xuXHRcdFx0dGV4dEFsaWduID0gIXJvdGF0aW9uID8gJ2NlbnRlcicgOiAnbGVmdCc7XG5cdFx0fSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcblx0XHRcdHkgPSBtZS50b3AgKyB0bCArIHRpY2tQYWRkaW5nO1xuXHRcdFx0dGV4dEFsaWduID0gIXJvdGF0aW9uID8gJ2NlbnRlcicgOiAncmlnaHQnO1xuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuXHRcdFx0eCA9IG1lLnJpZ2h0IC0gKGlzTWlycm9yZWQgPyAwIDogdGwpIC0gdGlja1BhZGRpbmc7XG5cdFx0XHR0ZXh0QWxpZ24gPSBpc01pcnJvcmVkID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHR9IGVsc2Uge1xuXHRcdFx0eCA9IG1lLmxlZnQgKyAoaXNNaXJyb3JlZCA/IDAgOiB0bCkgKyB0aWNrUGFkZGluZztcblx0XHRcdHRleHRBbGlnbiA9IGlzTWlycm9yZWQgPyAncmlnaHQnIDogJ2xlZnQnO1xuXHRcdH1cblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHRpY2sgPSB0aWNrc1tpXTtcblx0XHRcdGxhYmVsID0gdGljay5sYWJlbDtcblxuXHRcdFx0Ly8gYXV0b3NraXBwZXIgc2tpcHBlZCB0aGlzIHRpY2sgKCM0NjM1KVxuXHRcdFx0aWYgKGlzTnVsbE9yVW5kZWYobGFiZWwpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRwaXhlbCA9IG1lLmdldFBpeGVsRm9yVGljayh0aWNrLl9pbmRleCB8fCBpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuXHRcdFx0Zm9udCA9IHRpY2subWFqb3IgPyBmb250cy5tYWpvciA6IGZvbnRzLm1pbm9yO1xuXHRcdFx0bGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcblx0XHRcdGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHR4ID0gcGl4ZWw7XG5cdFx0XHRcdHRleHRPZmZzZXQgPSBwb3NpdGlvbiA9PT0gJ3RvcCdcblx0XHRcdFx0XHQ/ICgoIXJvdGF0aW9uID8gMC41IDogMSkgLSBsaW5lQ291bnQpICogbGluZUhlaWdodFxuXHRcdFx0XHRcdDogKCFyb3RhdGlvbiA/IDAuNSA6IDApICogbGluZUhlaWdodDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkgPSBwaXhlbDtcblx0XHRcdFx0dGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuXHRcdFx0fVxuXG5cdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdFx0cm90YXRpb246IHJvdGF0aW9uLFxuXHRcdFx0XHRsYWJlbDogbGFiZWwsXG5cdFx0XHRcdGZvbnQ6IGZvbnQsXG5cdFx0XHRcdHRleHRPZmZzZXQ6IHRleHRPZmZzZXQsXG5cdFx0XHRcdHRleHRBbGlnbjogdGV4dEFsaWduXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaXRlbXM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0dyaWQ6IGZ1bmN0aW9uKGNoYXJ0QXJlYSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGdyaWRMaW5lcyA9IG1lLm9wdGlvbnMuZ3JpZExpbmVzO1xuXG5cdFx0aWYgKCFncmlkTGluZXMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGFsaWduUGl4ZWwgPSBoZWxwZXJzJDEuX2FsaWduUGl4ZWw7XG5cdFx0dmFyIGF4aXNXaWR0aCA9IGdyaWRMaW5lcy5kcmF3Qm9yZGVyID8gdmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIDAsIDApIDogMDtcblx0XHR2YXIgaXRlbXMgPSBtZS5fZ3JpZExpbmVJdGVtcyB8fCAobWUuX2dyaWRMaW5lSXRlbXMgPSBtZS5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG5cdFx0dmFyIHdpZHRoLCBjb2xvciwgaSwgaWxlbiwgaXRlbTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdHdpZHRoID0gaXRlbS53aWR0aDtcblx0XHRcdGNvbG9yID0gaXRlbS5jb2xvcjtcblxuXHRcdFx0aWYgKHdpZHRoICYmIGNvbG9yKSB7XG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSB3aWR0aDtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG5cdFx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0XHRjdHguc2V0TGluZURhc2goaXRlbS5ib3JkZXJEYXNoKTtcblx0XHRcdFx0XHRjdHgubGluZURhc2hPZmZzZXQgPSBpdGVtLmJvcmRlckRhc2hPZmZzZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kcmF3VGlja3MpIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGl0ZW0udHgxLCBpdGVtLnR5MSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhpdGVtLnR4MiwgaXRlbS50eTIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kcmF3T25DaGFydEFyZWEpIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGl0ZW0ueDEsIGl0ZW0ueTEpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oaXRlbS54MiwgaXRlbS55Mik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGF4aXNXaWR0aCkge1xuXHRcdFx0Ly8gRHJhdyB0aGUgbGluZSBhdCB0aGUgZWRnZSBvZiB0aGUgYXhpc1xuXHRcdFx0dmFyIGZpcnN0TGluZVdpZHRoID0gYXhpc1dpZHRoO1xuXHRcdFx0dmFyIGxhc3RMaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmxpbmVXaWR0aCwgaXRlbXMudGlja3NMZW5ndGggLSAxLCAxKTtcblx0XHRcdHZhciBib3JkZXJWYWx1ZSA9IGl0ZW1zLmJvcmRlclZhbHVlO1xuXHRcdFx0dmFyIHgxLCB4MiwgeTEsIHkyO1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0eDEgPSBhbGlnblBpeGVsKGNoYXJ0LCBtZS5sZWZ0LCBmaXJzdExpbmVXaWR0aCkgLSBmaXJzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHgyID0gYWxpZ25QaXhlbChjaGFydCwgbWUucmlnaHQsIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHkxID0geTIgPSBib3JkZXJWYWx1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkxID0gYWxpZ25QaXhlbChjaGFydCwgbWUudG9wLCBmaXJzdExpbmVXaWR0aCkgLSBmaXJzdExpbmVXaWR0aCAvIDI7XG5cdFx0XHRcdHkyID0gYWxpZ25QaXhlbChjaGFydCwgbWUuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuXHRcdFx0XHR4MSA9IHgyID0gYm9yZGVyVmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5saW5lV2lkdGggPSBheGlzV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCAwKTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeDEsIHkxKTtcblx0XHRcdGN0eC5saW5lVG8oeDIsIHkyKTtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9uVGlja3MgPSBtZS5vcHRpb25zLnRpY2tzO1xuXG5cdFx0aWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgaXRlbXMgPSBtZS5fbGFiZWxJdGVtcyB8fCAobWUuX2xhYmVsSXRlbXMgPSBtZS5fY29tcHV0ZUxhYmVsSXRlbXMoKSk7XG5cdFx0dmFyIGksIGosIGlsZW4sIGpsZW4sIGl0ZW0sIHRpY2tGb250LCBsYWJlbCwgeTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdHRpY2tGb250ID0gaXRlbS5mb250O1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2UgZHJhdyB0ZXh0IGluIHRoZSBjb3JyZWN0IGNvbG9yIGFuZCBmb250XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LnRyYW5zbGF0ZShpdGVtLngsIGl0ZW0ueSk7XG5cdFx0XHRjdHgucm90YXRlKGl0ZW0ucm90YXRpb24pO1xuXHRcdFx0Y3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdGlja0ZvbnQuY29sb3I7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gaXRlbS50ZXh0QWxpZ247XG5cblx0XHRcdGxhYmVsID0gaXRlbS5sYWJlbDtcblx0XHRcdHkgPSBpdGVtLnRleHRPZmZzZXQ7XG5cdFx0XHRpZiAoaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuXHRcdFx0XHRcdC8vIFdlIGp1c3QgbWFrZSBzdXJlIHRoZSBtdWx0aWxpbmUgZWxlbWVudCBpcyBhIHN0cmluZyBoZXJlLi5cblx0XHRcdFx0XHRjdHguZmlsbFRleHQoJycgKyBsYWJlbFtqXSwgMCwgeSk7XG5cdFx0XHRcdFx0eSArPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHguZmlsbFRleHQobGFiZWwsIDAsIHkpO1xuXHRcdFx0fVxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd1RpdGxlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBzY2FsZUxhYmVsID0gb3B0aW9ucy5zY2FsZUxhYmVsO1xuXG5cdFx0aWYgKCFzY2FsZUxhYmVsLmRpc3BsYXkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgc2NhbGVMYWJlbEZvbnRDb2xvciA9IHZhbHVlT3JEZWZhdWx0JGEoc2NhbGVMYWJlbC5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdHZhciBzY2FsZUxhYmVsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQoc2NhbGVMYWJlbCk7XG5cdFx0dmFyIHNjYWxlTGFiZWxQYWRkaW5nID0gaGVscGVycyQxLm9wdGlvbnMudG9QYWRkaW5nKHNjYWxlTGFiZWwucGFkZGluZyk7XG5cdFx0dmFyIGhhbGZMaW5lSGVpZ2h0ID0gc2NhbGVMYWJlbEZvbnQubGluZUhlaWdodCAvIDI7XG5cdFx0dmFyIHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblx0XHR2YXIgcm90YXRpb24gPSAwO1xuXHRcdHZhciBzY2FsZUxhYmVsWCwgc2NhbGVMYWJlbFk7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHNjYWxlTGFiZWxYID0gbWUubGVmdCArIG1lLndpZHRoIC8gMjsgLy8gbWlkcG9pbnQgb2YgdGhlIHdpZHRoXG5cdFx0XHRzY2FsZUxhYmVsWSA9IHBvc2l0aW9uID09PSAnYm90dG9tJ1xuXHRcdFx0XHQ/IG1lLmJvdHRvbSAtIGhhbGZMaW5lSGVpZ2h0IC0gc2NhbGVMYWJlbFBhZGRpbmcuYm90dG9tXG5cdFx0XHRcdDogbWUudG9wICsgaGFsZkxpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy50b3A7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBpc0xlZnQgPSBwb3NpdGlvbiA9PT0gJ2xlZnQnO1xuXHRcdFx0c2NhbGVMYWJlbFggPSBpc0xlZnRcblx0XHRcdFx0PyBtZS5sZWZ0ICsgaGFsZkxpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy50b3Bcblx0XHRcdFx0OiBtZS5yaWdodCAtIGhhbGZMaW5lSGVpZ2h0IC0gc2NhbGVMYWJlbFBhZGRpbmcudG9wO1xuXHRcdFx0c2NhbGVMYWJlbFkgPSBtZS50b3AgKyBtZS5oZWlnaHQgLyAyO1xuXHRcdFx0cm90YXRpb24gPSBpc0xlZnQgPyAtMC41ICogTWF0aC5QSSA6IDAuNSAqIE1hdGguUEk7XG5cdFx0fVxuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHgudHJhbnNsYXRlKHNjYWxlTGFiZWxYLCBzY2FsZUxhYmVsWSk7XG5cdFx0Y3R4LnJvdGF0ZShyb3RhdGlvbik7XG5cdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHguZmlsbFN0eWxlID0gc2NhbGVMYWJlbEZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0Y3R4LmZvbnQgPSBzY2FsZUxhYmVsRm9udC5zdHJpbmc7XG5cdFx0Y3R4LmZpbGxUZXh0KHNjYWxlTGFiZWwubGFiZWxTdHJpbmcsIDAsIDApO1xuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oY2hhcnRBcmVhKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdGlmICghbWUuX2lzVmlzaWJsZSgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWUuX2RyYXdHcmlkKGNoYXJ0QXJlYSk7XG5cdFx0bWUuX2RyYXdUaXRsZSgpO1xuXHRcdG1lLl9kcmF3TGFiZWxzKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfbGF5ZXJzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuXHRcdHZhciBneiA9IG9wdHMuZ3JpZExpbmVzICYmIG9wdHMuZ3JpZExpbmVzLnogfHwgMDtcblxuXHRcdGlmICghbWUuX2lzVmlzaWJsZSgpIHx8IHR6ID09PSBneiB8fCBtZS5kcmF3ICE9PSBtZS5fZHJhdykge1xuXHRcdFx0Ly8gYmFja3dhcmQgY29tcGF0aWJpbGl0eTogZHJhdyBoYXMgYmVlbiBvdmVycmlkZGVuIGJ5IGN1c3RvbSBzY2FsZVxuXHRcdFx0cmV0dXJuIFt7XG5cdFx0XHRcdHo6IHR6LFxuXHRcdFx0XHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZS5kcmF3LmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW3tcblx0XHRcdHo6IGd6LFxuXHRcdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLl9kcmF3R3JpZC5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdFx0bWUuX2RyYXdUaXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9LCB7XG5cdFx0XHR6OiB0eixcblx0XHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5fZHJhd0xhYmVscy5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdH1cblx0XHR9XTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRNYXRjaGluZ1Zpc2libGVNZXRhczogZnVuY3Rpb24odHlwZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdHJldHVybiBtZS5jaGFydC5fZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpXG5cdFx0XHQuZmlsdGVyKGZ1bmN0aW9uKG1ldGEpIHtcblx0XHRcdFx0cmV0dXJuICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpXG5cdFx0XHRcdFx0JiYgKGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkKTtcblx0XHRcdH0pO1xuXHR9XG59KTtcblxuU2NhbGUucHJvdG90eXBlLl9kcmF3ID0gU2NhbGUucHJvdG90eXBlLmRyYXc7XG5cbnZhciBjb3JlX3NjYWxlID0gU2NhbGU7XG5cbnZhciBpc051bGxPclVuZGVmJDEgPSBoZWxwZXJzJDEuaXNOdWxsT3JVbmRlZjtcblxudmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdHBvc2l0aW9uOiAnYm90dG9tJ1xufTtcblxudmFyIHNjYWxlX2NhdGVnb3J5ID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0dmFyIHRpY2tzT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIG1pbiA9IHRpY2tzT3B0cy5taW47XG5cdFx0dmFyIG1heCA9IHRpY2tzT3B0cy5tYXg7XG5cdFx0dmFyIG1pbkluZGV4ID0gMDtcblx0XHR2YXIgbWF4SW5kZXggPSBsYWJlbHMubGVuZ3RoIC0gMTtcblx0XHR2YXIgZmluZEluZGV4O1xuXG5cdFx0aWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyB1c2VyIHNwZWNpZmllZCBtaW4gdmFsdWVcblx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1pbik7XG5cdFx0XHRpZiAoZmluZEluZGV4ID49IDApIHtcblx0XHRcdFx0bWluSW5kZXggPSBmaW5kSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyB1c2VyIHNwZWNpZmllZCBtYXggdmFsdWVcblx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1heCk7XG5cdFx0XHRpZiAoZmluZEluZGV4ID49IDApIHtcblx0XHRcdFx0bWF4SW5kZXggPSBmaW5kSW5kZXg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUubWluSW5kZXggPSBtaW5JbmRleDtcblx0XHRtZS5tYXhJbmRleCA9IG1heEluZGV4O1xuXHRcdG1lLm1pbiA9IGxhYmVsc1ttaW5JbmRleF07XG5cdFx0bWUubWF4ID0gbGFiZWxzW21heEluZGV4XTtcblx0fSxcblxuXHRidWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0dmFyIG1pbkluZGV4ID0gbWUubWluSW5kZXg7XG5cdFx0dmFyIG1heEluZGV4ID0gbWUubWF4SW5kZXg7XG5cblx0XHQvLyBJZiB3ZSBhcmUgdmlld2luZyBzb21lIHN1YnNldCBvZiBsYWJlbHMsIHNsaWNlIHRoZSBvcmlnaW5hbCBhcnJheVxuXHRcdG1lLnRpY2tzID0gKG1pbkluZGV4ID09PSAwICYmIG1heEluZGV4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWluSW5kZXgsIG1heEluZGV4ICsgMSk7XG5cdH0sXG5cblx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cblx0XHRpZiAoY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLl9nZXRWYWx1ZVNjYWxlSWQoKSA9PT0gbWUuaWQpIHtcblx0XHRcdHJldHVybiBtZS5nZXRSaWdodFZhbHVlKGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1lLl9nZXRMYWJlbHMoKVtpbmRleF07XG5cdH0sXG5cblx0X2NvbmZpZ3VyZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0dmFyIHRpY2tzID0gbWUudGlja3M7XG5cblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5fY29uZmlndXJlLmNhbGwobWUpO1xuXG5cdFx0aWYgKCFtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHZlcnRpY2FsIGNhdGVnb3J5IHNjYWxlIHJldmVyc2UgaXMgaW52ZXJ0ZWQuXG5cdFx0XHRtZS5fcmV2ZXJzZVBpeGVscyA9ICFtZS5fcmV2ZXJzZVBpeGVscztcblx0XHR9XG5cblx0XHRpZiAoIXRpY2tzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bWUuX3N0YXJ0VmFsdWUgPSBtZS5taW5JbmRleCAtIChvZmZzZXQgPyAwLjUgOiAwKTtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuXHR9LFxuXG5cdC8vIFVzZWQgdG8gZ2V0IGRhdGEgdmFsdWUgbG9jYXRpb25zLiAgVmFsdWUgY2FuIGVpdGhlciBiZSBhbiBpbmRleCBvciBhIG51bWVyaWNhbCB2YWx1ZVxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHZhbHVlQ2F0ZWdvcnksIGxhYmVscywgaWR4O1xuXG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDEoaW5kZXgpICYmICFpc051bGxPclVuZGVmJDEoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0dmFsdWUgPSBtZS5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF07XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdmFsdWUgaXMgYSBkYXRhIG9iamVjdCwgdGhlbiBpbmRleCBpcyB0aGUgaW5kZXggaW4gdGhlIGRhdGEgYXJyYXksXG5cdFx0Ly8gbm90IHRoZSBpbmRleCBvZiB0aGUgc2NhbGUuIFdlIG5lZWQgdG8gY2hhbmdlIHRoYXQuXG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDEodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZUNhdGVnb3J5ID0gbWUuaXNIb3Jpem9udGFsKCkgPyB2YWx1ZS54IDogdmFsdWUueTtcblx0XHR9XG5cdFx0aWYgKHZhbHVlQ2F0ZWdvcnkgIT09IHVuZGVmaW5lZCB8fCAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiBpc05hTihpbmRleCkpKSB7XG5cdFx0XHRsYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cdFx0XHR2YWx1ZSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdCh2YWx1ZUNhdGVnb3J5LCB2YWx1ZSk7XG5cdFx0XHRpZHggPSBsYWJlbHMuaW5kZXhPZih2YWx1ZSk7XG5cdFx0XHRpbmRleCA9IGlkeCAhPT0gLTEgPyBpZHggOiBpbmRleDtcblx0XHRcdGlmIChpc05hTihpbmRleCkpIHtcblx0XHRcdFx0aW5kZXggPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1lLmdldFBpeGVsRm9yRGVjaW1hbCgoaW5kZXggLSBtZS5fc3RhcnRWYWx1ZSkgLyBtZS5fdmFsdWVSYW5nZSk7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja3M7XG5cdFx0cmV0dXJuIGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDFcblx0XHRcdD8gbnVsbFxuXHRcdFx0OiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLCBpbmRleCArIHRoaXMubWluSW5kZXgpO1xuXHR9LFxuXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdmFsdWUgPSBNYXRoLnJvdW5kKG1lLl9zdGFydFZhbHVlICsgbWUuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIG1lLl92YWx1ZVJhbmdlKTtcblx0XHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIDApLCBtZS50aWNrcy5sZW5ndGggLSAxKTtcblx0fSxcblxuXHRnZXRCYXNlUGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmJvdHRvbTtcblx0fVxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyA9IGRlZmF1bHRDb25maWc7XG5zY2FsZV9jYXRlZ29yeS5fZGVmYXVsdHMgPSBfZGVmYXVsdHM7XG5cbnZhciBub29wID0gaGVscGVycyQxLm5vb3A7XG52YXIgaXNOdWxsT3JVbmRlZiQyID0gaGVscGVycyQxLmlzTnVsbE9yVW5kZWY7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzZXQgb2YgbGluZWFyIHRpY2tzXG4gKiBAcGFyYW0gZ2VuZXJhdGlvbk9wdGlvbnMgdGhlIG9wdGlvbnMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdGlja3NcbiAqIEBwYXJhbSBkYXRhUmFuZ2UgdGhlIHJhbmdlIG9mIHRoZSBkYXRhXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IGFycmF5IG9mIHRpY2sgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuXHR2YXIgdGlja3MgPSBbXTtcblx0Ly8gVG8gZ2V0IGEgXCJuaWNlXCIgdmFsdWUgZm9yIHRoZSB0aWNrIHNwYWNpbmcsIHdlIHdpbGwgdXNlIHRoZSBhcHByb3ByaWF0ZWx5IG5hbWVkXG5cdC8vIFwibmljZSBudW1iZXJcIiBhbGdvcml0aG0uIFNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTA2ODgxL25pY2UtbGFiZWwtYWxnb3JpdGhtLWZvci1jaGFydHMtd2l0aC1taW5pbXVtLXRpY2tzXG5cdC8vIGZvciBkZXRhaWxzLlxuXG5cdHZhciBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuXHR2YXIgc3RlcFNpemUgPSBnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZTtcblx0dmFyIHVuaXQgPSBzdGVwU2l6ZSB8fCAxO1xuXHR2YXIgbWF4TnVtU3BhY2VzID0gZ2VuZXJhdGlvbk9wdGlvbnMubWF4VGlja3MgLSAxO1xuXHR2YXIgbWluID0gZ2VuZXJhdGlvbk9wdGlvbnMubWluO1xuXHR2YXIgbWF4ID0gZ2VuZXJhdGlvbk9wdGlvbnMubWF4O1xuXHR2YXIgcHJlY2lzaW9uID0gZ2VuZXJhdGlvbk9wdGlvbnMucHJlY2lzaW9uO1xuXHR2YXIgcm1pbiA9IGRhdGFSYW5nZS5taW47XG5cdHZhciBybWF4ID0gZGF0YVJhbmdlLm1heDtcblx0dmFyIHNwYWNpbmcgPSBoZWxwZXJzJDEubmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4TnVtU3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuXHR2YXIgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG5cblx0Ly8gQmV5b25kIE1JTl9TUEFDSU5HIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgYmVpbmcgdG8gbG9zZSBwcmVjaXNpb25cblx0Ly8gc3VjaCB0aGF0IHdlIGNhbid0IGRvIHRoZSBtYXRoIG5lY2Vzc2FyeSB0byBnZW5lcmF0ZSB0aWNrc1xuXHRpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmIGlzTnVsbE9yVW5kZWYkMihtaW4pICYmIGlzTnVsbE9yVW5kZWYkMihtYXgpKSB7XG5cdFx0cmV0dXJuIFtybWluLCBybWF4XTtcblx0fVxuXG5cdG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcblx0aWYgKG51bVNwYWNlcyA+IG1heE51bVNwYWNlcykge1xuXHRcdC8vIElmIHRoZSBjYWxjdWxhdGVkIG51bSBvZiBzcGFjZXMgZXhjZWVkcyBtYXhOdW1TcGFjZXMsIHJlY2FsY3VsYXRlIGl0XG5cdFx0c3BhY2luZyA9IGhlbHBlcnMkMS5uaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhOdW1TcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG5cdH1cblxuXHRpZiAoc3RlcFNpemUgfHwgaXNOdWxsT3JVbmRlZiQyKHByZWNpc2lvbikpIHtcblx0XHQvLyBJZiBhIHByZWNpc2lvbiBpcyBub3Qgc3BlY2lmaWVkLCBjYWxjdWxhdGUgZmFjdG9yIGJhc2VkIG9uIHNwYWNpbmdcblx0XHRmYWN0b3IgPSBNYXRoLnBvdygxMCwgaGVscGVycyQxLl9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpKTtcblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0aGUgdXNlciBzcGVjaWZpZWQgYSBwcmVjaXNpb24sIHJvdW5kIHRvIHRoYXQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG5cdFx0ZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG5cdFx0c3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nICogZmFjdG9yKSAvIGZhY3Rvcjtcblx0fVxuXG5cdG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG5cdG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcblxuXHQvLyBJZiBtaW4sIG1heCBhbmQgc3RlcFNpemUgaXMgc2V0IGFuZCB0aGV5IG1ha2UgYW4gZXZlbmx5IHNwYWNlZCBzY2FsZSB1c2UgaXQuXG5cdGlmIChzdGVwU2l6ZSkge1xuXHRcdC8vIElmIHZlcnkgY2xvc2UgdG8gb3VyIHdob2xlIG51bWJlciwgdXNlIGl0LlxuXHRcdGlmICghaXNOdWxsT3JVbmRlZiQyKG1pbikgJiYgaGVscGVycyQxLmFsbW9zdFdob2xlKG1pbiAvIHNwYWNpbmcsIHNwYWNpbmcgLyAxMDAwKSkge1xuXHRcdFx0bmljZU1pbiA9IG1pbjtcblx0XHR9XG5cdFx0aWYgKCFpc051bGxPclVuZGVmJDIobWF4KSAmJiBoZWxwZXJzJDEuYWxtb3N0V2hvbGUobWF4IC8gc3BhY2luZywgc3BhY2luZyAvIDEwMDApKSB7XG5cdFx0XHRuaWNlTWF4ID0gbWF4O1xuXHRcdH1cblx0fVxuXG5cdG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuXHQvLyBJZiB2ZXJ5IGNsb3NlIHRvIG91ciByb3VuZGVkIHZhbHVlLCB1c2UgaXQuXG5cdGlmIChoZWxwZXJzJDEuYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG5cdH0gZWxzZSB7XG5cdFx0bnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG5cdH1cblxuXHRuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3Rvcjtcblx0bmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG5cdHRpY2tzLnB1c2goaXNOdWxsT3JVbmRlZiQyKG1pbikgPyBuaWNlTWluIDogbWluKTtcblx0Zm9yICh2YXIgaiA9IDE7IGogPCBudW1TcGFjZXM7ICsraikge1xuXHRcdHRpY2tzLnB1c2goTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IpO1xuXHR9XG5cdHRpY2tzLnB1c2goaXNOdWxsT3JVbmRlZiQyKG1heCkgPyBuaWNlTWF4IDogbWF4KTtcblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbnZhciBzY2FsZV9saW5lYXJiYXNlID0gY29yZV9zY2FsZS5leHRlbmQoe1xuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gK3ZhbHVlO1xuXHRcdH1cblx0XHRyZXR1cm4gY29yZV9zY2FsZS5wcm90b3R5cGUuZ2V0UmlnaHRWYWx1ZS5jYWxsKHRoaXMsIHZhbHVlKTtcblx0fSxcblxuXHRoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0Ly8gSWYgd2UgYXJlIGZvcmNpbmcgaXQgdG8gYmVnaW4gYXQgMCwgYnV0IDAgd2lsbCBhbHJlYWR5IGJlIHJlbmRlcmVkIG9uIHRoZSBjaGFydCxcblx0XHQvLyBkbyBub3RoaW5nIHNpbmNlIHRoYXQgd291bGQgbWFrZSB0aGUgY2hhcnQgd2VpcmQuIElmIHRoZSB1c2VyIHJlYWxseSB3YW50cyBhIHdlaXJkIGNoYXJ0XG5cdFx0Ly8gYXhpcywgdGhleSBjYW4gbWFudWFsbHkgb3ZlcnJpZGUgaXRcblx0XHRpZiAodGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdHZhciBtaW5TaWduID0gaGVscGVycyQxLnNpZ24obWUubWluKTtcblx0XHRcdHZhciBtYXhTaWduID0gaGVscGVycyQxLnNpZ24obWUubWF4KTtcblxuXHRcdFx0aWYgKG1pblNpZ24gPCAwICYmIG1heFNpZ24gPCAwKSB7XG5cdFx0XHRcdC8vIG1vdmUgdGhlIHRvcCB1cCB0byAwXG5cdFx0XHRcdG1lLm1heCA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKG1pblNpZ24gPiAwICYmIG1heFNpZ24gPiAwKSB7XG5cdFx0XHRcdC8vIG1vdmUgdGhlIGJvdHRvbSBkb3duIHRvIDBcblx0XHRcdFx0bWUubWluID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgc2V0TWluID0gdGlja09wdHMubWluICE9PSB1bmRlZmluZWQgfHwgdGlja09wdHMuc3VnZ2VzdGVkTWluICE9PSB1bmRlZmluZWQ7XG5cdFx0dmFyIHNldE1heCA9IHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkIHx8IHRpY2tPcHRzLnN1Z2dlc3RlZE1heCAhPT0gdW5kZWZpbmVkO1xuXG5cdFx0aWYgKHRpY2tPcHRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZS5taW4gPSB0aWNrT3B0cy5taW47XG5cdFx0fSBlbHNlIGlmICh0aWNrT3B0cy5zdWdnZXN0ZWRNaW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKG1lLm1pbiA9PT0gbnVsbCkge1xuXHRcdFx0XHRtZS5taW4gPSB0aWNrT3B0cy5zdWdnZXN0ZWRNaW47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIHRpY2tPcHRzLnN1Z2dlc3RlZE1pbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRtZS5tYXggPSB0aWNrT3B0cy5tYXg7XG5cdFx0fSBlbHNlIGlmICh0aWNrT3B0cy5zdWdnZXN0ZWRNYXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0XHRtZS5tYXggPSB0aWNrT3B0cy5zdWdnZXN0ZWRNYXg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5tYXggPSBNYXRoLm1heChtZS5tYXgsIHRpY2tPcHRzLnN1Z2dlc3RlZE1heCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNldE1pbiAhPT0gc2V0TWF4KSB7XG5cdFx0XHQvLyBXZSBzZXQgdGhlIG1pbiBvciB0aGUgbWF4IGJ1dCBub3QgYm90aC5cblx0XHRcdC8vIFNvIGVuc3VyZSB0aGF0IG91ciByYW5nZSBpcyBnb29kXG5cdFx0XHQvLyBJbnZlcnRlZCBvciAwIGxlbmd0aCByYW5nZSBjYW4gaGFwcGVuIHdoZW5cblx0XHRcdC8vIHRpY2tzLm1pbiBpcyBzZXQsIGFuZCBubyBkYXRhc2V0cyBhcmUgdmlzaWJsZVxuXHRcdFx0aWYgKG1lLm1pbiA+PSBtZS5tYXgpIHtcblx0XHRcdFx0aWYgKHNldE1pbikge1xuXHRcdFx0XHRcdG1lLm1heCA9IG1lLm1pbiArIDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWUubWluID0gbWUubWF4IC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChtZS5taW4gPT09IG1lLm1heCkge1xuXHRcdFx0bWUubWF4Kys7XG5cblx0XHRcdGlmICghdGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdFx0bWUubWluLS07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGdldFRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBzdGVwU2l6ZSA9IHRpY2tPcHRzLnN0ZXBTaXplO1xuXHRcdHZhciBtYXhUaWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdDtcblx0XHR2YXIgbWF4VGlja3M7XG5cblx0XHRpZiAoc3RlcFNpemUpIHtcblx0XHRcdG1heFRpY2tzID0gTWF0aC5jZWlsKG1lLm1heCAvIHN0ZXBTaXplKSAtIE1hdGguZmxvb3IobWUubWluIC8gc3RlcFNpemUpICsgMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF4VGlja3MgPSBtZS5fY29tcHV0ZVRpY2tMaW1pdCgpO1xuXHRcdFx0bWF4VGlja3NMaW1pdCA9IG1heFRpY2tzTGltaXQgfHwgMTE7XG5cdFx0fVxuXG5cdFx0aWYgKG1heFRpY2tzTGltaXQpIHtcblx0XHRcdG1heFRpY2tzID0gTWF0aC5taW4obWF4VGlja3NMaW1pdCwgbWF4VGlja3MpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXhUaWNrcztcblx0fSxcblxuXHRfY29tcHV0ZVRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0fSxcblxuXHRoYW5kbGVEaXJlY3Rpb25hbENoYW5nZXM6IG5vb3AsXG5cblx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHRpY2tPcHRzID0gb3B0cy50aWNrcztcblxuXHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCB0aGUgbWF4IG51bWJlciBvZiB0aWNrcyB3ZSBjYW4gc3VwcG9ydCBpdCBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZlxuXHRcdC8vIHRoZSBheGlzIGFyZWEuIEZvciBub3csIHdlIHNheSB0aGF0IHRoZSBtaW5pbXVtIHRpY2sgc3BhY2luZyBpbiBwaXhlbHMgbXVzdCBiZSA0MFxuXHRcdC8vIFdlIGFsc28gbGltaXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRpY2tzIHRvIDExIHdoaWNoIGdpdmVzIGEgbmljZSAxMCBzcXVhcmVzIG9uXG5cdFx0Ly8gdGhlIGdyYXBoLiBNYWtlIHN1cmUgd2UgYWx3YXlzIGhhdmUgYXQgbGVhc3QgMiB0aWNrc1xuXHRcdHZhciBtYXhUaWNrcyA9IG1lLmdldFRpY2tMaW1pdCgpO1xuXHRcdG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuXG5cdFx0dmFyIG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuXHRcdFx0bWF4VGlja3M6IG1heFRpY2tzLFxuXHRcdFx0bWluOiB0aWNrT3B0cy5taW4sXG5cdFx0XHRtYXg6IHRpY2tPcHRzLm1heCxcblx0XHRcdHByZWNpc2lvbjogdGlja09wdHMucHJlY2lzaW9uLFxuXHRcdFx0c3RlcFNpemU6IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5maXhlZFN0ZXBTaXplLCB0aWNrT3B0cy5zdGVwU2l6ZSlcblx0XHR9O1xuXHRcdHZhciB0aWNrcyA9IG1lLnRpY2tzID0gZ2VuZXJhdGVUaWNrcyhudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgbWUpO1xuXG5cdFx0bWUuaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzKCk7XG5cblx0XHQvLyBBdCB0aGlzIHBvaW50LCB3ZSBuZWVkIHRvIHVwZGF0ZSBvdXIgbWF4IGFuZCBtaW4gZ2l2ZW4gdGhlIHRpY2sgdmFsdWVzIHNpbmNlIHdlIGhhdmUgZXhwYW5kZWQgdGhlXG5cdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0bWUubWF4ID0gaGVscGVycyQxLm1heCh0aWNrcyk7XG5cdFx0bWUubWluID0gaGVscGVycyQxLm1pbih0aWNrcyk7XG5cblx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXG5cdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdG1lLmVuZCA9IG1lLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRtZS5lbmQgPSBtZS5tYXg7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdG1lLnRpY2tzQXNOdW1iZXJzID0gbWUudGlja3Muc2xpY2UoKTtcblx0XHRtZS56ZXJvTGluZUluZGV4ID0gbWUudGlja3MuaW5kZXhPZigwKTtcblxuXHRcdGNvcmVfc2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXHR9LFxuXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tzID0gbWUuZ2V0VGlja3MoKTtcblx0XHR2YXIgc3RhcnQgPSBtZS5taW47XG5cdFx0dmFyIGVuZCA9IG1lLm1heDtcblx0XHR2YXIgb2Zmc2V0O1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuX2NvbmZpZ3VyZS5jYWxsKG1lKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcblx0XHRcdG9mZnNldCA9IChlbmQgLSBzdGFydCkgLyBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAxLCAxKSAvIDI7XG5cdFx0XHRzdGFydCAtPSBvZmZzZXQ7XG5cdFx0XHRlbmQgKz0gb2Zmc2V0O1xuXHRcdH1cblx0XHRtZS5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuXHRcdG1lLl9lbmRWYWx1ZSA9IGVuZDtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuXHR9XG59KTtcblxudmFyIGRlZmF1bHRDb25maWckMSA9IHtcblx0cG9zaXRpb246ICdsZWZ0Jyxcblx0dGlja3M6IHtcblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHR9XG59O1xuXG52YXIgREVGQVVMVF9NSU4gPSAwO1xudmFyIERFRkFVTFRfTUFYID0gMTtcblxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrZWQsIG1ldGEpIHtcblx0dmFyIGtleSA9IFtcblx0XHRtZXRhLnR5cGUsXG5cdFx0Ly8gd2UgaGF2ZSBhIHNlcGFyYXRlIHN0YWNrIGZvciBzdGFjaz11bmRlZmluZWQgZGF0YXNldHMgd2hlbiB0aGUgb3B0cy5zdGFja2VkIGlzIHVuZGVmaW5lZFxuXHRcdHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQgPyBtZXRhLmluZGV4IDogJycsXG5cdFx0bWV0YS5zdGFja1xuXHRdLmpvaW4oJy4nKTtcblxuXHRpZiAoc3RhY2tzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdHN0YWNrc1trZXldID0ge1xuXHRcdFx0cG9zOiBbXSxcblx0XHRcdG5lZzogW11cblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHN0YWNrc1trZXldO1xufVxuXG5mdW5jdGlvbiBzdGFja0RhdGEoc2NhbGUsIHN0YWNrcywgbWV0YSwgZGF0YSkge1xuXHR2YXIgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciBzdGFja2VkID0gb3B0cy5zdGFja2VkO1xuXHR2YXIgc3RhY2sgPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywgc3RhY2tlZCwgbWV0YSk7XG5cdHZhciBwb3MgPSBzdGFjay5wb3M7XG5cdHZhciBuZWcgPSBzdGFjay5uZWc7XG5cdHZhciBpbGVuID0gZGF0YS5sZW5ndGg7XG5cdHZhciBpLCB2YWx1ZTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhW2ldKTtcblx0XHRpZiAoaXNOYU4odmFsdWUubWluKSB8fCBpc05hTih2YWx1ZS5tYXgpIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHBvc1tpXSA9IHBvc1tpXSB8fCAwO1xuXHRcdG5lZ1tpXSA9IG5lZ1tpXSB8fCAwO1xuXG5cdFx0aWYgKG9wdHMucmVsYXRpdmVQb2ludHMpIHtcblx0XHRcdHBvc1tpXSA9IDEwMDtcblx0XHR9IGVsc2UgaWYgKHZhbHVlLm1pbiA8IDAgfHwgdmFsdWUubWF4IDwgMCkge1xuXHRcdFx0bmVnW2ldICs9IHZhbHVlLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cG9zW2ldICs9IHZhbHVlLm1heDtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTWluTWF4KHNjYWxlLCBtZXRhLCBkYXRhKSB7XG5cdHZhciBpbGVuID0gZGF0YS5sZW5ndGg7XG5cdHZhciBpLCB2YWx1ZTtcblxuXHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSBzY2FsZS5fcGFyc2VWYWx1ZShkYXRhW2ldKTtcblx0XHRpZiAoaXNOYU4odmFsdWUubWluKSB8fCBpc05hTih2YWx1ZS5tYXgpIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHNjYWxlLm1pbiA9IE1hdGgubWluKHNjYWxlLm1pbiwgdmFsdWUubWluKTtcblx0XHRzY2FsZS5tYXggPSBNYXRoLm1heChzY2FsZS5tYXgsIHZhbHVlLm1heCk7XG5cdH1cbn1cblxudmFyIHNjYWxlX2xpbmVhciA9IHNjYWxlX2xpbmVhcmJhc2UuZXh0ZW5kKHtcblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbWV0YXNldHMgPSBtZS5fZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcblx0XHR2YXIgaGFzU3RhY2tzID0gb3B0cy5zdGFja2VkO1xuXHRcdHZhciBzdGFja3MgPSB7fTtcblx0XHR2YXIgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDtcblx0XHR2YXIgaSwgbWV0YSwgZGF0YSwgdmFsdWVzO1xuXG5cdFx0bWUubWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdG1lLm1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblxuXHRcdGlmIChoYXNTdGFja3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Zm9yIChpID0gMDsgIWhhc1N0YWNrcyAmJiBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdFx0aGFzU3RhY2tzID0gbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXTtcblx0XHRcdGRhdGEgPSBkYXRhc2V0c1ttZXRhLmluZGV4XS5kYXRhO1xuXHRcdFx0aWYgKGhhc1N0YWNrcykge1xuXHRcdFx0XHRzdGFja0RhdGEobWUsIHN0YWNrcywgbWV0YSwgZGF0YSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cGRhdGVNaW5NYXgobWUsIG1ldGEsIGRhdGEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhlbHBlcnMkMS5lYWNoKHN0YWNrcywgZnVuY3Rpb24oc3RhY2tWYWx1ZXMpIHtcblx0XHRcdHZhbHVlcyA9IHN0YWNrVmFsdWVzLnBvcy5jb25jYXQoc3RhY2tWYWx1ZXMubmVnKTtcblx0XHRcdG1lLm1pbiA9IE1hdGgubWluKG1lLm1pbiwgaGVscGVycyQxLm1pbih2YWx1ZXMpKTtcblx0XHRcdG1lLm1heCA9IE1hdGgubWF4KG1lLm1heCwgaGVscGVycyQxLm1heCh2YWx1ZXMpKTtcblx0XHR9KTtcblxuXHRcdG1lLm1pbiA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW4pICYmICFpc05hTihtZS5taW4pID8gbWUubWluIDogREVGQVVMVF9NSU47XG5cdFx0bWUubWF4ID0gaGVscGVycyQxLmlzRmluaXRlKG1lLm1heCkgJiYgIWlzTmFOKG1lLm1heCkgPyBtZS5tYXggOiBERUZBVUxUX01BWDtcblxuXHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heCwgdGlja3MuYmVnaW5BdFplcm9cblx0XHRtZS5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdH0sXG5cblx0Ly8gUmV0dXJucyB0aGUgbWF4aW11bSBudW1iZXIgb2YgdGlja3MgYmFzZWQgb24gdGhlIHNjYWxlIGRpbWVuc2lvblxuXHRfY29tcHV0ZVRpY2tMaW1pdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja0ZvbnQ7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHJldHVybiBNYXRoLmNlaWwobWUud2lkdGggLyA0MCk7XG5cdFx0fVxuXHRcdHRpY2tGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChtZS5vcHRpb25zLnRpY2tzKTtcblx0XHRyZXR1cm4gTWF0aC5jZWlsKG1lLmhlaWdodCAvIHRpY2tGb250LmxpbmVIZWlnaHQpO1xuXHR9LFxuXG5cdC8vIENhbGxlZCBhZnRlciB0aGUgdGlja3MgYXJlIGJ1aWx0LiBXZSBuZWVkXG5cdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBXZSBhcmUgaW4gYSB2ZXJ0aWNhbCBvcmllbnRhdGlvbi4gVGhlIHRvcCB2YWx1ZSBpcyB0aGUgaGlnaGVzdC4gU28gcmV2ZXJzZSB0aGUgYXJyYXlcblx0XHRcdHRoaXMudGlja3MucmV2ZXJzZSgpO1xuXHRcdH1cblx0fSxcblxuXHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0cmV0dXJuIHRoaXMuX2dldFNjYWxlTGFiZWwodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHR9LFxuXG5cdC8vIFV0aWxzXG5cdGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKCgrbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSkgLSBtZS5fc3RhcnRWYWx1ZSkgLyBtZS5fdmFsdWVSYW5nZSk7XG5cdH0sXG5cblx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2U7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja3NBc051bWJlcnM7XG5cdFx0aWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRpY2tzLmxlbmd0aCAtIDEpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XSk7XG5cdH1cbn0pO1xuXG4vLyBJTlRFUk5BTDogc3RhdGljIGRlZmF1bHQgb3B0aW9ucywgcmVnaXN0ZXJlZCBpbiBzcmMvaW5kZXguanNcbnZhciBfZGVmYXVsdHMkMSA9IGRlZmF1bHRDb25maWckMTtcbnNjYWxlX2xpbmVhci5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkMTtcblxudmFyIHZhbHVlT3JEZWZhdWx0JGIgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgbG9nMTAgPSBoZWxwZXJzJDEubWF0aC5sb2cxMDtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNldCBvZiBsb2dhcml0aG1pYyB0aWNrc1xuICogQHBhcmFtIGdlbmVyYXRpb25PcHRpb25zIHRoZSBvcHRpb25zIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHRpY2tzXG4gKiBAcGFyYW0gZGF0YVJhbmdlIHRoZSByYW5nZSBvZiB0aGUgZGF0YVxuICogQHJldHVybnMge251bWJlcltdfSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuXHR2YXIgdGlja3MgPSBbXTtcblxuXHR2YXIgdGlja1ZhbCA9IHZhbHVlT3JEZWZhdWx0JGIoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcblxuXHR2YXIgZW5kRXhwID0gTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWF4KSk7XG5cdHZhciBlbmRTaWduaWZpY2FuZCA9IE1hdGguY2VpbChkYXRhUmFuZ2UubWF4IC8gTWF0aC5wb3coMTAsIGVuZEV4cCkpO1xuXHR2YXIgZXhwLCBzaWduaWZpY2FuZDtcblxuXHRpZiAodGlja1ZhbCA9PT0gMCkge1xuXHRcdGV4cCA9IE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1pbk5vdFplcm8pKTtcblx0XHRzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IoZGF0YVJhbmdlLm1pbk5vdFplcm8gLyBNYXRoLnBvdygxMCwgZXhwKSk7XG5cblx0XHR0aWNrcy5wdXNoKHRpY2tWYWwpO1xuXHRcdHRpY2tWYWwgPSBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApO1xuXHR9IGVsc2Uge1xuXHRcdGV4cCA9IE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpO1xuXHRcdHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuXHR9XG5cdHZhciBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcblxuXHRkbyB7XG5cdFx0dGlja3MucHVzaCh0aWNrVmFsKTtcblxuXHRcdCsrc2lnbmlmaWNhbmQ7XG5cdFx0aWYgKHNpZ25pZmljYW5kID09PSAxMCkge1xuXHRcdFx0c2lnbmlmaWNhbmQgPSAxO1xuXHRcdFx0KytleHA7XG5cdFx0XHRwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG5cdFx0fVxuXG5cdFx0dGlja1ZhbCA9IE1hdGgucm91bmQoc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG5cdH0gd2hpbGUgKGV4cCA8IGVuZEV4cCB8fCAoZXhwID09PSBlbmRFeHAgJiYgc2lnbmlmaWNhbmQgPCBlbmRTaWduaWZpY2FuZCkpO1xuXG5cdHZhciBsYXN0VGljayA9IHZhbHVlT3JEZWZhdWx0JGIoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcblx0dGlja3MucHVzaChsYXN0VGljayk7XG5cblx0cmV0dXJuIHRpY2tzO1xufVxuXG52YXIgZGVmYXVsdENvbmZpZyQyID0ge1xuXHRwb3NpdGlvbjogJ2xlZnQnLFxuXG5cdC8vIGxhYmVsIHNldHRpbmdzXG5cdHRpY2tzOiB7XG5cdFx0Y2FsbGJhY2s6IGNvcmVfdGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pY1xuXHR9XG59O1xuXG4vLyBUT0RPKHYzKTogY2hhbmdlIHRoaXMgdG8gcG9zaXRpdmVPckRlZmF1bHRcbmZ1bmN0aW9uIG5vbk5lZ2F0aXZlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG52YXIgc2NhbGVfbG9nYXJpdGhtaWMgPSBjb3JlX3NjYWxlLmV4dGVuZCh7XG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdGZ1bmN0aW9uIElETWF0Y2hlcyhtZXRhKSB7XG5cdFx0XHRyZXR1cm4gaXNIb3Jpem9udGFsID8gbWV0YS54QXhpc0lEID09PSBtZS5pZCA6IG1ldGEueUF4aXNJRCA9PT0gbWUuaWQ7XG5cdFx0fVxuXHRcdHZhciBkYXRhc2V0SW5kZXgsIG1ldGEsIHZhbHVlLCBkYXRhLCBpLCBpbGVuO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIFJhbmdlXG5cdFx0bWUubWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXHRcdG1lLm1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblx0XHRtZS5taW5Ob3RaZXJvID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuXG5cdFx0dmFyIGhhc1N0YWNrcyA9IG9wdHMuc3RhY2tlZDtcblx0XHRpZiAoaGFzU3RhY2tzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGZvciAoZGF0YXNldEluZGV4ID0gMDsgZGF0YXNldEluZGV4IDwgZGF0YXNldHMubGVuZ3RoOyBkYXRhc2V0SW5kZXgrKykge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkgJiZcblx0XHRcdFx0XHRtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRoYXNTdGFja3MgPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG9wdHMuc3RhY2tlZCB8fCBoYXNTdGFja3MpIHtcblx0XHRcdHZhciB2YWx1ZXNQZXJTdGFjayA9IHt9O1xuXG5cdFx0XHRmb3IgKGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdHZhciBrZXkgPSBbXG5cdFx0XHRcdFx0bWV0YS50eXBlLFxuXHRcdFx0XHRcdC8vIHdlIGhhdmUgYSBzZXBhcmF0ZSBzdGFjayBmb3Igc3RhY2s9dW5kZWZpbmVkIGRhdGFzZXRzIHdoZW4gdGhlIG9wdHMuc3RhY2tlZCBpcyB1bmRlZmluZWRcblx0XHRcdFx0XHQoKG9wdHMuc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkgPyBkYXRhc2V0SW5kZXggOiAnJyksXG5cdFx0XHRcdFx0bWV0YS5zdGFja1xuXHRcdFx0XHRdLmpvaW4oJy4nKTtcblxuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdGlmICh2YWx1ZXNQZXJTdGFja1trZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHZhbHVlc1BlclN0YWNrW2tleV0gPSBbXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRkYXRhID0gZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhO1xuXHRcdFx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlcyA9IHZhbHVlc1BlclN0YWNrW2tleV07XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IG1lLl9wYXJzZVZhbHVlKGRhdGFbaV0pO1xuXHRcdFx0XHRcdFx0Ly8gaW52YWxpZCwgaGlkZGVuIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGlnbm9yZWRcblx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZS5taW4pIHx8IGlzTmFOKHZhbHVlLm1heCkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbiB8fCB2YWx1ZS5taW4gPCAwIHx8IHZhbHVlLm1heCA8IDApIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YWx1ZXNbaV0gPSB2YWx1ZXNbaV0gfHwgMDtcblx0XHRcdFx0XHRcdHZhbHVlc1tpXSArPSB2YWx1ZS5tYXg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGhlbHBlcnMkMS5lYWNoKHZhbHVlc1BlclN0YWNrLCBmdW5jdGlvbih2YWx1ZXNGb3JUeXBlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZXNGb3JUeXBlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgbWluVmFsID0gaGVscGVycyQxLm1pbih2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHR2YXIgbWF4VmFsID0gaGVscGVycyQxLm1heCh2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIG1pblZhbCk7XG5cdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5tYXgobWUubWF4LCBtYXhWYWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGRhdGFzZXRJbmRleCA9IDA7IGRhdGFzZXRJbmRleCA8IGRhdGFzZXRzLmxlbmd0aDsgZGF0YXNldEluZGV4KyspIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkgJiYgSURNYXRjaGVzKG1ldGEpKSB7XG5cdFx0XHRcdFx0ZGF0YSA9IGRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gbWUuX3BhcnNlVmFsdWUoZGF0YVtpXSk7XG5cdFx0XHRcdFx0XHQvLyBpbnZhbGlkLCBoaWRkZW4gYW5kIG5lZ2F0aXZlIHZhbHVlcyBhcmUgaWdub3JlZFxuXHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlLm1pbikgfHwgaXNOYU4odmFsdWUubWF4KSB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuIHx8IHZhbHVlLm1pbiA8IDAgfHwgdmFsdWUubWF4IDwgMCkge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWUubWluID0gTWF0aC5taW4odmFsdWUubWluLCBtZS5taW4pO1xuXHRcdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5tYXgodmFsdWUubWF4LCBtZS5tYXgpO1xuXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUubWluICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdG1lLm1pbk5vdFplcm8gPSBNYXRoLm1pbih2YWx1ZS5taW4sIG1lLm1pbk5vdFplcm8pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1lLm1pbiA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW4pID8gbWUubWluIDogbnVsbDtcblx0XHRtZS5tYXggPSBoZWxwZXJzJDEuaXNGaW5pdGUobWUubWF4KSA/IG1lLm1heCA6IG51bGw7XG5cdFx0bWUubWluTm90WmVybyA9IGhlbHBlcnMkMS5pc0Zpbml0ZShtZS5taW5Ob3RaZXJvKSA/IG1lLm1pbk5vdFplcm8gOiBudWxsO1xuXG5cdFx0Ly8gQ29tbW9uIGJhc2UgaW1wbGVtZW50YXRpb24gdG8gaGFuZGxlIHRpY2tzLm1pbiwgdGlja3MubWF4XG5cdFx0dGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdH0sXG5cblx0aGFuZGxlVGlja1JhbmdlT3B0aW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXHRcdHZhciBERUZBVUxUX01JTiA9IDE7XG5cdFx0dmFyIERFRkFVTFRfTUFYID0gMTA7XG5cblx0XHRtZS5taW4gPSBub25OZWdhdGl2ZU9yRGVmYXVsdCh0aWNrT3B0cy5taW4sIG1lLm1pbik7XG5cdFx0bWUubWF4ID0gbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWF4LCBtZS5tYXgpO1xuXG5cdFx0aWYgKG1lLm1pbiA9PT0gbWUubWF4KSB7XG5cdFx0XHRpZiAobWUubWluICE9PSAwICYmIG1lLm1pbiAhPT0gbnVsbCkge1xuXHRcdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5taW4pKSAtIDEpO1xuXHRcdFx0XHRtZS5tYXggPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSArIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUubWluID0gREVGQVVMVF9NSU47XG5cdFx0XHRcdG1lLm1heCA9IERFRkFVTFRfTUFYO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSAtIDEpO1xuXHRcdH1cblx0XHRpZiAobWUubWF4ID09PSBudWxsKSB7XG5cdFx0XHRtZS5tYXggPSBtZS5taW4gIT09IDBcblx0XHRcdFx0PyBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5taW4pKSArIDEpXG5cdFx0XHRcdDogREVGQVVMVF9NQVg7XG5cdFx0fVxuXHRcdGlmIChtZS5taW5Ob3RaZXJvID09PSBudWxsKSB7XG5cdFx0XHRpZiAobWUubWluID4gMCkge1xuXHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gbWUubWluO1xuXHRcdFx0fSBlbHNlIGlmIChtZS5tYXggPCAxKSB7XG5cdFx0XHRcdG1lLm1pbk5vdFplcm8gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChtZS5tYXgpKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gREVGQVVMVF9NSU47XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgcmV2ZXJzZSA9ICFtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdHZhciBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcblx0XHRcdG1pbjogbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWluKSxcblx0XHRcdG1heDogbm9uTmVnYXRpdmVPckRlZmF1bHQodGlja09wdHMubWF4KVxuXHRcdH07XG5cdFx0dmFyIHRpY2tzID0gbWUudGlja3MgPSBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIG1lKTtcblxuXHRcdC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5lZWQgdG8gdXBkYXRlIG91ciBtYXggYW5kIG1pbiBnaXZlbiB0aGUgdGljayB2YWx1ZXMgc2luY2Ugd2UgaGF2ZSBleHBhbmRlZCB0aGVcblx0XHQvLyByYW5nZSBvZiB0aGUgc2NhbGVcblx0XHRtZS5tYXggPSBoZWxwZXJzJDEubWF4KHRpY2tzKTtcblx0XHRtZS5taW4gPSBoZWxwZXJzJDEubWluKHRpY2tzKTtcblxuXHRcdGlmICh0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRyZXZlcnNlID0gIXJldmVyc2U7XG5cdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdG1lLmVuZCA9IG1lLm1pbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRtZS5lbmQgPSBtZS5tYXg7XG5cdFx0fVxuXHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHR0aWNrcy5yZXZlcnNlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnRpY2tWYWx1ZXMgPSB0aGlzLnRpY2tzLnNsaWNlKCk7XG5cblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKHRoaXMpO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgY29ycmVjdCB0b29sdGlwIGxhYmVsXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0U2NhbGVMYWJlbCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMudGlja1ZhbHVlcztcblx0XHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdKTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IHRpY2suXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBtaW5pbXVtIG5vdCB6ZXJvIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBmaXJzdCB0aWNrIHZhbHVlLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2dldEZpcnN0VGlja1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBleHAgPSBNYXRoLmZsb29yKGxvZzEwKHZhbHVlKSk7XG5cdFx0dmFyIHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih2YWx1ZSAvIE1hdGgucG93KDEwLCBleHApKTtcblxuXHRcdHJldHVybiBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApO1xuXHR9LFxuXG5cdF9jb25maWd1cmU6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHN0YXJ0ID0gbWUubWluO1xuXHRcdHZhciBvZmZzZXQgPSAwO1xuXG5cdFx0Y29yZV9zY2FsZS5wcm90b3R5cGUuX2NvbmZpZ3VyZS5jYWxsKG1lKTtcblxuXHRcdGlmIChzdGFydCA9PT0gMCkge1xuXHRcdFx0c3RhcnQgPSBtZS5fZ2V0Rmlyc3RUaWNrVmFsdWUobWUubWluTm90WmVybyk7XG5cdFx0XHRvZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdCRiKG1lLm9wdGlvbnMudGlja3MuZm9udFNpemUsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSkgLyBtZS5fbGVuZ3RoO1xuXHRcdH1cblxuXHRcdG1lLl9zdGFydFZhbHVlID0gbG9nMTAoc3RhcnQpO1xuXHRcdG1lLl92YWx1ZU9mZnNldCA9IG9mZnNldDtcblx0XHRtZS5fdmFsdWVSYW5nZSA9IChsb2cxMChtZS5tYXgpIC0gbG9nMTAoc3RhcnQpKSAvICgxIC0gb2Zmc2V0KTtcblx0fSxcblxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGRlY2ltYWwgPSAwO1xuXG5cdFx0dmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cblx0XHRpZiAodmFsdWUgPiBtZS5taW4gJiYgdmFsdWUgPiAwKSB7XG5cdFx0XHRkZWNpbWFsID0gKGxvZzEwKHZhbHVlKSAtIG1lLl9zdGFydFZhbHVlKSAvIG1lLl92YWx1ZVJhbmdlICsgbWUuX3ZhbHVlT2Zmc2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKGRlY2ltYWwpO1xuXHR9LFxuXG5cdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgZGVjaW1hbCA9IG1lLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCk7XG5cdFx0cmV0dXJuIGRlY2ltYWwgPT09IDAgJiYgbWUubWluID09PSAwXG5cdFx0XHQ/IDBcblx0XHRcdDogTWF0aC5wb3coMTAsIG1lLl9zdGFydFZhbHVlICsgKGRlY2ltYWwgLSBtZS5fdmFsdWVPZmZzZXQpICogbWUuX3ZhbHVlUmFuZ2UpO1xuXHR9XG59KTtcblxuLy8gSU5URVJOQUw6IHN0YXRpYyBkZWZhdWx0IG9wdGlvbnMsIHJlZ2lzdGVyZWQgaW4gc3JjL2luZGV4LmpzXG52YXIgX2RlZmF1bHRzJDIgPSBkZWZhdWx0Q29uZmlnJDI7XG5zY2FsZV9sb2dhcml0aG1pYy5fZGVmYXVsdHMgPSBfZGVmYXVsdHMkMjtcblxudmFyIHZhbHVlT3JEZWZhdWx0JGMgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQ7XG52YXIgdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEgPSBoZWxwZXJzJDEudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xudmFyIHJlc29sdmUkNCA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG5cbnZhciBkZWZhdWx0Q29uZmlnJDMgPSB7XG5cdGRpc3BsYXk6IHRydWUsXG5cblx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSBzY2FsaW5nIHRoZSBjaGFydCBmcm9tIHRoZSBjZW50cmVcblx0YW5pbWF0ZTogdHJ1ZSxcblx0cG9zaXRpb246ICdjaGFydEFyZWEnLFxuXG5cdGFuZ2xlTGluZXM6IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGNvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcblx0XHRsaW5lV2lkdGg6IDEsXG5cdFx0Ym9yZGVyRGFzaDogW10sXG5cdFx0Ym9yZGVyRGFzaE9mZnNldDogMC4wXG5cdH0sXG5cblx0Z3JpZExpbmVzOiB7XG5cdFx0Y2lyY3VsYXI6IGZhbHNlXG5cdH0sXG5cblx0Ly8gbGFiZWwgc2V0dGluZ3Ncblx0dGlja3M6IHtcblx0XHQvLyBCb29sZWFuIC0gU2hvdyBhIGJhY2tkcm9wIHRvIHRoZSBzY2FsZSBsYWJlbFxuXHRcdHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuXG5cdFx0Ly8gU3RyaW5nIC0gVGhlIGNvbG91ciBvZiB0aGUgbGFiZWwgYmFja2Ryb3Bcblx0XHRiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwwLjc1KScsXG5cblx0XHQvLyBOdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyBhYm92ZSAmIGJlbG93IHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRiYWNrZHJvcFBhZGRpbmdZOiAyLFxuXG5cdFx0Ly8gTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgdG8gdGhlIHNpZGUgb2YgdGhlIGxhYmVsIGluIHBpeGVsc1xuXHRcdGJhY2tkcm9wUGFkZGluZ1g6IDIsXG5cblx0XHRjYWxsYmFjazogY29yZV90aWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHR9LFxuXG5cdHBvaW50TGFiZWxzOiB7XG5cdFx0Ly8gQm9vbGVhbiAtIGlmIHRydWUsIHNob3cgcG9pbnQgbGFiZWxzXG5cdFx0ZGlzcGxheTogdHJ1ZSxcblxuXHRcdC8vIE51bWJlciAtIFBvaW50IGxhYmVsIGZvbnQgc2l6ZSBpbiBwaXhlbHNcblx0XHRmb250U2l6ZTogMTAsXG5cblx0XHQvLyBGdW5jdGlvbiAtIFVzZWQgdG8gY29udmVydCBwb2ludCBsYWJlbHNcblx0XHRjYWxsYmFjazogZnVuY3Rpb24obGFiZWwpIHtcblx0XHRcdHJldHVybiBsYWJlbDtcblx0XHR9XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSB7XG5cdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0aWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG5cdFx0cmV0dXJuIHZhbHVlT3JEZWZhdWx0JGModGlja09wdHMuZm9udFNpemUsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSkgKyB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZICogMjtcblx0fVxuXHRyZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGxpbmVIZWlnaHQsIGxhYmVsKSB7XG5cdGlmIChoZWxwZXJzJDEuaXNBcnJheShsYWJlbCkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dzogaGVscGVycyQxLmxvbmdlc3RUZXh0KGN0eCwgY3R4LmZvbnQsIGxhYmVsKSxcblx0XHRcdGg6IGxhYmVsLmxlbmd0aCAqIGxpbmVIZWlnaHRcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHR3OiBjdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoLFxuXHRcdGg6IGxpbmVIZWlnaHRcblx0fTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb3MsIHNpemUsIG1pbiwgbWF4KSB7XG5cdGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhcnQ6IHBvcyAtIChzaXplIC8gMiksXG5cdFx0XHRlbmQ6IHBvcyArIChzaXplIC8gMilcblx0XHR9O1xuXHR9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXJ0OiBwb3MgLSBzaXplLFxuXHRcdFx0ZW5kOiBwb3Ncblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdGFydDogcG9zLFxuXHRcdGVuZDogcG9zICsgc2l6ZVxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBmaXQgYSByYWRpYWwgbGluZWFyIHNjYWxlIHdpdGggcG9pbnQgbGFiZWxzXG4gKi9cbmZ1bmN0aW9uIGZpdFdpdGhQb2ludExhYmVscyhzY2FsZSkge1xuXG5cdC8vIFJpZ2h0LCB0aGlzIGlzIHJlYWxseSBjb25mdXNpbmcgYW5kIHRoZXJlIGlzIGEgbG90IG9mIG1hdGhzIGdvaW5nIG9uIGhlcmVcblx0Ly8gVGhlIGdpc3Qgb2YgdGhlIHByb2JsZW0gaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbm5uaWNrLzY5NmNjOWM1NWY0YjBiZWI4ZmU5XG5cdC8vXG5cdC8vIFJlYWN0aW9uOiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My90b29tdWNoc2NpZW5jZS5naWZcblx0Ly9cblx0Ly8gU29sdXRpb246XG5cdC8vXG5cdC8vIFdlIGFzc3VtZSB0aGUgcmFkaXVzIG9mIHRoZSBwb2x5Z29uIGlzIGhhbGYgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBhdCBmaXJzdFxuXHQvLyBhdCBlYWNoIGluZGV4IHdlIGNoZWNrIGlmIHRoZSB0ZXh0IG92ZXJsYXBzLlxuXHQvL1xuXHQvLyBXaGVyZSBpdCBkb2VzLCB3ZSBzdG9yZSB0aGF0IGFuZ2xlIGFuZCB0aGF0IGluZGV4LlxuXHQvL1xuXHQvLyBBZnRlciBmaW5kaW5nIHRoZSBsYXJnZXN0IGluZGV4IGFuZCBhbmdsZSB3ZSBjYWxjdWxhdGUgaG93IG11Y2ggd2UgbmVlZCB0byByZW1vdmVcblx0Ly8gZnJvbSB0aGUgc2hhcGUgcmFkaXVzIHRvIG1vdmUgdGhlIHBvaW50IGlud2FyZHMgYnkgdGhhdCB4LlxuXHQvL1xuXHQvLyBXZSBhdmVyYWdlIHRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZXMgdG8gZ2V0IHRoZSBtYXhpbXVtIHNoYXBlIHJhZGl1cyB0aGF0IGNhbiBmaXQgaW4gdGhlIGJveFxuXHQvLyBhbG9uZyB3aXRoIGxhYmVscy5cblx0Ly9cblx0Ly8gT25jZSB3ZSBoYXZlIHRoYXQsIHdlIGNhbiBmaW5kIHRoZSBjZW50cmUgcG9pbnQgZm9yIHRoZSBjaGFydCwgYnkgdGFraW5nIHRoZSB4IHRleHQgcHJvdHJ1c2lvblxuXHQvLyBvbiBlYWNoIHNpZGUsIHJlbW92aW5nIHRoYXQgZnJvbSB0aGUgc2l6ZSwgaGFsdmluZyBpdCBhbmQgYWRkaW5nIHRoZSBsZWZ0IHggcHJvdHJ1c2lvbiB3aWR0aC5cblx0Ly9cblx0Ly8gVGhpcyB3aWxsIG1lYW4gd2UgaGF2ZSBhIHNoYXBlIGZpdHRlZCB0byB0aGUgY2FudmFzLCBhcyBsYXJnZSBhcyBpdCBjYW4gYmUgd2l0aCB0aGUgbGFiZWxzXG5cdC8vIGFuZCBwb3NpdGlvbiBpdCBpbiB0aGUgbW9zdCBzcGFjZSBlZmZpY2llbnQgbWFubmVyXG5cdC8vXG5cdC8vIGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM0NjAxMzYzL3llYWhzY2llbmNlLmdpZlxuXG5cdHZhciBwbEZvbnQgPSBoZWxwZXJzJDEub3B0aW9ucy5fcGFyc2VGb250KHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHMpO1xuXG5cdC8vIEdldCBtYXhpbXVtIHJhZGl1cyBvZiB0aGUgcG9seWdvbi4gRWl0aGVyIGhhbGYgdGhlIGhlaWdodCAobWludXMgdGhlIHRleHQgd2lkdGgpIG9yIGhhbGYgdGhlIHdpZHRoLlxuXHQvLyBVc2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCArIGNoYW5nZS4gLSBNYWtlIHN1cmUgTC9SIHByb3RydXNpb24gaXMgYXQgbGVhc3QgMCB0byBzdG9wIGlzc3VlcyB3aXRoIGNlbnRyZSBwb2ludHNcblx0dmFyIGZ1cnRoZXN0TGltaXRzID0ge1xuXHRcdGw6IDAsXG5cdFx0cjogc2NhbGUud2lkdGgsXG5cdFx0dDogMCxcblx0XHRiOiBzY2FsZS5oZWlnaHQgLSBzY2FsZS5wYWRkaW5nVG9wXG5cdH07XG5cdHZhciBmdXJ0aGVzdEFuZ2xlcyA9IHt9O1xuXHR2YXIgaSwgdGV4dFNpemUsIHBvaW50UG9zaXRpb247XG5cblx0c2NhbGUuY3R4LmZvbnQgPSBwbEZvbnQuc3RyaW5nO1xuXHRzY2FsZS5fcG9pbnRMYWJlbFNpemVzID0gW107XG5cblx0dmFyIHZhbHVlQ291bnQgPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdGZvciAoaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcblx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBzY2FsZS5kcmF3aW5nQXJlYSArIDUpO1xuXHRcdHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShzY2FsZS5jdHgsIHBsRm9udC5saW5lSGVpZ2h0LCBzY2FsZS5wb2ludExhYmVsc1tpXSk7XG5cdFx0c2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuXG5cdFx0Ly8gQWRkIHF1YXJ0ZXIgY2lyY2xlIHRvIG1ha2UgZGVncmVlIDAgbWVhbiB0b3Agb2YgY2lyY2xlXG5cdFx0dmFyIGFuZ2xlUmFkaWFucyA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSk7XG5cdFx0dmFyIGFuZ2xlID0gaGVscGVycyQxLnRvRGVncmVlcyhhbmdsZVJhZGlhbnMpICUgMzYwO1xuXHRcdHZhciBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG5cdFx0dmFyIHZMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueSwgdGV4dFNpemUuaCwgOTAsIDI3MCk7XG5cblx0XHRpZiAoaExpbWl0cy5zdGFydCA8IGZ1cnRoZXN0TGltaXRzLmwpIHtcblx0XHRcdGZ1cnRoZXN0TGltaXRzLmwgPSBoTGltaXRzLnN0YXJ0O1xuXHRcdFx0ZnVydGhlc3RBbmdsZXMubCA9IGFuZ2xlUmFkaWFucztcblx0XHR9XG5cblx0XHRpZiAoaExpbWl0cy5lbmQgPiBmdXJ0aGVzdExpbWl0cy5yKSB7XG5cdFx0XHRmdXJ0aGVzdExpbWl0cy5yID0gaExpbWl0cy5lbmQ7XG5cdFx0XHRmdXJ0aGVzdEFuZ2xlcy5yID0gYW5nbGVSYWRpYW5zO1xuXHRcdH1cblxuXHRcdGlmICh2TGltaXRzLnN0YXJ0IDwgZnVydGhlc3RMaW1pdHMudCkge1xuXHRcdFx0ZnVydGhlc3RMaW1pdHMudCA9IHZMaW1pdHMuc3RhcnQ7XG5cdFx0XHRmdXJ0aGVzdEFuZ2xlcy50ID0gYW5nbGVSYWRpYW5zO1xuXHRcdH1cblxuXHRcdGlmICh2TGltaXRzLmVuZCA+IGZ1cnRoZXN0TGltaXRzLmIpIHtcblx0XHRcdGZ1cnRoZXN0TGltaXRzLmIgPSB2TGltaXRzLmVuZDtcblx0XHRcdGZ1cnRoZXN0QW5nbGVzLmIgPSBhbmdsZVJhZGlhbnM7XG5cdFx0fVxuXHR9XG5cblx0c2NhbGUuc2V0UmVkdWN0aW9ucyhzY2FsZS5kcmF3aW5nQXJlYSwgZnVydGhlc3RMaW1pdHMsIGZ1cnRoZXN0QW5nbGVzKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcblx0aWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcblx0XHRyZXR1cm4gJ2NlbnRlcic7XG5cdH0gZWxzZSBpZiAoYW5nbGUgPCAxODApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0cmV0dXJuICdyaWdodCc7XG59XG5cbmZ1bmN0aW9uIGZpbGxUZXh0KGN0eCwgdGV4dCwgcG9zaXRpb24sIGxpbmVIZWlnaHQpIHtcblx0dmFyIHkgPSBwb3NpdGlvbi55ICsgbGluZUhlaWdodCAvIDI7XG5cdHZhciBpLCBpbGVuO1xuXG5cdGlmIChoZWxwZXJzJDEuaXNBcnJheSh0ZXh0KSkge1xuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSB0ZXh0Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0Y3R4LmZpbGxUZXh0KHRleHRbaV0sIHBvc2l0aW9uLngsIHkpO1xuXHRcdFx0eSArPSBsaW5lSGVpZ2h0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjdHguZmlsbFRleHQodGV4dCwgcG9zaXRpb24ueCwgeSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gYWRqdXN0UG9pbnRQb3NpdGlvbkZvckxhYmVsSGVpZ2h0KGFuZ2xlLCB0ZXh0U2l6ZSwgcG9zaXRpb24pIHtcblx0aWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG5cdFx0cG9zaXRpb24ueSAtPSAodGV4dFNpemUuaCAvIDIpO1xuXHR9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcblx0XHRwb3NpdGlvbi55IC09IHRleHRTaXplLmg7XG5cdH1cbn1cblxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxzKHNjYWxlKSB7XG5cdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdHZhciBvcHRzID0gc2NhbGUub3B0aW9ucztcblx0dmFyIHBvaW50TGFiZWxPcHRzID0gb3B0cy5wb2ludExhYmVscztcblx0dmFyIHRpY2tCYWNrZHJvcEhlaWdodCA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKTtcblx0dmFyIG91dGVyRGlzdGFuY2UgPSBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXgpO1xuXHR2YXIgcGxGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChwb2ludExhYmVsT3B0cyk7XG5cblx0Y3R4LnNhdmUoKTtcblxuXHRjdHguZm9udCA9IHBsRm9udC5zdHJpbmc7XG5cdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRmb3IgKHZhciBpID0gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHQvLyBFeHRyYSBwaXhlbHMgb3V0IGZvciBzb21lIGxhYmVsIHNwYWNpbmdcblx0XHR2YXIgZXh0cmEgPSAoaSA9PT0gMCA/IHRpY2tCYWNrZHJvcEhlaWdodCAvIDIgOiAwKTtcblx0XHR2YXIgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyA1KTtcblxuXHRcdC8vIEtlZXAgdGhpcyBpbiBsb29wIHNpbmNlIHdlIG1heSBzdXBwb3J0IGFycmF5IHByb3BlcnRpZXMgaGVyZVxuXHRcdHZhciBwb2ludExhYmVsRm9udENvbG9yID0gdmFsdWVBdEluZGV4T3JEZWZhdWx0JDEocG9pbnRMYWJlbE9wdHMuZm9udENvbG9yLCBpLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHRjdHguZmlsbFN0eWxlID0gcG9pbnRMYWJlbEZvbnRDb2xvcjtcblxuXHRcdHZhciBhbmdsZVJhZGlhbnMgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKGkpO1xuXHRcdHZhciBhbmdsZSA9IGhlbHBlcnMkMS50b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKTtcblx0XHRjdHgudGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuXHRcdGFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodChhbmdsZSwgc2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uKTtcblx0XHRmaWxsVGV4dChjdHgsIHNjYWxlLnBvaW50TGFiZWxzW2ldLCBwb2ludExhYmVsUG9zaXRpb24sIHBsRm9udC5saW5lSGVpZ2h0KTtcblx0fVxuXHRjdHgucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiBkcmF3UmFkaXVzTGluZShzY2FsZSwgZ3JpZExpbmVPcHRzLCByYWRpdXMsIGluZGV4KSB7XG5cdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdHZhciBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcblx0dmFyIHZhbHVlQ291bnQgPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdHZhciBsaW5lQ29sb3IgPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMShncmlkTGluZU9wdHMuY29sb3IsIGluZGV4IC0gMSk7XG5cdHZhciBsaW5lV2lkdGggPSB2YWx1ZUF0SW5kZXhPckRlZmF1bHQkMShncmlkTGluZU9wdHMubGluZVdpZHRoLCBpbmRleCAtIDEpO1xuXHR2YXIgcG9pbnRQb3NpdGlvbjtcblxuXHRpZiAoKCFjaXJjdWxhciAmJiAhdmFsdWVDb3VudCkgfHwgIWxpbmVDb2xvciB8fCAhbGluZVdpZHRoKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y3R4LnNhdmUoKTtcblx0Y3R4LnN0cm9rZVN0eWxlID0gbGluZUNvbG9yO1xuXHRjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuXHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0Y3R4LnNldExpbmVEYXNoKGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoIHx8IFtdKTtcblx0XHRjdHgubGluZURhc2hPZmZzZXQgPSBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldCB8fCAwLjA7XG5cdH1cblxuXHRjdHguYmVnaW5QYXRoKCk7XG5cdGlmIChjaXJjdWxhcikge1xuXHRcdC8vIERyYXcgY2lyY3VsYXIgYXJjcyBiZXR3ZWVuIHRoZSBwb2ludHNcblx0XHRjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIERyYXcgc3RyYWlnaHQgbGluZXMgY29ubmVjdGluZyBlYWNoIGluZGV4XG5cdFx0cG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcblx0XHRjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG5cdFx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG5cdFx0fVxuXHR9XG5cdGN0eC5jbG9zZVBhdGgoKTtcblx0Y3R4LnN0cm9rZSgpO1xuXHRjdHgucmVzdG9yZSgpO1xufVxuXG5mdW5jdGlvbiBudW1iZXJPclplcm8ocGFyYW0pIHtcblx0cmV0dXJuIGhlbHBlcnMkMS5pc051bWJlcihwYXJhbSkgPyBwYXJhbSA6IDA7XG59XG5cbnZhciBzY2FsZV9yYWRpYWxMaW5lYXIgPSBzY2FsZV9saW5lYXJiYXNlLmV4dGVuZCh7XG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXHRcdG1lLnBhZGRpbmdUb3AgPSBnZXRUaWNrQmFja2Ryb3BIZWlnaHQobWUub3B0aW9ucykgLyAyO1xuXHRcdG1lLnhDZW50ZXIgPSBNYXRoLmZsb29yKG1lLndpZHRoIC8gMik7XG5cdFx0bWUueUNlbnRlciA9IE1hdGguZmxvb3IoKG1lLmhlaWdodCAtIG1lLnBhZGRpbmdUb3ApIC8gMik7XG5cdFx0bWUuZHJhd2luZ0FyZWEgPSBNYXRoLm1pbihtZS5oZWlnaHQgLSBtZS5wYWRkaW5nVG9wLCBtZS53aWR0aCkgLyAyO1xuXHR9LFxuXG5cdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0dmFyIG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR2YXIgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG5cdFx0aGVscGVycyQxLmVhY2goY2hhcnQuZGF0YS5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpKSB7XG5cdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblxuXHRcdFx0XHRoZWxwZXJzJDEuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRpZiAoaXNOYU4odmFsdWUpIHx8IG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWluID0gTWF0aC5taW4odmFsdWUsIG1pbik7XG5cdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgodmFsdWUsIG1heCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0bWUubWluID0gKG1pbiA9PT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID8gMCA6IG1pbik7XG5cdFx0bWUubWF4ID0gKG1heCA9PT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID8gMCA6IG1heCk7XG5cblx0XHQvLyBDb21tb24gYmFzZSBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgdGlja3MubWluLCB0aWNrcy5tYXgsIHRpY2tzLmJlZ2luQXRaZXJvXG5cdFx0bWUuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHR9LFxuXG5cdC8vIFJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRpY2tzIGJhc2VkIG9uIHRoZSBzY2FsZSBkaW1lbnNpb25cblx0X2NvbXB1dGVUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNYXRoLmNlaWwodGhpcy5kcmF3aW5nQXJlYSAvIGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpKTtcblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdHNjYWxlX2xpbmVhcmJhc2UucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXG5cdFx0Ly8gUG9pbnQgbGFiZWxzXG5cdFx0bWUucG9pbnRMYWJlbHMgPSBtZS5jaGFydC5kYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGFiZWwgPSBoZWxwZXJzJDEuY2FsbGJhY2sobWUub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjaywgYXJndW1lbnRzLCBtZSk7XG5cdFx0XHRyZXR1cm4gbGFiZWwgfHwgbGFiZWwgPT09IDAgPyBsYWJlbCA6ICcnO1xuXHRcdH0pO1xuXHR9LFxuXG5cdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRyZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdH0sXG5cblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblxuXHRcdGlmIChvcHRzLmRpc3BsYXkgJiYgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG5cdFx0XHRmaXRXaXRoUG9pbnRMYWJlbHMobWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCByYWRpdXMgcmVkdWN0aW9ucyBhbmQgZGV0ZXJtaW5lIG5ldyByYWRpdXMgYW5kIGNlbnRlciBwb2ludFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c2V0UmVkdWN0aW9uczogZnVuY3Rpb24obGFyZ2VzdFBvc3NpYmxlUmFkaXVzLCBmdXJ0aGVzdExpbWl0cywgZnVydGhlc3RBbmdsZXMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciByYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gZnVydGhlc3RMaW1pdHMubCAvIE1hdGguc2luKGZ1cnRoZXN0QW5nbGVzLmwpO1xuXHRcdHZhciByYWRpdXNSZWR1Y3Rpb25SaWdodCA9IE1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLnIgLSBtZS53aWR0aCwgMCkgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5yKTtcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uVG9wID0gLWZ1cnRoZXN0TGltaXRzLnQgLyBNYXRoLmNvcyhmdXJ0aGVzdEFuZ2xlcy50KTtcblx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uQm90dG9tID0gLU1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLmIgLSAobWUuaGVpZ2h0IC0gbWUucGFkZGluZ1RvcCksIDApIC8gTWF0aC5jb3MoZnVydGhlc3RBbmdsZXMuYik7XG5cblx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvbkxlZnQpO1xuXHRcdHJhZGl1c1JlZHVjdGlvblJpZ2h0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvblJpZ2h0KTtcblx0XHRyYWRpdXNSZWR1Y3Rpb25Ub3AgPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uVG9wKTtcblx0XHRyYWRpdXNSZWR1Y3Rpb25Cb3R0b20gPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblxuXHRcdG1lLmRyYXdpbmdBcmVhID0gTWF0aC5taW4oXG5cdFx0XHRNYXRoLmZsb29yKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25MZWZ0ICsgcmFkaXVzUmVkdWN0aW9uUmlnaHQpIC8gMiksXG5cdFx0XHRNYXRoLmZsb29yKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25Ub3AgKyByYWRpdXNSZWR1Y3Rpb25Cb3R0b20pIC8gMikpO1xuXHRcdG1lLnNldENlbnRlclBvaW50KHJhZGl1c1JlZHVjdGlvbkxlZnQsIHJhZGl1c1JlZHVjdGlvblJpZ2h0LCByYWRpdXNSZWR1Y3Rpb25Ub3AsIHJhZGl1c1JlZHVjdGlvbkJvdHRvbSk7XG5cdH0sXG5cblx0c2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uKGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWF4UmlnaHQgPSBtZS53aWR0aCAtIHJpZ2h0TW92ZW1lbnQgLSBtZS5kcmF3aW5nQXJlYTtcblx0XHR2YXIgbWF4TGVmdCA9IGxlZnRNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdHZhciBtYXhUb3AgPSB0b3BNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdHZhciBtYXhCb3R0b20gPSAobWUuaGVpZ2h0IC0gbWUucGFkZGluZ1RvcCkgLSBib3R0b21Nb3ZlbWVudCAtIG1lLmRyYXdpbmdBcmVhO1xuXG5cdFx0bWUueENlbnRlciA9IE1hdGguZmxvb3IoKChtYXhMZWZ0ICsgbWF4UmlnaHQpIC8gMikgKyBtZS5sZWZ0KTtcblx0XHRtZS55Q2VudGVyID0gTWF0aC5mbG9vcigoKG1heFRvcCArIG1heEJvdHRvbSkgLyAyKSArIG1lLnRvcCArIG1lLnBhZGRpbmdUb3ApO1xuXHR9LFxuXG5cdGdldEluZGV4QW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHR2YXIgYW5nbGVNdWx0aXBsaWVyID0gMzYwIC8gY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoO1xuXHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuXG5cdFx0Ly8gU3RhcnQgZnJvbSB0aGUgdG9wIGluc3RlYWQgb2YgcmlnaHQsIHNvIHJlbW92ZSBhIHF1YXJ0ZXIgb2YgdGhlIGNpcmNsZVxuXHRcdHZhciBhbmdsZSA9IChpbmRleCAqIGFuZ2xlTXVsdGlwbGllciArIHN0YXJ0QW5nbGUpICUgMzYwO1xuXG5cdFx0cmV0dXJuIChhbmdsZSA8IDAgPyBhbmdsZSArIDM2MCA6IGFuZ2xlKSAqIE1hdGguUEkgKiAyIC8gMzYwO1xuXHR9LFxuXG5cdGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRpZiAoaGVscGVycyQxLmlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH1cblxuXHRcdC8vIFRha2UgaW50byBhY2NvdW50IGhhbGYgZm9udCBzaXplICsgdGhlIHlQYWRkaW5nIG9mIHRoZSB0b3AgdmFsdWVcblx0XHR2YXIgc2NhbGluZ0ZhY3RvciA9IG1lLmRyYXdpbmdBcmVhIC8gKG1lLm1heCAtIG1lLm1pbik7XG5cdFx0aWYgKG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZSkge1xuXHRcdFx0cmV0dXJuIChtZS5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuXHRcdH1cblx0XHRyZXR1cm4gKHZhbHVlIC0gbWUubWluKSAqIHNjYWxpbmdGYWN0b3I7XG5cdH0sXG5cblx0Z2V0UG9pbnRQb3NpdGlvbjogZnVuY3Rpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlcikge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRoaXNBbmdsZSA9IG1lLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gKE1hdGguUEkgLyAyKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIG1lLnhDZW50ZXIsXG5cdFx0XHR5OiBNYXRoLnNpbih0aGlzQW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgbWUueUNlbnRlclxuXHRcdH07XG5cdH0sXG5cblx0Z2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlOiBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG5cdH0sXG5cblx0Z2V0QmFzZVBvc2l0aW9uOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHR2YXIgbWF4ID0gbWUubWF4O1xuXG5cdFx0cmV0dXJuIG1lLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLFxuXHRcdFx0bWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG5cdFx0XHRtaW4gPiAwICYmIG1heCA+IDAgPyBtaW4gOlxuXHRcdFx0MCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0dyaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGdyaWRMaW5lT3B0cyA9IG9wdHMuZ3JpZExpbmVzO1xuXHRcdHZhciBhbmdsZUxpbmVPcHRzID0gb3B0cy5hbmdsZUxpbmVzO1xuXHRcdHZhciBsaW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdCRjKGFuZ2xlTGluZU9wdHMubGluZVdpZHRoLCBncmlkTGluZU9wdHMubGluZVdpZHRoKTtcblx0XHR2YXIgbGluZUNvbG9yID0gdmFsdWVPckRlZmF1bHQkYyhhbmdsZUxpbmVPcHRzLmNvbG9yLCBncmlkTGluZU9wdHMuY29sb3IpO1xuXHRcdHZhciBpLCBvZmZzZXQsIHBvc2l0aW9uO1xuXG5cdFx0aWYgKG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuXHRcdFx0ZHJhd1BvaW50TGFiZWxzKG1lKTtcblx0XHR9XG5cblx0XHRpZiAoZ3JpZExpbmVPcHRzLmRpc3BsYXkpIHtcblx0XHRcdGhlbHBlcnMkMS5lYWNoKG1lLnRpY2tzLCBmdW5jdGlvbihsYWJlbCwgaW5kZXgpIHtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdFx0b2Zmc2V0ID0gbWUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUobWUudGlja3NBc051bWJlcnNbaW5kZXhdKTtcblx0XHRcdFx0XHRkcmF3UmFkaXVzTGluZShtZSwgZ3JpZExpbmVPcHRzLCBvZmZzZXQsIGluZGV4KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKGFuZ2xlTGluZU9wdHMuZGlzcGxheSAmJiBsaW5lV2lkdGggJiYgbGluZUNvbG9yKSB7XG5cdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGxpbmVDb2xvcjtcblx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKHJlc29sdmUkNChbYW5nbGVMaW5lT3B0cy5ib3JkZXJEYXNoLCBncmlkTGluZU9wdHMuYm9yZGVyRGFzaCwgW11dKSk7XG5cdFx0XHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHJlc29sdmUkNChbYW5nbGVMaW5lT3B0cy5ib3JkZXJEYXNoT2Zmc2V0LCBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldCwgMC4wXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoaSA9IG1lLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdG9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG9wdHMudGlja3MucmV2ZXJzZSA/IG1lLm1pbiA6IG1lLm1heCk7XG5cdFx0XHRcdHBvc2l0aW9uID0gbWUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8obWUueENlbnRlciwgbWUueUNlbnRlcik7XG5cdFx0XHRcdGN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd0xhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0aWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHN0YXJ0QW5nbGUgPSBtZS5nZXRJbmRleEFuZ2xlKDApO1xuXHRcdHZhciB0aWNrRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQodGlja09wdHMpO1xuXHRcdHZhciB0aWNrRm9udENvbG9yID0gdmFsdWVPckRlZmF1bHQkYyh0aWNrT3B0cy5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdHZhciBvZmZzZXQsIHdpZHRoO1xuXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcblx0XHRjdHgudHJhbnNsYXRlKG1lLnhDZW50ZXIsIG1lLnlDZW50ZXIpO1xuXHRcdGN0eC5yb3RhdGUoc3RhcnRBbmdsZSk7XG5cdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRcdGhlbHBlcnMkMS5lYWNoKG1lLnRpY2tzLCBmdW5jdGlvbihsYWJlbCwgaW5kZXgpIHtcblx0XHRcdGlmIChpbmRleCA9PT0gMCAmJiAhdGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdG9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG1lLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cblx0XHRcdGlmICh0aWNrT3B0cy5zaG93TGFiZWxCYWNrZHJvcCkge1xuXHRcdFx0XHR3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aWNrT3B0cy5iYWNrZHJvcENvbG9yO1xuXG5cdFx0XHRcdGN0eC5maWxsUmVjdChcblx0XHRcdFx0XHQtd2lkdGggLyAyIC0gdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCxcblx0XHRcdFx0XHQtb2Zmc2V0IC0gdGlja0ZvbnQuc2l6ZSAvIDIgLSB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZLFxuXHRcdFx0XHRcdHdpZHRoICsgdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCAqIDIsXG5cdFx0XHRcdFx0dGlja0ZvbnQuc2l6ZSArIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1kgKiAyXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aWNrRm9udENvbG9yO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCAwLCAtb2Zmc2V0KTtcblx0XHR9KTtcblxuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZHJhd1RpdGxlOiBoZWxwZXJzJDEubm9vcFxufSk7XG5cbi8vIElOVEVSTkFMOiBzdGF0aWMgZGVmYXVsdCBvcHRpb25zLCByZWdpc3RlcmVkIGluIHNyYy9pbmRleC5qc1xudmFyIF9kZWZhdWx0cyQzID0gZGVmYXVsdENvbmZpZyQzO1xuc2NhbGVfcmFkaWFsTGluZWFyLl9kZWZhdWx0cyA9IF9kZWZhdWx0cyQzO1xuXG52YXIgZGVwcmVjYXRlZCQxID0gaGVscGVycyQxLl9kZXByZWNhdGVkO1xudmFyIHJlc29sdmUkNSA9IGhlbHBlcnMkMS5vcHRpb25zLnJlc29sdmU7XG52YXIgdmFsdWVPckRlZmF1bHQkZCA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuLy8gSW50ZWdlciBjb25zdGFudHMgYXJlIGZyb20gdGhlIEVTNiBzcGVjLlxudmFyIE1JTl9JTlRFR0VSID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIgfHwgLTkwMDcxOTkyNTQ3NDA5OTE7XG52YXIgTUFYX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCA5MDA3MTk5MjU0NzQwOTkxO1xuXG52YXIgSU5URVJWQUxTID0ge1xuXHRtaWxsaXNlY29uZDoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAxLFxuXHRcdHN0ZXBzOiAxMDAwXG5cdH0sXG5cdHNlY29uZDoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAxMDAwLFxuXHRcdHN0ZXBzOiA2MFxuXHR9LFxuXHRtaW51dGU6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogNjAwMDAsXG5cdFx0c3RlcHM6IDYwXG5cdH0sXG5cdGhvdXI6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMzYwMDAwMCxcblx0XHRzdGVwczogMjRcblx0fSxcblx0ZGF5OiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDg2NDAwMDAwLFxuXHRcdHN0ZXBzOiAzMFxuXHR9LFxuXHR3ZWVrOiB7XG5cdFx0Y29tbW9uOiBmYWxzZSxcblx0XHRzaXplOiA2MDQ4MDAwMDAsXG5cdFx0c3RlcHM6IDRcblx0fSxcblx0bW9udGg6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMi42MjhlOSxcblx0XHRzdGVwczogMTJcblx0fSxcblx0cXVhcnRlcjoge1xuXHRcdGNvbW1vbjogZmFsc2UsXG5cdFx0c2l6ZTogNy44ODRlOSxcblx0XHRzdGVwczogNFxuXHR9LFxuXHR5ZWFyOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDMuMTU0ZTEwXG5cdH1cbn07XG5cbnZhciBVTklUUyA9IE9iamVjdC5rZXlzKElOVEVSVkFMUyk7XG5cbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG5cdHJldHVybiBhIC0gYjtcbn1cblxuZnVuY3Rpb24gYXJyYXlVbmlxdWUoaXRlbXMpIHtcblx0dmFyIGhhc2ggPSB7fTtcblx0dmFyIG91dCA9IFtdO1xuXHR2YXIgaSwgaWxlbiwgaXRlbTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0aXRlbSA9IGl0ZW1zW2ldO1xuXHRcdGlmICghaGFzaFtpdGVtXSkge1xuXHRcdFx0aGFzaFtpdGVtXSA9IHRydWU7XG5cdFx0XHRvdXQucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBnZXRNaW4ob3B0aW9ucykge1xuXHRyZXR1cm4gaGVscGVycyQxLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGltZS5taW4sIG9wdGlvbnMudGlja3MubWluKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF4KG9wdGlvbnMpIHtcblx0cmV0dXJuIGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpbWUubWF4LCBvcHRpb25zLnRpY2tzLm1heCk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB7dGltZSwgcG9zfSBvYmplY3RzIHVzZWQgdG8gaW50ZXJwb2xhdGUgYSBzcGVjaWZpYyBgdGltZWAgb3IgcG9zaXRpb25cbiAqIChgcG9zYCkgb24gdGhlIHNjYWxlLCBieSBzZWFyY2hpbmcgZW50cmllcyBiZWZvcmUgYW5kIGFmdGVyIHRoZSByZXF1ZXN0ZWQgdmFsdWUuIGBwb3NgIGlzXG4gKiBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxOiAwIGJlaW5nIHRoZSBzdGFydCBvZiB0aGUgc2NhbGUgKGxlZnQgb3IgdG9wKSBhbmQgMSB0aGUgb3RoZXJcbiAqIGV4dHJlbWl0eSAobGVmdCArIHdpZHRoIG9yIHRvcCArIGhlaWdodCkuIE5vdGUgdGhhdCBpdCB3b3VsZCBiZSBtb3JlIG9wdGltaXplZCB0byBkaXJlY3RseVxuICogc3RvcmUgcHJlLWNvbXB1dGVkIHBpeGVscywgYnV0IHRoZSBzY2FsZSBkaW1lbnNpb25zIGFyZSBub3QgZ3VhcmFudGVlZCBhdCB0aGUgdGltZSB3ZSBuZWVkXG4gKiB0byBjcmVhdGUgdGhlIGxvb2t1cCB0YWJsZS4gVGhlIHRhYmxlIEFMV0FZUyBjb250YWlucyBhdCBsZWFzdCB0d28gaXRlbXM6IG1pbiBhbmQgbWF4LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IHRpbWVzdGFtcHMgLSB0aW1lc3RhbXBzIHNvcnRlZCBmcm9tIGxvd2VzdCB0byBoaWdoZXN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3RyaWJ1dGlvbiAtIElmICdsaW5lYXInLCB0aW1lc3RhbXBzIHdpbGwgYmUgc3ByZWFkIGxpbmVhcmx5IGFsb25nIHRoZSBtaW5cbiAqIGFuZCBtYXggcmFuZ2UsIHNvIGJhc2ljYWxseSwgdGhlIHRhYmxlIHdpbGwgY29udGFpbnMgb25seSB0d28gaXRlbXM6IHttaW4sIDB9IGFuZCB7bWF4LCAxfS5cbiAqIElmICdzZXJpZXMnLCB0aW1lc3RhbXBzIHdpbGwgYmUgcG9zaXRpb25lZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuIEluIHRoaXNcbiAqIGNhc2UsIG9ubHkgdGltZXN0YW1wcyB0aGF0IGJyZWFrIHRoZSB0aW1lIGxpbmVhcml0eSBhcmUgcmVnaXN0ZXJlZCwgbWVhbmluZyB0aGF0IGluIHRoZVxuICogYmVzdCBjYXNlLCBhbGwgdGltZXN0YW1wcyBhcmUgbGluZWFyLCB0aGUgdGFibGUgY29udGFpbnMgb25seSBtaW4gYW5kIG1heC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzLCBtaW4sIG1heCwgZGlzdHJpYnV0aW9uKSB7XG5cdGlmIChkaXN0cmlidXRpb24gPT09ICdsaW5lYXInIHx8ICF0aW1lc3RhbXBzLmxlbmd0aCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHR7dGltZTogbWluLCBwb3M6IDB9LFxuXHRcdFx0e3RpbWU6IG1heCwgcG9zOiAxfVxuXHRcdF07XG5cdH1cblxuXHR2YXIgdGFibGUgPSBbXTtcblx0dmFyIGl0ZW1zID0gW21pbl07XG5cdHZhciBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuXHRcdGlmIChjdXJyID4gbWluICYmIGN1cnIgPCBtYXgpIHtcblx0XHRcdGl0ZW1zLnB1c2goY3Vycik7XG5cdFx0fVxuXHR9XG5cblx0aXRlbXMucHVzaChtYXgpO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRuZXh0ID0gaXRlbXNbaSArIDFdO1xuXHRcdHByZXYgPSBpdGVtc1tpIC0gMV07XG5cdFx0Y3VyciA9IGl0ZW1zW2ldO1xuXG5cdFx0Ly8gb25seSBhZGQgcG9pbnRzIHRoYXQgYnJlYWtzIHRoZSBzY2FsZSBsaW5lYXJpdHlcblx0XHRpZiAocHJldiA9PT0gdW5kZWZpbmVkIHx8IG5leHQgPT09IHVuZGVmaW5lZCB8fCBNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuXHRcdFx0dGFibGUucHVzaCh7dGltZTogY3VyciwgcG9zOiBpIC8gKGlsZW4gLSAxKX0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0YWJsZTtcbn1cblxuLy8gQHNlZSBhZGFwdGVkIGZyb20gaHR0cHM6Ly93d3cuYW51amdha2hhci5jb20vMjAxNC8wMy8wMS9iaW5hcnktc2VhcmNoLWluLWphdmFzY3JpcHQvXG5mdW5jdGlvbiBsb29rdXAodGFibGUsIGtleSwgdmFsdWUpIHtcblx0dmFyIGxvID0gMDtcblx0dmFyIGhpID0gdGFibGUubGVuZ3RoIC0gMTtcblx0dmFyIG1pZCwgaTAsIGkxO1xuXG5cdHdoaWxlIChsbyA+PSAwICYmIGxvIDw9IGhpKSB7XG5cdFx0bWlkID0gKGxvICsgaGkpID4+IDE7XG5cdFx0aTAgPSB0YWJsZVttaWQgLSAxXSB8fCBudWxsO1xuXHRcdGkxID0gdGFibGVbbWlkXTtcblxuXHRcdGlmICghaTApIHtcblx0XHRcdC8vIGdpdmVuIHZhbHVlIGlzIG91dHNpZGUgdGFibGUgKGJlZm9yZSBmaXJzdCBpdGVtKVxuXHRcdFx0cmV0dXJuIHtsbzogbnVsbCwgaGk6IGkxfTtcblx0XHR9IGVsc2UgaWYgKGkxW2tleV0gPCB2YWx1ZSkge1xuXHRcdFx0bG8gPSBtaWQgKyAxO1xuXHRcdH0gZWxzZSBpZiAoaTBba2V5XSA+IHZhbHVlKSB7XG5cdFx0XHRoaSA9IG1pZCAtIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB7bG86IGkwLCBoaTogaTF9O1xuXHRcdH1cblx0fVxuXG5cdC8vIGdpdmVuIHZhbHVlIGlzIG91dHNpZGUgdGFibGUgKGFmdGVyIGxhc3QgaXRlbSlcblx0cmV0dXJuIHtsbzogaTEsIGhpOiBudWxsfTtcbn1cblxuLyoqXG4gKiBMaW5lYXJseSBpbnRlcnBvbGF0ZXMgdGhlIGdpdmVuIHNvdXJjZSBgdmFsdWVgIHVzaW5nIHRoZSB0YWJsZSBpdGVtcyBgc2tleWAgdmFsdWVzIGFuZFxuICogcmV0dXJucyB0aGUgYXNzb2NpYXRlZCBgdGtleWAgdmFsdWUuIEZvciBleGFtcGxlLCBpbnRlcnBvbGF0ZSh0YWJsZSwgJ3RpbWUnLCA0MiwgJ3BvcycpXG4gKiByZXR1cm5zIHRoZSBwb3NpdGlvbiBmb3IgYSB0aW1lc3RhbXAgZXF1YWwgdG8gNDIuIElmIHZhbHVlIGlzIG91dCBvZiBib3VuZHMsIHZhbHVlcyBhdFxuICogaW5kZXggWzAsIDFdIG9yIFtuIC0gMSwgbl0gYXJlIHVzZWQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSQxKHRhYmxlLCBza2V5LCBzdmFsLCB0a2V5KSB7XG5cdHZhciByYW5nZSA9IGxvb2t1cCh0YWJsZSwgc2tleSwgc3ZhbCk7XG5cblx0Ly8gTm90ZTogdGhlIGxvb2t1cCB0YWJsZSBBTFdBWVMgY29udGFpbnMgYXQgbGVhc3QgMiBpdGVtcyAobWluIGFuZCBtYXgpXG5cdHZhciBwcmV2ID0gIXJhbmdlLmxvID8gdGFibGVbMF0gOiAhcmFuZ2UuaGkgPyB0YWJsZVt0YWJsZS5sZW5ndGggLSAyXSA6IHJhbmdlLmxvO1xuXHR2YXIgbmV4dCA9ICFyYW5nZS5sbyA/IHRhYmxlWzFdIDogIXJhbmdlLmhpID8gdGFibGVbdGFibGUubGVuZ3RoIC0gMV0gOiByYW5nZS5oaTtcblxuXHR2YXIgc3BhbiA9IG5leHRbc2tleV0gLSBwcmV2W3NrZXldO1xuXHR2YXIgcmF0aW8gPSBzcGFuID8gKHN2YWwgLSBwcmV2W3NrZXldKSAvIHNwYW4gOiAwO1xuXHR2YXIgb2Zmc2V0ID0gKG5leHRbdGtleV0gLSBwcmV2W3RrZXldKSAqIHJhdGlvO1xuXG5cdHJldHVybiBwcmV2W3RrZXldICsgb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiB0b1RpbWVzdGFtcChzY2FsZSwgaW5wdXQpIHtcblx0dmFyIGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnRpbWU7XG5cdHZhciBwYXJzZXIgPSBvcHRpb25zLnBhcnNlcjtcblx0dmFyIGZvcm1hdCA9IHBhcnNlciB8fCBvcHRpb25zLmZvcm1hdDtcblx0dmFyIHZhbHVlID0gaW5wdXQ7XG5cblx0aWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG5cdH1cblxuXHQvLyBPbmx5IHBhcnNlIGlmIGl0cyBub3QgYSB0aW1lc3RhbXAgYWxyZWFkeVxuXHRpZiAoIWhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkpIHtcblx0XHR2YWx1ZSA9IHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnXG5cdFx0XHQ/IGFkYXB0ZXIucGFyc2UodmFsdWUsIGZvcm1hdClcblx0XHRcdDogYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG5cdH1cblxuXHRpZiAodmFsdWUgIT09IG51bGwpIHtcblx0XHRyZXR1cm4gK3ZhbHVlO1xuXHR9XG5cblx0Ly8gTGFiZWxzIGFyZSBpbiBhbiBpbmNvbXBhdGlibGUgZm9ybWF0IGFuZCBubyBgcGFyc2VyYCBoYXMgYmVlbiBwcm92aWRlZC5cblx0Ly8gVGhlIHVzZXIgbWlnaHQgc3RpbGwgdXNlIHRoZSBkZXByZWNhdGVkIGBmb3JtYXRgIG9wdGlvbiBmb3IgcGFyc2luZy5cblx0aWYgKCFwYXJzZXIgJiYgdHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhbHVlID0gZm9ybWF0KGlucHV0KTtcblxuXHRcdC8vIGBmb3JtYXRgIGNvdWxkIHJldHVybiBzb21ldGhpbmcgZWxzZSB0aGFuIGEgdGltZXN0YW1wLCBpZiBzbywgcGFyc2UgaXRcblx0XHRpZiAoIWhlbHBlcnMkMS5pc0Zpbml0ZSh2YWx1ZSkpIHtcblx0XHRcdHZhbHVlID0gYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcblx0aWYgKGhlbHBlcnMkMS5pc051bGxPclVuZGVmKGlucHV0KSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnRpbWU7XG5cdHZhciB2YWx1ZSA9IHRvVGltZXN0YW1wKHNjYWxlLCBzY2FsZS5nZXRSaWdodFZhbHVlKGlucHV0KSk7XG5cdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnJvdW5kKSB7XG5cdFx0dmFsdWUgPSArc2NhbGUuX2FkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgb3B0aW9ucy5yb3VuZCk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogRmlndXJlcyBvdXQgd2hhdCB1bml0IHJlc3VsdHMgaW4gYW4gYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGF1dG8tZ2VuZXJhdGVkIHRpY2tzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG5cdHZhciBpbGVuID0gVU5JVFMubGVuZ3RoO1xuXHR2YXIgaSwgaW50ZXJ2YWwsIGZhY3RvcjtcblxuXHRmb3IgKGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSkge1xuXHRcdGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcblx0XHRmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTUFYX0lOVEVHRVI7XG5cblx0XHRpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IHdoYXQgdW5pdCB0byBmb3JtYXQgYSBzZXQgb2YgdGlja3Mgd2l0aFxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyhzY2FsZSwgbnVtVGlja3MsIG1pblVuaXQsIG1pbiwgbWF4KSB7XG5cdHZhciBpLCB1bml0O1xuXG5cdGZvciAoaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKSB7XG5cdFx0dW5pdCA9IFVOSVRTW2ldO1xuXHRcdGlmIChJTlRFUlZBTFNbdW5pdF0uY29tbW9uICYmIHNjYWxlLl9hZGFwdGVyLmRpZmYobWF4LCBtaW4sIHVuaXQpID49IG51bVRpY2tzIC0gMSkge1xuXHRcdFx0cmV0dXJuIHVuaXQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFVOSVRTW21pblVuaXQgPyBVTklUUy5pbmRleE9mKG1pblVuaXQpIDogMF07XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG5cdGZvciAodmFyIGkgPSBVTklUUy5pbmRleE9mKHVuaXQpICsgMSwgaWxlbiA9IFVOSVRTLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGlmIChJTlRFUlZBTFNbVU5JVFNbaV1dLmNvbW1vbikge1xuXHRcdFx0cmV0dXJuIFVOSVRTW2ldO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIG1heGltdW0gb2YgYGNhcGFjaXR5YCB0aW1lc3RhbXBzIGJldHdlZW4gbWluIGFuZCBtYXgsIHJvdW5kZWQgdG8gdGhlXG4gKiBgbWlub3JgIHVuaXQgdXNpbmcgdGhlIGdpdmVuIHNjYWxlIHRpbWUgYG9wdGlvbnNgLlxuICogSW1wb3J0YW50OiB0aGlzIG1ldGhvZCBjYW4gcmV0dXJuIHRpY2tzIG91dHNpZGUgdGhlIG1pbiBhbmQgbWF4IHJhbmdlLCBpdCdzIHRoZVxuICogcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNhbGxpbmcgY29kZSB0byBjbGFtcCB2YWx1ZXMgaWYgbmVlZGVkLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZShzY2FsZSwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG5cdHZhciBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG5cdHZhciBvcHRpb25zID0gc2NhbGUub3B0aW9ucztcblx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHR2YXIgbWlub3IgPSB0aW1lT3B0cy51bml0IHx8IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KTtcblx0dmFyIHN0ZXBTaXplID0gcmVzb2x2ZSQ1KFt0aW1lT3B0cy5zdGVwU2l6ZSwgdGltZU9wdHMudW5pdFN0ZXBTaXplLCAxXSk7XG5cdHZhciB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcblx0dmFyIGZpcnN0ID0gbWluO1xuXHR2YXIgdGlja3MgPSBbXTtcblx0dmFyIHRpbWU7XG5cblx0Ly8gRm9yICd3ZWVrJyB1bml0LCBoYW5kbGUgdGhlIGZpcnN0IGRheSBvZiB3ZWVrIG9wdGlvblxuXHRpZiAod2Vla2RheSkge1xuXHRcdGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcblx0fVxuXG5cdC8vIEFsaWduIGZpcnN0IHRpY2tzIG9uIHVuaXRcblx0Zmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCB3ZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG5cblx0Ly8gUHJldmVudCBicm93c2VyIGZyb20gZnJlZXppbmcgaW4gY2FzZSB1c2VyIG9wdGlvbnMgcmVxdWVzdCBtaWxsaW9ucyBvZiBtaWxsaXNlY29uZHNcblx0aWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcblx0XHR0aHJvdyBtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yO1xuXHR9XG5cblx0Zm9yICh0aW1lID0gZmlyc3Q7IHRpbWUgPCBtYXg7IHRpbWUgPSArYWRhcHRlci5hZGQodGltZSwgc3RlcFNpemUsIG1pbm9yKSkge1xuXHRcdHRpY2tzLnB1c2godGltZSk7XG5cdH1cblxuXHRpZiAodGltZSA9PT0gbWF4IHx8IG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnKSB7XG5cdFx0dGlja3MucHVzaCh0aW1lKTtcblx0fVxuXG5cdHJldHVybiB0aWNrcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdGFydCBhbmQgZW5kIG9mZnNldHMgZnJvbSBlZGdlcyBpbiB0aGUgZm9ybSBvZiB7c3RhcnQsIGVuZH1cbiAqIHdoZXJlIGVhY2ggdmFsdWUgaXMgYSByZWxhdGl2ZSB3aWR0aCB0byB0aGUgc2NhbGUgYW5kIHJhbmdlcyBiZXR3ZWVuIDAgYW5kIDEuXG4gKiBUaGV5IGFkZCBleHRyYSBtYXJnaW5zIG9uIHRoZSBib3RoIHNpZGVzIGJ5IHNjYWxpbmcgZG93biB0aGUgb3JpZ2luYWwgc2NhbGUuXG4gKiBPZmZzZXRzIGFyZSBhZGRlZCB3aGVuIHRoZSBgb2Zmc2V0YCBvcHRpb24gaXMgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHModGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucykge1xuXHR2YXIgc3RhcnQgPSAwO1xuXHR2YXIgZW5kID0gMDtcblx0dmFyIGZpcnN0LCBsYXN0O1xuXG5cdGlmIChvcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcblx0XHRmaXJzdCA9IGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbMF0sICdwb3MnKTtcblx0XHRpZiAodGlja3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRzdGFydCA9IDEgLSBmaXJzdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3RhcnQgPSAoaW50ZXJwb2xhdGUkMSh0YWJsZSwgJ3RpbWUnLCB0aWNrc1sxXSwgJ3BvcycpIC0gZmlyc3QpIC8gMjtcblx0XHR9XG5cdFx0bGFzdCA9IGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbdGlja3MubGVuZ3RoIC0gMV0sICdwb3MnKTtcblx0XHRpZiAodGlja3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRlbmQgPSBsYXN0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbmQgPSAobGFzdCAtIGludGVycG9sYXRlJDEodGFibGUsICd0aW1lJywgdGlja3NbdGlja3MubGVuZ3RoIC0gMl0sICdwb3MnKSkgLyAyO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgZmFjdG9yOiAxIC8gKHN0YXJ0ICsgMSArIGVuZCl9O1xufVxuXG5mdW5jdGlvbiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpIHtcblx0dmFyIGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcblx0dmFyIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcblx0dmFyIGxhc3QgPSB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZTtcblx0dmFyIG1ham9yLCBpbmRleDtcblxuXHRmb3IgKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKSB7XG5cdFx0aW5kZXggPSBtYXBbbWFqb3JdO1xuXHRcdGlmIChpbmRleCA+PSAwKSB7XG5cdFx0XHR0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdGlja3M7XG59XG5cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHMoc2NhbGUsIHZhbHVlcywgbWFqb3JVbml0KSB7XG5cdHZhciB0aWNrcyA9IFtdO1xuXHR2YXIgbWFwID0ge307XG5cdHZhciBpbGVuID0gdmFsdWVzLmxlbmd0aDtcblx0dmFyIGksIHZhbHVlO1xuXG5cdGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcblx0XHR2YWx1ZSA9IHZhbHVlc1tpXTtcblx0XHRtYXBbdmFsdWVdID0gaTtcblxuXHRcdHRpY2tzLnB1c2goe1xuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0bWFqb3I6IGZhbHNlXG5cdFx0fSk7XG5cdH1cblxuXHQvLyBXZSBzZXQgdGhlIG1ham9yIHRpY2tzIHNlcGFyYXRlbHkgZnJvbSB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIGNhbGxpbmcgc3RhcnRPZiBmb3IgZXZlcnkgdGlja1xuXHQvLyBpcyBleHBlbnNpdmUgd2hlbiB0aGVyZSBpcyBhIGxhcmdlIG51bWJlciBvZiB0aWNrc1xuXHRyZXR1cm4gKGlsZW4gPT09IDAgfHwgIW1ham9yVW5pdCkgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5cbnZhciBkZWZhdWx0Q29uZmlnJDQgPSB7XG5cdHBvc2l0aW9uOiAnYm90dG9tJyxcblxuXHQvKipcblx0ICogRGF0YSBkaXN0cmlidXRpb24gYWxvbmcgdGhlIHNjYWxlOlxuXHQgKiAtICdsaW5lYXInOiBkYXRhIGFyZSBzcHJlYWQgYWNjb3JkaW5nIHRvIHRoZWlyIHRpbWUgKGRpc3RhbmNlcyBjYW4gdmFyeSksXG5cdCAqIC0gJ3Nlcmllcyc6IGRhdGEgYXJlIHNwcmVhZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuXG5cdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTA3XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0ZGlzdHJpYnV0aW9uOiAnbGluZWFyJyxcblxuXHQvKipcblx0ICogU2NhbGUgYm91bmRhcnkgc3RyYXRlZ3kgKGJ5cGFzc2VkIGJ5IG1pbi9tYXggdGltZSBvcHRpb25zKVxuXHQgKiAtIGBkYXRhYDogbWFrZSBzdXJlIGRhdGEgYXJlIGZ1bGx5IHZpc2libGUsIHRpY2tzIG91dHNpZGUgYXJlIHJlbW92ZWRcblx0ICogLSBgdGlja3NgOiBtYWtlIHN1cmUgdGlja3MgYXJlIGZ1bGx5IHZpc2libGUsIGRhdGEgb3V0c2lkZSBhcmUgdHJ1bmNhdGVkXG5cdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTU2XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0Ym91bmRzOiAnZGF0YScsXG5cblx0YWRhcHRlcnM6IHt9LFxuXHR0aW1lOiB7XG5cdFx0cGFyc2VyOiBmYWxzZSwgLy8gZmFsc2UgPT0gYSBwYXR0ZXJuIHN0cmluZyBmcm9tIGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQvIG9yIGEgY3VzdG9tIGNhbGxiYWNrIHRoYXQgY29udmVydHMgaXRzIGFyZ3VtZW50IHRvIGEgbW9tZW50XG5cdFx0dW5pdDogZmFsc2UsIC8vIGZhbHNlID09IGF1dG9tYXRpYyBvciBvdmVycmlkZSB3aXRoIHdlZWssIG1vbnRoLCB5ZWFyLCBldGMuXG5cdFx0cm91bmQ6IGZhbHNlLCAvLyBub25lLCBvciBvdmVycmlkZSB3aXRoIHdlZWssIG1vbnRoLCB5ZWFyLCBldGMuXG5cdFx0ZGlzcGxheUZvcm1hdDogZmFsc2UsIC8vIERFUFJFQ0FURURcblx0XHRpc29XZWVrZGF5OiBmYWxzZSwgLy8gb3ZlcnJpZGUgd2VlayBzdGFydCBkYXkgLSBzZWUgaHR0cHM6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2dldC1zZXQvaXNvLXdlZWtkYXkvXG5cdFx0bWluVW5pdDogJ21pbGxpc2Vjb25kJyxcblx0XHRkaXNwbGF5Rm9ybWF0czoge31cblx0fSxcblx0dGlja3M6IHtcblx0XHRhdXRvU2tpcDogZmFsc2UsXG5cblx0XHQvKipcblx0XHQgKiBUaWNrcyBnZW5lcmF0aW9uIGlucHV0IHZhbHVlczpcblx0XHQgKiAtICdhdXRvJzogZ2VuZXJhdGVzIFwib3B0aW1hbFwiIHRpY2tzIGJhc2VkIG9uIHNjYWxlIHNpemUgYW5kIHRpbWUgb3B0aW9ucy5cblx0XHQgKiAtICdkYXRhJzogZ2VuZXJhdGVzIHRpY2tzIGZyb20gZGF0YSAoaW5jbHVkaW5nIGxhYmVscyBmcm9tIGRhdGEge3R8eHx5fSBvYmplY3RzKS5cblx0XHQgKiAtICdsYWJlbHMnOiBnZW5lcmF0ZXMgdGlja3MgZnJvbSB1c2VyIGdpdmVuIGBkYXRhLmxhYmVsc2AgdmFsdWVzIE9OTFkuXG5cdFx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9wdWxsLzQ1MDdcblx0XHQgKiBAc2luY2UgMi43LjBcblx0XHQgKi9cblx0XHRzb3VyY2U6ICdhdXRvJyxcblxuXHRcdG1ham9yOiB7XG5cdFx0XHRlbmFibGVkOiBmYWxzZVxuXHRcdH1cblx0fVxufTtcblxudmFyIHNjYWxlX3RpbWUgPSBjb3JlX3NjYWxlLmV4dGVuZCh7XG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMubWVyZ2VUaWNrc09wdGlvbnMoKTtcblx0XHRjb3JlX3NjYWxlLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcyk7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGltZSA9IG9wdGlvbnMudGltZSB8fCAob3B0aW9ucy50aW1lID0ge30pO1xuXHRcdHZhciBhZGFwdGVyID0gbWUuX2FkYXB0ZXIgPSBuZXcgY29yZV9hZGFwdGVycy5fZGF0ZShvcHRpb25zLmFkYXB0ZXJzLmRhdGUpO1xuXG5cdFx0Ly8gREVQUkVDQVRJT05TOiBvdXRwdXQgYSBtZXNzYWdlIG9ubHkgb25lIHRpbWUgcGVyIHVwZGF0ZVxuXHRcdGRlcHJlY2F0ZWQkMSgndGltZSBzY2FsZScsIHRpbWUuZm9ybWF0LCAndGltZS5mb3JtYXQnLCAndGltZS5wYXJzZXInKTtcblx0XHRkZXByZWNhdGVkJDEoJ3RpbWUgc2NhbGUnLCB0aW1lLm1pbiwgJ3RpbWUubWluJywgJ3RpY2tzLm1pbicpO1xuXHRcdGRlcHJlY2F0ZWQkMSgndGltZSBzY2FsZScsIHRpbWUubWF4LCAndGltZS5tYXgnLCAndGlja3MubWF4Jyk7XG5cblx0XHQvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OiBiZWZvcmUgaW50cm9kdWNpbmcgYWRhcHRlciwgYGRpc3BsYXlGb3JtYXRzYCB3YXNcblx0XHQvLyBzdXBwb3NlZCB0byBjb250YWluICphbGwqIHVuaXQvc3RyaW5nIHBhaXJzIGJ1dCB0aGlzIGNhbid0IGJlIHJlc29sdmVkXG5cdFx0Ly8gd2hlbiBsb2FkaW5nIHRoZSBzY2FsZSAoYWRhcHRlcnMgYXJlIGxvYWRlZCBhZnRlcndhcmQpLCBzbyBsZXQncyBwb3B1bGF0ZVxuXHRcdC8vIG1pc3NpbmcgZm9ybWF0cyBvbiB1cGRhdGVcblx0XHRoZWxwZXJzJDEubWVyZ2VJZih0aW1lLmRpc3BsYXlGb3JtYXRzLCBhZGFwdGVyLmZvcm1hdHMoKSk7XG5cblx0XHRyZXR1cm4gY29yZV9zY2FsZS5wcm90b3R5cGUudXBkYXRlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBbGxvd3MgZGF0YSB0byBiZSByZWZlcmVuY2VkIHZpYSAndCcgYXR0cmlidXRlXG5cdCAqL1xuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdGlmIChyYXdWYWx1ZSAmJiByYXdWYWx1ZS50ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJhd1ZhbHVlID0gcmF3VmFsdWUudDtcblx0XHR9XG5cdFx0cmV0dXJuIGNvcmVfc2NhbGUucHJvdG90eXBlLmdldFJpZ2h0VmFsdWUuY2FsbCh0aGlzLCByYXdWYWx1ZSk7XG5cdH0sXG5cblx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHR2YXIgYWRhcHRlciA9IG1lLl9hZGFwdGVyO1xuXHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHR2YXIgdW5pdCA9IG9wdGlvbnMudGltZS51bml0IHx8ICdkYXknO1xuXHRcdHZhciBtaW4gPSBNQVhfSU5URUdFUjtcblx0XHR2YXIgbWF4ID0gTUlOX0lOVEVHRVI7XG5cdFx0dmFyIHRpbWVzdGFtcHMgPSBbXTtcblx0XHR2YXIgZGF0YXNldHMgPSBbXTtcblx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0dmFyIGksIGosIGlsZW4sIGpsZW4sIGRhdGEsIHRpbWVzdGFtcCwgbGFiZWxzQWRkZWQ7XG5cdFx0dmFyIGRhdGFMYWJlbHMgPSBtZS5fZ2V0TGFiZWxzKCk7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gZGF0YUxhYmVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGxhYmVscy5wdXNoKHBhcnNlKG1lLCBkYXRhTGFiZWxzW2ldKSk7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdGRhdGEgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmRhdGE7XG5cblx0XHRcdFx0Ly8gTGV0J3MgY29uc2lkZXIgdGhhdCBhbGwgZGF0YSBoYXZlIHRoZSBzYW1lIGZvcm1hdC5cblx0XHRcdFx0aWYgKGhlbHBlcnMkMS5pc09iamVjdChkYXRhWzBdKSkge1xuXHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gW107XG5cblx0XHRcdFx0XHRmb3IgKGogPSAwLCBqbGVuID0gZGF0YS5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcCA9IHBhcnNlKG1lLCBkYXRhW2pdKTtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcHMucHVzaCh0aW1lc3RhbXApO1xuXHRcdFx0XHRcdFx0ZGF0YXNldHNbaV1bal0gPSB0aW1lc3RhbXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gbGFiZWxzLnNsaWNlKDApO1xuXHRcdFx0XHRcdGlmICghbGFiZWxzQWRkZWQpIHtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChsYWJlbHMpO1xuXHRcdFx0XHRcdFx0bGFiZWxzQWRkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YXNldHNbaV0gPSBbXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobGFiZWxzLmxlbmd0aCkge1xuXHRcdFx0bWluID0gTWF0aC5taW4obWluLCBsYWJlbHNbMF0pO1xuXHRcdFx0bWF4ID0gTWF0aC5tYXgobWF4LCBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdKTtcblx0XHR9XG5cblx0XHRpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRcdHRpbWVzdGFtcHMgPSBpbGVuID4gMSA/IGFycmF5VW5pcXVlKHRpbWVzdGFtcHMpLnNvcnQoc29ydGVyKSA6IHRpbWVzdGFtcHMuc29ydChzb3J0ZXIpO1xuXHRcdFx0bWluID0gTWF0aC5taW4obWluLCB0aW1lc3RhbXBzWzBdKTtcblx0XHRcdG1heCA9IE1hdGgubWF4KG1heCwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdKTtcblx0XHR9XG5cblx0XHRtaW4gPSBwYXJzZShtZSwgZ2V0TWluKG9wdGlvbnMpKSB8fCBtaW47XG5cdFx0bWF4ID0gcGFyc2UobWUsIGdldE1heChvcHRpb25zKSkgfHwgbWF4O1xuXG5cdFx0Ly8gSW4gY2FzZSB0aGVyZSBpcyBubyB2YWxpZCBtaW4vbWF4LCBzZXQgbGltaXRzIGJhc2VkIG9uIHVuaXQgdGltZSBvcHRpb25cblx0XHRtaW4gPSBtaW4gPT09IE1BWF9JTlRFR0VSID8gK2FkYXB0ZXIuc3RhcnRPZihEYXRlLm5vdygpLCB1bml0KSA6IG1pbjtcblx0XHRtYXggPSBtYXggPT09IE1JTl9JTlRFR0VSID8gK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxIDogbWF4O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbWF4IGlzIHN0cmljdGx5IGhpZ2hlciB0aGFuIG1pbiAocmVxdWlyZWQgYnkgdGhlIGxvb2t1cCB0YWJsZSlcblx0XHRtZS5taW4gPSBNYXRoLm1pbihtaW4sIG1heCk7XG5cdFx0bWUubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcblxuXHRcdC8vIFBSSVZBVEVcblx0XHRtZS5fdGFibGUgPSBbXTtcblx0XHRtZS5fdGltZXN0YW1wcyA9IHtcblx0XHRcdGRhdGE6IHRpbWVzdGFtcHMsXG5cdFx0XHRkYXRhc2V0czogZGF0YXNldHMsXG5cdFx0XHRsYWJlbHM6IGxhYmVsc1xuXHRcdH07XG5cdH0sXG5cblx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdHZhciBtYXggPSBtZS5tYXg7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHRcdHZhciB0aW1lc3RhbXBzID0gbWUuX3RpbWVzdGFtcHM7XG5cdFx0dmFyIHRpY2tzID0gW107XG5cdFx0dmFyIGNhcGFjaXR5ID0gbWUuZ2V0TGFiZWxDYXBhY2l0eShtaW4pO1xuXHRcdHZhciBzb3VyY2UgPSB0aWNrT3B0cy5zb3VyY2U7XG5cdFx0dmFyIGRpc3RyaWJ1dGlvbiA9IG9wdGlvbnMuZGlzdHJpYnV0aW9uO1xuXHRcdHZhciBpLCBpbGVuLCB0aW1lc3RhbXA7XG5cblx0XHRpZiAoc291cmNlID09PSAnZGF0YScgfHwgKHNvdXJjZSA9PT0gJ2F1dG8nICYmIGRpc3RyaWJ1dGlvbiA9PT0gJ3NlcmllcycpKSB7XG5cdFx0XHR0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5kYXRhO1xuXHRcdH0gZWxzZSBpZiAoc291cmNlID09PSAnbGFiZWxzJykge1xuXHRcdFx0dGltZXN0YW1wcyA9IHRpbWVzdGFtcHMubGFiZWxzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aW1lc3RhbXBzID0gZ2VuZXJhdGUobWUsIG1pbiwgbWF4LCBjYXBhY2l0eSk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG5cdFx0XHRtaW4gPSB0aW1lc3RhbXBzWzBdO1xuXHRcdFx0bWF4ID0gdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuXHRcdH1cblxuXHRcdC8vIEVuZm9yY2UgbGltaXRzIHdpdGggdXNlciBtaW4vbWF4IG9wdGlvbnNcblx0XHRtaW4gPSBwYXJzZShtZSwgZ2V0TWluKG9wdGlvbnMpKSB8fCBtaW47XG5cdFx0bWF4ID0gcGFyc2UobWUsIGdldE1heChvcHRpb25zKSkgfHwgbWF4O1xuXG5cdFx0Ly8gUmVtb3ZlIHRpY2tzIG91dHNpZGUgdGhlIG1pbi9tYXggcmFuZ2Vcblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdHRpbWVzdGFtcCA9IHRpbWVzdGFtcHNbaV07XG5cdFx0XHRpZiAodGltZXN0YW1wID49IG1pbiAmJiB0aW1lc3RhbXAgPD0gbWF4KSB7XG5cdFx0XHRcdHRpY2tzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5taW4gPSBtaW47XG5cdFx0bWUubWF4ID0gbWF4O1xuXG5cdFx0Ly8gUFJJVkFURVxuXHRcdC8vIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIHJlbGllcyBvbiB0aGUgbnVtYmVyIG9mIHRpY2tzIHNvIHdlIGRvbid0IHVzZSBpdCB3aGVuXG5cdFx0Ly8gYXV0b1NraXAgaXMgZW5hYmxlZCBiZWNhdXNlIHdlIGRvbid0IHlldCBrbm93IHdoYXQgdGhlIGZpbmFsIG51bWJlciBvZiB0aWNrcyB3aWxsIGJlXG5cdFx0bWUuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcFxuXHRcdFx0PyBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1lLm1pbiwgbWUubWF4LCBjYXBhY2l0eSlcblx0XHRcdDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcobWUsIHRpY2tzLmxlbmd0aCwgdGltZU9wdHMubWluVW5pdCwgbWUubWluLCBtZS5tYXgpKTtcblx0XHRtZS5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgbWUuX3VuaXQgPT09ICd5ZWFyJyA/IHVuZGVmaW5lZFxuXHRcdFx0OiBkZXRlcm1pbmVNYWpvclVuaXQobWUuX3VuaXQpO1xuXHRcdG1lLl90YWJsZSA9IGJ1aWxkTG9va3VwVGFibGUobWUuX3RpbWVzdGFtcHMuZGF0YSwgbWluLCBtYXgsIGRpc3RyaWJ1dGlvbik7XG5cdFx0bWUuX29mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyhtZS5fdGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucyk7XG5cblx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKG1lLCB0aWNrcywgbWUuX21ham9yVW5pdCk7XG5cdH0sXG5cblx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFkYXB0ZXIgPSBtZS5fYWRhcHRlcjtcblx0XHR2YXIgZGF0YSA9IG1lLmNoYXJ0LmRhdGE7XG5cdFx0dmFyIHRpbWVPcHRzID0gbWUub3B0aW9ucy50aW1lO1xuXHRcdHZhciBsYWJlbCA9IGRhdGEubGFiZWxzICYmIGluZGV4IDwgZGF0YS5sYWJlbHMubGVuZ3RoID8gZGF0YS5sYWJlbHNbaW5kZXhdIDogJyc7XG5cdFx0dmFyIHZhbHVlID0gZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc09iamVjdCh2YWx1ZSkpIHtcblx0XHRcdGxhYmVsID0gbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0fVxuXHRcdGlmICh0aW1lT3B0cy50b29sdGlwRm9ybWF0KSB7XG5cdFx0XHRyZXR1cm4gYWRhcHRlci5mb3JtYXQodG9UaW1lc3RhbXAobWUsIGxhYmVsKSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgbGFiZWwgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0fVxuXHRcdHJldHVybiBhZGFwdGVyLmZvcm1hdCh0b1RpbWVzdGFtcChtZSwgbGFiZWwpLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEZ1bmN0aW9uIHRvIGZvcm1hdCBhbiBpbmRpdmlkdWFsIHRpY2sgbWFya1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dGlja0Zvcm1hdEZ1bmN0aW9uOiBmdW5jdGlvbih0aW1lLCBpbmRleCwgdGlja3MsIGZvcm1hdCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGFkYXB0ZXIgPSBtZS5fYWRhcHRlcjtcblx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG5cdFx0dmFyIG1pbm9yRm9ybWF0ID0gZm9ybWF0c1ttZS5fdW5pdF07XG5cdFx0dmFyIG1ham9yVW5pdCA9IG1lLl9tYWpvclVuaXQ7XG5cdFx0dmFyIG1ham9yRm9ybWF0ID0gZm9ybWF0c1ttYWpvclVuaXRdO1xuXHRcdHZhciB0aWNrID0gdGlja3NbaW5kZXhdO1xuXHRcdHZhciB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG5cdFx0dmFyIG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcblx0XHR2YXIgbGFiZWwgPSBhZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgPyBmb3JtYXQgOiBtYWpvciA/IG1ham9yRm9ybWF0IDogbWlub3JGb3JtYXQpO1xuXHRcdHZhciBuZXN0ZWRUaWNrT3B0cyA9IG1ham9yID8gdGlja09wdHMubWFqb3IgOiB0aWNrT3B0cy5taW5vcjtcblx0XHR2YXIgZm9ybWF0dGVyID0gcmVzb2x2ZSQ1KFtcblx0XHRcdG5lc3RlZFRpY2tPcHRzLmNhbGxiYWNrLFxuXHRcdFx0bmVzdGVkVGlja09wdHMudXNlckNhbGxiYWNrLFxuXHRcdFx0dGlja09wdHMuY2FsbGJhY2ssXG5cdFx0XHR0aWNrT3B0cy51c2VyQ2FsbGJhY2tcblx0XHRdKTtcblxuXHRcdHJldHVybiBmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIobGFiZWwsIGluZGV4LCB0aWNrcykgOiBsYWJlbDtcblx0fSxcblxuXHRjb252ZXJ0VGlja3NUb0xhYmVsczogZnVuY3Rpb24odGlja3MpIHtcblx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRsYWJlbHMucHVzaCh0aGlzLnRpY2tGb3JtYXRGdW5jdGlvbih0aWNrc1tpXS52YWx1ZSwgaSwgdGlja3MpKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGFiZWxzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0UGl4ZWxGb3JPZmZzZXQ6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvZmZzZXRzID0gbWUuX29mZnNldHM7XG5cdFx0dmFyIHBvcyA9IGludGVycG9sYXRlJDEobWUuX3RhYmxlLCAndGltZScsIHRpbWUsICdwb3MnKTtcblx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JEZWNpbWFsKChvZmZzZXRzLnN0YXJ0ICsgcG9zKSAqIG9mZnNldHMuZmFjdG9yKTtcblx0fSxcblxuXHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHRpbWUgPSBudWxsO1xuXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgZGF0YXNldEluZGV4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRpbWUgPSBtZS5fdGltZXN0YW1wcy5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdW2luZGV4XTtcblx0XHR9XG5cblx0XHRpZiAodGltZSA9PT0gbnVsbCkge1xuXHRcdFx0dGltZSA9IHBhcnNlKG1lLCB2YWx1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRpbWUgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBtZS5nZXRQaXhlbEZvck9mZnNldCh0aW1lKTtcblx0XHR9XG5cdH0sXG5cblx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciB0aWNrcyA9IHRoaXMuZ2V0VGlja3MoKTtcblx0XHRyZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCA/XG5cdFx0XHR0aGlzLmdldFBpeGVsRm9yT2Zmc2V0KHRpY2tzW2luZGV4XS52YWx1ZSkgOlxuXHRcdFx0bnVsbDtcblx0fSxcblxuXHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9mZnNldHMgPSBtZS5fb2Zmc2V0cztcblx0XHR2YXIgcG9zID0gbWUuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG5cdFx0dmFyIHRpbWUgPSBpbnRlcnBvbGF0ZSQxKG1lLl90YWJsZSwgJ3BvcycsIHBvcywgJ3RpbWUnKTtcblxuXHRcdC8vIERFUFJFQ0FUSU9OLCB3ZSBzaG91bGQgcmV0dXJuIHRpbWUgZGlyZWN0bHlcblx0XHRyZXR1cm4gbWUuX2FkYXB0ZXIuX2NyZWF0ZSh0aW1lKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMYWJlbFNpemU6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdGlja3NPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHR2YXIgdGlja0xhYmVsV2lkdGggPSBtZS5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdHZhciBhbmdsZSA9IGhlbHBlcnMkMS50b1JhZGlhbnMobWUuaXNIb3Jpem9udGFsKCkgPyB0aWNrc09wdHMubWF4Um90YXRpb24gOiB0aWNrc09wdHMubWluUm90YXRpb24pO1xuXHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHR2YXIgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0dmFyIHRpY2tGb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0JGQodGlja3NPcHRzLmZvbnRTaXplLCBjb3JlX2RlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHc6ICh0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uKSArICh0aWNrRm9udFNpemUgKiBzaW5Sb3RhdGlvbiksXG5cdFx0XHRoOiAodGlja0xhYmVsV2lkdGggKiBzaW5Sb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogY29zUm90YXRpb24pXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogQ3J1ZGUgYXBwcm94aW1hdGlvbiBvZiB3aGF0IHRoZSBsYWJlbCB3aWR0aCBtaWdodCBiZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0TGFiZWxXaWR0aDogZnVuY3Rpb24obGFiZWwpIHtcblx0XHRyZXR1cm4gdGhpcy5fZ2V0TGFiZWxTaXplKGxhYmVsKS53O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Z2V0TGFiZWxDYXBhY2l0eTogZnVuY3Rpb24oZXhhbXBsZVRpbWUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB0aW1lT3B0cyA9IG1lLm9wdGlvbnMudGltZTtcblx0XHR2YXIgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcblxuXHRcdC8vIHBpY2sgdGhlIGxvbmdlc3QgZm9ybWF0IChtaWxsaXNlY29uZHMpIGZvciBndWVzdGltYXRpb25cblx0XHR2YXIgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG5cdFx0dmFyIGV4YW1wbGVMYWJlbCA9IG1lLnRpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyhtZSwgW2V4YW1wbGVUaW1lXSwgbWUuX21ham9yVW5pdCksIGZvcm1hdCk7XG5cdFx0dmFyIHNpemUgPSBtZS5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG5cdFx0dmFyIGNhcGFjaXR5ID0gTWF0aC5mbG9vcihtZS5pc0hvcml6b250YWwoKSA/IG1lLndpZHRoIC8gc2l6ZS53IDogbWUuaGVpZ2h0IC8gc2l6ZS5oKTtcblxuXHRcdGlmIChtZS5vcHRpb25zLm9mZnNldCkge1xuXHRcdFx0Y2FwYWNpdHktLTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2FwYWNpdHkgPiAwID8gY2FwYWNpdHkgOiAxO1xuXHR9XG59KTtcblxuLy8gSU5URVJOQUw6IHN0YXRpYyBkZWZhdWx0IG9wdGlvbnMsIHJlZ2lzdGVyZWQgaW4gc3JjL2luZGV4LmpzXG52YXIgX2RlZmF1bHRzJDQgPSBkZWZhdWx0Q29uZmlnJDQ7XG5zY2FsZV90aW1lLl9kZWZhdWx0cyA9IF9kZWZhdWx0cyQ0O1xuXG52YXIgc2NhbGVzID0ge1xuXHRjYXRlZ29yeTogc2NhbGVfY2F0ZWdvcnksXG5cdGxpbmVhcjogc2NhbGVfbGluZWFyLFxuXHRsb2dhcml0aG1pYzogc2NhbGVfbG9nYXJpdGhtaWMsXG5cdHJhZGlhbExpbmVhcjogc2NhbGVfcmFkaWFsTGluZWFyLFxuXHR0aW1lOiBzY2FsZV90aW1lXG59O1xuXG52YXIgRk9STUFUUyA9IHtcblx0ZGF0ZXRpbWU6ICdNTU0gRCwgWVlZWSwgaDptbTpzcyBhJyxcblx0bWlsbGlzZWNvbmQ6ICdoOm1tOnNzLlNTUyBhJyxcblx0c2Vjb25kOiAnaDptbTpzcyBhJyxcblx0bWludXRlOiAnaDptbSBhJyxcblx0aG91cjogJ2hBJyxcblx0ZGF5OiAnTU1NIEQnLFxuXHR3ZWVrOiAnbGwnLFxuXHRtb250aDogJ01NTSBZWVlZJyxcblx0cXVhcnRlcjogJ1tRXVEgLSBZWVlZJyxcblx0eWVhcjogJ1lZWVknXG59O1xuXG5jb3JlX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlKHR5cGVvZiBtb21lbnQgPT09ICdmdW5jdGlvbicgPyB7XG5cdF9pZDogJ21vbWVudCcsIC8vIERFQlVHIE9OTFlcblxuXHRmb3JtYXRzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gRk9STUFUUztcblx0fSxcblxuXHRwYXJzZTogZnVuY3Rpb24odmFsdWUsIGZvcm1hdCkge1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSwgZm9ybWF0KTtcblx0XHR9IGVsc2UgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBtb21lbnQpKSB7XG5cdFx0XHR2YWx1ZSA9IG1vbWVudCh2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZS5pc1ZhbGlkKCkgPyB2YWx1ZS52YWx1ZU9mKCkgOiBudWxsO1xuXHR9LFxuXG5cdGZvcm1hdDogZnVuY3Rpb24odGltZSwgZm9ybWF0KSB7XG5cdFx0cmV0dXJuIG1vbWVudCh0aW1lKS5mb3JtYXQoZm9ybWF0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKHRpbWUsIGFtb3VudCwgdW5pdCkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSkuYWRkKGFtb3VudCwgdW5pdCkudmFsdWVPZigpO1xuXHR9LFxuXG5cdGRpZmY6IGZ1bmN0aW9uKG1heCwgbWluLCB1bml0KSB7XG5cdFx0cmV0dXJuIG1vbWVudChtYXgpLmRpZmYobW9tZW50KG1pbiksIHVuaXQpO1xuXHR9LFxuXG5cdHN0YXJ0T2Y6IGZ1bmN0aW9uKHRpbWUsIHVuaXQsIHdlZWtkYXkpIHtcblx0XHR0aW1lID0gbW9tZW50KHRpbWUpO1xuXHRcdGlmICh1bml0ID09PSAnaXNvV2VlaycpIHtcblx0XHRcdHJldHVybiB0aW1lLmlzb1dlZWtkYXkod2Vla2RheSkudmFsdWVPZigpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGltZS5zdGFydE9mKHVuaXQpLnZhbHVlT2YoKTtcblx0fSxcblxuXHRlbmRPZjogZnVuY3Rpb24odGltZSwgdW5pdCkge1xuXHRcdHJldHVybiBtb21lbnQodGltZSkuZW5kT2YodW5pdCkudmFsdWVPZigpO1xuXHR9LFxuXG5cdC8vIERFUFJFQ0FUSU9OU1xuXG5cdC8qKlxuXHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIHNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoKS5cblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuXHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfY3JlYXRlOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0cmV0dXJuIG1vbWVudCh0aW1lKTtcblx0fSxcbn0gOiB7fSk7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRwbHVnaW5zOiB7XG5cdFx0ZmlsbGVyOiB7XG5cdFx0XHRwcm9wYWdhdGU6IHRydWVcblx0XHR9XG5cdH1cbn0pO1xuXG52YXIgbWFwcGVycyA9IHtcblx0ZGF0YXNldDogZnVuY3Rpb24oc291cmNlKSB7XG5cdFx0dmFyIGluZGV4ID0gc291cmNlLmZpbGw7XG5cdFx0dmFyIGNoYXJ0ID0gc291cmNlLmNoYXJ0O1xuXHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXHRcdHZhciB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcblx0XHR2YXIgcG9pbnRzID0gKHZpc2libGUgJiYgbWV0YS5kYXRhc2V0Ll9jaGlsZHJlbikgfHwgW107XG5cdFx0dmFyIGxlbmd0aCA9IHBvaW50cy5sZW5ndGggfHwgMDtcblxuXHRcdHJldHVybiAhbGVuZ3RoID8gbnVsbCA6IGZ1bmN0aW9uKHBvaW50LCBpKSB7XG5cdFx0XHRyZXR1cm4gKGkgPCBsZW5ndGggJiYgcG9pbnRzW2ldLl92aWV3KSB8fCBudWxsO1xuXHRcdH07XG5cdH0sXG5cblx0Ym91bmRhcnk6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHZhciBib3VuZGFyeSA9IHNvdXJjZS5ib3VuZGFyeTtcblx0XHR2YXIgeCA9IGJvdW5kYXJ5ID8gYm91bmRhcnkueCA6IG51bGw7XG5cdFx0dmFyIHkgPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnkgOiBudWxsO1xuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc0FycmF5KGJvdW5kYXJ5KSkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHBvaW50LCBpKSB7XG5cdFx0XHRcdHJldHVybiBib3VuZGFyeVtpXTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiB4ID09PSBudWxsID8gcG9pbnQueCA6IHgsXG5cdFx0XHRcdHk6IHkgPT09IG51bGwgPyBwb2ludC55IDogeSxcblx0XHRcdH07XG5cdFx0fTtcblx0fVxufTtcblxuLy8gQHRvZG8gaWYgKGZpbGxbMF0gPT09ICcjJylcbmZ1bmN0aW9uIGRlY29kZUZpbGwoZWwsIGluZGV4LCBjb3VudCkge1xuXHR2YXIgbW9kZWwgPSBlbC5fbW9kZWwgfHwge307XG5cdHZhciBmaWxsID0gbW9kZWwuZmlsbDtcblx0dmFyIHRhcmdldDtcblxuXHRpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0ZmlsbCA9ICEhbW9kZWwuYmFja2dyb3VuZENvbG9yO1xuXHR9XG5cblx0aWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuXHRcdHJldHVybiAnb3JpZ2luJztcblx0fVxuXG5cdHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCwgMTApO1xuXHRpZiAoaXNGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuXHRcdGlmIChmaWxsWzBdID09PSAnLScgfHwgZmlsbFswXSA9PT0gJysnKSB7XG5cdFx0XHR0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcblx0XHR9XG5cblx0XHRpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH1cblxuXHRzd2l0Y2ggKGZpbGwpIHtcblx0Ly8gY29tcGF0aWJpbGl0eVxuXHRjYXNlICdib3R0b20nOlxuXHRcdHJldHVybiAnc3RhcnQnO1xuXHRjYXNlICd0b3AnOlxuXHRcdHJldHVybiAnZW5kJztcblx0Y2FzZSAnemVybyc6XG5cdFx0cmV0dXJuICdvcmlnaW4nO1xuXHQvLyBzdXBwb3J0ZWQgYm91bmRhcmllc1xuXHRjYXNlICdvcmlnaW4nOlxuXHRjYXNlICdzdGFydCc6XG5cdGNhc2UgJ2VuZCc6XG5cdFx0cmV0dXJuIGZpbGw7XG5cdC8vIGludmFsaWQgZmlsbCB2YWx1ZXNcblx0ZGVmYXVsdDpcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgbW9kZWwgPSBzb3VyY2UuZWwuX21vZGVsIHx8IHt9O1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlIHx8IHt9O1xuXHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHR2YXIgdGFyZ2V0ID0gbnVsbDtcblx0dmFyIGhvcml6b250YWw7XG5cblx0aWYgKGlzRmluaXRlKGZpbGwpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OiB1bnRpbCB2Mywgd2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IGJvdW5kYXJ5IHZhbHVlcyBzZXQgb25cblx0Ly8gdGhlIG1vZGVsIChzY2FsZVRvcCwgc2NhbGVCb3R0b20gYW5kIHNjYWxlWmVybykgYmVjYXVzZSBzb21lIGV4dGVybmFsIHBsdWdpbnMgYW5kXG5cdC8vIGNvbnRyb2xsZXJzIG1pZ2h0IHN0aWxsIHVzZSBpdCAoZS5nLiB0aGUgU21pdGggY2hhcnQpLlxuXG5cdGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVCb3R0b20gPT09IHVuZGVmaW5lZCA/IHNjYWxlLmJvdHRvbSA6IG1vZGVsLnNjYWxlQm90dG9tO1xuXHR9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVUb3AgPT09IHVuZGVmaW5lZCA/IHNjYWxlLnRvcCA6IG1vZGVsLnNjYWxlVG9wO1xuXHR9IGVsc2UgaWYgKG1vZGVsLnNjYWxlWmVybyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVaZXJvO1xuXHR9IGVsc2UgaWYgKHNjYWxlLmdldEJhc2VQaXhlbCkge1xuXHRcdHRhcmdldCA9IHNjYWxlLmdldEJhc2VQaXhlbCgpO1xuXHR9XG5cblx0aWYgKHRhcmdldCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldCAhPT0gbnVsbCkge1xuXHRcdGlmICh0YXJnZXQueCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC55ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKGhlbHBlcnMkMS5pc0Zpbml0ZSh0YXJnZXQpKSB7XG5cdFx0XHRob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiBob3Jpem9udGFsID8gdGFyZ2V0IDogbnVsbCxcblx0XHRcdFx0eTogaG9yaXpvbnRhbCA/IG51bGwgOiB0YXJnZXRcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlO1xuXHR2YXIgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG5cdHZhciBsZW5ndGggPSBzY2FsZS5jaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB0YXJnZXQgPSBbXTtcblx0dmFyIHN0YXJ0LCBlbmQsIGNlbnRlciwgaSwgcG9pbnQ7XG5cblx0aWYgKCFsZW5ndGgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHN0YXJ0ID0gb3B0aW9ucy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuXHRlbmQgPSBvcHRpb25zLnRpY2tzLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG5cdGNlbnRlciA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSgwLCBzdGFydCk7XG5cdGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdHBvaW50ID0gZmlsbCA9PT0gJ3N0YXJ0JyB8fCBmaWxsID09PSAnZW5kJ1xuXHRcdFx0PyBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgZmlsbCA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogZW5kKVxuXHRcdFx0OiBzY2FsZS5nZXRCYXNlUG9zaXRpb24oaSk7XG5cdFx0aWYgKG9wdGlvbnMuZ3JpZExpbmVzLmNpcmN1bGFyKSB7XG5cdFx0XHRwb2ludC5jeCA9IGNlbnRlci54O1xuXHRcdFx0cG9pbnQuY3kgPSBjZW50ZXIueTtcblx0XHRcdHBvaW50LmFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZShpKSAtIE1hdGguUEkgLyAyO1xuXHRcdH1cblx0XHR0YXJnZXQucHVzaChwb2ludCk7XG5cdH1cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuXHR2YXIgc2NhbGUgPSBzb3VyY2UuZWwuX3NjYWxlIHx8IHt9O1xuXG5cdGlmIChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUpIHtcblx0XHRyZXR1cm4gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKTtcblx0fVxuXHRyZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuXHR2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB2aXNpdGVkID0gW2luZGV4XTtcblx0dmFyIHRhcmdldDtcblxuXHRpZiAoIXByb3BhZ2F0ZSkge1xuXHRcdHJldHVybiBmaWxsO1xuXHR9XG5cblx0d2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcblx0XHRpZiAoIWlzRmluaXRlKGZpbGwpKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuXHRcdGlmICghdGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRhcmdldC52aXNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR2aXNpdGVkLnB1c2goZmlsbCk7XG5cdFx0ZmlsbCA9IHRhcmdldC5maWxsO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXBwZXIoc291cmNlKSB7XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB0eXBlID0gJ2RhdGFzZXQnO1xuXG5cdGlmIChmaWxsID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aWYgKCFpc0Zpbml0ZShmaWxsKSkge1xuXHRcdHR5cGUgPSAnYm91bmRhcnknO1xuXHR9XG5cblx0cmV0dXJuIG1hcHBlcnNbdHlwZV0oc291cmNlKTtcbn1cblxuZnVuY3Rpb24gaXNEcmF3YWJsZShwb2ludCkge1xuXHRyZXR1cm4gcG9pbnQgJiYgIXBvaW50LnNraXA7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpIHtcblx0dmFyIGksIGN4LCBjeSwgcjtcblxuXHRpZiAoIWxlbjAgfHwgIWxlbjEpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBidWlsZGluZyBmaXJzdCBhcmVhIGN1cnZlIChub3JtYWwpXG5cdGN0eC5tb3ZlVG8oY3VydmUwWzBdLngsIGN1cnZlMFswXS55KTtcblx0Zm9yIChpID0gMTsgaSA8IGxlbjA7ICsraSkge1xuXHRcdGhlbHBlcnMkMS5jYW52YXMubGluZVRvKGN0eCwgY3VydmUwW2kgLSAxXSwgY3VydmUwW2ldKTtcblx0fVxuXG5cdGlmIChjdXJ2ZTFbMF0uYW5nbGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGN4ID0gY3VydmUxWzBdLmN4O1xuXHRcdGN5ID0gY3VydmUxWzBdLmN5O1xuXHRcdHIgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VydmUxWzBdLnggLSBjeCwgMikgKyBNYXRoLnBvdyhjdXJ2ZTFbMF0ueSAtIGN5LCAyKSk7XG5cdFx0Zm9yIChpID0gbGVuMSAtIDE7IGkgPiAwOyAtLWkpIHtcblx0XHRcdGN0eC5hcmMoY3gsIGN5LCByLCBjdXJ2ZTFbaV0uYW5nbGUsIGN1cnZlMVtpIC0gMV0uYW5nbGUsIHRydWUpO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBqb2luaW5nIHRoZSB0d28gYXJlYSBjdXJ2ZXNcblx0Y3R4LmxpbmVUbyhjdXJ2ZTFbbGVuMSAtIDFdLngsIGN1cnZlMVtsZW4xIC0gMV0ueSk7XG5cblx0Ly8gYnVpbGRpbmcgb3Bwb3NpdGUgYXJlYSBjdXJ2ZSAocmV2ZXJzZSlcblx0Zm9yIChpID0gbGVuMSAtIDE7IGkgPiAwOyAtLWkpIHtcblx0XHRoZWxwZXJzJDEuY2FudmFzLmxpbmVUbyhjdHgsIGN1cnZlMVtpXSwgY3VydmUxW2kgLSAxXSwgdHJ1ZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgcG9pbnRzLCBtYXBwZXIsIHZpZXcsIGNvbG9yLCBsb29wKSB7XG5cdHZhciBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG5cdHZhciBzcGFuID0gdmlldy5zcGFuR2Fwcztcblx0dmFyIGN1cnZlMCA9IFtdO1xuXHR2YXIgY3VydmUxID0gW107XG5cdHZhciBsZW4wID0gMDtcblx0dmFyIGxlbjEgPSAwO1xuXHR2YXIgaSwgaWxlbiwgaW5kZXgsIHAwLCBwMSwgZDAsIGQxLCBsb29wT2Zmc2V0O1xuXG5cdGN0eC5iZWdpblBhdGgoKTtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpbmRleCA9IGkgJSBjb3VudDtcblx0XHRwMCA9IHBvaW50c1tpbmRleF0uX3ZpZXc7XG5cdFx0cDEgPSBtYXBwZXIocDAsIGluZGV4LCB2aWV3KTtcblx0XHRkMCA9IGlzRHJhd2FibGUocDApO1xuXHRcdGQxID0gaXNEcmF3YWJsZShwMSk7XG5cblx0XHRpZiAobG9vcCAmJiBsb29wT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgZDApIHtcblx0XHRcdGxvb3BPZmZzZXQgPSBpICsgMTtcblx0XHRcdGlsZW4gPSBjb3VudCArIGxvb3BPZmZzZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKGQwICYmIGQxKSB7XG5cdFx0XHRsZW4wID0gY3VydmUwLnB1c2gocDApO1xuXHRcdFx0bGVuMSA9IGN1cnZlMS5wdXNoKHAxKTtcblx0XHR9IGVsc2UgaWYgKGxlbjAgJiYgbGVuMSkge1xuXHRcdFx0aWYgKCFzcGFuKSB7XG5cdFx0XHRcdGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpO1xuXHRcdFx0XHRsZW4wID0gbGVuMSA9IDA7XG5cdFx0XHRcdGN1cnZlMCA9IFtdO1xuXHRcdFx0XHRjdXJ2ZTEgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkMCkge1xuXHRcdFx0XHRcdGN1cnZlMC5wdXNoKHAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZDEpIHtcblx0XHRcdFx0XHRjdXJ2ZTEucHVzaChwMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKTtcblxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcblx0Y3R4LmZpbGwoKTtcbn1cblxudmFyIHBsdWdpbl9maWxsZXIgPSB7XG5cdGlkOiAnZmlsbGVyJyxcblxuXHRhZnRlckRhdGFzZXRzVXBkYXRlOiBmdW5jdGlvbihjaGFydCwgb3B0aW9ucykge1xuXHRcdHZhciBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG5cdFx0dmFyIHByb3BhZ2F0ZSA9IG9wdGlvbnMucHJvcGFnYXRlO1xuXHRcdHZhciBzb3VyY2VzID0gW107XG5cdFx0dmFyIG1ldGEsIGksIGVsLCBzb3VyY2U7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0ZWwgPSBtZXRhLmRhdGFzZXQ7XG5cdFx0XHRzb3VyY2UgPSBudWxsO1xuXG5cdFx0XHRpZiAoZWwgJiYgZWwuX21vZGVsICYmIGVsIGluc3RhbmNlb2YgZWxlbWVudHMuTGluZSkge1xuXHRcdFx0XHRzb3VyY2UgPSB7XG5cdFx0XHRcdFx0dmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcblx0XHRcdFx0XHRmaWxsOiBkZWNvZGVGaWxsKGVsLCBpLCBjb3VudCksXG5cdFx0XHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0XHRcdGVsOiBlbFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG5cdFx0XHRzb3VyY2VzLnB1c2goc291cmNlKTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghc291cmNlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2UuZmlsbCA9IHJlc29sdmVUYXJnZXQoc291cmNlcywgaSwgcHJvcGFnYXRlKTtcblx0XHRcdHNvdXJjZS5ib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuXHRcdFx0c291cmNlLm1hcHBlciA9IGNyZWF0ZU1hcHBlcihzb3VyY2UpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVEYXRhc2V0c0RyYXc6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIG1ldGFzZXRzID0gY2hhcnQuX2dldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcblx0XHR2YXIgY3R4ID0gY2hhcnQuY3R4O1xuXHRcdHZhciBtZXRhLCBpLCBlbCwgdmlldywgcG9pbnRzLCBtYXBwZXIsIGNvbG9yO1xuXG5cdFx0Zm9yIChpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHRcdG1ldGEgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuXG5cdFx0XHRpZiAoIW1ldGEgfHwgIW1ldGEudmlzaWJsZSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0ZWwgPSBtZXRhLmVsO1xuXHRcdFx0dmlldyA9IGVsLl92aWV3O1xuXHRcdFx0cG9pbnRzID0gZWwuX2NoaWxkcmVuIHx8IFtdO1xuXHRcdFx0bWFwcGVyID0gbWV0YS5tYXBwZXI7XG5cdFx0XHRjb2xvciA9IHZpZXcuYmFja2dyb3VuZENvbG9yIHx8IGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuXHRcdFx0aWYgKG1hcHBlciAmJiBjb2xvciAmJiBwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRcdGhlbHBlcnMkMS5jYW52YXMuY2xpcEFyZWEoY3R4LCBjaGFydC5jaGFydEFyZWEpO1xuXHRcdFx0XHRkb0ZpbGwoY3R4LCBwb2ludHMsIG1hcHBlciwgdmlldywgY29sb3IsIGVsLl9sb29wKTtcblx0XHRcdFx0aGVscGVycyQxLmNhbnZhcy51bmNsaXBBcmVhKGN0eCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgZ2V0UnRsSGVscGVyJDEgPSBoZWxwZXJzJDEucnRsLmdldFJ0bEFkYXB0ZXI7XG52YXIgbm9vcCQxID0gaGVscGVycyQxLm5vb3A7XG52YXIgdmFsdWVPckRlZmF1bHQkZSA9IGhlbHBlcnMkMS52YWx1ZU9yRGVmYXVsdDtcblxuY29yZV9kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGxlZ2VuZDoge1xuXHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0cG9zaXRpb246ICd0b3AnLFxuXHRcdGFsaWduOiAnY2VudGVyJyxcblx0XHRmdWxsV2lkdGg6IHRydWUsXG5cdFx0cmV2ZXJzZTogZmFsc2UsXG5cdFx0d2VpZ2h0OiAxMDAwLFxuXG5cdFx0Ly8gYSBjYWxsYmFjayB0aGF0IHdpbGwgaGFuZGxlXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG5cdFx0XHR2YXIgY2kgPSB0aGlzLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBjaS5nZXREYXRhc2V0TWV0YShpbmRleCk7XG5cblx0XHRcdC8vIFNlZSBjb250cm9sbGVyLmlzRGF0YXNldFZpc2libGUgY29tbWVudFxuXHRcdFx0bWV0YS5oaWRkZW4gPSBtZXRhLmhpZGRlbiA9PT0gbnVsbCA/ICFjaS5kYXRhLmRhdGFzZXRzW2luZGV4XS5oaWRkZW4gOiBudWxsO1xuXG5cdFx0XHQvLyBXZSBoaWQgYSBkYXRhc2V0IC4uLiByZXJlbmRlciB0aGUgY2hhcnRcblx0XHRcdGNpLnVwZGF0ZSgpO1xuXHRcdH0sXG5cblx0XHRvbkhvdmVyOiBudWxsLFxuXHRcdG9uTGVhdmU6IG51bGwsXG5cblx0XHRsYWJlbHM6IHtcblx0XHRcdGJveFdpZHRoOiA0MCxcblx0XHRcdHBhZGRpbmc6IDEwLFxuXHRcdFx0Ly8gR2VuZXJhdGVzIGxhYmVscyBzaG93biBpbiB0aGUgbGVnZW5kXG5cdFx0XHQvLyBWYWxpZCBwcm9wZXJ0aWVzIHRvIHJldHVybjpcblx0XHRcdC8vIHRleHQgOiB0ZXh0IHRvIGRpc3BsYXlcblx0XHRcdC8vIGZpbGxTdHlsZSA6IGZpbGwgb2YgY29sb3VyZWQgYm94XG5cdFx0XHQvLyBzdHJva2VTdHlsZTogc3Ryb2tlIG9mIGNvbG91cmVkIGJveFxuXHRcdFx0Ly8gaGlkZGVuIDogaWYgdGhpcyBsZWdlbmQgaXRlbSByZWZlcnMgdG8gYSBoaWRkZW4gaXRlbVxuXHRcdFx0Ly8gbGluZUNhcCA6IGNhcCBzdHlsZSBmb3IgbGluZVxuXHRcdFx0Ly8gbGluZURhc2hcblx0XHRcdC8vIGxpbmVEYXNoT2Zmc2V0IDpcblx0XHRcdC8vIGxpbmVKb2luIDpcblx0XHRcdC8vIGxpbmVXaWR0aCA6XG5cdFx0XHRnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRcdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHRcdFx0dmFyIG9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZCB8fCB7fTtcblx0XHRcdFx0dmFyIHVzZVBvaW50U3R5bGUgPSBvcHRpb25zLmxhYmVscyAmJiBvcHRpb25zLmxhYmVscy51c2VQb2ludFN0eWxlO1xuXG5cdFx0XHRcdHJldHVybiBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKCkubWFwKGZ1bmN0aW9uKG1ldGEpIHtcblx0XHRcdFx0XHR2YXIgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodXNlUG9pbnRTdHlsZSA/IDAgOiB1bmRlZmluZWQpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuXHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdFx0XHRoaWRkZW46ICFjaGFydC5pc0RhdGFzZXRWaXNpYmxlKG1ldGEuaW5kZXgpLFxuXHRcdFx0XHRcdFx0bGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG5cdFx0XHRcdFx0XHRsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcblx0XHRcdFx0XHRcdGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuXHRcdFx0XHRcdFx0bGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcblx0XHRcdFx0XHRcdGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdFx0XHRzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0XHRwb2ludFN0eWxlOiBzdHlsZS5wb2ludFN0eWxlLFxuXHRcdFx0XHRcdFx0cm90YXRpb246IHN0eWxlLnJvdGF0aW9uLFxuXG5cdFx0XHRcdFx0XHQvLyBCZWxvdyBpcyBleHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBkYXRhc2V0c1xuXHRcdFx0XHRcdFx0ZGF0YXNldEluZGV4OiBtZXRhLmluZGV4XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcblx0XHR2YXIgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBpLCBpbGVuLCBsaXN0SXRlbSwgbGlzdEl0ZW1TcGFuO1xuXG5cdFx0bGlzdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2hhcnQuaWQgKyAnLWxlZ2VuZCcpO1xuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuXHRcdFx0bGlzdEl0ZW0gPSBsaXN0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpO1xuXHRcdFx0bGlzdEl0ZW1TcGFuID0gbGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpKTtcblx0XHRcdGxpc3RJdGVtU3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0c1tpXS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRpZiAoZGF0YXNldHNbaV0ubGFiZWwpIHtcblx0XHRcdFx0bGlzdEl0ZW0uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YXNldHNbaV0ubGFiZWwpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdC5vdXRlckhUTUw7XG5cdH1cbn0pO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGJveCB3aWR0aCBiYXNlZCBvbiB0aGUgdXNlUG9pbnRTdHlsZSBvcHRpb25cbiAqIEBwYXJhbSB7b2JqZWN0fSBsYWJlbG9wdHMgLSB0aGUgbGFiZWwgb3B0aW9ucyBvbiB0aGUgbGVnZW5kXG4gKiBAcGFyYW0ge251bWJlcn0gZm9udFNpemUgLSB0aGUgbGFiZWwgZm9udCBzaXplXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHdpZHRoIG9mIHRoZSBjb2xvciBib3ggYXJlYVxuICovXG5mdW5jdGlvbiBnZXRCb3hXaWR0aChsYWJlbE9wdHMsIGZvbnRTaXplKSB7XG5cdHJldHVybiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSAmJiBsYWJlbE9wdHMuYm94V2lkdGggPiBmb250U2l6ZSA/XG5cdFx0Zm9udFNpemUgOlxuXHRcdGxhYmVsT3B0cy5ib3hXaWR0aDtcbn1cblxuLyoqXG4gKiBJTVBPUlRBTlQ6IHRoaXMgY2xhc3MgaXMgZXhwb3NlZCBwdWJsaWNseSBhcyBDaGFydC5MZWdlbmQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVxdWlyZWQhXG4gKi9cbnZhciBMZWdlbmQgPSBjb3JlX2VsZW1lbnQuZXh0ZW5kKHtcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGhlbHBlcnMkMS5leHRlbmQobWUsIGNvbmZpZyk7XG5cblx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHRtZS5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuXG5cdFx0LyoqXG4gXHRcdCAqIEBwcml2YXRlXG4gXHRcdCAqL1xuXHRcdG1lLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG5cblx0XHQvLyBBcmUgd2UgaW4gZG91Z2hudXQgbW9kZSB3aGljaCBoYXMgYSBkaWZmZXJlbnQgZGF0YSB0eXBlXG5cdFx0bWUuZG91Z2hudXRNb2RlID0gZmFsc2U7XG5cdH0sXG5cblx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3ljbGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblx0Ly8gQW55IGZ1bmN0aW9uIGRlZmluZWQgaGVyZSBpcyBpbmhlcml0ZWQgYnkgYWxsIGxlZ2VuZCB0eXBlcy5cblx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgbGVnZW5kIHR5cGVcblxuXHRiZWZvcmVVcGRhdGU6IG5vb3AkMSxcblx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdC8vIFVwZGF0ZSBMaWZlY3ljbGUgLSBQcm9iYWJseSBkb24ndCB3YW50IHRvIGV2ZXIgZXh0ZW5kIG9yIG92ZXJ3cml0ZSB0aGlzIGZ1bmN0aW9uIDspXG5cdFx0bWUuYmVmb3JlVXBkYXRlKCk7XG5cblx0XHQvLyBBYnNvcmIgdGhlIG1hc3RlciBtZWFzdXJlbWVudHNcblx0XHRtZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdG1lLm1heEhlaWdodCA9IG1heEhlaWdodDtcblx0XHRtZS5tYXJnaW5zID0gbWFyZ2lucztcblxuXHRcdC8vIERpbWVuc2lvbnNcblx0XHRtZS5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuc2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXHRcdC8vIExhYmVsc1xuXHRcdG1lLmJlZm9yZUJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYnVpbGRMYWJlbHMoKTtcblx0XHRtZS5hZnRlckJ1aWxkTGFiZWxzKCk7XG5cblx0XHQvLyBGaXRcblx0XHRtZS5iZWZvcmVGaXQoKTtcblx0XHRtZS5maXQoKTtcblx0XHRtZS5hZnRlckZpdCgpO1xuXHRcdC8vXG5cdFx0bWUuYWZ0ZXJVcGRhdGUoKTtcblxuXHRcdHJldHVybiBtZS5taW5TaXplO1xuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCQxLFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogbm9vcCQxLFxuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdG1lLnJpZ2h0ID0gbWUud2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0bWUucGFkZGluZ1RvcCA9IDA7XG5cdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblxuXHRcdC8vIFJlc2V0IG1pblNpemVcblx0XHRtZS5taW5TaXplID0ge1xuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRoZWlnaHQ6IDBcblx0XHR9O1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IG5vb3AkMSxcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wJDEsXG5cdGJ1aWxkTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBsYWJlbE9wdHMgPSBtZS5vcHRpb25zLmxhYmVscyB8fCB7fTtcblx0XHR2YXIgbGVnZW5kSXRlbXMgPSBoZWxwZXJzJDEuY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbbWUuY2hhcnRdLCBtZSkgfHwgW107XG5cblx0XHRpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuXHRcdFx0bGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gbGFiZWxPcHRzLmZpbHRlcihpdGVtLCBtZS5jaGFydC5kYXRhKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChtZS5vcHRpb25zLnJldmVyc2UpIHtcblx0XHRcdGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcblx0XHR9XG5cblx0XHRtZS5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuXHR9LFxuXHRhZnRlckJ1aWxkTGFiZWxzOiBub29wJDEsXG5cblx0Ly9cblxuXHRiZWZvcmVGaXQ6IG5vb3AkMSxcblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgbGFiZWxPcHRzID0gb3B0cy5sYWJlbHM7XG5cdFx0dmFyIGRpc3BsYXkgPSBvcHRzLmRpc3BsYXk7XG5cblx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXG5cdFx0dmFyIGxhYmVsRm9udCA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQobGFiZWxPcHRzKTtcblx0XHR2YXIgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcblxuXHRcdC8vIFJlc2V0IGhpdCBib3hlc1xuXHRcdHZhciBoaXRib3hlcyA9IG1lLmxlZ2VuZEhpdEJveGVzID0gW107XG5cblx0XHR2YXIgbWluU2l6ZSA9IG1lLm1pblNpemU7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IG1lLm1heFdpZHRoOyAvLyBmaWxsIGFsbCB0aGUgd2lkdGhcblx0XHRcdG1pblNpemUuaGVpZ2h0ID0gZGlzcGxheSA/IDEwIDogMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IGRpc3BsYXkgPyAxMCA6IDA7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH1cblxuXHRcdC8vIEluY3JlYXNlIHNpemVzIGhlcmVcblx0XHRpZiAoIWRpc3BsYXkpIHtcblx0XHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aCA9IG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0ID0gMDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0Ly8gTGFiZWxzXG5cblx0XHRcdC8vIFdpZHRoIG9mIGVhY2ggbGluZSBvZiBsZWdlbmQgYm94ZXMuIExhYmVscyB3cmFwIG9udG8gbXVsdGlwbGUgbGluZXMgd2hlbiB0aGVyZSBhcmUgdG9vIG1hbnkgdG8gZml0IG9uIG9uZVxuXHRcdFx0dmFyIGxpbmVXaWR0aHMgPSBtZS5saW5lV2lkdGhzID0gWzBdO1xuXHRcdFx0dmFyIHRvdGFsSGVpZ2h0ID0gMDtcblxuXHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdsZWZ0Jztcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblxuXHRcdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblxuXHRcdFx0XHRpZiAoaSA9PT0gMCB8fCBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gMV0gKyB3aWR0aCArIDIgKiBsYWJlbE9wdHMucGFkZGluZyA+IG1pblNpemUud2lkdGgpIHtcblx0XHRcdFx0XHR0b3RhbEhlaWdodCArPSBmb250U2l6ZSArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRcdGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAoaSA+IDAgPyAwIDogMSldID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN0b3JlIHRoZSBoaXRib3ggd2lkdGggYW5kIGhlaWdodCBoZXJlLiBGaW5hbCBwb3NpdGlvbiB3aWxsIGJlIHVwZGF0ZWQgaW4gYGRyYXdgXG5cdFx0XHRcdGhpdGJveGVzW2ldID0ge1xuXHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IGZvbnRTaXplXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWluU2l6ZS5oZWlnaHQgKz0gdG90YWxIZWlnaHQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHZQYWRkaW5nID0gbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR2YXIgY29sdW1uV2lkdGhzID0gbWUuY29sdW1uV2lkdGhzID0gW107XG5cdFx0XHR2YXIgY29sdW1uSGVpZ2h0cyA9IG1lLmNvbHVtbkhlaWdodHMgPSBbXTtcblx0XHRcdHZhciB0b3RhbFdpZHRoID0gbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHR2YXIgY3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdHZhciBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcblxuXHRcdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdHZhciBpdGVtV2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cblx0XHRcdFx0Ly8gSWYgdG9vIHRhbGwsIGdvIHRvIG5ldyBjb2x1bW5cblx0XHRcdFx0aWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBmb250U2l6ZSArIDIgKiB2UGFkZGluZyA+IG1pblNpemUuaGVpZ2h0KSB7XG5cdFx0XHRcdFx0dG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpOyAvLyBwcmV2aW91cyBjb2x1bW4gd2lkdGhcblx0XHRcdFx0XHRjb2x1bW5IZWlnaHRzLnB1c2goY3VycmVudENvbEhlaWdodCk7XG5cdFx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdFx0XHRjdXJyZW50Q29sSGVpZ2h0ID0gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBtYXggd2lkdGhcblx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuXHRcdFx0XHRjdXJyZW50Q29sSGVpZ2h0ICs9IGZvbnRTaXplICsgdlBhZGRpbmc7XG5cblx0XHRcdFx0Ly8gU3RvcmUgdGhlIGhpdGJveCB3aWR0aCBhbmQgaGVpZ2h0IGhlcmUuIEZpbmFsIHBvc2l0aW9uIHdpbGwgYmUgdXBkYXRlZCBpbiBgZHJhd2Bcblx0XHRcdFx0aGl0Ym94ZXNbaV0gPSB7XG5cdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0d2lkdGg6IGl0ZW1XaWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IGZvbnRTaXplXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblxuXHRcdFx0dG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG5cdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpO1xuXHRcdFx0Y29sdW1uSGVpZ2h0cy5wdXNoKGN1cnJlbnRDb2xIZWlnaHQpO1xuXHRcdFx0bWluU2l6ZS53aWR0aCArPSB0b3RhbFdpZHRoO1xuXHRcdH1cblxuXHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcblx0fSxcblx0YWZ0ZXJGaXQ6IG5vb3AkMSxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cblx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgbGVnZW5kIG9uIHRoZSBjYW52YXNcblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdHZhciBnbG9iYWxEZWZhdWx0cyA9IGNvcmVfZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBkZWZhdWx0Q29sb3IgPSBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Q29sb3I7XG5cdFx0dmFyIGxpbmVEZWZhdWx0ID0gZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGVnZW5kSGVpZ2h0ID0gbWUuaGVpZ2h0O1xuXHRcdHZhciBjb2x1bW5IZWlnaHRzID0gbWUuY29sdW1uSGVpZ2h0cztcblx0XHR2YXIgbGVnZW5kV2lkdGggPSBtZS53aWR0aDtcblx0XHR2YXIgbGluZVdpZHRocyA9IG1lLmxpbmVXaWR0aHM7XG5cblx0XHRpZiAoIW9wdHMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBydGxIZWxwZXIgPSBnZXRSdGxIZWxwZXIkMShvcHRzLnJ0bCwgbWUubGVmdCwgbWUubWluU2l6ZS53aWR0aCk7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgZm9udENvbG9yID0gdmFsdWVPckRlZmF1bHQkZShsYWJlbE9wdHMuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHR2YXIgbGFiZWxGb250ID0gaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChsYWJlbE9wdHMpO1xuXHRcdHZhciBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuXHRcdHZhciBjdXJzb3I7XG5cblx0XHQvLyBDYW52YXMgc2V0dXBcblx0XHRjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbignbGVmdCcpO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRjdHgubGluZVdpZHRoID0gMC41O1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IGZvbnRDb2xvcjsgLy8gZm9yIHN0cmlrZXRocm91Z2ggZWZmZWN0XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IGZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0Y3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuXG5cdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0dmFyIGhpdGJveGVzID0gbWUubGVnZW5kSGl0Qm94ZXM7XG5cblx0XHQvLyBjdXJyZW50IHBvc2l0aW9uXG5cdFx0dmFyIGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG5cdFx0XHRpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGN0eCBmb3IgdGhlIGJveFxuXHRcdFx0Y3R4LnNhdmUoKTtcblxuXHRcdFx0dmFyIGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0JGUobGVnZW5kSXRlbS5saW5lV2lkdGgsIGxpbmVEZWZhdWx0LmJvcmRlcldpZHRoKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuXHRcdFx0Y3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZUNhcCwgbGluZURlZmF1bHQuYm9yZGVyQ2FwU3R5bGUpO1xuXHRcdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQkZShsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCBsaW5lRGVmYXVsdC5ib3JkZXJEYXNoT2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0JGUobGVnZW5kSXRlbS5saW5lSm9pbiwgbGluZURlZmF1bHQuYm9yZGVySm9pblN0eWxlKTtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG5cblx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0Ly8gSUUgOSBhbmQgMTAgZG8gbm90IHN1cHBvcnQgbGluZSBkYXNoXG5cdFx0XHRcdGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdCRlKGxlZ2VuZEl0ZW0ubGluZURhc2gsIGxpbmVEZWZhdWx0LmJvcmRlckRhc2gpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGxhYmVsT3B0cyAmJiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuXHRcdFx0XHQvLyBSZWNhbGN1bGF0ZSB4IGFuZCB5IGZvciBkcmF3UG9pbnQoKSBiZWNhdXNlIGl0cyBleHBlY3Rpbmdcblx0XHRcdFx0Ly8geCBhbmQgeSB0byBiZSBjZW50ZXIgb2YgZmlndXJlIChpbnN0ZWFkIG9mIHRvcCBsZWZ0KVxuXHRcdFx0XHR2YXIgcmFkaXVzID0gYm94V2lkdGggKiBNYXRoLlNRUlQyIC8gMjtcblx0XHRcdFx0dmFyIGNlbnRlclggPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggLyAyKTtcblx0XHRcdFx0dmFyIGNlbnRlclkgPSB5ICsgZm9udFNpemUgLyAyO1xuXG5cdFx0XHRcdC8vIERyYXcgcG9pbnRTdHlsZSBhcyBsZWdlbmQgc3ltYm9sXG5cdFx0XHRcdGhlbHBlcnMkMS5jYW52YXMuZHJhd1BvaW50KGN0eCwgbGVnZW5kSXRlbS5wb2ludFN0eWxlLCByYWRpdXMsIGNlbnRlclgsIGNlbnRlclksIGxlZ2VuZEl0ZW0ucm90YXRpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRHJhdyBib3ggYXMgbGVnZW5kIHN5bWJvbFxuXHRcdFx0XHRjdHguZmlsbFJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpLCB5LCBib3hXaWR0aCwgZm9udFNpemUpO1xuXHRcdFx0XHRpZiAobGluZVdpZHRoICE9PSAwKSB7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QocnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpLCB5LCBib3hXaWR0aCwgZm9udFNpemUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fTtcblxuXHRcdHZhciBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0sIHRleHRXaWR0aCkge1xuXHRcdFx0dmFyIGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcblx0XHRcdHZhciB4TGVmdCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCArIGhhbGZGb250U2l6ZSk7XG5cdFx0XHR2YXIgeU1pZGRsZSA9IHkgKyBoYWxmRm9udFNpemU7XG5cblx0XHRcdGN0eC5maWxsVGV4dChsZWdlbmRJdGVtLnRleHQsIHhMZWZ0LCB5TWlkZGxlKTtcblxuXHRcdFx0aWYgKGxlZ2VuZEl0ZW0uaGlkZGVuKSB7XG5cdFx0XHRcdC8vIFN0cmlrZXRocm91Z2ggdGhlIHRleHQgaWYgaGlkZGVuXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oeExlZnQsIHlNaWRkbGUpO1xuXHRcdFx0XHRjdHgubGluZVRvKHJ0bEhlbHBlci54UGx1cyh4TGVmdCwgdGV4dFdpZHRoKSwgeU1pZGRsZSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dmFyIGFsaWdubWVudE9mZnNldCA9IGZ1bmN0aW9uKGRpbWVuc2lvbiwgYmxvY2tTaXplKSB7XG5cdFx0XHRzd2l0Y2ggKG9wdHMuYWxpZ24pIHtcblx0XHRcdGNhc2UgJ3N0YXJ0Jzpcblx0XHRcdFx0cmV0dXJuIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0Y2FzZSAnZW5kJzpcblx0XHRcdFx0cmV0dXJuIGRpbWVuc2lvbiAtIGJsb2NrU2l6ZTtcblx0XHRcdGRlZmF1bHQ6IC8vIGNlbnRlclxuXHRcdFx0XHRyZXR1cm4gKGRpbWVuc2lvbiAtIGJsb2NrU2l6ZSArIGxhYmVsT3B0cy5wYWRkaW5nKSAvIDI7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIEhvcml6b250YWxcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0Y3Vyc29yID0ge1xuXHRcdFx0XHR4OiBtZS5sZWZ0ICsgYWxpZ25tZW50T2Zmc2V0KGxlZ2VuZFdpZHRoLCBsaW5lV2lkdGhzWzBdKSxcblx0XHRcdFx0eTogbWUudG9wICsgbGFiZWxPcHRzLnBhZGRpbmcsXG5cdFx0XHRcdGxpbmU6IDBcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnNvciA9IHtcblx0XHRcdFx0eDogbWUubGVmdCArIGxhYmVsT3B0cy5wYWRkaW5nLFxuXHRcdFx0XHR5OiBtZS50b3AgKyBhbGlnbm1lbnRPZmZzZXQobGVnZW5kSGVpZ2h0LCBjb2x1bW5IZWlnaHRzWzBdKSxcblx0XHRcdFx0bGluZTogMFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRoZWxwZXJzJDEucnRsLm92ZXJyaWRlVGV4dERpcmVjdGlvbihtZS5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG5cblx0XHR2YXIgaXRlbUhlaWdodCA9IGZvbnRTaXplICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0aGVscGVycyQxLmVhY2gobWUubGVnZW5kSXRlbXMsIGZ1bmN0aW9uKGxlZ2VuZEl0ZW0sIGkpIHtcblx0XHRcdHZhciB0ZXh0V2lkdGggPSBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyB0ZXh0V2lkdGg7XG5cdFx0XHR2YXIgeCA9IGN1cnNvci54O1xuXHRcdFx0dmFyIHkgPSBjdXJzb3IueTtcblxuXHRcdFx0cnRsSGVscGVyLnNldFdpZHRoKG1lLm1pblNpemUud2lkdGgpO1xuXG5cdFx0XHQvLyBVc2UgKG1lLmxlZnQgKyBtZS5taW5TaXplLndpZHRoKSBhbmQgKG1lLnRvcCArIG1lLm1pblNpemUuaGVpZ2h0KVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiBtZS5yaWdodCBhbmQgbWUuYm90dG9tIGJlY2F1c2UgbWUud2lkdGggYW5kIG1lLmhlaWdodFxuXHRcdFx0Ly8gbWF5IGhhdmUgYmVlbiBjaGFuZ2VkIHNpbmNlIG1lLm1pblNpemUgd2FzIGNhbGN1bGF0ZWRcblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0aWYgKGkgPiAwICYmIHggKyB3aWR0aCArIGxhYmVsT3B0cy5wYWRkaW5nID4gbWUubGVmdCArIG1lLm1pblNpemUud2lkdGgpIHtcblx0XHRcdFx0XHR5ID0gY3Vyc29yLnkgKz0gaXRlbUhlaWdodDtcblx0XHRcdFx0XHRjdXJzb3IubGluZSsrO1xuXHRcdFx0XHRcdHggPSBjdXJzb3IueCA9IG1lLmxlZnQgKyBhbGlnbm1lbnRPZmZzZXQobGVnZW5kV2lkdGgsIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChpID4gMCAmJiB5ICsgaXRlbUhlaWdodCA+IG1lLnRvcCArIG1lLm1pblNpemUuaGVpZ2h0KSB7XG5cdFx0XHRcdHggPSBjdXJzb3IueCA9IHggKyBtZS5jb2x1bW5XaWR0aHNbY3Vyc29yLmxpbmVdICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdGN1cnNvci5saW5lKys7XG5cdFx0XHRcdHkgPSBjdXJzb3IueSA9IG1lLnRvcCArIGFsaWdubWVudE9mZnNldChsZWdlbmRIZWlnaHQsIGNvbHVtbkhlaWdodHNbY3Vyc29yLmxpbmVdKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlYWxYID0gcnRsSGVscGVyLngoeCk7XG5cblx0XHRcdGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuXG5cdFx0XHRoaXRib3hlc1tpXS5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocmVhbFgsIGhpdGJveGVzW2ldLndpZHRoKTtcblx0XHRcdGhpdGJveGVzW2ldLnRvcCA9IHk7XG5cblx0XHRcdC8vIEZpbGwgdGhlIGFjdHVhbCBsYWJlbFxuXHRcdFx0ZmlsbFRleHQocmVhbFgsIHksIGxlZ2VuZEl0ZW0sIHRleHRXaWR0aCk7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0Y3Vyc29yLnggKz0gd2lkdGggKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnNvci55ICs9IGl0ZW1IZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzJDEucnRsLnJlc3RvcmVUZXh0RGlyZWN0aW9uKG1lLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9nZXRMZWdlbmRJdGVtQXQ6IGZ1bmN0aW9uKHgsIHkpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBpLCBoaXRCb3gsIGxoO1xuXG5cdFx0aWYgKHggPj0gbWUubGVmdCAmJiB4IDw9IG1lLnJpZ2h0ICYmIHkgPj0gbWUudG9wICYmIHkgPD0gbWUuYm90dG9tKSB7XG5cdFx0XHQvLyBTZWUgaWYgd2UgYXJlIHRvdWNoaW5nIG9uZSBvZiB0aGUgZGF0YXNldCBib3hlc1xuXHRcdFx0bGggPSBtZS5sZWdlbmRIaXRCb3hlcztcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRoaXRCb3ggPSBsaFtpXTtcblxuXHRcdFx0XHRpZiAoeCA+PSBoaXRCb3gubGVmdCAmJiB4IDw9IGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoICYmIHkgPj0gaGl0Qm94LnRvcCAmJiB5IDw9IGhpdEJveC50b3AgKyBoaXRCb3guaGVpZ2h0KSB7XG5cdFx0XHRcdFx0Ly8gVG91Y2hpbmcgYW4gZWxlbWVudFxuXHRcdFx0XHRcdHJldHVybiBtZS5sZWdlbmRJdGVtc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW4gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGhhbmRsZVxuXHQgKi9cblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdHlwZSA9IGUudHlwZSA9PT0gJ21vdXNldXAnID8gJ2NsaWNrJyA6IGUudHlwZTtcblx0XHR2YXIgaG92ZXJlZEl0ZW07XG5cblx0XHRpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcblx0XHRcdGlmICghb3B0cy5vbkhvdmVyICYmICFvcHRzLm9uTGVhdmUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0aWYgKCFvcHRzLm9uQ2xpY2spIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hhcnQgZXZlbnQgYWxyZWFkeSBoYXMgcmVsYXRpdmUgcG9zaXRpb24gaW4gaXRcblx0XHRob3ZlcmVkSXRlbSA9IG1lLl9nZXRMZWdlbmRJdGVtQXQoZS54LCBlLnkpO1xuXG5cdFx0aWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdGlmIChob3ZlcmVkSXRlbSAmJiBvcHRzLm9uQ2xpY2spIHtcblx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRvcHRzLm9uQ2xpY2suY2FsbChtZSwgZS5uYXRpdmUsIGhvdmVyZWRJdGVtKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG9wdHMub25MZWF2ZSAmJiBob3ZlcmVkSXRlbSAhPT0gbWUuX2hvdmVyZWRJdGVtKSB7XG5cdFx0XHRcdGlmIChtZS5faG92ZXJlZEl0ZW0pIHtcblx0XHRcdFx0XHRvcHRzLm9uTGVhdmUuY2FsbChtZSwgZS5uYXRpdmUsIG1lLl9ob3ZlcmVkSXRlbSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWUuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRzLm9uSG92ZXIgJiYgaG92ZXJlZEl0ZW0pIHtcblx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRvcHRzLm9uSG92ZXIuY2FsbChtZSwgZS5uYXRpdmUsIGhvdmVyZWRJdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2goY2hhcnQsIGxlZ2VuZE9wdHMpIHtcblx0dmFyIGxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuXHRcdGN0eDogY2hhcnQuY3R4LFxuXHRcdG9wdGlvbnM6IGxlZ2VuZE9wdHMsXG5cdFx0Y2hhcnQ6IGNoYXJ0XG5cdH0pO1xuXG5cdGNvcmVfbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgbGVnZW5kT3B0cyk7XG5cdGNvcmVfbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG5cdGNoYXJ0LmxlZ2VuZCA9IGxlZ2VuZDtcbn1cblxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG5cdGlkOiAnbGVnZW5kJyxcblxuXHQvKipcblx0ICogQmFja3dhcmQgY29tcGF0aWJpbGl0eTogc2luY2UgMi4xLjUsIHRoZSBsZWdlbmQgaXMgcmVnaXN0ZXJlZCBhcyBhIHBsdWdpbiwgbWFraW5nXG5cdCAqIENoYXJ0LkxlZ2VuZCBvYnNvbGV0ZS4gVG8gYXZvaWQgYSBicmVha2luZyBjaGFuZ2UsIHdlIGV4cG9ydCB0aGUgTGVnZW5kIGFzIHBhcnQgb2Zcblx0ICogdGhlIHBsdWdpbiwgd2hpY2ggb25lIHdpbGwgYmUgcmUtZXhwb3NlZCBpbiB0aGUgY2hhcnQuanMgZmlsZS5cblx0ICogaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC8yNjQwXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZWxlbWVudDogTGVnZW5kLFxuXG5cdGJlZm9yZUluaXQ6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblxuXHRcdGlmIChsZWdlbmRPcHRzKSB7XG5cdFx0XHRjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2goY2hhcnQsIGxlZ2VuZE9wdHMpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblx0XHR2YXIgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuXG5cdFx0aWYgKGxlZ2VuZE9wdHMpIHtcblx0XHRcdGhlbHBlcnMkMS5tZXJnZUlmKGxlZ2VuZE9wdHMsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmxlZ2VuZCk7XG5cblx0XHRcdGlmIChsZWdlbmQpIHtcblx0XHRcdFx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBsZWdlbmRPcHRzKTtcblx0XHRcdFx0bGVnZW5kLm9wdGlvbnMgPSBsZWdlbmRPcHRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGxlZ2VuZCkge1xuXHRcdFx0Y29yZV9sYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbGVnZW5kKTtcblx0XHRcdGRlbGV0ZSBjaGFydC5sZWdlbmQ7XG5cdFx0fVxuXHR9LFxuXG5cdGFmdGVyRXZlbnQ6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0dmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcblx0XHRpZiAobGVnZW5kKSB7XG5cdFx0XHRsZWdlbmQuaGFuZGxlRXZlbnQoZSk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgbm9vcCQyID0gaGVscGVycyQxLm5vb3A7XG5cbmNvcmVfZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHR0aXRsZToge1xuXHRcdGRpc3BsYXk6IGZhbHNlLFxuXHRcdGZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZ1bGxXaWR0aDogdHJ1ZSxcblx0XHRwYWRkaW5nOiAxMCxcblx0XHRwb3NpdGlvbjogJ3RvcCcsXG5cdFx0dGV4dDogJycsXG5cdFx0d2VpZ2h0OiAyMDAwICAgICAgICAgLy8gYnkgZGVmYXVsdCBncmVhdGVyIHRoYW4gbGVnZW5kICgxMDAwKSB0byBiZSBhYm92ZVxuXHR9XG59KTtcblxuLyoqXG4gKiBJTVBPUlRBTlQ6IHRoaXMgY2xhc3MgaXMgZXhwb3NlZCBwdWJsaWNseSBhcyBDaGFydC5MZWdlbmQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVxdWlyZWQhXG4gKi9cbnZhciBUaXRsZSA9IGNvcmVfZWxlbWVudC5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGhlbHBlcnMkMS5leHRlbmQobWUsIGNvbmZpZyk7XG5cblx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHRtZS5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuXHR9LFxuXG5cdC8vIFRoZXNlIG1ldGhvZHMgYXJlIG9yZGVyZWQgYnkgbGlmZWN5Y2xlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cblx0YmVmb3JlVXBkYXRlOiBub29wJDIsXG5cdHVwZGF0ZTogZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IG1hcmdpbnM7XG5cblx0XHQvLyBEaW1lbnNpb25zXG5cdFx0bWUuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5hZnRlclNldERpbWVuc2lvbnMoKTtcblx0XHQvLyBMYWJlbHNcblx0XHRtZS5iZWZvcmVCdWlsZExhYmVscygpO1xuXHRcdG1lLmJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYWZ0ZXJCdWlsZExhYmVscygpO1xuXG5cdFx0Ly8gRml0XG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblx0XHQvL1xuXHRcdG1lLmFmdGVyVXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblxuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCQyLFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogbm9vcCQyLFxuXHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdG1lLnJpZ2h0ID0gbWUud2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0bWUucGFkZGluZ1RvcCA9IDA7XG5cdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblxuXHRcdC8vIFJlc2V0IG1pblNpemVcblx0XHRtZS5taW5TaXplID0ge1xuXHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRoZWlnaHQ6IDBcblx0XHR9O1xuXHR9LFxuXHRhZnRlclNldERpbWVuc2lvbnM6IG5vb3AkMixcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wJDIsXG5cdGJ1aWxkTGFiZWxzOiBub29wJDIsXG5cdGFmdGVyQnVpbGRMYWJlbHM6IG5vb3AkMixcblxuXHQvL1xuXG5cdGJlZm9yZUZpdDogbm9vcCQyLFxuXHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHt9O1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHR2YXIgbGluZUNvdW50LCB0ZXh0U2l6ZTtcblxuXHRcdGlmICghb3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGggPSBtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodCA9IDA7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bGluZUNvdW50ID0gaGVscGVycyQxLmlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuXHRcdHRleHRTaXplID0gbGluZUNvdW50ICogaGVscGVycyQxLm9wdGlvbnMuX3BhcnNlRm9udChvcHRzKS5saW5lSGVpZ2h0ICsgb3B0cy5wYWRkaW5nICogMjtcblxuXHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aCA9IGlzSG9yaXpvbnRhbCA/IG1lLm1heFdpZHRoIDogdGV4dFNpemU7XG5cdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQgPSBpc0hvcml6b250YWwgPyB0ZXh0U2l6ZSA6IG1lLm1heEhlaWdodDtcblx0fSxcblx0YWZ0ZXJGaXQ6IG5vb3AkMixcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0cmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcblx0fSxcblxuXHQvLyBBY3R1YWxseSBkcmF3IHRoZSB0aXRsZSBibG9jayBvbiB0aGUgY2FudmFzXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cblx0XHRpZiAoIW9wdHMuZGlzcGxheSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBmb250T3B0cyA9IGhlbHBlcnMkMS5vcHRpb25zLl9wYXJzZUZvbnQob3B0cyk7XG5cdFx0dmFyIGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuXHRcdHZhciBvZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMiArIG9wdHMucGFkZGluZztcblx0XHR2YXIgcm90YXRpb24gPSAwO1xuXHRcdHZhciB0b3AgPSBtZS50b3A7XG5cdFx0dmFyIGxlZnQgPSBtZS5sZWZ0O1xuXHRcdHZhciBib3R0b20gPSBtZS5ib3R0b207XG5cdFx0dmFyIHJpZ2h0ID0gbWUucmlnaHQ7XG5cdFx0dmFyIG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcblxuXHRcdGN0eC5maWxsU3R5bGUgPSBoZWxwZXJzJDEudmFsdWVPckRlZmF1bHQob3B0cy5mb250Q29sb3IsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250Q29sb3IpOyAvLyByZW5kZXIgaW4gY29ycmVjdCBjb2xvdXJcblx0XHRjdHguZm9udCA9IGZvbnRPcHRzLnN0cmluZztcblxuXHRcdC8vIEhvcml6b250YWxcblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHRpdGxlWCA9IGxlZnQgKyAoKHJpZ2h0IC0gbGVmdCkgLyAyKTsgLy8gbWlkcG9pbnQgb2YgdGhlIHdpZHRoXG5cdFx0XHR0aXRsZVkgPSB0b3AgKyBvZmZzZXQ7XG5cdFx0XHRtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGl0bGVYID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2xlZnQnID8gbGVmdCArIG9mZnNldCA6IHJpZ2h0IC0gb2Zmc2V0O1xuXHRcdFx0dGl0bGVZID0gdG9wICsgKChib3R0b20gLSB0b3ApIC8gMik7XG5cdFx0XHRtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcblx0XHRcdHJvdGF0aW9uID0gTWF0aC5QSSAqIChvcHRzLnBvc2l0aW9uID09PSAnbGVmdCcgPyAtMC41IDogMC41KTtcblx0XHR9XG5cblx0XHRjdHguc2F2ZSgpO1xuXHRcdGN0eC50cmFuc2xhdGUodGl0bGVYLCB0aXRsZVkpO1xuXHRcdGN0eC5yb3RhdGUocm90YXRpb24pO1xuXHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHR2YXIgdGV4dCA9IG9wdHMudGV4dDtcblx0XHRpZiAoaGVscGVycyQxLmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdHZhciB5ID0gMDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQodGV4dFtpXSwgMCwgeSwgbWF4V2lkdGgpO1xuXHRcdFx0XHR5ICs9IGxpbmVIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5maWxsVGV4dCh0ZXh0LCAwLCAwLCBtYXhXaWR0aCk7XG5cdFx0fVxuXG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cykge1xuXHR2YXIgdGl0bGUgPSBuZXcgVGl0bGUoe1xuXHRcdGN0eDogY2hhcnQuY3R4LFxuXHRcdG9wdGlvbnM6IHRpdGxlT3B0cyxcblx0XHRjaGFydDogY2hhcnRcblx0fSk7XG5cblx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG5cdGNvcmVfbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcblx0Y2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxuXG52YXIgcGx1Z2luX3RpdGxlID0ge1xuXHRpZDogJ3RpdGxlJyxcblxuXHQvKipcblx0ICogQmFja3dhcmQgY29tcGF0aWJpbGl0eTogc2luY2UgMi4xLjUsIHRoZSB0aXRsZSBpcyByZWdpc3RlcmVkIGFzIGEgcGx1Z2luLCBtYWtpbmdcblx0ICogQ2hhcnQuVGl0bGUgb2Jzb2xldGUuIFRvIGF2b2lkIGEgYnJlYWtpbmcgY2hhbmdlLCB3ZSBleHBvcnQgdGhlIFRpdGxlIGFzIHBhcnQgb2Zcblx0ICogdGhlIHBsdWdpbiwgd2hpY2ggb25lIHdpbGwgYmUgcmUtZXhwb3NlZCBpbiB0aGUgY2hhcnQuanMgZmlsZS5cblx0ICogaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC8yNjQwXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZWxlbWVudDogVGl0bGUsXG5cblx0YmVmb3JlSW5pdDogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGl0bGVPcHRzID0gY2hhcnQub3B0aW9ucy50aXRsZTtcblxuXHRcdGlmICh0aXRsZU9wdHMpIHtcblx0XHRcdGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cyk7XG5cdFx0fVxuXHR9LFxuXG5cdGJlZm9yZVVwZGF0ZTogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGl0bGVPcHRzID0gY2hhcnQub3B0aW9ucy50aXRsZTtcblx0XHR2YXIgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG5cblx0XHRpZiAodGl0bGVPcHRzKSB7XG5cdFx0XHRoZWxwZXJzJDEubWVyZ2VJZih0aXRsZU9wdHMsIGNvcmVfZGVmYXVsdHMuZ2xvYmFsLnRpdGxlKTtcblxuXHRcdFx0aWYgKHRpdGxlQmxvY2spIHtcblx0XHRcdFx0Y29yZV9sYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGVCbG9jaywgdGl0bGVPcHRzKTtcblx0XHRcdFx0dGl0bGVCbG9jay5vcHRpb25zID0gdGl0bGVPcHRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlTmV3VGl0bGVCbG9ja0FuZEF0dGFjaChjaGFydCwgdGl0bGVPcHRzKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRpdGxlQmxvY2spIHtcblx0XHRcdGNvcmVfbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHRpdGxlQmxvY2spO1xuXHRcdFx0ZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgcGx1Z2lucyA9IHt9O1xudmFyIGZpbGxlciA9IHBsdWdpbl9maWxsZXI7XG52YXIgbGVnZW5kID0gcGx1Z2luX2xlZ2VuZDtcbnZhciB0aXRsZSA9IHBsdWdpbl90aXRsZTtcbnBsdWdpbnMuZmlsbGVyID0gZmlsbGVyO1xucGx1Z2lucy5sZWdlbmQgPSBsZWdlbmQ7XG5wbHVnaW5zLnRpdGxlID0gdGl0bGU7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydFxuICovXG5cblxuY29yZV9jb250cm9sbGVyLmhlbHBlcnMgPSBoZWxwZXJzJDE7XG5cbi8vIEB0b2RvIGRpc3BhdGNoIHRoZXNlIGhlbHBlcnMgaW50byBhcHByb3ByaWF0ZWQgaGVscGVycy9oZWxwZXJzLiogZmlsZSBhbmQgd3JpdGUgdW5pdCB0ZXN0cyFcbmNvcmVfaGVscGVycygpO1xuXG5jb3JlX2NvbnRyb2xsZXIuX2FkYXB0ZXJzID0gY29yZV9hZGFwdGVycztcbmNvcmVfY29udHJvbGxlci5BbmltYXRpb24gPSBjb3JlX2FuaW1hdGlvbjtcbmNvcmVfY29udHJvbGxlci5hbmltYXRpb25TZXJ2aWNlID0gY29yZV9hbmltYXRpb25zO1xuY29yZV9jb250cm9sbGVyLmNvbnRyb2xsZXJzID0gY29udHJvbGxlcnM7XG5jb3JlX2NvbnRyb2xsZXIuRGF0YXNldENvbnRyb2xsZXIgPSBjb3JlX2RhdGFzZXRDb250cm9sbGVyO1xuY29yZV9jb250cm9sbGVyLmRlZmF1bHRzID0gY29yZV9kZWZhdWx0cztcbmNvcmVfY29udHJvbGxlci5FbGVtZW50ID0gY29yZV9lbGVtZW50O1xuY29yZV9jb250cm9sbGVyLmVsZW1lbnRzID0gZWxlbWVudHM7XG5jb3JlX2NvbnRyb2xsZXIuSW50ZXJhY3Rpb24gPSBjb3JlX2ludGVyYWN0aW9uO1xuY29yZV9jb250cm9sbGVyLmxheW91dHMgPSBjb3JlX2xheW91dHM7XG5jb3JlX2NvbnRyb2xsZXIucGxhdGZvcm0gPSBwbGF0Zm9ybTtcbmNvcmVfY29udHJvbGxlci5wbHVnaW5zID0gY29yZV9wbHVnaW5zO1xuY29yZV9jb250cm9sbGVyLlNjYWxlID0gY29yZV9zY2FsZTtcbmNvcmVfY29udHJvbGxlci5zY2FsZVNlcnZpY2UgPSBjb3JlX3NjYWxlU2VydmljZTtcbmNvcmVfY29udHJvbGxlci5UaWNrcyA9IGNvcmVfdGlja3M7XG5jb3JlX2NvbnRyb2xsZXIuVG9vbHRpcCA9IGNvcmVfdG9vbHRpcDtcblxuLy8gUmVnaXN0ZXIgYnVpbHQtaW4gc2NhbGVzXG5cbmNvcmVfY29udHJvbGxlci5oZWxwZXJzLmVhY2goc2NhbGVzLCBmdW5jdGlvbihzY2FsZSwgdHlwZSkge1xuXHRjb3JlX2NvbnRyb2xsZXIuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKHR5cGUsIHNjYWxlLCBzY2FsZS5fZGVmYXVsdHMpO1xufSk7XG5cbi8vIExvYWQgdG8gcmVnaXN0ZXIgYnVpbHQtaW4gYWRhcHRlcnMgKGFzIHNpZGUgZWZmZWN0cylcblxuXG4vLyBMb2FkaW5nIGJ1aWx0LWluIHBsdWdpbnNcblxuZm9yICh2YXIgayBpbiBwbHVnaW5zKSB7XG5cdGlmIChwbHVnaW5zLmhhc093blByb3BlcnR5KGspKSB7XG5cdFx0Y29yZV9jb250cm9sbGVyLnBsdWdpbnMucmVnaXN0ZXIocGx1Z2luc1trXSk7XG5cdH1cbn1cblxuY29yZV9jb250cm9sbGVyLnBsYXRmb3JtLmluaXRpYWxpemUoKTtcblxudmFyIHNyYyA9IGNvcmVfY29udHJvbGxlcjtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHR3aW5kb3cuQ2hhcnQgPSBjb3JlX2NvbnRyb2xsZXI7XG59XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuQ2hhcnRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5DaGFydCA9IGNvcmVfY29udHJvbGxlcjtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG4gKiBAbmFtZXNwYWNlIENoYXJ0LkxlZ2VuZFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjEuNVxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLkxlZ2VuZCA9IHBsdWdpbnMubGVnZW5kLl9lbGVtZW50O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuVGl0bGVcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi4xLjVcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmNvcmVfY29udHJvbGxlci5UaXRsZSA9IHBsdWdpbnMudGl0bGUuX2VsZW1lbnQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5wbHVnaW5zIGluc3RlYWRcbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGx1Z2luU2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjEuNVxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLnBsdWdpblNlcnZpY2UgPSBjb3JlX2NvbnRyb2xsZXIucGx1Z2lucztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgaW5oZXJpdGluZyBmcm9tIENoYXJ0LlBsdWdpbmdCYXNlIGhhcyBub1xuICogZWZmZWN0LCBpbnN0ZWFkIHNpbXBseSBjcmVhdGUvcmVnaXN0ZXIgcGx1Z2lucyB2aWEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICogQGludGVyZmFjZSBDaGFydC5QbHVnaW5CYXNlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNS4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuUGx1Z2luQmFzZSA9IGNvcmVfY29udHJvbGxlci5FbGVtZW50LmV4dGVuZCh7fSk7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcyBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5jYW52YXNIZWxwZXJzXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuY2FudmFzSGVscGVycyA9IGNvcmVfY29udHJvbGxlci5oZWxwZXJzLmNhbnZhcztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmxheW91dHMgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQubGF5b3V0U2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuM1xuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuY29yZV9jb250cm9sbGVyLmxheW91dFNlcnZpY2UgPSBjb3JlX2NvbnRyb2xsZXIubGF5b3V0cztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlLlxuICogQG5hbWVzcGFjZSBDaGFydC5MaW5lYXJTY2FsZUJhc2VcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5jb3JlX2NvbnRyb2xsZXIuTGluZWFyU2NhbGVCYXNlID0gc2NhbGVfbGluZWFyYmFzZTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgaW5zdGVhZCB3ZSBzaG91bGQgY3JlYXRlIGEgbmV3IENoYXJ0XG4gKiBieSBzZXR0aW5nIHRoZSB0eXBlIGluIHRoZSBjb25maWcgKGBuZXcgQ2hhcnQoaWQsIHt0eXBlOiAne2NoYXJ0LXR5cGV9J31gKS5cbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi44LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqL1xuY29yZV9jb250cm9sbGVyLmhlbHBlcnMuZWFjaChcblx0W1xuXHRcdCdCYXInLFxuXHRcdCdCdWJibGUnLFxuXHRcdCdEb3VnaG51dCcsXG5cdFx0J0xpbmUnLFxuXHRcdCdQb2xhckFyZWEnLFxuXHRcdCdSYWRhcicsXG5cdFx0J1NjYXR0ZXInXG5cdF0sXG5cdGZ1bmN0aW9uKGtsYXNzKSB7XG5cdFx0Y29yZV9jb250cm9sbGVyW2tsYXNzXSA9IGZ1bmN0aW9uKGN0eCwgY2ZnKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGNvcmVfY29udHJvbGxlcihjdHgsIGNvcmVfY29udHJvbGxlci5oZWxwZXJzLm1lcmdlKGNmZyB8fCB7fSwge1xuXHRcdFx0XHR0eXBlOiBrbGFzcy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGtsYXNzLnNsaWNlKDEpXG5cdFx0XHR9KSk7XG5cdFx0fTtcblx0fVxuKTtcblxucmV0dXJuIHNyYztcblxufSkpKTtcbiIsIjsgdmFyIF9fYnJvd3NlcmlmeV9zaGltX3JlcXVpcmVfXz1yZXF1aXJlOyhmdW5jdGlvbiBicm93c2VyaWZ5U2hpbShtb2R1bGUsIGV4cG9ydHMsIHJlcXVpcmUsIGRlZmluZSwgYnJvd3NlcmlmeV9zaGltX19kZWZpbmVfX21vZHVsZV9fZXhwb3J0X18pIHtcbi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My40LjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE5LTA1LTAxVDIxOjA0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjQuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0gKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAxOS0wNC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdChub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIpICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggdHlwZW9mIGVsZW0uY29udGVudERvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0Ly8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGVcblx0Ly8gV2UgdXNlIGdldENsaWVudFJlY3RzKCkgdG8gY2hlY2sgZm9yIGhpZGRlbi9kaXNjb25uZWN0ZWQuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveFxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBEYXRlLm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWw7XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHR4bWwgPSB1bmRlZmluZWQ7XG5cdH1cblxuXHRpZiAoICF4bWwgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIGksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcblxuOyBicm93c2VyaWZ5X3NoaW1fX2RlZmluZV9fbW9kdWxlX19leHBvcnRfXyh0eXBlb2YgalF1ZXJ5ICE9IFwidW5kZWZpbmVkXCIgPyBqUXVlcnkgOiB3aW5kb3cualF1ZXJ5KTtcblxufSkuY2FsbChnbG9iYWwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gZGVmaW5lRXhwb3J0KGV4KSB7IG1vZHVsZS5leHBvcnRzID0gZXg7IH0pO1xuIiwiLy8hIG1vbWVudC5qc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcyAoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgICAgICBtZXJpZGllbSAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSwgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG4gICAgdmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5ICA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSkgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbiAgICB2YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG4gICAgdmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxuICAgIHZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzdG80ICAgICAgPSAvXFxkXFxkXFxkXFxkPy87ICAgICAvLyAgICAgOTk5IC0gOTk5OVxuICAgIHZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbiAgICB2YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxuICAgIHZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbiAgICB2YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbiAgICB2YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgIHZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbiAgICB2YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuXG4gICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgIHZhciBtYXRjaFdvcmQgPSAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaTtcblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDA7XG4gICAgdmFyIE1PTlRIID0gMTtcbiAgICB2YXIgREFURSA9IDI7XG4gICAgdmFyIEhPVVIgPSAzO1xuICAgIHZhciBNSU5VVEUgPSA0O1xuICAgIHZhciBTRUNPTkQgPSA1O1xuICAgIHZhciBNSUxMSVNFQ09ORCA9IDY7XG4gICAgdmFyIFdFRUsgPSA3O1xuICAgIHZhciBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnRnVsbFllYXInICYmIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiYgbW9tLm1vbnRoKCkgPT09IDEgJiYgbW9tLmRhdGUoKSA9PT0gMjkpIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUsIG1vbS5tb250aCgpLCBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDEgPyAoaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogKDMxIC0gbW9kTW9udGggJSA3ICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuICAgIGFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcbiAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzICh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1sobSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ107XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gd2Vla2RheXNbbS5kYXkoKV0gOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIHZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2VcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2FsZSAnICsga2V5ICsgICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgdG1wTG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3c7XG4gICAgICAgIHZhciBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgICAgICAtMTtcblxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCBleHBlY3RlZFdlZWtkYXksIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuICAgIHZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxuICAgIHZhciB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vO1xuXG4gICAgdmFyIGlzb0RhdGVzID0gW1xuICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgIC8vIFlZWVlNTSBpcyBOT1QgYWxsb3dlZCBieSB0aGUgc3RhbmRhcmRcbiAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dXG4gICAgXTtcblxuICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICB2YXIgaXNvVGltZXMgPSBbXG4gICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISCcsIC9cXGRcXGQvXVxuICAgIF07XG5cbiAgICB2YXIgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKChcXC0/XFxkKykvaTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgIHZhciByZmMyODIyID0gL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLztcblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKHBhcnNlZElucHV0WzBdLCBwYXJzZWRJbnB1dFsxXSwgcGFyc2VkSW5wdXRbMl0pLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBvYnNPZmZzZXRzID0ge1xuICAgICAgICBVVDogMCxcbiAgICAgICAgR01UOiAwLFxuICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgIFBTVDogLTggKiA2MFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIHZhciBtID0gaG0gJSAxMDAsIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICAgICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW4sICdwYXJzZWRJbnB1dCcsIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwIChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIHZhciBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4ICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKG5ldyBEYXRlKCkpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuaXRIYXNEZWNpbWFsID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgICAgIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICAgICAgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlcik7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID9cbiAgICAgICAgICAwIDpcbiAgICAgICAgICBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/IGlucHV0LnZhbHVlT2YoKSA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkICgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oXFwtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspKFxcLlxcZCopPyk/JC87XG5cbiAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgdmFyIGlzb1JlZ2V4ID0gL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtcyA6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24gLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHcgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAtMSA/ICdsYXN0V2VlaycgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDIgPyAnbmV4dERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSAodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRzICYmIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSkgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQob3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4gKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChpbmNsdXNpdml0eVswXSA9PT0gJygnID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LFxuICAgICAgICAgICAgem9uZURlbHRhLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMzsgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OiBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWU7XG4gICAgICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JztcbiAgICAgICAgdmFyIHpvbmUgPSAnJztcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICB2YXIgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMDtcbiAgICB2YXIgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORDtcbiAgICB2YXIgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEU7XG4gICAgdmFyIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuIChkaXZpZGVuZCAlIGRpdmlzb3IgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzICsgMywgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfSE9VUiAtIG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUikgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4ICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbiAodG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKTtcblxuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheSgpLFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LCB0aGlzLmlzb1dlZWsoKSwgdGhpcy5pc29XZWVrZGF5KCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/XG4gICAgICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaW51dGUnLCAxNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCAgIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsICAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lICAgICAgICAgICAgID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ICAgICAgICAgICAgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbiAgICBwcm90by50byAgICAgICAgICAgICAgICA9IHRvO1xuICAgIHByb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ICAgICAgICAgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuICAgICAgICAgPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlICAgID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSAgICAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gICAgICAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mICAgICAgICAgICA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgICAgICAgICAgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgICAgICAgICAgICA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgICAgICAgICAgID0gaW5zcGVjdDtcbiAgICBwcm90by50b0pTT04gICAgICAgICAgICA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggICAgICAgICAgICAgID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mICAgICAgICAgICA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8ueWVhciAgICAgICA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggICAgICAgPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgICAgICAgICAgID0gcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrICAgICAgICA9IHByb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmRhdGUgICAgICAgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSAgICAgICAgPSBwcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ICAgICAgICAgICAgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKCdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLCBnZXRTZXRNb250aCk7XG4gICAgcHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG4gICAgcHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsIGdldFNldFpvbmUpO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZSgnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgICAgICAgID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCAgICAgICAgID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgICAgICA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbiAgICBwcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCAgPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggID0gICAgICAgIHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggICAgPSAgICAgICAgd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpO1xuICAgICAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4gKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLCBnZXRTZXRHbG9iYWxMb2NhbGUpO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJywgZ2V0TG9jYWxlKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMgKCkge1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgICAgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyAgICAgICAgID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzICAgICAgID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICAgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgICA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgICAgICAgID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMSAoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cztcbiAgICAgICAgdmFyIG1vbnRocztcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzogICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG4gICAgdmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG4gICAgdmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG4gICAgdmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG4gICAgdmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG4gICAgdmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG4gICAgdmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG4gICAgdmFyIGFzUXVhcnRlcnMgICAgID0gbWFrZUFzKCdRJyk7XG4gICAgdmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xuICAgIHZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG4gICAgdmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbiAgICB2YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbiAgICB2YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbSA6IDQ1LCAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgICAgIE0gOiAxMSAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxuICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgICAgICBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICAgJiYgWydzcycsIHNlY29uZHNdIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDw9IDEgICAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICAgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgICAgICB5ZWFycyAgIDw9IDEgICAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIHZhciBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKCh4ID4gMCkgLSAoeCA8IDApKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSBhYnMkMSh0aGlzLl9tb250aHMpO1xuICAgICAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgdmFyIFkgPSB5ZWFycztcbiAgICAgICAgdmFyIE0gPSBtb250aHM7XG4gICAgICAgIHZhciBEID0gZGF5cztcbiAgICAgICAgdmFyIGggPSBob3VycztcbiAgICAgICAgdmFyIG0gPSBtaW51dGVzO1xuICAgICAgICB2YXIgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsU2lnbiArICdQJyArXG4gICAgICAgICAgICAoWSA/IHltU2lnbiArIFkgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChEID8gZGF5c1NpZ24gKyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG0gPyBobXNTaWduICsgbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkICAgICAgICA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xuICAgIHByb3RvJDIuYWRkICAgICAgICAgICAgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ICAgICAgID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgICAgID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSAgICAgICAgICA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyAgICAgICAgICAgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgICAgICAgICAgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yNC4wJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbiAgICBob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG4gICAgaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuICAgIGhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbiAgICBob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSAgICAgICAgICA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgICAgICAgID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uLy4uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnknKVxyXG53aW5kb3cualF1ZXJ5ID0gJDtcclxud2luZG93LiQgPSAkO1xyXG52YXIgQ2hhcnQgPSByZXF1aXJlKCdjaGFydC5qcycpO1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcblxyXG4gIHdpbmRvdy5jaGFydENvbG9ycyA9IHtcclxuICAgIHJlZDogXCJyZ2IoMjU1LCA5OSwgMTMyKVwiLFxyXG4gICAgb3JhbmdlOiBcInJnYigyNTUsIDE1OSwgNjQpXCIsXHJcbiAgICB5ZWxsb3c6IFwicmdiKDI1NSwgMjA1LCA4NilcIixcclxuICAgIGdyZWVuOiBcInJnYig3NSwgMTkyLCAxOTIpXCIsXHJcbiAgICBibHVlOiBcInJnYig1NCwgMTYyLCAyMzUpXCIsXHJcbiAgICBwdXJwbGU6IFwicmdiKDE1MywgMTAyLCAyNTUpXCIsXHJcbiAgICBncmV5OiBcInJnYigyMDEsIDIwMywgMjA3KVwiXHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbG9yc1RvQXNzaWduID0gW1xyXG4gICAgd2luZG93LmNoYXJ0Q29sb3JzLmJsdWUsXHJcbiAgICB3aW5kb3cuY2hhcnRDb2xvcnMuZ3JlZW4sXHJcbiAgICB3aW5kb3cuY2hhcnRDb2xvcnMueWVsbG93LFxyXG4gICAgd2luZG93LmNoYXJ0Q29sb3JzLnJlZFxyXG4gIF1cclxuXHJcbiAgaWYgKHN1bW1hcnlDaGFydERhdGEpIHtcclxuXHJcbiAgICB2YXIgc3VtbWFyeUNoYXJ0RGF0YXNldHNXaXRoQ29sb3JzID0gc3VtbWFyeUNoYXJ0RGF0YS5kYXRhc2V0cy5tYXAoXHJcbiAgICAgIChkLCBpKSA9PiB7XHJcbiAgICAgICAgdmFyIGQyID0geyAuLi5kIH1cclxuICAgICAgICBkMi5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcnNUb0Fzc2lnbltpXVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGQyKTtcclxuICAgICAgICByZXR1cm4gZDJcclxuICAgICAgfSk7XHJcbiAgICBzdW1tYXJ5Q2hhcnREYXRhLmRhdGFzZXRzID0gc3VtbWFyeUNoYXJ0RGF0YXNldHNXaXRoQ29sb3JzO1xyXG4gICAgY29uc29sZS5sb2coc3VtbWFyeUNoYXJ0RGF0YSlcclxuXHJcbiAgICB2YXIgbGVhZGVyYm9hcmQgPSBuZXcgQ2hhcnQoXHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiRmlzaEZyeUxlYWRlcmJvYXJkXCIpLCB7XHJcbiAgICAgIHR5cGU6IFwiYmFyXCIsXHJcbiAgICAgIGRhdGE6IHN1bW1hcnlDaGFydERhdGEsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgZGlzcGxheTogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b29sdGlwczoge1xyXG4gICAgICAgICAgbW9kZTogJ2luZGV4JyxcclxuICAgICAgICAgIGludGVyc2VjdDogZmFsc2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbiAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICB4QXhlczogW3tcclxuICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgeUF4ZXM6IFt7XHJcbiAgICAgICAgICAgIHN0YWNrZWQ6IHRydWVcclxuICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIk5vIHN0YXRzXCIpO1xyXG4gICAgJCgnI0xlYWRlckJvYXJkQWxlcnQnKS5zaG93KCk7XHJcbiAgfVxyXG5cclxufSkiXX0="}