{"version":3,"sources":["node_modules/.pnpm/registry.npmjs.org/browser-pack/6.1.0/node_modules/browser-pack/_prelude.js","node_modules/.pnpm/registry.npmjs.org/chart.js/2.9.3/node_modules/chart.js/dist/Chart.js","node_modules/.pnpm/registry.npmjs.org/moment/2.24.0/node_modules/moment/moment.js","src/js/leaderboard.js"],"names":[],"mappings":"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","file":"bundle.leaderboard.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * Chart.js v2.9.3\n * https://www.chartjs.org\n * (c) 2019 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(function() { try { return require('moment'); } catch(e) { } }()) :\ntypeof define === 'function' && define.amd ? define(['require'], function(require) { return factory(function() { try { return require('moment'); } catch(e) { } }()); }) :\n(global = global || self, global.Chart = factory(global.moment));\n}(this, (function (moment) { 'use strict';\n\nmoment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n['default'] || n;\n}\n\nvar colorName = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\nvar conversions = createCommonjsModule(function (module) {\n/* MIT license */\n\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in colorName) {\n\tif (colorName.hasOwnProperty(key)) {\n\t\treverseKeywords[colorName[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in colorName) {\n\t\tif (colorName.hasOwnProperty(keyword)) {\n\t\t\tvar value = colorName[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn colorName[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n});\nvar conversions_1 = conversions.rgb;\nvar conversions_2 = conversions.hsl;\nvar conversions_3 = conversions.hsv;\nvar conversions_4 = conversions.hwb;\nvar conversions_5 = conversions.cmyk;\nvar conversions_6 = conversions.xyz;\nvar conversions_7 = conversions.lab;\nvar conversions_8 = conversions.lch;\nvar conversions_9 = conversions.hex;\nvar conversions_10 = conversions.keyword;\nvar conversions_11 = conversions.ansi16;\nvar conversions_12 = conversions.ansi256;\nvar conversions_13 = conversions.hcg;\nvar conversions_14 = conversions.apple;\nvar conversions_15 = conversions.gray;\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nvar route = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nvar colorConvert = convert;\n\nvar colorName$1 = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\n\n/* MIT license */\n\n\nvar colorString = {\n   getRgba: getRgba,\n   getHsla: getHsla,\n   getRgb: getRgb,\n   getHsl: getHsl,\n   getHwb: getHwb,\n   getAlpha: getAlpha,\n\n   hexString: hexString,\n   rgbString: rgbString,\n   rgbaString: rgbaString,\n   percentString: percentString,\n   percentaString: percentaString,\n   hslString: hslString,\n   hslaString: hslaString,\n   hwbString: hwbString,\n   keyword: keyword\n};\n\nfunction getRgba(string) {\n   if (!string) {\n      return;\n   }\n   var abbr =  /^#([a-fA-F0-9]{3,4})$/i,\n       hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,\n       rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/i,\n       keyword = /(\\w+)/;\n\n   var rgb = [0, 0, 0],\n       a = 1,\n       match = string.match(abbr),\n       hexAlpha = \"\";\n   if (match) {\n      match = match[1];\n      hexAlpha = match[3];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i] + match[i], 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(hex)) {\n      hexAlpha = match[2];\n      match = match[1];\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);\n      }\n      if (hexAlpha) {\n         a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n      }\n   }\n   else if (match = string.match(rgba)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = parseInt(match[i + 1]);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(per)) {\n      for (var i = 0; i < rgb.length; i++) {\n         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n      }\n      a = parseFloat(match[4]);\n   }\n   else if (match = string.match(keyword)) {\n      if (match[1] == \"transparent\") {\n         return [0, 0, 0, 0];\n      }\n      rgb = colorName$1[match[1]];\n      if (!rgb) {\n         return;\n      }\n   }\n\n   for (var i = 0; i < rgb.length; i++) {\n      rgb[i] = scale(rgb[i], 0, 255);\n   }\n   if (!a && a != 0) {\n      a = 1;\n   }\n   else {\n      a = scale(a, 0, 1);\n   }\n   rgb[3] = a;\n   return rgb;\n}\n\nfunction getHsla(string) {\n   if (!string) {\n      return;\n   }\n   var hsl = /^hsla?\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hsl);\n   if (match) {\n      var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          s = scale(parseFloat(match[2]), 0, 100),\n          l = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, s, l, a];\n   }\n}\n\nfunction getHwb(string) {\n   if (!string) {\n      return;\n   }\n   var hwb = /^hwb\\(\\s*([+-]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)/;\n   var match = string.match(hwb);\n   if (match) {\n    var alpha = parseFloat(match[4]);\n      var h = scale(parseInt(match[1]), 0, 360),\n          w = scale(parseFloat(match[2]), 0, 100),\n          b = scale(parseFloat(match[3]), 0, 100),\n          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);\n      return [h, w, b, a];\n   }\n}\n\nfunction getRgb(string) {\n   var rgba = getRgba(string);\n   return rgba && rgba.slice(0, 3);\n}\n\nfunction getHsl(string) {\n  var hsla = getHsla(string);\n  return hsla && hsla.slice(0, 3);\n}\n\nfunction getAlpha(string) {\n   var vals = getRgba(string);\n   if (vals) {\n      return vals[3];\n   }\n   else if (vals = getHsla(string)) {\n      return vals[3];\n   }\n   else if (vals = getHwb(string)) {\n      return vals[3];\n   }\n}\n\n// generators\nfunction hexString(rgba, a) {\n   var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];\n   return \"#\" + hexDouble(rgba[0]) \n              + hexDouble(rgba[1])\n              + hexDouble(rgba[2])\n              + (\n                 (a >= 0 && a < 1)\n                 ? hexDouble(Math.round(a * 255))\n                 : \"\"\n              );\n}\n\nfunction rgbString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return rgbaString(rgba, alpha);\n   }\n   return \"rgb(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2] + \")\";\n}\n\nfunction rgbaString(rgba, alpha) {\n   if (alpha === undefined) {\n      alpha = (rgba[3] !== undefined ? rgba[3] : 1);\n   }\n   return \"rgba(\" + rgba[0] + \", \" + rgba[1] + \", \" + rgba[2]\n           + \", \" + alpha + \")\";\n}\n\nfunction percentString(rgba, alpha) {\n   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {\n      return percentaString(rgba, alpha);\n   }\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n\n   return \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\";\n}\n\nfunction percentaString(rgba, alpha) {\n   var r = Math.round(rgba[0]/255 * 100),\n       g = Math.round(rgba[1]/255 * 100),\n       b = Math.round(rgba[2]/255 * 100);\n   return \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + (alpha || rgba[3] || 1) + \")\";\n}\n\nfunction hslString(hsla, alpha) {\n   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {\n      return hslaString(hsla, alpha);\n   }\n   return \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\";\n}\n\nfunction hslaString(hsla, alpha) {\n   if (alpha === undefined) {\n      alpha = (hsla[3] !== undefined ? hsla[3] : 1);\n   }\n   return \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \"\n           + alpha + \")\";\n}\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\nfunction hwbString(hwb, alpha) {\n   if (alpha === undefined) {\n      alpha = (hwb[3] !== undefined ? hwb[3] : 1);\n   }\n   return \"hwb(\" + hwb[0] + \", \" + hwb[1] + \"%, \" + hwb[2] + \"%\"\n           + (alpha !== undefined && alpha !== 1 ? \", \" + alpha : \"\") + \")\";\n}\n\nfunction keyword(rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n}\n\n// helpers\nfunction scale(num, min, max) {\n   return Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n  var str = num.toString(16).toUpperCase();\n  return (str.length < 2) ? \"0\" + str : str;\n}\n\n\n//create a list of reverse color names\nvar reverseNames = {};\nfor (var name in colorName$1) {\n   reverseNames[colorName$1[name]] = name;\n}\n\n/* MIT license */\n\n\n\nvar Color = function (obj) {\n\tif (obj instanceof Color) {\n\t\treturn obj;\n\t}\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj);\n\t}\n\n\tthis.valid = false;\n\tthis.values = {\n\t\trgb: [0, 0, 0],\n\t\thsl: [0, 0, 0],\n\t\thsv: [0, 0, 0],\n\t\thwb: [0, 0, 0],\n\t\tcmyk: [0, 0, 0, 0],\n\t\talpha: 1\n\t};\n\n\t// parse Color() argument\n\tvar vals;\n\tif (typeof obj === 'string') {\n\t\tvals = colorString.getRgba(obj);\n\t\tif (vals) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals = colorString.getHsla(obj)) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals = colorString.getHwb(obj)) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t}\n\t} else if (typeof obj === 'object') {\n\t\tvals = obj;\n\t\tif (vals.r !== undefined || vals.red !== undefined) {\n\t\t\tthis.setValues('rgb', vals);\n\t\t} else if (vals.l !== undefined || vals.lightness !== undefined) {\n\t\t\tthis.setValues('hsl', vals);\n\t\t} else if (vals.v !== undefined || vals.value !== undefined) {\n\t\t\tthis.setValues('hsv', vals);\n\t\t} else if (vals.w !== undefined || vals.whiteness !== undefined) {\n\t\t\tthis.setValues('hwb', vals);\n\t\t} else if (vals.c !== undefined || vals.cyan !== undefined) {\n\t\t\tthis.setValues('cmyk', vals);\n\t\t}\n\t}\n};\n\nColor.prototype = {\n\tisValid: function () {\n\t\treturn this.valid;\n\t},\n\trgb: function () {\n\t\treturn this.setSpace('rgb', arguments);\n\t},\n\thsl: function () {\n\t\treturn this.setSpace('hsl', arguments);\n\t},\n\thsv: function () {\n\t\treturn this.setSpace('hsv', arguments);\n\t},\n\thwb: function () {\n\t\treturn this.setSpace('hwb', arguments);\n\t},\n\tcmyk: function () {\n\t\treturn this.setSpace('cmyk', arguments);\n\t},\n\n\trgbArray: function () {\n\t\treturn this.values.rgb;\n\t},\n\thslArray: function () {\n\t\treturn this.values.hsl;\n\t},\n\thsvArray: function () {\n\t\treturn this.values.hsv;\n\t},\n\thwbArray: function () {\n\t\tvar values = this.values;\n\t\tif (values.alpha !== 1) {\n\t\t\treturn values.hwb.concat([values.alpha]);\n\t\t}\n\t\treturn values.hwb;\n\t},\n\tcmykArray: function () {\n\t\treturn this.values.cmyk;\n\t},\n\trgbaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.rgb.concat([values.alpha]);\n\t},\n\thslaArray: function () {\n\t\tvar values = this.values;\n\t\treturn values.hsl.concat([values.alpha]);\n\t},\n\talpha: function (val) {\n\t\tif (val === undefined) {\n\t\t\treturn this.values.alpha;\n\t\t}\n\t\tthis.setValues('alpha', val);\n\t\treturn this;\n\t},\n\n\tred: function (val) {\n\t\treturn this.setChannel('rgb', 0, val);\n\t},\n\tgreen: function (val) {\n\t\treturn this.setChannel('rgb', 1, val);\n\t},\n\tblue: function (val) {\n\t\treturn this.setChannel('rgb', 2, val);\n\t},\n\thue: function (val) {\n\t\tif (val) {\n\t\t\tval %= 360;\n\t\t\tval = val < 0 ? 360 + val : val;\n\t\t}\n\t\treturn this.setChannel('hsl', 0, val);\n\t},\n\tsaturation: function (val) {\n\t\treturn this.setChannel('hsl', 1, val);\n\t},\n\tlightness: function (val) {\n\t\treturn this.setChannel('hsl', 2, val);\n\t},\n\tsaturationv: function (val) {\n\t\treturn this.setChannel('hsv', 1, val);\n\t},\n\twhiteness: function (val) {\n\t\treturn this.setChannel('hwb', 1, val);\n\t},\n\tblackness: function (val) {\n\t\treturn this.setChannel('hwb', 2, val);\n\t},\n\tvalue: function (val) {\n\t\treturn this.setChannel('hsv', 2, val);\n\t},\n\tcyan: function (val) {\n\t\treturn this.setChannel('cmyk', 0, val);\n\t},\n\tmagenta: function (val) {\n\t\treturn this.setChannel('cmyk', 1, val);\n\t},\n\tyellow: function (val) {\n\t\treturn this.setChannel('cmyk', 2, val);\n\t},\n\tblack: function (val) {\n\t\treturn this.setChannel('cmyk', 3, val);\n\t},\n\n\thexString: function () {\n\t\treturn colorString.hexString(this.values.rgb);\n\t},\n\trgbString: function () {\n\t\treturn colorString.rgbString(this.values.rgb, this.values.alpha);\n\t},\n\trgbaString: function () {\n\t\treturn colorString.rgbaString(this.values.rgb, this.values.alpha);\n\t},\n\tpercentString: function () {\n\t\treturn colorString.percentString(this.values.rgb, this.values.alpha);\n\t},\n\thslString: function () {\n\t\treturn colorString.hslString(this.values.hsl, this.values.alpha);\n\t},\n\thslaString: function () {\n\t\treturn colorString.hslaString(this.values.hsl, this.values.alpha);\n\t},\n\thwbString: function () {\n\t\treturn colorString.hwbString(this.values.hwb, this.values.alpha);\n\t},\n\tkeyword: function () {\n\t\treturn colorString.keyword(this.values.rgb, this.values.alpha);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.values.rgb;\n\t\treturn (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.values.rgb;\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tdark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.values.rgb;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tlight: function () {\n\t\treturn !this.dark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = [];\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb[i] = 255 - this.values.rgb[i];\n\t\t}\n\t\tthis.setValues('rgb', rgb);\n\t\treturn this;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] += hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[2] -= hsl[2] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] += hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.values.hsl;\n\t\thsl[1] -= hsl[1] * ratio;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[1] += hwb[1] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.values.hwb;\n\t\thwb[2] += hwb[2] * ratio;\n\t\tthis.setValues('hwb', hwb);\n\t\treturn this;\n\t},\n\n\tgreyscale: function () {\n\t\tvar rgb = this.values.rgb;\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\tthis.setValues('rgb', [val, val, val]);\n\t\treturn this;\n\t},\n\n\tclearer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha - (alpha * ratio));\n\t\treturn this;\n\t},\n\n\topaquer: function (ratio) {\n\t\tvar alpha = this.values.alpha;\n\t\tthis.setValues('alpha', alpha + (alpha * ratio));\n\t\treturn this;\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.values.hsl;\n\t\tvar hue = (hsl[0] + degrees) % 360;\n\t\thsl[0] = hue < 0 ? 360 + hue : hue;\n\t\tthis.setValues('hsl', hsl);\n\t\treturn this;\n\t},\n\n\t/**\n\t * Ported from sass implementation in C\n\t * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t */\n\tmix: function (mixinColor, weight) {\n\t\tvar color1 = this;\n\t\tvar color2 = mixinColor;\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn this\n\t\t\t.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue()\n\t\t\t)\n\t\t\t.alpha(color1.alpha() * p + color2.alpha() * (1 - p));\n\t},\n\n\ttoJSON: function () {\n\t\treturn this.rgb();\n\t},\n\n\tclone: function () {\n\t\t// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,\n\t\t// making the final build way to big to embed in Chart.js. So let's do it manually,\n\t\t// assuming that values to clone are 1 dimension arrays containing only numbers,\n\t\t// except 'alpha' which is a number.\n\t\tvar result = new Color();\n\t\tvar source = this.values;\n\t\tvar target = result.values;\n\t\tvar value, type;\n\n\t\tfor (var prop in source) {\n\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\tvalue = source[prop];\n\t\t\t\ttype = ({}).toString.call(value);\n\t\t\t\tif (type === '[object Array]') {\n\t\t\t\t\ttarget[prop] = value.slice(0);\n\t\t\t\t} else if (type === '[object Number]') {\n\t\t\t\t\ttarget[prop] = value;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('unexpected color value:', value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\nColor.prototype.spaces = {\n\trgb: ['red', 'green', 'blue'],\n\thsl: ['hue', 'saturation', 'lightness'],\n\thsv: ['hue', 'saturation', 'value'],\n\thwb: ['hue', 'whiteness', 'blackness'],\n\tcmyk: ['cyan', 'magenta', 'yellow', 'black']\n};\n\nColor.prototype.maxes = {\n\trgb: [255, 255, 255],\n\thsl: [360, 100, 100],\n\thsv: [360, 100, 100],\n\thwb: [360, 100, 100],\n\tcmyk: [100, 100, 100, 100]\n};\n\nColor.prototype.getValues = function (space) {\n\tvar values = this.values;\n\tvar vals = {};\n\n\tfor (var i = 0; i < space.length; i++) {\n\t\tvals[space.charAt(i)] = values[space][i];\n\t}\n\n\tif (values.alpha !== 1) {\n\t\tvals.a = values.alpha;\n\t}\n\n\t// {r: 255, g: 255, b: 255, a: 0.4}\n\treturn vals;\n};\n\nColor.prototype.setValues = function (space, vals) {\n\tvar values = this.values;\n\tvar spaces = this.spaces;\n\tvar maxes = this.maxes;\n\tvar alpha = 1;\n\tvar i;\n\n\tthis.valid = true;\n\n\tif (space === 'alpha') {\n\t\talpha = vals;\n\t} else if (vals.length) {\n\t\t// [10, 10, 10]\n\t\tvalues[space] = vals.slice(0, space.length);\n\t\talpha = vals[space.length];\n\t} else if (vals[space.charAt(0)] !== undefined) {\n\t\t// {r: 10, g: 10, b: 10}\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[space.charAt(i)];\n\t\t}\n\n\t\talpha = vals.a;\n\t} else if (vals[spaces[space][0]] !== undefined) {\n\t\t// {red: 10, green: 10, blue: 10}\n\t\tvar chans = spaces[space];\n\n\t\tfor (i = 0; i < space.length; i++) {\n\t\t\tvalues[space][i] = vals[chans[i]];\n\t\t}\n\n\t\talpha = vals.alpha;\n\t}\n\n\tvalues.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));\n\n\tif (space === 'alpha') {\n\t\treturn false;\n\t}\n\n\tvar capped;\n\n\t// cap values of the space prior converting all values\n\tfor (i = 0; i < space.length; i++) {\n\t\tcapped = Math.max(0, Math.min(maxes[space][i], values[space][i]));\n\t\tvalues[space][i] = Math.round(capped);\n\t}\n\n\t// convert to all the other color spaces\n\tfor (var sname in spaces) {\n\t\tif (sname !== space) {\n\t\t\tvalues[sname] = colorConvert[space][sname](values[space]);\n\t\t}\n\t}\n\n\treturn true;\n};\n\nColor.prototype.setSpace = function (space, args) {\n\tvar vals = args[0];\n\n\tif (vals === undefined) {\n\t\t// color.rgb()\n\t\treturn this.getValues(space);\n\t}\n\n\t// color.rgb(10, 10, 10)\n\tif (typeof vals === 'number') {\n\t\tvals = Array.prototype.slice.call(args);\n\t}\n\n\tthis.setValues(space, vals);\n\treturn this;\n};\n\nColor.prototype.setChannel = function (space, index, val) {\n\tvar svalues = this.values[space];\n\tif (val === undefined) {\n\t\t// color.red()\n\t\treturn svalues[index];\n\t} else if (val === svalues[index]) {\n\t\t// color.red(color.red())\n\t\treturn this;\n\t}\n\n\t// color.red(100)\n\tsvalues[index] = val;\n\tthis.setValues(space, svalues);\n\n\treturn this;\n};\n\nif (typeof window !== 'undefined') {\n\twindow.Color = Color;\n}\n\nvar chartjsColor = Color;\n\n/**\n * @namespace Chart.helpers\n */\nvar helpers = {\n\t/**\n\t * An empty function that can be used, for example, for optional callback.\n\t */\n\tnoop: function() {},\n\n\t/**\n\t * Returns a unique id, sequentially generated from a global variable.\n\t * @returns {number}\n\t * @function\n\t */\n\tuid: (function() {\n\t\tvar id = 0;\n\t\treturn function() {\n\t\t\treturn id++;\n\t\t};\n\t}()),\n\n\t/**\n\t * Returns true if `value` is neither null nor undefined, else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisNullOrUndef: function(value) {\n\t\treturn value === null || typeof value === 'undefined';\n\t},\n\n\t/**\n\t * Returns true if `value` is an array (including typed arrays), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @function\n\t */\n\tisArray: function(value) {\n\t\tif (Array.isArray && Array.isArray(value)) {\n\t\t\treturn true;\n\t\t}\n\t\tvar type = Object.prototype.toString.call(value);\n\t\tif (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Returns true if `value` is an object (excluding null), else returns false.\n\t * @param {*} value - The value to test.\n\t * @returns {boolean}\n\t * @since 2.7.0\n\t */\n\tisObject: function(value) {\n\t\treturn value !== null && Object.prototype.toString.call(value) === '[object Object]';\n\t},\n\n\t/**\n\t * Returns true if `value` is a finite number, else returns false\n\t * @param {*} value  - The value to test.\n\t * @returns {boolean}\n\t */\n\tisFinite: function(value) {\n\t\treturn (typeof value === 'number' || value instanceof Number) && isFinite(value);\n\t},\n\n\t/**\n\t * Returns `value` if defined, else returns `defaultValue`.\n\t * @param {*} value - The value to return if defined.\n\t * @param {*} defaultValue - The value to return if `value` is undefined.\n\t * @returns {*}\n\t */\n\tvalueOrDefault: function(value, defaultValue) {\n\t\treturn typeof value === 'undefined' ? defaultValue : value;\n\t},\n\n\t/**\n\t * Returns value at the given `index` in array if defined, else returns `defaultValue`.\n\t * @param {Array} value - The array to lookup for value at `index`.\n\t * @param {number} index - The index in `value` to lookup for value.\n\t * @param {*} defaultValue - The value to return if `value[index]` is undefined.\n\t * @returns {*}\n\t */\n\tvalueAtIndexOrDefault: function(value, index, defaultValue) {\n\t\treturn helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);\n\t},\n\n\t/**\n\t * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n\t * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n\t * @param {function} fn - The function to call.\n\t * @param {Array|undefined|null} args - The arguments with which `fn` should be called.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @returns {*}\n\t */\n\tcallback: function(fn, args, thisArg) {\n\t\tif (fn && typeof fn.call === 'function') {\n\t\t\treturn fn.apply(thisArg, args);\n\t\t}\n\t},\n\n\t/**\n\t * Note(SB) for performance sake, this method should only be used when loopable type\n\t * is unknown or in none intensive code (not called often and small loopable). Else\n\t * it's preferable to use a regular for() loop and save extra function calls.\n\t * @param {object|Array} loopable - The object or array to be iterated.\n\t * @param {function} fn - The function to call for each item.\n\t * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.\n\t * @param {boolean} [reverse] - If true, iterates backward on the loopable.\n\t */\n\teach: function(loopable, fn, thisArg, reverse) {\n\t\tvar i, len, keys;\n\t\tif (helpers.isArray(loopable)) {\n\t\t\tlen = loopable.length;\n\t\t\tif (reverse) {\n\t\t\t\tfor (i = len - 1; i >= 0; i--) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tfn.call(thisArg, loopable[i], i);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (helpers.isObject(loopable)) {\n\t\t\tkeys = Object.keys(loopable);\n\t\t\tlen = keys.length;\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tfn.call(thisArg, loopable[keys[i]], keys[i]);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n\t * @see https://stackoverflow.com/a/14853974\n\t * @param {Array} a0 - The array to compare\n\t * @param {Array} a1 - The array to compare\n\t * @returns {boolean}\n\t */\n\tarrayEquals: function(a0, a1) {\n\t\tvar i, ilen, v0, v1;\n\n\t\tif (!a0 || !a1 || a0.length !== a1.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, ilen = a0.length; i < ilen; ++i) {\n\t\t\tv0 = a0[i];\n\t\t\tv1 = a1[i];\n\n\t\t\tif (v0 instanceof Array && v1 instanceof Array) {\n\t\t\t\tif (!helpers.arrayEquals(v0, v1)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (v0 !== v1) {\n\t\t\t\t// NOTE: two different object instances will never be equal: {x:20} != {x:20}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns a deep copy of `source` without keeping references on objects and arrays.\n\t * @param {*} source - The value to clone.\n\t * @returns {*}\n\t */\n\tclone: function(source) {\n\t\tif (helpers.isArray(source)) {\n\t\t\treturn source.map(helpers.clone);\n\t\t}\n\n\t\tif (helpers.isObject(source)) {\n\t\t\tvar target = {};\n\t\t\tvar keys = Object.keys(source);\n\t\t\tvar klen = keys.length;\n\t\t\tvar k = 0;\n\n\t\t\tfor (; k < klen; ++k) {\n\t\t\t\ttarget[keys[k]] = helpers.clone(source[keys[k]]);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\treturn source;\n\t},\n\n\t/**\n\t * The default merger when Chart.helpers.merge is called without merger option.\n\t * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n\t * @private\n\t */\n\t_merger: function(key, target, source, options) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.merge(tval, sval, options);\n\t\t} else {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Merges source[key] in target[key] only if target[key] is undefined.\n\t * @private\n\t */\n\t_mergerIf: function(key, target, source) {\n\t\tvar tval = target[key];\n\t\tvar sval = source[key];\n\n\t\tif (helpers.isObject(tval) && helpers.isObject(sval)) {\n\t\t\thelpers.mergeIf(tval, sval);\n\t\t} else if (!target.hasOwnProperty(key)) {\n\t\t\ttarget[key] = helpers.clone(sval);\n\t\t}\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` with the given `options`.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @param {object} [options] - Merging options:\n\t * @param {function} [options.merger] - The merge method (key, target, source, options)\n\t * @returns {object} The `target` object.\n\t */\n\tmerge: function(target, source, options) {\n\t\tvar sources = helpers.isArray(source) ? source : [source];\n\t\tvar ilen = sources.length;\n\t\tvar merge, i, keys, klen, k;\n\n\t\tif (!helpers.isObject(target)) {\n\t\t\treturn target;\n\t\t}\n\n\t\toptions = options || {};\n\t\tmerge = options.merger || helpers._merger;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!helpers.isObject(source)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tkeys = Object.keys(source);\n\t\t\tfor (k = 0, klen = keys.length; k < klen; ++k) {\n\t\t\t\tmerge(keys[k], target, source, options);\n\t\t\t}\n\t\t}\n\n\t\treturn target;\n\t},\n\n\t/**\n\t * Recursively deep copies `source` properties into `target` *only* if not defined in target.\n\t * IMPORTANT: `target` is not cloned and will be updated with `source` properties.\n\t * @param {object} target - The target object in which all sources are merged into.\n\t * @param {object|object[]} source - Object(s) to merge into `target`.\n\t * @returns {object} The `target` object.\n\t */\n\tmergeIf: function(target, source) {\n\t\treturn helpers.merge(target, source, {merger: helpers._mergerIf});\n\t},\n\n\t/**\n\t * Applies the contents of two or more objects together into the first object.\n\t * @param {object} target - The target object in which all objects are merged into.\n\t * @param {object} arg1 - Object containing additional properties to merge in target.\n\t * @param {object} argN - Additional objects containing properties to merge in target.\n\t * @returns {object} The `target` object.\n\t */\n\textend: Object.assign || function(target) {\n\t\treturn helpers.merge(target, [].slice.call(arguments, 1), {\n\t\t\tmerger: function(key, dst, src) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Basic javascript inheritance based on the model created in Backbone.js\n\t */\n\tinherits: function(extensions) {\n\t\tvar me = this;\n\t\tvar ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {\n\t\t\treturn me.apply(this, arguments);\n\t\t};\n\n\t\tvar Surrogate = function() {\n\t\t\tthis.constructor = ChartElement;\n\t\t};\n\n\t\tSurrogate.prototype = me.prototype;\n\t\tChartElement.prototype = new Surrogate();\n\t\tChartElement.extend = helpers.inherits;\n\n\t\tif (extensions) {\n\t\t\thelpers.extend(ChartElement.prototype, extensions);\n\t\t}\n\n\t\tChartElement.__super__ = me.prototype;\n\t\treturn ChartElement;\n\t},\n\n\t_deprecated: function(scope, value, previous, current) {\n\t\tif (value !== undefined) {\n\t\t\tconsole.warn(scope + ': \"' + previous +\n\t\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n\t\t}\n\t}\n};\n\nvar helpers_core = helpers;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.callback instead.\n * @function Chart.helpers.callCallback\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\nhelpers.callCallback = helpers.callback;\n\n/**\n * Provided for backward compatibility, use Array.prototype.indexOf instead.\n * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+\n * @function Chart.helpers.indexOf\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.indexOf = function(array, item, fromIndex) {\n\treturn Array.prototype.indexOf.call(array, item, fromIndex);\n};\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.\n * @function Chart.helpers.getValueOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueOrDefault = helpers.valueOrDefault;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.\n * @function Chart.helpers.getValueAtIndexOrDefault\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;\n\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easingEffects\n * @see http://www.robertpenner.com/easing/\n */\nvar effects = {\n\tlinear: function(t) {\n\t\treturn t;\n\t},\n\n\teaseInQuad: function(t) {\n\t\treturn t * t;\n\t},\n\n\teaseOutQuad: function(t) {\n\t\treturn -t * (t - 2);\n\t},\n\n\teaseInOutQuad: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t;\n\t\t}\n\t\treturn -0.5 * ((--t) * (t - 2) - 1);\n\t},\n\n\teaseInCubic: function(t) {\n\t\treturn t * t * t;\n\t},\n\n\teaseOutCubic: function(t) {\n\t\treturn (t = t - 1) * t * t + 1;\n\t},\n\n\teaseInOutCubic: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t + 2);\n\t},\n\n\teaseInQuart: function(t) {\n\t\treturn t * t * t * t;\n\t},\n\n\teaseOutQuart: function(t) {\n\t\treturn -((t = t - 1) * t * t * t - 1);\n\t},\n\n\teaseInOutQuart: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t;\n\t\t}\n\t\treturn -0.5 * ((t -= 2) * t * t * t - 2);\n\t},\n\n\teaseInQuint: function(t) {\n\t\treturn t * t * t * t * t;\n\t},\n\n\teaseOutQuint: function(t) {\n\t\treturn (t = t - 1) * t * t * t * t + 1;\n\t},\n\n\teaseInOutQuint: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * t * t * t * t * t;\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * t * t * t + 2);\n\t},\n\n\teaseInSine: function(t) {\n\t\treturn -Math.cos(t * (Math.PI / 2)) + 1;\n\t},\n\n\teaseOutSine: function(t) {\n\t\treturn Math.sin(t * (Math.PI / 2));\n\t},\n\n\teaseInOutSine: function(t) {\n\t\treturn -0.5 * (Math.cos(Math.PI * t) - 1);\n\t},\n\n\teaseInExpo: function(t) {\n\t\treturn (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));\n\t},\n\n\teaseOutExpo: function(t) {\n\t\treturn (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;\n\t},\n\n\teaseInOutExpo: function(t) {\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * Math.pow(2, 10 * (t - 1));\n\t\t}\n\t\treturn 0.5 * (-Math.pow(2, -10 * --t) + 2);\n\t},\n\n\teaseInCirc: function(t) {\n\t\tif (t >= 1) {\n\t\t\treturn t;\n\t\t}\n\t\treturn -(Math.sqrt(1 - t * t) - 1);\n\t},\n\n\teaseOutCirc: function(t) {\n\t\treturn Math.sqrt(1 - (t = t - 1) * t);\n\t},\n\n\teaseInOutCirc: function(t) {\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn -0.5 * (Math.sqrt(1 - t * t) - 1);\n\t\t}\n\t\treturn 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n\t},\n\n\teaseInElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t},\n\n\teaseOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (t === 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.3;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\treturn a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;\n\t},\n\n\teaseInOutElastic: function(t) {\n\t\tvar s = 1.70158;\n\t\tvar p = 0;\n\t\tvar a = 1;\n\t\tif (t === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tif ((t /= 0.5) === 2) {\n\t\t\treturn 1;\n\t\t}\n\t\tif (!p) {\n\t\t\tp = 0.45;\n\t\t}\n\t\tif (a < 1) {\n\t\t\ta = 1;\n\t\t\ts = p / 4;\n\t\t} else {\n\t\t\ts = p / (2 * Math.PI) * Math.asin(1 / a);\n\t\t}\n\t\tif (t < 1) {\n\t\t\treturn -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));\n\t\t}\n\t\treturn a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\t},\n\teaseInBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn t * t * ((s + 1) * t - s);\n\t},\n\n\teaseOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\treturn (t = t - 1) * t * ((s + 1) * t + s) + 1;\n\t},\n\n\teaseInOutBack: function(t) {\n\t\tvar s = 1.70158;\n\t\tif ((t /= 0.5) < 1) {\n\t\t\treturn 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n\t\t}\n\t\treturn 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n\t},\n\n\teaseInBounce: function(t) {\n\t\treturn 1 - effects.easeOutBounce(1 - t);\n\t},\n\n\teaseOutBounce: function(t) {\n\t\tif (t < (1 / 2.75)) {\n\t\t\treturn 7.5625 * t * t;\n\t\t}\n\t\tif (t < (2 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;\n\t\t}\n\t\tif (t < (2.5 / 2.75)) {\n\t\t\treturn 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;\n\t\t}\n\t\treturn 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;\n\t},\n\n\teaseInOutBounce: function(t) {\n\t\tif (t < 0.5) {\n\t\t\treturn effects.easeInBounce(t * 2) * 0.5;\n\t\t}\n\t\treturn effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n\t}\n};\n\nvar helpers_easing = {\n\teffects: effects\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.easing.effects instead.\n * @function Chart.helpers.easingEffects\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.easingEffects = effects;\n\nvar PI = Math.PI;\nvar RAD_PER_DEG = PI / 180;\nvar DOUBLE_PI = PI * 2;\nvar HALF_PI = PI / 2;\nvar QUARTER_PI = PI / 4;\nvar TWO_THIRDS_PI = PI * 2 / 3;\n\n/**\n * @namespace Chart.helpers.canvas\n */\nvar exports$1 = {\n\t/**\n\t * Clears the entire canvas associated to the given `chart`.\n\t * @param {Chart} chart - The chart for which to clear the canvas.\n\t */\n\tclear: function(chart) {\n\t\tchart.ctx.clearRect(0, 0, chart.width, chart.height);\n\t},\n\n\t/**\n\t * Creates a \"path\" for a rectangle with rounded corners at position (x, y) with a\n\t * given size (width, height) and the same `radius` for all corners.\n\t * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.\n\t * @param {number} x - The x axis of the coordinate for the rectangle starting point.\n\t * @param {number} y - The y axis of the coordinate for the rectangle starting point.\n\t * @param {number} width - The rectangle's width.\n\t * @param {number} height - The rectangle's height.\n\t * @param {number} radius - The rounded amount (in pixels) for the four corners.\n\t * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?\n\t */\n\troundedRect: function(ctx, x, y, width, height, radius) {\n\t\tif (radius) {\n\t\t\tvar r = Math.min(radius, height / 2, width / 2);\n\t\t\tvar left = x + r;\n\t\t\tvar top = y + r;\n\t\t\tvar right = x + width - r;\n\t\t\tvar bottom = y + height - r;\n\n\t\t\tctx.moveTo(x, top);\n\t\t\tif (left < right && top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, -HALF_PI);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, 0);\n\t\t\t\tctx.arc(right, bottom, r, 0, HALF_PI);\n\t\t\t\tctx.arc(left, bottom, r, HALF_PI, PI);\n\t\t\t} else if (left < right) {\n\t\t\t\tctx.moveTo(left, y);\n\t\t\t\tctx.arc(right, top, r, -HALF_PI, HALF_PI);\n\t\t\t\tctx.arc(left, top, r, HALF_PI, PI + HALF_PI);\n\t\t\t} else if (top < bottom) {\n\t\t\t\tctx.arc(left, top, r, -PI, 0);\n\t\t\t\tctx.arc(left, bottom, r, 0, PI);\n\t\t\t} else {\n\t\t\t\tctx.arc(left, top, r, -PI, PI);\n\t\t\t}\n\t\t\tctx.closePath();\n\t\t\tctx.moveTo(x, y);\n\t\t} else {\n\t\t\tctx.rect(x, y, width, height);\n\t\t}\n\t},\n\n\tdrawPoint: function(ctx, style, radius, x, y, rotation) {\n\t\tvar type, xOffset, yOffset, size, cornerRadius;\n\t\tvar rad = (rotation || 0) * RAD_PER_DEG;\n\n\t\tif (style && typeof style === 'object') {\n\t\t\ttype = style.toString();\n\t\t\tif (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n\t\t\t\tctx.save();\n\t\t\t\tctx.translate(x, y);\n\t\t\t\tctx.rotate(rad);\n\t\t\t\tctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n\t\t\t\tctx.restore();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (isNaN(radius) || radius <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.beginPath();\n\n\t\tswitch (style) {\n\t\t// Default includes circle\n\t\tdefault:\n\t\t\tctx.arc(x, y, radius, 0, DOUBLE_PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'triangle':\n\t\t\tctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\trad += TWO_THIRDS_PI;\n\t\t\tctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rectRounded':\n\t\t\t// NOTE: the rounded rect implementation changed to use `arc` instead of\n\t\t\t// `quadraticCurveTo` since it generates better results when rect is\n\t\t\t// almost a circle. 0.516 (instead of 0.5) produces results with visually\n\t\t\t// closer proportion to the previous impl and it is inscribed in the\n\t\t\t// circle with `radius`. For more details, see the following PRs:\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5597\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5858\n\t\t\tcornerRadius = radius * 0.516;\n\t\t\tsize = radius - cornerRadius;\n\t\t\txOffset = Math.cos(rad + QUARTER_PI) * size;\n\t\t\tyOffset = Math.sin(rad + QUARTER_PI) * size;\n\t\t\tctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n\t\t\tctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n\t\t\tctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n\t\t\tctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'rect':\n\t\t\tif (!rotation) {\n\t\t\t\tsize = Math.SQRT1_2 * radius;\n\t\t\t\tctx.rect(x - size, y - size, 2 * size, 2 * size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'rectRot':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tctx.closePath();\n\t\t\tbreak;\n\t\tcase 'crossRot':\n\t\t\trad += QUARTER_PI;\n\t\t\t/* falls through */\n\t\tcase 'cross':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'star':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\trad += QUARTER_PI;\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tctx.moveTo(x + yOffset, y - xOffset);\n\t\t\tctx.lineTo(x - yOffset, y + xOffset);\n\t\t\tbreak;\n\t\tcase 'line':\n\t\t\txOffset = Math.cos(rad) * radius;\n\t\t\tyOffset = Math.sin(rad) * radius;\n\t\t\tctx.moveTo(x - xOffset, y - yOffset);\n\t\t\tctx.lineTo(x + xOffset, y + yOffset);\n\t\t\tbreak;\n\t\tcase 'dash':\n\t\t\tctx.moveTo(x, y);\n\t\t\tctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n\t\t\tbreak;\n\t\t}\n\n\t\tctx.fill();\n\t\tctx.stroke();\n\t},\n\n\t/**\n\t * Returns true if the point is inside the rectangle\n\t * @param {object} point - The point to test\n\t * @param {object} area - The rectangle\n\t * @returns {boolean}\n\t * @private\n\t */\n\t_isPointInArea: function(point, area) {\n\t\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\n\t\treturn point.x > area.left - epsilon && point.x < area.right + epsilon &&\n\t\t\tpoint.y > area.top - epsilon && point.y < area.bottom + epsilon;\n\t},\n\n\tclipArea: function(ctx, area) {\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n\t\tctx.clip();\n\t},\n\n\tunclipArea: function(ctx) {\n\t\tctx.restore();\n\t},\n\n\tlineTo: function(ctx, previous, target, flip) {\n\t\tvar stepped = target.steppedLine;\n\t\tif (stepped) {\n\t\t\tif (stepped === 'middle') {\n\t\t\t\tvar midpoint = (previous.x + target.x) / 2.0;\n\t\t\t\tctx.lineTo(midpoint, flip ? target.y : previous.y);\n\t\t\t\tctx.lineTo(midpoint, flip ? previous.y : target.y);\n\t\t\t} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {\n\t\t\t\tctx.lineTo(previous.x, target.y);\n\t\t\t} else {\n\t\t\t\tctx.lineTo(target.x, previous.y);\n\t\t\t}\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.tension) {\n\t\t\tctx.lineTo(target.x, target.y);\n\t\t\treturn;\n\t\t}\n\n\t\tctx.bezierCurveTo(\n\t\t\tflip ? previous.controlPointPreviousX : previous.controlPointNextX,\n\t\t\tflip ? previous.controlPointPreviousY : previous.controlPointNextY,\n\t\t\tflip ? target.controlPointNextX : target.controlPointPreviousX,\n\t\t\tflip ? target.controlPointNextY : target.controlPointPreviousY,\n\t\t\ttarget.x,\n\t\t\ttarget.y);\n\t}\n};\n\nvar helpers_canvas = exports$1;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.\n * @namespace Chart.helpers.clear\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.clear = exports$1.clear;\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.\n * @namespace Chart.helpers.drawRoundedRectangle\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.drawRoundedRectangle = function(ctx) {\n\tctx.beginPath();\n\texports$1.roundedRect.apply(exports$1, arguments);\n};\n\nvar defaults = {\n\t/**\n\t * @private\n\t */\n\t_set: function(scope, values) {\n\t\treturn helpers_core.merge(this[scope] || (this[scope] = {}), values);\n\t}\n};\n\n// TODO(v3): remove 'global' from namespace.  all default are global and\n// there's inconsistency around which options are under 'global'\ndefaults._set('global', {\n\tdefaultColor: 'rgba(0,0,0,0.1)',\n\tdefaultFontColor: '#666',\n\tdefaultFontFamily: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n\tdefaultFontSize: 12,\n\tdefaultFontStyle: 'normal',\n\tdefaultLineHeight: 1.2,\n\tshowLines: true\n});\n\nvar core_defaults = defaults;\n\nvar valueOrDefault = helpers_core.valueOrDefault;\n\n/**\n * Converts the given font object into a CSS font string.\n * @param {object} font - A font object.\n * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */\nfunction toFontString(font) {\n\tif (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {\n\t\treturn null;\n\t}\n\n\treturn (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\n\n/**\n * @alias Chart.helpers.options\n * @namespace\n */\nvar helpers_options = {\n\t/**\n\t * Converts the given line height `value` in pixels for a specific font `size`.\n\t * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n\t * @param {number} size - The font size (in pixels) used to resolve relative `value`.\n\t * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).\n\t * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n\t * @since 2.7.0\n\t */\n\ttoLineHeight: function(value, size) {\n\t\tvar matches = ('' + value).match(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\n\t\tif (!matches || matches[1] === 'normal') {\n\t\t\treturn size * 1.2;\n\t\t}\n\n\t\tvalue = +matches[2];\n\n\t\tswitch (matches[3]) {\n\t\tcase 'px':\n\t\t\treturn value;\n\t\tcase '%':\n\t\t\tvalue /= 100;\n\t\t\tbreak;\n\t\t}\n\n\t\treturn size * value;\n\t},\n\n\t/**\n\t * Converts the given value into a padding object with pre-computed width/height.\n\t * @param {number|object} value - If a number, set the value to all TRBL component,\n\t *  else, if and object, use defined properties and sets undefined ones to 0.\n\t * @returns {object} The padding values (top, right, bottom, left, width, height)\n\t * @since 2.7.0\n\t */\n\ttoPadding: function(value) {\n\t\tvar t, r, b, l;\n\n\t\tif (helpers_core.isObject(value)) {\n\t\t\tt = +value.top || 0;\n\t\t\tr = +value.right || 0;\n\t\t\tb = +value.bottom || 0;\n\t\t\tl = +value.left || 0;\n\t\t} else {\n\t\t\tt = r = b = l = +value || 0;\n\t\t}\n\n\t\treturn {\n\t\t\ttop: t,\n\t\t\tright: r,\n\t\t\tbottom: b,\n\t\t\tleft: l,\n\t\t\theight: t + b,\n\t\t\twidth: l + r\n\t\t};\n\t},\n\n\t/**\n\t * Parses font options and returns the font object.\n\t * @param {object} options - A object that contains font options to be parsed.\n\t * @return {object} The font object.\n\t * @todo Support font.* options and renamed to toFont().\n\t * @private\n\t */\n\t_parseFont: function(options) {\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);\n\t\tvar font = {\n\t\t\tfamily: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),\n\t\t\tlineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),\n\t\t\tsize: size,\n\t\t\tstyle: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),\n\t\t\tweight: null,\n\t\t\tstring: ''\n\t\t};\n\n\t\tfont.string = toFontString(font);\n\t\treturn font;\n\t},\n\n\t/**\n\t * Evaluates the given `inputs` sequentially and returns the first defined value.\n\t * @param {Array} inputs - An array of values, falling back to the last value.\n\t * @param {object} [context] - If defined and the current value is a function, the value\n\t * is called with `context` as first argument and the result becomes the new input.\n\t * @param {number} [index] - If defined and the current value is an array, the value\n\t * at `index` become the new input.\n\t * @param {object} [info] - object to return information about resolution in\n\t * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.\n\t * @since 2.7.0\n\t */\n\tresolve: function(inputs, context, index, info) {\n\t\tvar cacheable = true;\n\t\tvar i, ilen, value;\n\n\t\tfor (i = 0, ilen = inputs.length; i < ilen; ++i) {\n\t\t\tvalue = inputs[i];\n\t\t\tif (value === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (context !== undefined && typeof value === 'function') {\n\t\t\t\tvalue = value(context);\n\t\t\t\tcacheable = false;\n\t\t\t}\n\t\t\tif (index !== undefined && helpers_core.isArray(value)) {\n\t\t\t\tvalue = value[index];\n\t\t\t\tcacheable = false;\n\t\t\t}\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (info && !cacheable) {\n\t\t\t\t\tinfo.cacheable = false;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */\nvar exports$2 = {\n\t/**\n\t * Returns an array of factors sorted from 1 to sqrt(value)\n\t * @private\n\t */\n\t_factorize: function(value) {\n\t\tvar result = [];\n\t\tvar sqrt = Math.sqrt(value);\n\t\tvar i;\n\n\t\tfor (i = 1; i < sqrt; i++) {\n\t\t\tif (value % i === 0) {\n\t\t\t\tresult.push(i);\n\t\t\t\tresult.push(value / i);\n\t\t\t}\n\t\t}\n\t\tif (sqrt === (sqrt | 0)) { // if value is a square number\n\t\t\tresult.push(sqrt);\n\t\t}\n\n\t\tresult.sort(function(a, b) {\n\t\t\treturn a - b;\n\t\t}).pop();\n\t\treturn result;\n\t},\n\n\tlog10: Math.log10 || function(x) {\n\t\tvar exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.\n\t\t// Check for whole powers of 10,\n\t\t// which due to floating point rounding error should be corrected.\n\t\tvar powerOf10 = Math.round(exponent);\n\t\tvar isPowerOf10 = x === Math.pow(10, powerOf10);\n\n\t\treturn isPowerOf10 ? powerOf10 : exponent;\n\t}\n};\n\nvar helpers_math = exports$2;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.helpers.math.log10 instead.\n * @namespace Chart.helpers.log10\n * @deprecated since version 2.9.0\n * @todo remove at version 3\n * @private\n */\nhelpers_core.log10 = exports$2.log10;\n\nvar getRtlAdapter = function(rectX, width) {\n\treturn {\n\t\tx: function(x) {\n\t\t\treturn rectX + rectX + width - x;\n\t\t},\n\t\tsetWidth: function(w) {\n\t\t\twidth = w;\n\t\t},\n\t\ttextAlign: function(align) {\n\t\t\tif (align === 'center') {\n\t\t\t\treturn align;\n\t\t\t}\n\t\t\treturn align === 'right' ? 'left' : 'right';\n\t\t},\n\t\txPlus: function(x, value) {\n\t\t\treturn x - value;\n\t\t},\n\t\tleftForLtr: function(x, itemWidth) {\n\t\t\treturn x - itemWidth;\n\t\t},\n\t};\n};\n\nvar getLtrAdapter = function() {\n\treturn {\n\t\tx: function(x) {\n\t\t\treturn x;\n\t\t},\n\t\tsetWidth: function(w) { // eslint-disable-line no-unused-vars\n\t\t},\n\t\ttextAlign: function(align) {\n\t\t\treturn align;\n\t\t},\n\t\txPlus: function(x, value) {\n\t\t\treturn x + value;\n\t\t},\n\t\tleftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars\n\t\t\treturn x;\n\t\t},\n\t};\n};\n\nvar getAdapter = function(rtl, rectX, width) {\n\treturn rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();\n};\n\nvar overrideTextDirection = function(ctx, direction) {\n\tvar style, original;\n\tif (direction === 'ltr' || direction === 'rtl') {\n\t\tstyle = ctx.canvas.style;\n\t\toriginal = [\n\t\t\tstyle.getPropertyValue('direction'),\n\t\t\tstyle.getPropertyPriority('direction'),\n\t\t];\n\n\t\tstyle.setProperty('direction', direction, 'important');\n\t\tctx.prevTextDirection = original;\n\t}\n};\n\nvar restoreTextDirection = function(ctx) {\n\tvar original = ctx.prevTextDirection;\n\tif (original !== undefined) {\n\t\tdelete ctx.prevTextDirection;\n\t\tctx.canvas.style.setProperty('direction', original[0], original[1]);\n\t}\n};\n\nvar helpers_rtl = {\n\tgetRtlAdapter: getAdapter,\n\toverrideTextDirection: overrideTextDirection,\n\trestoreTextDirection: restoreTextDirection,\n};\n\nvar helpers$1 = helpers_core;\nvar easing = helpers_easing;\nvar canvas = helpers_canvas;\nvar options = helpers_options;\nvar math = helpers_math;\nvar rtl = helpers_rtl;\nhelpers$1.easing = easing;\nhelpers$1.canvas = canvas;\nhelpers$1.options = options;\nhelpers$1.math = math;\nhelpers$1.rtl = rtl;\n\nfunction interpolate(start, view, model, ease) {\n\tvar keys = Object.keys(model);\n\tvar i, ilen, key, actual, origin, target, type, c0, c1;\n\n\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\tkey = keys[i];\n\n\t\ttarget = model[key];\n\n\t\t// if a value is added to the model after pivot() has been called, the view\n\t\t// doesn't contain it, so let's initialize the view to the target value.\n\t\tif (!view.hasOwnProperty(key)) {\n\t\t\tview[key] = target;\n\t\t}\n\n\t\tactual = view[key];\n\n\t\tif (actual === target || key[0] === '_') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!start.hasOwnProperty(key)) {\n\t\t\tstart[key] = actual;\n\t\t}\n\n\t\torigin = start[key];\n\n\t\ttype = typeof target;\n\n\t\tif (type === typeof origin) {\n\t\t\tif (type === 'string') {\n\t\t\t\tc0 = chartjsColor(origin);\n\t\t\t\tif (c0.valid) {\n\t\t\t\t\tc1 = chartjsColor(target);\n\t\t\t\t\tif (c1.valid) {\n\t\t\t\t\t\tview[key] = c1.mix(c0, ease).rgbString();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {\n\t\t\t\tview[key] = origin + (target - origin) * ease;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tview[key] = target;\n\t}\n}\n\nvar Element = function(configuration) {\n\thelpers$1.extend(this, configuration);\n\tthis.initialize.apply(this, arguments);\n};\n\nhelpers$1.extend(Element.prototype, {\n\t_type: undefined,\n\n\tinitialize: function() {\n\t\tthis.hidden = false;\n\t},\n\n\tpivot: function() {\n\t\tvar me = this;\n\t\tif (!me._view) {\n\t\t\tme._view = helpers$1.extend({}, me._model);\n\t\t}\n\t\tme._start = {};\n\t\treturn me;\n\t},\n\n\ttransition: function(ease) {\n\t\tvar me = this;\n\t\tvar model = me._model;\n\t\tvar start = me._start;\n\t\tvar view = me._view;\n\n\t\t// No animation -> No Transition\n\t\tif (!model || ease === 1) {\n\t\t\tme._view = helpers$1.extend({}, model);\n\t\t\tme._start = null;\n\t\t\treturn me;\n\t\t}\n\n\t\tif (!view) {\n\t\t\tview = me._view = {};\n\t\t}\n\n\t\tif (!start) {\n\t\t\tstart = me._start = {};\n\t\t}\n\n\t\tinterpolate(start, view, model, ease);\n\n\t\treturn me;\n\t},\n\n\ttooltipPosition: function() {\n\t\treturn {\n\t\t\tx: this._model.x,\n\t\t\ty: this._model.y\n\t\t};\n\t},\n\n\thasValue: function() {\n\t\treturn helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);\n\t}\n});\n\nElement.extend = helpers$1.inherits;\n\nvar core_element = Element;\n\nvar exports$3 = core_element.extend({\n\tchart: null, // the animation associated chart instance\n\tcurrentStep: 0, // the current animation step\n\tnumSteps: 60, // default number of steps\n\teasing: '', // the easing to use for this animation\n\trender: null, // render function used by the animation service\n\n\tonAnimationProgress: null, // user specified callback to fire on each step of the animation\n\tonAnimationComplete: null, // user specified callback to fire when the animation finishes\n});\n\nvar core_animation = exports$3;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart.Animation instead\n * @prop Chart.Animation#animationObject\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$3.prototype, 'animationObject', {\n\tget: function() {\n\t\treturn this;\n\t}\n});\n\n/**\n * Provided for backward compatibility, use Chart.Animation#chart instead\n * @prop Chart.Animation#chartInstance\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n */\nObject.defineProperty(exports$3.prototype, 'chartInstance', {\n\tget: function() {\n\t\treturn this.chart;\n\t},\n\tset: function(value) {\n\t\tthis.chart = value;\n\t}\n});\n\ncore_defaults._set('global', {\n\tanimation: {\n\t\tduration: 1000,\n\t\teasing: 'easeOutQuart',\n\t\tonProgress: helpers$1.noop,\n\t\tonComplete: helpers$1.noop\n\t}\n});\n\nvar core_animations = {\n\tanimations: [],\n\trequest: null,\n\n\t/**\n\t * @param {Chart} chart - The chart to animate.\n\t * @param {Chart.Animation} animation - The animation that we will animate.\n\t * @param {number} duration - The animation duration in ms.\n\t * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions\n\t */\n\taddAnimation: function(chart, animation, duration, lazy) {\n\t\tvar animations = this.animations;\n\t\tvar i, ilen;\n\n\t\tanimation.chart = chart;\n\t\tanimation.startTime = Date.now();\n\t\tanimation.duration = duration;\n\n\t\tif (!lazy) {\n\t\t\tchart.animating = true;\n\t\t}\n\n\t\tfor (i = 0, ilen = animations.length; i < ilen; ++i) {\n\t\t\tif (animations[i].chart === chart) {\n\t\t\t\tanimations[i] = animation;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tanimations.push(animation);\n\n\t\t// If there are no animations queued, manually kickstart a digest, for lack of a better word\n\t\tif (animations.length === 1) {\n\t\t\tthis.requestAnimationFrame();\n\t\t}\n\t},\n\n\tcancelAnimation: function(chart) {\n\t\tvar index = helpers$1.findIndex(this.animations, function(animation) {\n\t\t\treturn animation.chart === chart;\n\t\t});\n\n\t\tif (index !== -1) {\n\t\t\tthis.animations.splice(index, 1);\n\t\t\tchart.animating = false;\n\t\t}\n\t},\n\n\trequestAnimationFrame: function() {\n\t\tvar me = this;\n\t\tif (me.request === null) {\n\t\t\t// Skip animation frame requests until the active one is executed.\n\t\t\t// This can happen when processing mouse events, e.g. 'mousemove'\n\t\t\t// and 'mouseout' events will trigger multiple renders.\n\t\t\tme.request = helpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tme.request = null;\n\t\t\t\tme.startDigest();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tstartDigest: function() {\n\t\tvar me = this;\n\n\t\tme.advance();\n\n\t\t// Do we have more stuff to animate?\n\t\tif (me.animations.length > 0) {\n\t\t\tme.requestAnimationFrame();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tadvance: function() {\n\t\tvar animations = this.animations;\n\t\tvar animation, chart, numSteps, nextStep;\n\t\tvar i = 0;\n\n\t\t// 1 animation per chart, so we are looping charts here\n\t\twhile (i < animations.length) {\n\t\t\tanimation = animations[i];\n\t\t\tchart = animation.chart;\n\t\t\tnumSteps = animation.numSteps;\n\n\t\t\t// Make sure that currentStep starts at 1\n\t\t\t// https://github.com/chartjs/Chart.js/issues/6104\n\t\t\tnextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;\n\t\t\tanimation.currentStep = Math.min(nextStep, numSteps);\n\n\t\t\thelpers$1.callback(animation.render, [chart, animation], chart);\n\t\t\thelpers$1.callback(animation.onAnimationProgress, [animation], chart);\n\n\t\t\tif (animation.currentStep >= numSteps) {\n\t\t\t\thelpers$1.callback(animation.onAnimationComplete, [animation], chart);\n\t\t\t\tchart.animating = false;\n\t\t\t\tanimations.splice(i, 1);\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar resolve = helpers$1.options.resolve;\n\nvar arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\n\n/**\n * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',\n * 'unshift') and notify the listener AFTER the array has been altered. Listeners are\n * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.\n */\nfunction listenArrayEvents(array, listener) {\n\tif (array._chartjs) {\n\t\tarray._chartjs.listeners.push(listener);\n\t\treturn;\n\t}\n\n\tObject.defineProperty(array, '_chartjs', {\n\t\tconfigurable: true,\n\t\tenumerable: false,\n\t\tvalue: {\n\t\t\tlisteners: [listener]\n\t\t}\n\t});\n\n\tarrayEvents.forEach(function(key) {\n\t\tvar method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);\n\t\tvar base = array[key];\n\n\t\tObject.defineProperty(array, key, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tvalue: function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tvar res = base.apply(this, args);\n\n\t\t\t\thelpers$1.each(array._chartjs.listeners, function(object) {\n\t\t\t\t\tif (typeof object[method] === 'function') {\n\t\t\t\t\t\tobject[method].apply(object, args);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn res;\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Removes the given array event listener and cleanup extra attached properties (such as\n * the _chartjs stub and overridden methods) if array doesn't have any more listeners.\n */\nfunction unlistenArrayEvents(array, listener) {\n\tvar stub = array._chartjs;\n\tif (!stub) {\n\t\treturn;\n\t}\n\n\tvar listeners = stub.listeners;\n\tvar index = listeners.indexOf(listener);\n\tif (index !== -1) {\n\t\tlisteners.splice(index, 1);\n\t}\n\n\tif (listeners.length > 0) {\n\t\treturn;\n\t}\n\n\tarrayEvents.forEach(function(key) {\n\t\tdelete array[key];\n\t});\n\n\tdelete array._chartjs;\n}\n\n// Base class for all dataset controllers (line, bar, etc)\nvar DatasetController = function(chart, datasetIndex) {\n\tthis.initialize(chart, datasetIndex);\n};\n\nhelpers$1.extend(DatasetController.prototype, {\n\n\t/**\n\t * Element type used to generate a meta dataset (e.g. Chart.element.Line).\n\t * @type {Chart.core.element}\n\t */\n\tdatasetElementType: null,\n\n\t/**\n\t * Element type used to generate a meta data (e.g. Chart.element.Point).\n\t * @type {Chart.core.element}\n\t */\n\tdataElementType: null,\n\n\t/**\n\t * Dataset element option keys to be resolved in _resolveDatasetElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderCapStyle',\n\t\t'borderColor',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'borderWidth'\n\t],\n\n\t/**\n\t * Data element option keys to be resolved in _resolveDataElementOptions.\n\t * A derived controller may override this to resolve controller-specific options.\n\t * The keys defined here are for backward compatibility for legend styles.\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'pointStyle'\n\t],\n\n\tinitialize: function(chart, datasetIndex) {\n\t\tvar me = this;\n\t\tme.chart = chart;\n\t\tme.index = datasetIndex;\n\t\tme.linkScales();\n\t\tme.addElements();\n\t\tme._type = me.getMeta().type;\n\t},\n\n\tupdateIndex: function(datasetIndex) {\n\t\tthis.index = datasetIndex;\n\t},\n\n\tlinkScales: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar chart = me.chart;\n\t\tvar scales = chart.scales;\n\t\tvar dataset = me.getDataset();\n\t\tvar scalesOpts = chart.options.scales;\n\n\t\tif (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {\n\t\t\tmeta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;\n\t\t}\n\t\tif (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {\n\t\t\tmeta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;\n\t\t}\n\t},\n\n\tgetDataset: function() {\n\t\treturn this.chart.data.datasets[this.index];\n\t},\n\n\tgetMeta: function() {\n\t\treturn this.chart.getDatasetMeta(this.index);\n\t},\n\n\tgetScaleForId: function(scaleID) {\n\t\treturn this.chart.scales[scaleID];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScale: function() {\n\t\treturn this.getScaleForId(this._getValueScaleId());\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScale: function() {\n\t\treturn this.getScaleForId(this._getIndexScaleId());\n\t},\n\n\treset: function() {\n\t\tthis._update(true);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroy: function() {\n\t\tif (this._data) {\n\t\t\tunlistenArrayEvents(this._data, this);\n\t\t}\n\t},\n\n\tcreateMetaDataset: function() {\n\t\tvar me = this;\n\t\tvar type = me.datasetElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index\n\t\t});\n\t},\n\n\tcreateMetaData: function(index) {\n\t\tvar me = this;\n\t\tvar type = me.dataElementType;\n\t\treturn type && new type({\n\t\t\t_chart: me.chart,\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index\n\t\t});\n\t},\n\n\taddElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data || [];\n\t\tvar metaData = meta.data;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = data.length; i < ilen; ++i) {\n\t\t\tmetaData[i] = metaData[i] || me.createMetaData(i);\n\t\t}\n\n\t\tmeta.dataset = meta.dataset || me.createMetaDataset();\n\t},\n\n\taddElementAndReset: function(index) {\n\t\tvar element = this.createMetaData(index);\n\t\tthis.getMeta().data.splice(index, 0, element);\n\t\tthis.updateElement(element, index, true);\n\t},\n\n\tbuildOrUpdateElements: function() {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar data = dataset.data || (dataset.data = []);\n\n\t\t// In order to correctly handle data addition/deletion animation (an thus simulate\n\t\t// real-time charts), we need to monitor these data modifications and synchronize\n\t\t// the internal meta data accordingly.\n\t\tif (me._data !== data) {\n\t\t\tif (me._data) {\n\t\t\t\t// This case happens when the user replaced the data array instance.\n\t\t\t\tunlistenArrayEvents(me._data, me);\n\t\t\t}\n\n\t\t\tif (data && Object.isExtensible(data)) {\n\t\t\t\tlistenArrayEvents(data, me);\n\t\t\t}\n\t\t\tme._data = data;\n\t\t}\n\n\t\t// Re-sync meta data in case the user replaced the data array or if we missed\n\t\t// any updates and so make sure that we handle number of datapoints changing.\n\t\tme.resyncElements();\n\t},\n\n\t/**\n\t * Returns the merged user-supplied and default dataset-level options\n\t * @private\n\t */\n\t_configure: function() {\n\t\tvar me = this;\n\t\tme._config = helpers$1.merge({}, [\n\t\t\tme.chart.options.datasets[me._type],\n\t\t\tme.getDataset(),\n\t\t], {\n\t\t\tmerger: function(key, target, source) {\n\t\t\t\tif (key !== '_meta' && key !== 'data') {\n\t\t\t\t\thelpers$1._merger(key, target, source);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t_update: function(reset) {\n\t\tvar me = this;\n\t\tme._configure();\n\t\tme._cachedDataOpts = null;\n\t\tme.update(reset);\n\t},\n\n\tupdate: helpers$1.noop,\n\n\ttransition: function(easingValue) {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].transition(easingValue);\n\t\t}\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.transition(easingValue);\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar meta = this.getMeta();\n\t\tvar elements = meta.data || [];\n\t\tvar ilen = elements.length;\n\t\tvar i = 0;\n\n\t\tif (meta.dataset) {\n\t\t\tmeta.dataset.draw();\n\t\t}\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\telements[i].draw();\n\t\t}\n\t},\n\n\t/**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @return {IStyleInterface} style object\n\t */\n\tgetStyle: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = meta.dataset;\n\t\tvar style;\n\n\t\tme._configure();\n\t\tif (dataset && index === undefined) {\n\t\t\tstyle = me._resolveDatasetElementOptions(dataset || {});\n\t\t} else {\n\t\t\tindex = index || 0;\n\t\t\tstyle = me._resolveDataElementOptions(meta.data[index] || {}, index);\n\t\t}\n\n\t\tif (style.fill === false || style.fill === null) {\n\t\t\tstyle.backgroundColor = style.borderColor;\n\t\t}\n\n\t\treturn style;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function(element, hover) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar datasetOpts = me._config;\n\t\tvar custom = element.custom || {};\n\t\tvar options = chart.options.elements[me.datasetElementType.prototype._type] || {};\n\t\tvar elementOptions = me._datasetElementOptions;\n\t\tvar values = {};\n\t\tvar i, ilen, key, readKey;\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataset: me.getDataset(),\n\t\t\tdatasetIndex: me.index,\n\t\t\thover: hover\n\t\t};\n\n\t\tfor (i = 0, ilen = elementOptions.length; i < ilen; ++i) {\n\t\t\tkey = elementOptions[i];\n\t\t\treadKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;\n\t\t\tvalues[key] = resolve([\n\t\t\t\tcustom[readKey],\n\t\t\t\tdatasetOpts[readKey],\n\t\t\t\toptions[readKey]\n\t\t\t], context);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function(element, index) {\n\t\tvar me = this;\n\t\tvar custom = element && element.custom;\n\t\tvar cached = me._cachedDataOpts;\n\t\tif (cached && !custom) {\n\t\t\treturn cached;\n\t\t}\n\t\tvar chart = me.chart;\n\t\tvar datasetOpts = me._config;\n\t\tvar options = chart.options.elements[me.dataElementType.prototype._type] || {};\n\t\tvar elementOptions = me._dataElementOptions;\n\t\tvar values = {};\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: me.getDataset(),\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\t// `resolve` sets cacheable to `false` if any option is indexed or scripted\n\t\tvar info = {cacheable: !custom};\n\n\t\tvar keys, i, ilen, key;\n\n\t\tcustom = custom || {};\n\n\t\tif (helpers$1.isArray(elementOptions)) {\n\t\t\tfor (i = 0, ilen = elementOptions.length; i < ilen; ++i) {\n\t\t\t\tkey = elementOptions[i];\n\t\t\t\tvalues[key] = resolve([\n\t\t\t\t\tcustom[key],\n\t\t\t\t\tdatasetOpts[key],\n\t\t\t\t\toptions[key]\n\t\t\t\t], context, index, info);\n\t\t\t}\n\t\t} else {\n\t\t\tkeys = Object.keys(elementOptions);\n\t\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\t\tkey = keys[i];\n\t\t\t\tvalues[key] = resolve([\n\t\t\t\t\tcustom[key],\n\t\t\t\t\tdatasetOpts[elementOptions[key]],\n\t\t\t\t\tdatasetOpts[key],\n\t\t\t\t\toptions[key]\n\t\t\t\t], context, index, info);\n\t\t\t}\n\t\t}\n\n\t\tif (info.cacheable) {\n\t\t\tme._cachedDataOpts = Object.freeze(values);\n\t\t}\n\n\t\treturn values;\n\t},\n\n\tremoveHoverStyle: function(element) {\n\t\thelpers$1.merge(element._model, element.$previousStyle || {});\n\t\tdelete element.$previousStyle;\n\t},\n\n\tsetHoverStyle: function(element) {\n\t\tvar dataset = this.chart.data.datasets[element._datasetIndex];\n\t\tvar index = element._index;\n\t\tvar custom = element.custom || {};\n\t\tvar model = element._model;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\telement.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth\n\t\t};\n\n\t\tmodel.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);\n\t\tmodel.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);\n\t\tmodel.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_removeDatasetHoverStyle: function() {\n\t\tvar element = this.getMeta().dataset;\n\n\t\tif (element) {\n\t\t\tthis.removeHoverStyle(element);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_setDatasetHoverStyle: function() {\n\t\tvar element = this.getMeta().dataset;\n\t\tvar prev = {};\n\t\tvar i, ilen, key, keys, hoverOptions, model;\n\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel = element._model;\n\t\thoverOptions = this._resolveDatasetElementOptions(element, true);\n\n\t\tkeys = Object.keys(hoverOptions);\n\t\tfor (i = 0, ilen = keys.length; i < ilen; ++i) {\n\t\t\tkey = keys[i];\n\t\t\tprev[key] = model[key];\n\t\t\tmodel[key] = hoverOptions[key];\n\t\t}\n\n\t\telement.$previousStyle = prev;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tresyncElements: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar data = me.getDataset().data;\n\t\tvar numMeta = meta.data.length;\n\t\tvar numData = data.length;\n\n\t\tif (numData < numMeta) {\n\t\t\tmeta.data.splice(numData, numMeta - numData);\n\t\t} else if (numData > numMeta) {\n\t\t\tme.insertElements(numMeta, numData - numMeta);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinsertElements: function(start, count) {\n\t\tfor (var i = 0; i < count; ++i) {\n\t\t\tthis.addElementAndReset(start + i);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPush: function() {\n\t\tvar count = arguments.length;\n\t\tthis.insertElements(this.getDataset().data.length - count, count);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataPop: function() {\n\t\tthis.getMeta().data.pop();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataShift: function() {\n\t\tthis.getMeta().data.shift();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataSplice: function(start, count) {\n\t\tthis.getMeta().data.splice(start, count);\n\t\tthis.insertElements(start, arguments.length - 2);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tonDataUnshift: function() {\n\t\tthis.insertElements(0, arguments.length);\n\t}\n});\n\nDatasetController.extend = helpers$1.inherits;\n\nvar core_datasetController = DatasetController;\n\nvar TAU = Math.PI * 2;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tarc: {\n\t\t\tbackgroundColor: core_defaults.global.defaultColor,\n\t\t\tborderColor: '#fff',\n\t\t\tborderWidth: 2,\n\t\t\tborderAlign: 'center'\n\t\t}\n\t}\n});\n\nfunction clipArc(ctx, arc) {\n\tvar startAngle = arc.startAngle;\n\tvar endAngle = arc.endAngle;\n\tvar pixelMargin = arc.pixelMargin;\n\tvar angleMargin = pixelMargin / arc.outerRadius;\n\tvar x = arc.x;\n\tvar y = arc.y;\n\n\t// Draw an inner border by cliping the arc and drawing a double-width border\n\t// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\tctx.beginPath();\n\tctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\tif (arc.innerRadius > pixelMargin) {\n\t\tangleMargin = pixelMargin / arc.innerRadius;\n\t\tctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);\n\t} else {\n\t\tctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);\n\t}\n\tctx.closePath();\n\tctx.clip();\n}\n\nfunction drawFullCircleBorders(ctx, vm, arc, inner) {\n\tvar endAngle = arc.endAngle;\n\tvar i;\n\n\tif (inner) {\n\t\tarc.endAngle = arc.startAngle + TAU;\n\t\tclipArc(ctx, arc);\n\t\tarc.endAngle = endAngle;\n\t\tif (arc.endAngle === arc.startAngle && arc.fullCircles) {\n\t\t\tarc.endAngle += TAU;\n\t\t\tarc.fullCircles--;\n\t\t}\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);\n\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\tctx.stroke();\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);\n\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\tctx.stroke();\n\t}\n}\n\nfunction drawBorder(ctx, vm, arc) {\n\tvar inner = vm.borderAlign === 'inner';\n\n\tif (inner) {\n\t\tctx.lineWidth = vm.borderWidth * 2;\n\t\tctx.lineJoin = 'round';\n\t} else {\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tctx.lineJoin = 'bevel';\n\t}\n\n\tif (arc.fullCircles) {\n\t\tdrawFullCircleBorders(ctx, vm, arc, inner);\n\t}\n\n\tif (inner) {\n\t\tclipArc(ctx, arc);\n\t}\n\n\tctx.beginPath();\n\tctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);\n\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\tctx.closePath();\n\tctx.stroke();\n}\n\nvar element_arc = core_element.extend({\n\t_type: 'arc',\n\n\tinLabelRange: function(mouseX) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\treturn (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));\n\t\t}\n\t\treturn false;\n\t},\n\n\tinRange: function(chartX, chartY) {\n\t\tvar vm = this._view;\n\n\t\tif (vm) {\n\t\t\tvar pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});\n\t\t\tvar angle = pointRelativePosition.angle;\n\t\t\tvar distance = pointRelativePosition.distance;\n\n\t\t\t// Sanitise angle range\n\t\t\tvar startAngle = vm.startAngle;\n\t\t\tvar endAngle = vm.endAngle;\n\t\t\twhile (endAngle < startAngle) {\n\t\t\t\tendAngle += TAU;\n\t\t\t}\n\t\t\twhile (angle > endAngle) {\n\t\t\t\tangle -= TAU;\n\t\t\t}\n\t\t\twhile (angle < startAngle) {\n\t\t\t\tangle += TAU;\n\t\t\t}\n\n\t\t\t// Check if within the range of the open/close angle\n\t\t\tvar betweenAngles = (angle >= startAngle && angle <= endAngle);\n\t\t\tvar withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);\n\n\t\t\treturn (betweenAngles && withinRadius);\n\t\t}\n\t\treturn false;\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar halfAngle = (vm.startAngle + vm.endAngle) / 2;\n\t\tvar halfRadius = (vm.innerRadius + vm.outerRadius) / 2;\n\t\treturn {\n\t\t\tx: vm.x + Math.cos(halfAngle) * halfRadius,\n\t\t\ty: vm.y + Math.sin(halfAngle) * halfRadius\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\t\treturn Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\tvar centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);\n\t\tvar rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;\n\n\t\treturn {\n\t\t\tx: vm.x + (Math.cos(centreAngle) * rangeFromCentre),\n\t\t\ty: vm.y + (Math.sin(centreAngle) * rangeFromCentre)\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;\n\t\tvar arc = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tinnerRadius: vm.innerRadius,\n\t\t\touterRadius: Math.max(vm.outerRadius - pixelMargin, 0),\n\t\t\tpixelMargin: pixelMargin,\n\t\t\tstartAngle: vm.startAngle,\n\t\t\tendAngle: vm.endAngle,\n\t\t\tfullCircles: Math.floor(vm.circumference / TAU)\n\t\t};\n\t\tvar i;\n\n\t\tctx.save();\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\n\t\tif (arc.fullCircles) {\n\t\t\tarc.endAngle = arc.startAngle + TAU;\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);\n\t\t\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\t\t\tctx.closePath();\n\t\t\tfor (i = 0; i < arc.fullCircles; ++i) {\n\t\t\t\tctx.fill();\n\t\t\t}\n\t\t\tarc.endAngle = arc.startAngle + vm.circumference % TAU;\n\t\t}\n\n\t\tctx.beginPath();\n\t\tctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);\n\t\tctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);\n\t\tctx.closePath();\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth) {\n\t\t\tdrawBorder(ctx, vm, arc);\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$1 = helpers$1.valueOrDefault;\n\nvar defaultColor = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tline: {\n\t\t\ttension: 0.4,\n\t\t\tbackgroundColor: defaultColor,\n\t\t\tborderWidth: 3,\n\t\t\tborderColor: defaultColor,\n\t\t\tborderCapStyle: 'butt',\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: 'miter',\n\t\t\tcapBezierPoints: true,\n\t\t\tfill: true, // do we fill in the area between the line and its base axis\n\t\t}\n\t}\n});\n\nvar element_line = core_element.extend({\n\t_type: 'line',\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar vm = me._view;\n\t\tvar ctx = me._chart.ctx;\n\t\tvar spanGaps = vm.spanGaps;\n\t\tvar points = me._children.slice(); // clone array\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar globalOptionLineElements = globalDefaults.elements.line;\n\t\tvar lastDrawnIndex = -1;\n\t\tvar closePath = me._loop;\n\t\tvar index, previous, currentVM;\n\n\t\tif (!points.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (me._loop) {\n\t\t\tfor (index = 0; index < points.length; ++index) {\n\t\t\t\tprevious = helpers$1.previousItem(points, index);\n\t\t\t\t// If the line has an open path, shift the point array\n\t\t\t\tif (!points[index]._view.skip && previous._view.skip) {\n\t\t\t\t\tpoints = points.slice(index).concat(points.slice(0, index));\n\t\t\t\t\tclosePath = spanGaps;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the line has a close path, add the first point again\n\t\t\tif (closePath) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\t\t}\n\n\t\tctx.save();\n\n\t\t// Stroke Line Options\n\t\tctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;\n\n\t\t// IE 9 and 10 do not support line dash\n\t\tif (ctx.setLineDash) {\n\t\t\tctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);\n\t\t}\n\n\t\tctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);\n\t\tctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;\n\t\tctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);\n\t\tctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;\n\n\t\t// Stroke Line\n\t\tctx.beginPath();\n\n\t\t// First point moves to it's starting position no matter what\n\t\tcurrentVM = points[0]._view;\n\t\tif (!currentVM.skip) {\n\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\tlastDrawnIndex = 0;\n\t\t}\n\n\t\tfor (index = 1; index < points.length; ++index) {\n\t\t\tcurrentVM = points[index]._view;\n\t\t\tprevious = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];\n\n\t\t\tif (!currentVM.skip) {\n\t\t\t\tif ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {\n\t\t\t\t\t// There was a gap and this is the first point after the gap\n\t\t\t\t\tctx.moveTo(currentVM.x, currentVM.y);\n\t\t\t\t} else {\n\t\t\t\t\t// Line to next point\n\t\t\t\t\thelpers$1.canvas.lineTo(ctx, previous._view, currentVM);\n\t\t\t\t}\n\t\t\t\tlastDrawnIndex = index;\n\t\t\t}\n\t\t}\n\n\t\tif (closePath) {\n\t\t\tctx.closePath();\n\t\t}\n\n\t\tctx.stroke();\n\t\tctx.restore();\n\t}\n});\n\nvar valueOrDefault$2 = helpers$1.valueOrDefault;\n\nvar defaultColor$1 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\tpoint: {\n\t\t\tradius: 3,\n\t\t\tpointStyle: 'circle',\n\t\t\tbackgroundColor: defaultColor$1,\n\t\t\tborderColor: defaultColor$1,\n\t\t\tborderWidth: 1,\n\t\t\t// Hover\n\t\t\thitRadius: 1,\n\t\t\thoverRadius: 4,\n\t\t\thoverBorderWidth: 1\n\t\t}\n\t}\n});\n\nfunction xRange(mouseX) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;\n}\n\nfunction yRange(mouseY) {\n\tvar vm = this._view;\n\treturn vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;\n}\n\nvar element_point = core_element.extend({\n\t_type: 'point',\n\n\tinRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;\n\t},\n\n\tinLabelRange: xRange,\n\tinXRange: xRange,\n\tinYRange: yRange,\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t},\n\n\tgetArea: function() {\n\t\treturn Math.PI * Math.pow(this._view.radius, 2);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y,\n\t\t\tpadding: vm.radius + vm.borderWidth\n\t\t};\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar vm = this._view;\n\t\tvar ctx = this._chart.ctx;\n\t\tvar pointStyle = vm.pointStyle;\n\t\tvar rotation = vm.rotation;\n\t\tvar radius = vm.radius;\n\t\tvar x = vm.x;\n\t\tvar y = vm.y;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow\n\n\t\tif (vm.skip) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clipping for Points.\n\t\tif (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {\n\t\t\tctx.strokeStyle = vm.borderColor || defaultColor;\n\t\t\tctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);\n\t\t\tctx.fillStyle = vm.backgroundColor || defaultColor;\n\t\t\thelpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);\n\t\t}\n\t}\n});\n\nvar defaultColor$2 = core_defaults.global.defaultColor;\n\ncore_defaults._set('global', {\n\telements: {\n\t\trectangle: {\n\t\t\tbackgroundColor: defaultColor$2,\n\t\t\tborderColor: defaultColor$2,\n\t\t\tborderSkipped: 'bottom',\n\t\t\tborderWidth: 0\n\t\t}\n\t}\n});\n\nfunction isVertical(vm) {\n\treturn vm && vm.width !== undefined;\n}\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param bar {Chart.Element.Rectangle} the bar\n * @return {Bounds} bounds of the bar\n * @private\n */\nfunction getBarBounds(vm) {\n\tvar x1, x2, y1, y2, half;\n\n\tif (isVertical(vm)) {\n\t\thalf = vm.width / 2;\n\t\tx1 = vm.x - half;\n\t\tx2 = vm.x + half;\n\t\ty1 = Math.min(vm.y, vm.base);\n\t\ty2 = Math.max(vm.y, vm.base);\n\t} else {\n\t\thalf = vm.height / 2;\n\t\tx1 = Math.min(vm.x, vm.base);\n\t\tx2 = Math.max(vm.x, vm.base);\n\t\ty1 = vm.y - half;\n\t\ty2 = vm.y + half;\n\t}\n\n\treturn {\n\t\tleft: x1,\n\t\ttop: y1,\n\t\tright: x2,\n\t\tbottom: y2\n\t};\n}\n\nfunction swap(orig, v1, v2) {\n\treturn orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction parseBorderSkipped(vm) {\n\tvar edge = vm.borderSkipped;\n\tvar res = {};\n\n\tif (!edge) {\n\t\treturn res;\n\t}\n\n\tif (vm.horizontal) {\n\t\tif (vm.base > vm.x) {\n\t\t\tedge = swap(edge, 'left', 'right');\n\t\t}\n\t} else if (vm.base < vm.y) {\n\t\tedge = swap(edge, 'bottom', 'top');\n\t}\n\n\tres[edge] = true;\n\treturn res;\n}\n\nfunction parseBorderWidth(vm, maxW, maxH) {\n\tvar value = vm.borderWidth;\n\tvar skip = parseBorderSkipped(vm);\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = +value.top || 0;\n\t\tr = +value.right || 0;\n\t\tb = +value.bottom || 0;\n\t\tl = +value.left || 0;\n\t} else {\n\t\tt = r = b = l = +value || 0;\n\t}\n\n\treturn {\n\t\tt: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,\n\t\tr: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,\n\t\tb: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,\n\t\tl: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l\n\t};\n}\n\nfunction boundingRects(vm) {\n\tvar bounds = getBarBounds(vm);\n\tvar width = bounds.right - bounds.left;\n\tvar height = bounds.bottom - bounds.top;\n\tvar border = parseBorderWidth(vm, width / 2, height / 2);\n\n\treturn {\n\t\touter: {\n\t\t\tx: bounds.left,\n\t\t\ty: bounds.top,\n\t\t\tw: width,\n\t\t\th: height\n\t\t},\n\t\tinner: {\n\t\t\tx: bounds.left + border.l,\n\t\t\ty: bounds.top + border.t,\n\t\t\tw: width - border.l - border.r,\n\t\t\th: height - border.t - border.b\n\t\t}\n\t};\n}\n\nfunction inRange(vm, x, y) {\n\tvar skipX = x === null;\n\tvar skipY = y === null;\n\tvar bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);\n\n\treturn bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nvar element_rectangle = core_element.extend({\n\t_type: 'rectangle',\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar rects = boundingRects(vm);\n\t\tvar outer = rects.outer;\n\t\tvar inner = rects.inner;\n\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.fillRect(outer.x, outer.y, outer.w, outer.h);\n\n\t\tif (outer.w === inner.w && outer.h === inner.h) {\n\t\t\treturn;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(outer.x, outer.y, outer.w, outer.h);\n\t\tctx.clip();\n\t\tctx.fillStyle = vm.borderColor;\n\t\tctx.rect(inner.x, inner.y, inner.w, inner.h);\n\t\tctx.fill('evenodd');\n\t\tctx.restore();\n\t},\n\n\theight: function() {\n\t\tvar vm = this._view;\n\t\treturn vm.base - vm.y;\n\t},\n\n\tinRange: function(mouseX, mouseY) {\n\t\treturn inRange(this._view, mouseX, mouseY);\n\t},\n\n\tinLabelRange: function(mouseX, mouseY) {\n\t\tvar vm = this._view;\n\t\treturn isVertical(vm)\n\t\t\t? inRange(vm, mouseX, null)\n\t\t\t: inRange(vm, null, mouseY);\n\t},\n\n\tinXRange: function(mouseX) {\n\t\treturn inRange(this._view, mouseX, null);\n\t},\n\n\tinYRange: function(mouseY) {\n\t\treturn inRange(this._view, null, mouseY);\n\t},\n\n\tgetCenterPoint: function() {\n\t\tvar vm = this._view;\n\t\tvar x, y;\n\t\tif (isVertical(vm)) {\n\t\t\tx = vm.x;\n\t\t\ty = (vm.y + vm.base) / 2;\n\t\t} else {\n\t\t\tx = (vm.x + vm.base) / 2;\n\t\t\ty = vm.y;\n\t\t}\n\n\t\treturn {x: x, y: y};\n\t},\n\n\tgetArea: function() {\n\t\tvar vm = this._view;\n\n\t\treturn isVertical(vm)\n\t\t\t? vm.width * Math.abs(vm.y - vm.base)\n\t\t\t: vm.height * Math.abs(vm.x - vm.base);\n\t},\n\n\ttooltipPosition: function() {\n\t\tvar vm = this._view;\n\t\treturn {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\t}\n});\n\nvar elements = {};\nvar Arc = element_arc;\nvar Line = element_line;\nvar Point = element_point;\nvar Rectangle = element_rectangle;\nelements.Arc = Arc;\nelements.Line = Line;\nelements.Point = Point;\nelements.Rectangle = Rectangle;\n\nvar deprecated = helpers$1._deprecated;\nvar valueOrDefault$3 = helpers$1.valueOrDefault;\n\ncore_defaults._set('bar', {\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'linear'\n\t\t}]\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\tbar: {\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9\n\t\t}\n\t}\n});\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(scale, pixels) {\n\tvar min = scale._length;\n\tvar prev, curr, i, ilen;\n\n\tfor (i = 1, ilen = pixels.length; i < ilen; ++i) {\n\t\tmin = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));\n\t}\n\n\tfor (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {\n\t\tcurr = scale.getPixelForTick(i);\n\t\tmin = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;\n\t\tprev = curr;\n\t}\n\n\treturn min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options) {\n\tvar thickness = options.barThickness;\n\tvar count = ruler.stackCount;\n\tvar curr = ruler.pixels[index];\n\tvar min = helpers$1.isNullOrUndef(thickness)\n\t\t? computeMinSampleSize(ruler.scale, ruler.pixels)\n\t\t: -1;\n\tvar size, ratio;\n\n\tif (helpers$1.isNullOrUndef(thickness)) {\n\t\tsize = min * options.categoryPercentage;\n\t\tratio = options.barPercentage;\n\t} else {\n\t\t// When bar thickness is enforced, category and bar percentages are ignored.\n\t\t// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n\t\t// and deprecate barPercentage since this value is ignored when thickness is absolute.\n\t\tsize = thickness * count;\n\t\tratio = 1;\n\t}\n\n\treturn {\n\t\tchunk: size / count,\n\t\tratio: ratio,\n\t\tstart: curr - (size / 2)\n\t};\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options) {\n\tvar pixels = ruler.pixels;\n\tvar curr = pixels[index];\n\tvar prev = index > 0 ? pixels[index - 1] : null;\n\tvar next = index < pixels.length - 1 ? pixels[index + 1] : null;\n\tvar percent = options.categoryPercentage;\n\tvar start, size;\n\n\tif (prev === null) {\n\t\t// first data: its size is double based on the next point or,\n\t\t// if it's also the last data, we use the scale size.\n\t\tprev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n\t}\n\n\tif (next === null) {\n\t\t// last data: its size is also double based on the previous point.\n\t\tnext = curr + curr - prev;\n\t}\n\n\tstart = curr - (curr - Math.min(prev, next)) / 2 * percent;\n\tsize = Math.abs(next - prev) / 2 * percent;\n\n\treturn {\n\t\tchunk: size / ruler.stackCount,\n\t\tratio: options.barPercentage,\n\t\tstart: start\n\t};\n}\n\nvar controller_bar = core_datasetController.extend({\n\n\tdataElementType: elements.Rectangle,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderSkipped',\n\t\t'borderWidth',\n\t\t'barPercentage',\n\t\t'barThickness',\n\t\t'categoryPercentage',\n\t\t'maxBarThickness',\n\t\t'minBarLength'\n\t],\n\n\tinitialize: function() {\n\t\tvar me = this;\n\t\tvar meta, scaleOpts;\n\n\t\tcore_datasetController.prototype.initialize.apply(me, arguments);\n\n\t\tmeta = me.getMeta();\n\t\tmeta.stack = me.getDataset().stack;\n\t\tmeta.bar = true;\n\n\t\tscaleOpts = me._getIndexScale().options;\n\t\tdeprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');\n\t\tdeprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');\n\t\tdeprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');\n\t\tdeprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');\n\t\tdeprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar rects = me.getMeta().data;\n\t\tvar i, ilen;\n\n\t\tme._ruler = me.getRuler();\n\n\t\tfor (i = 0, ilen = rects.length; i < ilen; ++i) {\n\t\t\tme.updateElement(rects[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(rectangle, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar dataset = me.getDataset();\n\t\tvar options = me._resolveDataElementOptions(rectangle, index);\n\n\t\trectangle._xScale = me.getScaleForId(meta.xAxisID);\n\t\trectangle._yScale = me.getScaleForId(meta.yAxisID);\n\t\trectangle._datasetIndex = me.index;\n\t\trectangle._index = index;\n\t\trectangle._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderSkipped: options.borderSkipped,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\tdatasetLabel: dataset.label,\n\t\t\tlabel: me.chart.data.labels[index]\n\t\t};\n\n\t\tif (helpers$1.isArray(dataset.data[index])) {\n\t\t\trectangle._model.borderSkipped = null;\n\t\t}\n\n\t\tme._updateElementGeometry(rectangle, index, reset, options);\n\n\t\trectangle.pivot();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateElementGeometry: function(rectangle, index, reset, options) {\n\t\tvar me = this;\n\t\tvar model = rectangle._model;\n\t\tvar vscale = me._getValueScale();\n\t\tvar base = vscale.getBasePixel();\n\t\tvar horizontal = vscale.isHorizontal();\n\t\tvar ruler = me._ruler || me.getRuler();\n\t\tvar vpixels = me.calculateBarValuePixels(me.index, index, options);\n\t\tvar ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);\n\n\t\tmodel.horizontal = horizontal;\n\t\tmodel.base = reset ? base : vpixels.base;\n\t\tmodel.x = horizontal ? reset ? base : vpixels.head : ipixels.center;\n\t\tmodel.y = horizontal ? ipixels.center : reset ? base : vpixels.head;\n\t\tmodel.height = horizontal ? ipixels.size : undefined;\n\t\tmodel.width = horizontal ? undefined : ipixels.size;\n\t},\n\n\t/**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n\t_getStacks: function(last) {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar metasets = scale._getMatchingVisibleMetas(me._type);\n\t\tvar stacked = scale.options.stacked;\n\t\tvar ilen = metasets.length;\n\t\tvar stacks = [];\n\t\tvar i, meta;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = metasets[i];\n\t\t\t// stacked   | meta.stack\n\t\t\t//           | found | not found | undefined\n\t\t\t// false     |   x   |     x     |     x\n\t\t\t// true      |       |     x     |\n\t\t\t// undefined |       |     x     |     x\n\t\t\tif (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n\t\t\t\tstacks.push(meta.stack);\n\t\t\t}\n\t\t\tif (meta.index === last) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn stacks;\n\t},\n\n\t/**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n\tgetStackCount: function() {\n\t\treturn this._getStacks().length;\n\t},\n\n\t/**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n\t * @returns {number} The stack index\n\t * @private\n\t */\n\tgetStackIndex: function(datasetIndex, name) {\n\t\tvar stacks = this._getStacks(datasetIndex);\n\t\tvar index = (name !== undefined)\n\t\t\t? stacks.indexOf(name)\n\t\t\t: -1; // indexOf returns -1 if element is not present\n\n\t\treturn (index === -1)\n\t\t\t? stacks.length - 1\n\t\t\t: index;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetRuler: function() {\n\t\tvar me = this;\n\t\tvar scale = me._getIndexScale();\n\t\tvar pixels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {\n\t\t\tpixels.push(scale.getPixelForValue(null, i, me.index));\n\t\t}\n\n\t\treturn {\n\t\t\tpixels: pixels,\n\t\t\tstart: scale._startPixel,\n\t\t\tend: scale._endPixel,\n\t\t\tstackCount: me.getStackCount(),\n\t\t\tscale: scale\n\t\t};\n\t},\n\n\t/**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n\tcalculateBarValuePixels: function(datasetIndex, index, options) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar isHorizontal = scale.isHorizontal();\n\t\tvar datasets = chart.data.datasets;\n\t\tvar metasets = scale._getMatchingVisibleMetas(me._type);\n\t\tvar value = scale._parseValue(datasets[datasetIndex].data[index]);\n\t\tvar minBarLength = options.minBarLength;\n\t\tvar stacked = scale.options.stacked;\n\t\tvar stack = me.getMeta().stack;\n\t\tvar start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;\n\t\tvar length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;\n\t\tvar ilen = metasets.length;\n\t\tvar i, imeta, ivalue, base, head, size, stackLength;\n\n\t\tif (stacked || (stacked === undefined && stack !== undefined)) {\n\t\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\t\timeta = metasets[i];\n\n\t\t\t\tif (imeta.index === datasetIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (imeta.stack === stack) {\n\t\t\t\t\tstackLength = scale._parseValue(datasets[imeta.index].data[index]);\n\t\t\t\t\tivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;\n\n\t\t\t\t\tif ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {\n\t\t\t\t\t\tstart += ivalue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbase = scale.getPixelForValue(start);\n\t\thead = scale.getPixelForValue(start + length);\n\t\tsize = head - base;\n\n\t\tif (minBarLength !== undefined && Math.abs(size) < minBarLength) {\n\t\t\tsize = minBarLength;\n\t\t\tif (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {\n\t\t\t\thead = base - minBarLength;\n\t\t\t} else {\n\t\t\t\thead = base + minBarLength;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsize: size,\n\t\t\tbase: base,\n\t\t\thead: head,\n\t\t\tcenter: head + size / 2\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\tcalculateBarIndexPixels: function(datasetIndex, index, ruler, options) {\n\t\tvar me = this;\n\t\tvar range = options.barThickness === 'flex'\n\t\t\t? computeFlexCategoryTraits(index, ruler, options)\n\t\t\t: computeFitCategoryTraits(index, ruler, options);\n\n\t\tvar stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);\n\t\tvar center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n\t\tvar size = Math.min(\n\t\t\tvalueOrDefault$3(options.maxBarThickness, Infinity),\n\t\t\trange.chunk * range.ratio);\n\n\t\treturn {\n\t\t\tbase: center - size / 2,\n\t\t\thead: center + size / 2,\n\t\t\tcenter: center,\n\t\t\tsize: size\n\t\t};\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar scale = me._getValueScale();\n\t\tvar rects = me.getMeta().data;\n\t\tvar dataset = me.getDataset();\n\t\tvar ilen = rects.length;\n\t\tvar i = 0;\n\n\t\thelpers$1.canvas.clipArea(chart.ctx, chart.chartArea);\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tvar val = scale._parseValue(dataset.data[i]);\n\t\t\tif (!isNaN(val.min) && !isNaN(val.max)) {\n\t\t\t\trects[i].draw();\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function() {\n\t\tvar me = this;\n\t\tvar values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));\n\t\tvar indexOpts = me._getIndexScale().options;\n\t\tvar valueOpts = me._getValueScale().options;\n\n\t\tvalues.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);\n\t\tvalues.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);\n\t\tvalues.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);\n\t\tvalues.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);\n\t\tvalues.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);\n\n\t\treturn values;\n\t}\n\n});\n\nvar valueOrDefault$4 = helpers$1.valueOrDefault;\nvar resolve$1 = helpers$1.options.resolve;\n\ncore_defaults._set('bubble', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear', // bubble should probably use a linear scale by default\n\t\t\tposition: 'bottom',\n\t\t\tid: 'x-axis-0' // need an ID so datasets can reference the scale\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\t// Title doesn't make sense for scatter since we format the data as a point\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\tvar datasetLabel = data.datasets[item.datasetIndex].label || '';\n\t\t\t\tvar dataPoint = data.datasets[item.datasetIndex].data[item.index];\n\t\t\t\treturn datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_bubble = core_datasetController.extend({\n\t/**\n\t * @protected\n\t */\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t\t'hoverRadius',\n\t\t'hitRadius',\n\t\t'pointStyle',\n\t\t'rotation'\n\t],\n\n\t/**\n\t * @protected\n\t */\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data;\n\n\t\t// Update Points\n\t\thelpers$1.each(points, function(point, index) {\n\t\t\tme.updateElement(point, index, reset);\n\t\t});\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar xScale = me.getScaleForId(meta.xAxisID);\n\t\tvar yScale = me.getScaleForId(meta.yAxisID);\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\t\tvar data = me.getDataset().data[index];\n\t\tvar dsIndex = me.index;\n\n\t\tvar x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);\n\t\tvar y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);\n\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = dsIndex;\n\t\tpoint._index = index;\n\t\tpoint._model = {\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\thitRadius: options.hitRadius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tradius: reset ? 0 : options.radius,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t};\n\n\t\tpoint.pivot();\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = options.radius + options.hoverRadius;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDataElementOptions: function(point, index) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar custom = point.custom || {};\n\t\tvar data = dataset.data[index] || {};\n\t\tvar values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\t// In case values were cached (and thus frozen), we need to clone the values\n\t\tif (me._cachedDataOpts === values) {\n\t\t\tvalues = helpers$1.extend({}, values);\n\t\t}\n\n\t\t// Custom radius resolution\n\t\tvalues.radius = resolve$1([\n\t\t\tcustom.radius,\n\t\t\tdata.r,\n\t\t\tme._config.radius,\n\t\t\tchart.options.elements.point.radius\n\t\t], context, index);\n\n\t\treturn values;\n\t}\n});\n\nvar valueOrDefault$5 = helpers$1.valueOrDefault;\n\nvar PI$1 = Math.PI;\nvar DOUBLE_PI$1 = PI$1 * 2;\nvar HALF_PI$1 = PI$1 / 2;\n\ncore_defaults._set('doughnut', {\n\tanimation: {\n\t\t// Boolean - Whether we animate the rotation of the Doughnut\n\t\tanimateRotate: true,\n\t\t// Boolean - Whether we animate scaling the Doughnut from the centre\n\t\tanimateScale: false\n\t},\n\thover: {\n\t\tmode: 'single'\n\t},\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\t\tif (datasets.length) {\n\t\t\tfor (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {\n\t\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\t\tlistItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\tlistItem.appendChild(document.createTextNode(labels[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar style = meta.controller.getStyle(i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\t\thidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t// toggle visibility of index if exists\n\t\t\t\tif (meta.data[index]) {\n\t\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// The percentage of the chart that we cut out of the middle.\n\tcutoutPercentage: 50,\n\n\t// The rotation of the chart, where the first data arc begins.\n\trotation: -HALF_PI$1,\n\n\t// The total circumference of the chart.\n\tcircumference: DOUBLE_PI$1,\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar dataLabel = data.labels[tooltipItem.index];\n\t\t\t\tvar value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n\t\t\t\tif (helpers$1.isArray(dataLabel)) {\n\t\t\t\t\t// show value on first line of multiline label\n\t\t\t\t\t// need to clone because we are changing the value\n\t\t\t\t\tdataLabel = dataLabel.slice();\n\t\t\t\t\tdataLabel[0] += value;\n\t\t\t\t} else {\n\t\t\t\t\tdataLabel += value;\n\t\t\t\t}\n\n\t\t\t\treturn dataLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_doughnut = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'borderAlign',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t],\n\n\t// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly\n\tgetRingIndex: function(datasetIndex) {\n\t\tvar ringIndex = 0;\n\n\t\tfor (var j = 0; j < datasetIndex; ++j) {\n\t\t\tif (this.chart.isDatasetVisible(j)) {\n\t\t\t\t++ringIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn ringIndex;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar ratioX = 1;\n\t\tvar ratioY = 1;\n\t\tvar offsetX = 0;\n\t\tvar offsetY = 0;\n\t\tvar meta = me.getMeta();\n\t\tvar arcs = meta.data;\n\t\tvar cutout = opts.cutoutPercentage / 100 || 0;\n\t\tvar circumference = opts.circumference;\n\t\tvar chartWeight = me._getRingWeight(me.index);\n\t\tvar maxWidth, maxHeight, i, ilen;\n\n\t\t// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n\t\tif (circumference < DOUBLE_PI$1) {\n\t\t\tvar startAngle = opts.rotation % DOUBLE_PI$1;\n\t\t\tstartAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;\n\t\t\tvar endAngle = startAngle + circumference;\n\t\t\tvar startX = Math.cos(startAngle);\n\t\t\tvar startY = Math.sin(startAngle);\n\t\t\tvar endX = Math.cos(endAngle);\n\t\t\tvar endY = Math.sin(endAngle);\n\t\t\tvar contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;\n\t\t\tvar contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;\n\t\t\tvar contains180 = startAngle === -PI$1 || endAngle >= PI$1;\n\t\t\tvar contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;\n\t\t\tvar minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);\n\t\t\tvar minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);\n\t\t\tvar maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);\n\t\t\tvar maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);\n\t\t\tratioX = (maxX - minX) / 2;\n\t\t\tratioY = (maxY - minY) / 2;\n\t\t\toffsetX = -(maxX + minX) / 2;\n\t\t\toffsetY = -(maxY + minY) / 2;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveDataElementOptions(arcs[i], i);\n\t\t}\n\n\t\tchart.borderWidth = me.getMaxBorderWidth();\n\t\tmaxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;\n\t\tmaxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;\n\t\tchart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n\t\tchart.innerRadius = Math.max(chart.outerRadius * cutout, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);\n\t\tchart.offsetX = offsetX * chart.outerRadius;\n\t\tchart.offsetY = offsetY * chart.outerRadius;\n\n\t\tmeta.total = me.calculateTotal();\n\n\t\tme.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);\n\t\tme.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar centerX = (chartArea.left + chartArea.right) / 2;\n\t\tvar centerY = (chartArea.top + chartArea.bottom) / 2;\n\t\tvar startAngle = opts.rotation; // non reset case handled later\n\t\tvar endAngle = opts.rotation; // non reset case handled later\n\t\tvar dataset = me.getDataset();\n\t\tvar circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);\n\t\tvar innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;\n\t\tvar outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX + chart.offsetX,\n\t\t\t\ty: centerY + chart.offsetY,\n\t\t\t\tstartAngle: startAngle,\n\t\t\t\tendAngle: endAngle,\n\t\t\t\tcircumference: circumference,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])\n\t\t\t}\n\t\t});\n\n\t\tvar model = arc._model;\n\n\t\t// Set correct angles if not resetting\n\t\tif (!reset || !animationOpts.animateRotate) {\n\t\t\tif (index === 0) {\n\t\t\t\tmodel.startAngle = opts.rotation;\n\t\t\t} else {\n\t\t\t\tmodel.startAngle = me.getMeta().data[index - 1]._model.endAngle;\n\t\t\t}\n\n\t\t\tmodel.endAngle = model.startAngle + model.circumference;\n\t\t}\n\n\t\tarc.pivot();\n\t},\n\n\tcalculateTotal: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar total = 0;\n\t\tvar value;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tvalue = dataset.data[index];\n\t\t\tif (!isNaN(value) && !element.hidden) {\n\t\t\t\ttotal += Math.abs(value);\n\t\t\t}\n\t\t});\n\n\t\t/* if (total === 0) {\n\t\t\ttotal = NaN;\n\t\t}*/\n\n\t\treturn total;\n\t},\n\n\tcalculateCircumference: function(value) {\n\t\tvar total = this.getMeta().total;\n\t\tif (total > 0 && !isNaN(value)) {\n\t\t\treturn DOUBLE_PI$1 * (Math.abs(value) / total);\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// gets the max border or hover width to properly scale pie charts\n\tgetMaxBorderWidth: function(arcs) {\n\t\tvar me = this;\n\t\tvar max = 0;\n\t\tvar chart = me.chart;\n\t\tvar i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;\n\n\t\tif (!arcs) {\n\t\t\t// Find the outmost visible dataset\n\t\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\t\tarcs = meta.data;\n\t\t\t\t\tif (i !== me.index) {\n\t\t\t\t\t\tcontroller = meta.controller;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!arcs) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarc = arcs[i];\n\t\t\tif (controller) {\n\t\t\t\tcontroller._configure();\n\t\t\t\toptions = controller._resolveDataElementOptions(arc, i);\n\t\t\t} else {\n\t\t\t\toptions = arc._options;\n\t\t\t}\n\t\t\tif (options.borderAlign !== 'inner') {\n\t\t\t\tborderWidth = options.borderWidth;\n\t\t\t\thoverWidth = options.hoverBorderWidth;\n\n\t\t\t\tmax = borderWidth > max ? borderWidth : max;\n\t\t\t\tmax = hoverWidth > max ? hoverWidth : max;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n\t_getRingWeightOffset: function(datasetIndex) {\n\t\tvar ringWeightOffset = 0;\n\n\t\tfor (var i = 0; i < datasetIndex; ++i) {\n\t\t\tif (this.chart.isDatasetVisible(i)) {\n\t\t\t\tringWeightOffset += this._getRingWeight(i);\n\t\t\t}\n\t\t}\n\n\t\treturn ringWeightOffset;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getRingWeight: function(dataSetIndex) {\n\t\treturn Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);\n\t},\n\n\t/**\n\t * Returns the sum of all visibile data set weights.  This value can be 0.\n\t * @private\n\t */\n\t_getVisibleDatasetWeightTotal: function() {\n\t\treturn this._getRingWeightOffset(this.chart.data.datasets.length);\n\t}\n});\n\ncore_defaults._set('horizontalBar', {\n\thover: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tposition: 'bottom'\n\t\t}],\n\n\t\tyAxes: [{\n\t\t\ttype: 'category',\n\t\t\tposition: 'left',\n\t\t\toffset: true,\n\t\t\tgridLines: {\n\t\t\t\toffsetGridLines: true\n\t\t\t}\n\t\t}]\n\t},\n\n\telements: {\n\t\trectangle: {\n\t\t\tborderSkipped: 'left'\n\t\t}\n\t},\n\n\ttooltips: {\n\t\tmode: 'index',\n\t\taxis: 'y'\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\thorizontalBar: {\n\t\t\tcategoryPercentage: 0.8,\n\t\t\tbarPercentage: 0.9\n\t\t}\n\t}\n});\n\nvar controller_horizontalBar = controller_bar.extend({\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.getMeta().xAxisID;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.getMeta().yAxisID;\n\t}\n});\n\nvar valueOrDefault$6 = helpers$1.valueOrDefault;\nvar resolve$2 = helpers$1.options.resolve;\nvar isPointInArea = helpers$1.canvas._isPointInArea;\n\ncore_defaults._set('line', {\n\tshowLines: true,\n\tspanGaps: false,\n\n\thover: {\n\t\tmode: 'label'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\ttype: 'category',\n\t\t\tid: 'x-axis-0'\n\t\t}],\n\t\tyAxes: [{\n\t\t\ttype: 'linear',\n\t\t\tid: 'y-axis-0'\n\t\t}]\n\t}\n});\n\nfunction scaleClip(scale, halfBorderWidth) {\n\tvar tickOpts = scale && scale.options.ticks || {};\n\tvar reverse = tickOpts.reverse;\n\tvar min = tickOpts.min === undefined ? halfBorderWidth : 0;\n\tvar max = tickOpts.max === undefined ? halfBorderWidth : 0;\n\treturn {\n\t\tstart: reverse ? max : min,\n\t\tend: reverse ? min : max\n\t};\n}\n\nfunction defaultClip(xScale, yScale, borderWidth) {\n\tvar halfBorderWidth = borderWidth / 2;\n\tvar x = scaleClip(xScale, halfBorderWidth);\n\tvar y = scaleClip(yScale, halfBorderWidth);\n\n\treturn {\n\t\ttop: y.end,\n\t\tright: x.end,\n\t\tbottom: y.start,\n\t\tleft: x.start\n\t};\n}\n\nfunction toClip(value) {\n\tvar t, r, b, l;\n\n\tif (helpers$1.isObject(value)) {\n\t\tt = value.top;\n\t\tr = value.right;\n\t\tb = value.bottom;\n\t\tl = value.left;\n\t} else {\n\t\tt = r = b = l = value;\n\t}\n\n\treturn {\n\t\ttop: t,\n\t\tright: r,\n\t\tbottom: b,\n\t\tleft: l\n\t};\n}\n\n\nvar controller_line = core_datasetController.extend({\n\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\t/**\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderCapStyle',\n\t\t'borderColor',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'borderWidth',\n\t\t'cubicInterpolationMode',\n\t\t'fill'\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: {\n\t\tbackgroundColor: 'pointBackgroundColor',\n\t\tborderColor: 'pointBorderColor',\n\t\tborderWidth: 'pointBorderWidth',\n\t\thitRadius: 'pointHitRadius',\n\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\thoverRadius: 'pointHoverRadius',\n\t\tpointStyle: 'pointStyle',\n\t\tradius: 'pointRadius',\n\t\trotation: 'pointRotation'\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar options = me.chart.options;\n\t\tvar config = me._config;\n\t\tvar showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);\n\t\tvar i, ilen;\n\n\t\tme._xScale = me.getScaleForId(meta.xAxisID);\n\t\tme._yScale = me.getScaleForId(meta.yAxisID);\n\n\t\t// Update Line\n\t\tif (showLine) {\n\t\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\t\tif (config.tension !== undefined && config.lineTension === undefined) {\n\t\t\t\tconfig.lineTension = config.tension;\n\t\t\t}\n\n\t\t\t// Utility\n\t\t\tline._scale = me._yScale;\n\t\t\tline._datasetIndex = me.index;\n\t\t\t// Data\n\t\t\tline._children = points;\n\t\t\t// Model\n\t\t\tline._model = me._resolveDatasetElementOptions(line);\n\n\t\t\tline.pivot();\n\t\t}\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\tif (showLine && line._model.tension !== 0) {\n\t\t\tme.updateBezierControlPoints();\n\t\t}\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar datasetIndex = me.index;\n\t\tvar value = dataset.data[index];\n\t\tvar xScale = me._xScale;\n\t\tvar yScale = me._yScale;\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar x, y;\n\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\n\t\tx = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);\n\t\ty = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);\n\n\t\t// Utility\n\t\tpoint._xScale = xScale;\n\t\tpoint._yScale = yScale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = datasetIndex;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x,\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),\n\t\t\tsteppedLine: lineModel ? lineModel.steppedLine : false,\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function(element) {\n\t\tvar me = this;\n\t\tvar config = me._config;\n\t\tvar custom = element.custom || {};\n\t\tvar options = me.chart.options;\n\t\tvar lineOptions = options.elements.line;\n\t\tvar values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);\n\n\t\t// The default behavior of lines is to break at null values, according\n\t\t// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158\n\t\t// This option gives lines the ability to span gaps\n\t\tvalues.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);\n\t\tvalues.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);\n\t\tvalues.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));\n\n\t\treturn values;\n\t},\n\n\tcalculatePointY: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar yScale = me._yScale;\n\t\tvar sumPos = 0;\n\t\tvar sumNeg = 0;\n\t\tvar i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;\n\n\t\tif (yScale.options.stacked) {\n\t\t\trightValue = +yScale.getRightValue(value);\n\t\t\tmetasets = chart._getSortedVisibleDatasetMetas();\n\t\t\tilen = metasets.length;\n\n\t\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\t\tdsMeta = metasets[i];\n\t\t\t\tif (dsMeta.index === datasetIndex) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tds = chart.data.datasets[dsMeta.index];\n\t\t\t\tif (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {\n\t\t\t\t\tstackedRightValue = +yScale.getRightValue(ds.data[index]);\n\t\t\t\t\tif (stackedRightValue < 0) {\n\t\t\t\t\t\tsumNeg += stackedRightValue || 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsumPos += stackedRightValue || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rightValue < 0) {\n\t\t\t\treturn yScale.getPixelForValue(sumNeg + rightValue);\n\t\t\t}\n\t\t\treturn yScale.getPixelForValue(sumPos + rightValue);\n\t\t}\n\t\treturn yScale.getPixelForValue(value);\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar lineModel = meta.dataset._model;\n\t\tvar area = chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (lineModel.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tif (lineModel.cubicInterpolationMode === 'monotone') {\n\t\t\thelpers$1.splineCurveMonotone(points);\n\t\t} else {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\t\thelpers$1.previousItem(points, i)._model,\n\t\t\t\t\tmodel,\n\t\t\t\t\thelpers$1.nextItem(points, i)._model,\n\t\t\t\t\tlineModel.tension\n\t\t\t\t);\n\t\t\t\tmodel.controlPointPreviousX = controlPoints.previous.x;\n\t\t\t\tmodel.controlPointPreviousY = controlPoints.previous.y;\n\t\t\t\tmodel.controlPointNextX = controlPoints.next.x;\n\t\t\t\tmodel.controlPointNextY = controlPoints.next.y;\n\t\t\t}\n\t\t}\n\n\t\tif (chart.options.elements.line.capBezierPoints) {\n\t\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\t\tmodel = points[i]._model;\n\t\t\t\tif (isPointInArea(model, area)) {\n\t\t\t\t\tif (i > 0 && isPointInArea(points[i - 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t\tif (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {\n\t\t\t\t\t\tmodel.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);\n\t\t\t\t\t\tmodel.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar meta = me.getMeta();\n\t\tvar points = meta.data || [];\n\t\tvar area = chart.chartArea;\n\t\tvar canvas = chart.canvas;\n\t\tvar i = 0;\n\t\tvar ilen = points.length;\n\t\tvar clip;\n\n\t\tif (me._showLine) {\n\t\t\tclip = meta.dataset._model.clip;\n\n\t\t\thelpers$1.canvas.clipArea(chart.ctx, {\n\t\t\t\tleft: clip.left === false ? 0 : area.left - clip.left,\n\t\t\t\tright: clip.right === false ? canvas.width : area.right + clip.right,\n\t\t\t\ttop: clip.top === false ? 0 : area.top - clip.top,\n\t\t\t\tbottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom\n\t\t\t});\n\n\t\t\tmeta.dataset.draw();\n\n\t\t\thelpers$1.canvas.unclipArea(chart.ctx);\n\t\t}\n\n\t\t// Draw the points\n\t\tfor (; i < ilen; ++i) {\n\t\t\tpoints[i].draw(area);\n\t\t}\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$6(options.hoverRadius, options.radius);\n\t},\n});\n\nvar resolve$3 = helpers$1.options.resolve;\n\ncore_defaults._set('polarArea', {\n\tscale: {\n\t\ttype: 'radialLinear',\n\t\tangleLines: {\n\t\t\tdisplay: false\n\t\t},\n\t\tgridLines: {\n\t\t\tcircular: true\n\t\t},\n\t\tpointLabels: {\n\t\t\tdisplay: false\n\t\t},\n\t\tticks: {\n\t\t\tbeginAtZero: true\n\t\t}\n\t},\n\n\t// Boolean - Whether to animate the rotation of the chart\n\tanimation: {\n\t\tanimateRotate: true,\n\t\tanimateScale: true\n\t},\n\n\tstartAngle: -0.5 * Math.PI,\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar data = chart.data;\n\t\tvar datasets = data.datasets;\n\t\tvar labels = data.labels;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\t\tif (datasets.length) {\n\t\t\tfor (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {\n\t\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\t\tlistItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];\n\t\t\t\tif (labels[i]) {\n\t\t\t\t\tlistItem.appendChild(document.createTextNode(labels[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t},\n\tlegend: {\n\t\tlabels: {\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar data = chart.data;\n\t\t\t\tif (data.labels.length && data.datasets.length) {\n\t\t\t\t\treturn data.labels.map(function(label, i) {\n\t\t\t\t\t\tvar meta = chart.getDatasetMeta(0);\n\t\t\t\t\t\tvar style = meta.controller.getStyle(i);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\t\thidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n\t\t\t\t\t\t\t// Extra data used for toggling the correct item\n\t\t\t\t\t\t\tindex: i\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.index;\n\t\t\tvar chart = this.chart;\n\t\t\tvar i, ilen, meta;\n\n\t\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tmeta.data[index].hidden = !meta.data[index].hidden;\n\t\t\t}\n\n\t\t\tchart.update();\n\t\t}\n\t},\n\n\t// Need to override these to give a nice default\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';\n\t\t\t},\n\t\t\tlabel: function(item, data) {\n\t\t\t\treturn data.labels[item.index] + ': ' + item.yLabel;\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar controller_polarArea = core_datasetController.extend({\n\n\tdataElementType: elements.Arc,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderColor',\n\t\t'borderWidth',\n\t\t'borderAlign',\n\t\t'hoverBackgroundColor',\n\t\t'hoverBorderColor',\n\t\t'hoverBorderWidth',\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\t\tvar start = me.chart.options.startAngle || 0;\n\t\tvar starts = me._starts = [];\n\t\tvar angles = me._angles = [];\n\t\tvar arcs = meta.data;\n\t\tvar i, ilen, angle;\n\n\t\tme._updateRadius();\n\n\t\tmeta.count = me.countVisibleElements();\n\n\t\tfor (i = 0, ilen = dataset.data.length; i < ilen; i++) {\n\t\t\tstarts[i] = start;\n\t\t\tangle = me._computeAngle(i);\n\t\t\tangles[i] = angle;\n\t\t\tstart += angle;\n\t\t}\n\n\t\tfor (i = 0, ilen = arcs.length; i < ilen; ++i) {\n\t\t\tarcs[i]._options = me._resolveDataElementOptions(arcs[i], i);\n\t\t\tme.updateElement(arcs[i], i, reset);\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_updateRadius: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar chartArea = chart.chartArea;\n\t\tvar opts = chart.options;\n\t\tvar minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n\t\tchart.outerRadius = Math.max(minSize / 2, 0);\n\t\tchart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n\t\tchart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();\n\n\t\tme.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);\n\t\tme.innerRadius = me.outerRadius - chart.radiusLength;\n\t},\n\n\tupdateElement: function(arc, index, reset) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar dataset = me.getDataset();\n\t\tvar opts = chart.options;\n\t\tvar animationOpts = opts.animation;\n\t\tvar scale = chart.scale;\n\t\tvar labels = chart.data.labels;\n\n\t\tvar centerX = scale.xCenter;\n\t\tvar centerY = scale.yCenter;\n\n\t\t// var negHalfPI = -0.5 * Math.PI;\n\t\tvar datasetStartAngle = opts.startAngle;\n\t\tvar distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar startAngle = me._starts[index];\n\t\tvar endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);\n\n\t\tvar resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);\n\t\tvar options = arc._options || {};\n\n\t\thelpers$1.extend(arc, {\n\t\t\t// Utility\n\t\t\t_datasetIndex: me.index,\n\t\t\t_index: index,\n\t\t\t_scale: scale,\n\n\t\t\t// Desired view properties\n\t\t\t_model: {\n\t\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\t\tborderColor: options.borderColor,\n\t\t\t\tborderWidth: options.borderWidth,\n\t\t\t\tborderAlign: options.borderAlign,\n\t\t\t\tx: centerX,\n\t\t\t\ty: centerY,\n\t\t\t\tinnerRadius: 0,\n\t\t\t\touterRadius: reset ? resetRadius : distance,\n\t\t\t\tstartAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,\n\t\t\t\tendAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,\n\t\t\t\tlabel: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])\n\t\t\t}\n\t\t});\n\n\t\tarc.pivot();\n\t},\n\n\tcountVisibleElements: function() {\n\t\tvar dataset = this.getDataset();\n\t\tvar meta = this.getMeta();\n\t\tvar count = 0;\n\n\t\thelpers$1.each(meta.data, function(element, index) {\n\t\t\tif (!isNaN(dataset.data[index]) && !element.hidden) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\treturn count;\n\t},\n\n\t/**\n\t * @protected\n\t */\n\tsetHoverStyle: function(arc) {\n\t\tvar model = arc._model;\n\t\tvar options = arc._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\t\tvar valueOrDefault = helpers$1.valueOrDefault;\n\n\t\tarc.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeAngle: function(index) {\n\t\tvar me = this;\n\t\tvar count = this.getMeta().count;\n\t\tvar dataset = me.getDataset();\n\t\tvar meta = me.getMeta();\n\n\t\tif (isNaN(dataset.data[index]) || meta.data[index].hidden) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Scriptable options\n\t\tvar context = {\n\t\t\tchart: me.chart,\n\t\t\tdataIndex: index,\n\t\t\tdataset: dataset,\n\t\t\tdatasetIndex: me.index\n\t\t};\n\n\t\treturn resolve$3([\n\t\t\tme.chart.options.elements.arc.angle,\n\t\t\t(2 * Math.PI) / count\n\t\t], context, index);\n\t}\n});\n\ncore_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));\ncore_defaults._set('pie', {\n\tcutoutPercentage: 0\n});\n\n// Pie charts are Doughnut chart with different defaults\nvar controller_pie = controller_doughnut;\n\nvar valueOrDefault$7 = helpers$1.valueOrDefault;\n\ncore_defaults._set('radar', {\n\tspanGaps: false,\n\tscale: {\n\t\ttype: 'radialLinear'\n\t},\n\telements: {\n\t\tline: {\n\t\t\tfill: 'start',\n\t\t\ttension: 0 // no bezier in radar\n\t\t}\n\t}\n});\n\nvar controller_radar = core_datasetController.extend({\n\tdatasetElementType: elements.Line,\n\n\tdataElementType: elements.Point,\n\n\tlinkScales: helpers$1.noop,\n\n\t/**\n\t * @private\n\t */\n\t_datasetElementOptions: [\n\t\t'backgroundColor',\n\t\t'borderWidth',\n\t\t'borderColor',\n\t\t'borderCapStyle',\n\t\t'borderDash',\n\t\t'borderDashOffset',\n\t\t'borderJoinStyle',\n\t\t'fill'\n\t],\n\n\t/**\n\t * @private\n\t */\n\t_dataElementOptions: {\n\t\tbackgroundColor: 'pointBackgroundColor',\n\t\tborderColor: 'pointBorderColor',\n\t\tborderWidth: 'pointBorderWidth',\n\t\thitRadius: 'pointHitRadius',\n\t\thoverBackgroundColor: 'pointHoverBackgroundColor',\n\t\thoverBorderColor: 'pointHoverBorderColor',\n\t\thoverBorderWidth: 'pointHoverBorderWidth',\n\t\thoverRadius: 'pointHoverRadius',\n\t\tpointStyle: 'pointStyle',\n\t\tradius: 'pointRadius',\n\t\trotation: 'pointRotation'\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getIndexScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getValueScaleId: function() {\n\t\treturn this.chart.scale.id;\n\t},\n\n\tupdate: function(reset) {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar line = meta.dataset;\n\t\tvar points = meta.data || [];\n\t\tvar scale = me.chart.scale;\n\t\tvar config = me._config;\n\t\tvar i, ilen;\n\n\t\t// Compatibility: If the properties are defined with only the old name, use those values\n\t\tif (config.tension !== undefined && config.lineTension === undefined) {\n\t\t\tconfig.lineTension = config.tension;\n\t\t}\n\n\t\t// Utility\n\t\tline._scale = scale;\n\t\tline._datasetIndex = me.index;\n\t\t// Data\n\t\tline._children = points;\n\t\tline._loop = true;\n\t\t// Model\n\t\tline._model = me._resolveDatasetElementOptions(line);\n\n\t\tline.pivot();\n\n\t\t// Update Points\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tme.updateElement(points[i], i, reset);\n\t\t}\n\n\t\t// Update bezier control points\n\t\tme.updateBezierControlPoints();\n\n\t\t// Now pivot the point for animation\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tpoints[i].pivot();\n\t\t}\n\t},\n\n\tupdateElement: function(point, index, reset) {\n\t\tvar me = this;\n\t\tvar custom = point.custom || {};\n\t\tvar dataset = me.getDataset();\n\t\tvar scale = me.chart.scale;\n\t\tvar pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);\n\t\tvar options = me._resolveDataElementOptions(point, index);\n\t\tvar lineModel = me.getMeta().dataset._model;\n\t\tvar x = reset ? scale.xCenter : pointPosition.x;\n\t\tvar y = reset ? scale.yCenter : pointPosition.y;\n\n\t\t// Utility\n\t\tpoint._scale = scale;\n\t\tpoint._options = options;\n\t\tpoint._datasetIndex = me.index;\n\t\tpoint._index = index;\n\n\t\t// Desired view properties\n\t\tpoint._model = {\n\t\t\tx: x, // value not used in dataset scale, but we want a consistent API between scales\n\t\t\ty: y,\n\t\t\tskip: custom.skip || isNaN(x) || isNaN(y),\n\t\t\t// Appearance\n\t\t\tradius: options.radius,\n\t\t\tpointStyle: options.pointStyle,\n\t\t\trotation: options.rotation,\n\t\t\tbackgroundColor: options.backgroundColor,\n\t\t\tborderColor: options.borderColor,\n\t\t\tborderWidth: options.borderWidth,\n\t\t\ttension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),\n\n\t\t\t// Tooltip\n\t\t\thitRadius: options.hitRadius\n\t\t};\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_resolveDatasetElementOptions: function() {\n\t\tvar me = this;\n\t\tvar config = me._config;\n\t\tvar options = me.chart.options;\n\t\tvar values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);\n\n\t\tvalues.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);\n\t\tvalues.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);\n\n\t\treturn values;\n\t},\n\n\tupdateBezierControlPoints: function() {\n\t\tvar me = this;\n\t\tvar meta = me.getMeta();\n\t\tvar area = me.chart.chartArea;\n\t\tvar points = meta.data || [];\n\t\tvar i, ilen, model, controlPoints;\n\n\t\t// Only consider points that are drawn in case the spanGaps option is used\n\t\tif (meta.dataset._model.spanGaps) {\n\t\t\tpoints = points.filter(function(pt) {\n\t\t\t\treturn !pt._model.skip;\n\t\t\t});\n\t\t}\n\n\t\tfunction capControlPoint(pt, min, max) {\n\t\t\treturn Math.max(Math.min(pt, max), min);\n\t\t}\n\n\t\tfor (i = 0, ilen = points.length; i < ilen; ++i) {\n\t\t\tmodel = points[i]._model;\n\t\t\tcontrolPoints = helpers$1.splineCurve(\n\t\t\t\thelpers$1.previousItem(points, i, true)._model,\n\t\t\t\tmodel,\n\t\t\t\thelpers$1.nextItem(points, i, true)._model,\n\t\t\t\tmodel.tension\n\t\t\t);\n\n\t\t\t// Prevent the bezier going outside of the bounds of the graph\n\t\t\tmodel.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);\n\t\t\tmodel.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);\n\t\t\tmodel.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);\n\t\t\tmodel.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);\n\t\t}\n\t},\n\n\tsetHoverStyle: function(point) {\n\t\tvar model = point._model;\n\t\tvar options = point._options;\n\t\tvar getHoverColor = helpers$1.getHoverColor;\n\n\t\tpoint.$previousStyle = {\n\t\t\tbackgroundColor: model.backgroundColor,\n\t\t\tborderColor: model.borderColor,\n\t\t\tborderWidth: model.borderWidth,\n\t\t\tradius: model.radius\n\t\t};\n\n\t\tmodel.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));\n\t\tmodel.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));\n\t\tmodel.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);\n\t\tmodel.radius = valueOrDefault$7(options.hoverRadius, options.radius);\n\t}\n});\n\ncore_defaults._set('scatter', {\n\thover: {\n\t\tmode: 'single'\n\t},\n\n\tscales: {\n\t\txAxes: [{\n\t\t\tid: 'x-axis-1',    // need an ID so datasets can reference the scale\n\t\t\ttype: 'linear',    // scatter should not use a category axis\n\t\t\tposition: 'bottom'\n\t\t}],\n\t\tyAxes: [{\n\t\t\tid: 'y-axis-1',\n\t\t\ttype: 'linear',\n\t\t\tposition: 'left'\n\t\t}]\n\t},\n\n\ttooltips: {\n\t\tcallbacks: {\n\t\t\ttitle: function() {\n\t\t\t\treturn '';     // doesn't make sense for scatter since data are formatted as a point\n\t\t\t},\n\t\t\tlabel: function(item) {\n\t\t\t\treturn '(' + item.xLabel + ', ' + item.yLabel + ')';\n\t\t\t}\n\t\t}\n\t}\n});\n\ncore_defaults._set('global', {\n\tdatasets: {\n\t\tscatter: {\n\t\t\tshowLine: false\n\t\t}\n\t}\n});\n\n// Scatter charts use line controllers\nvar controller_scatter = controller_line;\n\n// NOTE export a map in which the key represents the controller type, not\n// the class, and so must be CamelCase in order to be correctly retrieved\n// by the controller in core.controller.js (`controllers[meta.type]`).\n\nvar controllers = {\n\tbar: controller_bar,\n\tbubble: controller_bubble,\n\tdoughnut: controller_doughnut,\n\thorizontalBar: controller_horizontalBar,\n\tline: controller_line,\n\tpolarArea: controller_polarArea,\n\tpie: controller_pie,\n\tradar: controller_radar,\n\tscatter: controller_scatter\n};\n\n/**\n * Helper function to get relative position for an event\n * @param {Event|IEvent} event - The event to get the position for\n * @param {Chart} chart - The chart\n * @returns {object} the event position\n */\nfunction getRelativePosition(e, chart) {\n\tif (e.native) {\n\t\treturn {\n\t\t\tx: e.x,\n\t\t\ty: e.y\n\t\t};\n\t}\n\n\treturn helpers$1.getRelativePosition(e, chart);\n}\n\n/**\n * Helper function to traverse all of the visible elements in the chart\n * @param {Chart} chart - the chart\n * @param {function} handler - the callback to execute for each visible item\n */\nfunction parseVisibleItems(chart, handler) {\n\tvar metasets = chart._getSortedVisibleDatasetMetas();\n\tvar metadata, i, j, ilen, jlen, element;\n\n\tfor (i = 0, ilen = metasets.length; i < ilen; ++i) {\n\t\tmetadata = metasets[i].data;\n\t\tfor (j = 0, jlen = metadata.length; j < jlen; ++j) {\n\t\t\telement = metadata[j];\n\t\t\tif (!element._view.skip) {\n\t\t\t\thandler(element);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {ChartElement[]} items - elements to filter\n * @param {object} position - the point to be nearest to\n * @return {ChartElement[]} the nearest items\n */\nfunction getIntersectItems(chart, position) {\n\tvar elements = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (element.inRange(position.x, position.y)) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in teh chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {object} position - the point to be nearest to\n * @param {boolean} intersect - if true, only consider items that intersect the position\n * @param {function} distanceMetric - function to provide the distance between points\n * @return {ChartElement[]} the nearest items\n */\nfunction getNearestItems(chart, position, intersect, distanceMetric) {\n\tvar minDistance = Number.POSITIVE_INFINITY;\n\tvar nearestItems = [];\n\n\tparseVisibleItems(chart, function(element) {\n\t\tif (intersect && !element.inRange(position.x, position.y)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar center = element.getCenterPoint();\n\t\tvar distance = distanceMetric(position, center);\n\t\tif (distance < minDistance) {\n\t\t\tnearestItems = [element];\n\t\t\tminDistance = distance;\n\t\t} else if (distance === minDistance) {\n\t\t\t// Can have multiple items at the same distance in which case we sort by size\n\t\t\tnearestItems.push(element);\n\t\t}\n\t});\n\n\treturn nearestItems;\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy\n */\nfunction getDistanceMetricForAxis(axis) {\n\tvar useX = axis.indexOf('x') !== -1;\n\tvar useY = axis.indexOf('y') !== -1;\n\n\treturn function(pt1, pt2) {\n\t\tvar deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n\t\tvar deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n\t\treturn Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\t};\n}\n\nfunction indexMode(chart, e, options) {\n\tvar position = getRelativePosition(e, chart);\n\t// Default axis for index mode is 'x' to match old behaviour\n\toptions.axis = options.axis || 'x';\n\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\tvar elements = [];\n\n\tif (!items.length) {\n\t\treturn [];\n\t}\n\n\tchart._getSortedVisibleDatasetMetas().forEach(function(meta) {\n\t\tvar element = meta.data[items[0]._index];\n\n\t\t// don't count items that are skipped (null data)\n\t\tif (element && !element._view.skip) {\n\t\t\telements.push(element);\n\t\t}\n\t});\n\n\treturn elements;\n}\n\n/**\n * @interface IInteractionOptions\n */\n/**\n * If true, only consider items that intersect the point\n * @name IInterfaceOptions#boolean\n * @type Boolean\n */\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nvar core_interaction = {\n\t// Helper function for different modes\n\tmodes: {\n\t\tsingle: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar elements = [];\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\telements.push(element);\n\t\t\t\t\treturn elements;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn elements.slice(0, 1);\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.label\n\t\t * @deprecated since version 2.4.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tlabel: indexMode,\n\n\t\t/**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tindex: indexMode,\n\n\t\t/**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use during interaction\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tdataset: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\tvar items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);\n\n\t\t\tif (items.length > 0) {\n\t\t\t\titems = chart.getDatasetMeta(items[0]._datasetIndex).data;\n\t\t\t}\n\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * @function Chart.Interaction.modes.x-axis\n\t\t * @deprecated since version 2.4.0. Use index mode and intersect == true\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\t'x-axis': function(chart, e) {\n\t\t\treturn indexMode(chart, e, {intersect: false});\n\t\t},\n\n\t\t/**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tpoint: function(chart, e) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\treturn getIntersectItems(chart, position);\n\t\t},\n\n\t\t/**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tnearest: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\toptions.axis = options.axis || 'xy';\n\t\t\tvar distanceMetric = getDistanceMetricForAxis(options.axis);\n\t\t\treturn getNearestItems(chart, position, options.intersect, distanceMetric);\n\t\t},\n\n\t\t/**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\tx: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inXRange(position.x)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t},\n\n\t\t/**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {IInteractionOptions} options - options to use\n\t\t * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned\n\t\t */\n\t\ty: function(chart, e, options) {\n\t\t\tvar position = getRelativePosition(e, chart);\n\t\t\tvar items = [];\n\t\t\tvar intersectsItem = false;\n\n\t\t\tparseVisibleItems(chart, function(element) {\n\t\t\t\tif (element.inYRange(position.y)) {\n\t\t\t\t\titems.push(element);\n\t\t\t\t}\n\n\t\t\t\tif (element.inRange(position.x, position.y)) {\n\t\t\t\t\tintersectsItem = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If we want to trigger on an intersect and we don't have any items\n\t\t\t// that intersect the position, return nothing\n\t\t\tif (options.intersect && !intersectsItem) {\n\t\t\t\titems = [];\n\t\t\t}\n\t\t\treturn items;\n\t\t}\n\t}\n};\n\nvar extend = helpers$1.extend;\n\nfunction filterByPosition(array, position) {\n\treturn helpers$1.where(array, function(v) {\n\t\treturn v.pos === position;\n\t});\n}\n\nfunction sortByWeight(array, reverse) {\n\treturn array.sort(function(a, b) {\n\t\tvar v0 = reverse ? b : a;\n\t\tvar v1 = reverse ? a : b;\n\t\treturn v0.weight === v1.weight ?\n\t\t\tv0.index - v1.index :\n\t\t\tv0.weight - v1.weight;\n\t});\n}\n\nfunction wrapBoxes(boxes) {\n\tvar layoutBoxes = [];\n\tvar i, ilen, box;\n\n\tfor (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n\t\tbox = boxes[i];\n\t\tlayoutBoxes.push({\n\t\t\tindex: i,\n\t\t\tbox: box,\n\t\t\tpos: box.position,\n\t\t\thorizontal: box.isHorizontal(),\n\t\t\tweight: box.weight\n\t\t});\n\t}\n\treturn layoutBoxes;\n}\n\nfunction setLayoutDims(layouts, params) {\n\tvar i, ilen, layout;\n\tfor (i = 0, ilen = layouts.length; i < ilen; ++i) {\n\t\tlayout = layouts[i];\n\t\t// store width used instead of chartArea.w in fitBoxes\n\t\tlayout.width = layout.horizontal\n\t\t\t? layout.box.fullWidth && params.availableWidth\n\t\t\t: params.vBoxMaxWidth;\n\t\t// store height used instead of chartArea.h in fitBoxes\n\t\tlayout.height = layout.horizontal && params.hBoxMaxHeight;\n\t}\n}\n\nfunction buildLayoutBoxes(boxes) {\n\tvar layoutBoxes = wrapBoxes(boxes);\n\tvar left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n\tvar right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n\tvar top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n\tvar bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n\n\treturn {\n\t\tleftAndTop: left.concat(top),\n\t\trightAndBottom: right.concat(bottom),\n\t\tchartArea: filterByPosition(layoutBoxes, 'chartArea'),\n\t\tvertical: left.concat(right),\n\t\thorizontal: top.concat(bottom)\n\t};\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n\treturn Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateDims(chartArea, params, layout) {\n\tvar box = layout.box;\n\tvar maxPadding = chartArea.maxPadding;\n\tvar newWidth, newHeight;\n\n\tif (layout.size) {\n\t\t// this layout was already counted for, lets first reduce old size\n\t\tchartArea[layout.pos] -= layout.size;\n\t}\n\tlayout.size = layout.horizontal ? box.height : box.width;\n\tchartArea[layout.pos] += layout.size;\n\n\tif (box.getPadding) {\n\t\tvar boxPadding = box.getPadding();\n\t\tmaxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n\t\tmaxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n\t\tmaxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n\t\tmaxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n\t}\n\n\tnewWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');\n\tnewHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');\n\n\tif (newWidth !== chartArea.w || newHeight !== chartArea.h) {\n\t\tchartArea.w = newWidth;\n\t\tchartArea.h = newHeight;\n\n\t\t// return true if chart area changed in layout's direction\n\t\treturn layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;\n\t}\n}\n\nfunction handleMaxPadding(chartArea) {\n\tvar maxPadding = chartArea.maxPadding;\n\n\tfunction updatePos(pos) {\n\t\tvar change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n\t\tchartArea[pos] += change;\n\t\treturn change;\n\t}\n\tchartArea.y += updatePos('top');\n\tchartArea.x += updatePos('left');\n\tupdatePos('right');\n\tupdatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n\tvar maxPadding = chartArea.maxPadding;\n\n\tfunction marginForPositions(positions) {\n\t\tvar margin = {left: 0, top: 0, right: 0, bottom: 0};\n\t\tpositions.forEach(function(pos) {\n\t\t\tmargin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n\t\t});\n\t\treturn margin;\n\t}\n\n\treturn horizontal\n\t\t? marginForPositions(['left', 'right'])\n\t\t: marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params) {\n\tvar refitBoxes = [];\n\tvar i, ilen, layout, box, refit, changed;\n\n\tfor (i = 0, ilen = boxes.length; i < ilen; ++i) {\n\t\tlayout = boxes[i];\n\t\tbox = layout.box;\n\n\t\tbox.update(\n\t\t\tlayout.width || chartArea.w,\n\t\t\tlayout.height || chartArea.h,\n\t\t\tgetMargins(layout.horizontal, chartArea)\n\t\t);\n\t\tif (updateDims(chartArea, params, layout)) {\n\t\t\tchanged = true;\n\t\t\tif (refitBoxes.length) {\n\t\t\t\t// Dimensions changed and there were non full width boxes before this\n\t\t\t\t// -> we have to refit those\n\t\t\t\trefit = true;\n\t\t\t}\n\t\t}\n\t\tif (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case\n\t\t\trefitBoxes.push(layout);\n\t\t}\n\t}\n\n\treturn refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;\n}\n\nfunction placeBoxes(boxes, chartArea, params) {\n\tvar userPadding = params.padding;\n\tvar x = chartArea.x;\n\tvar y = chartArea.y;\n\tvar i, ilen, layout, box;\n\n\tfor (i = 0, ilen = boxes.length; i < ilen; ++i) {\n\t\tlayout = boxes[i];\n\t\tbox = layout.box;\n\t\tif (layout.horizontal) {\n\t\t\tbox.left = box.fullWidth ? userPadding.left : chartArea.left;\n\t\t\tbox.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;\n\t\t\tbox.top = y;\n\t\t\tbox.bottom = y + box.height;\n\t\t\tbox.width = box.right - box.left;\n\t\t\ty = box.bottom;\n\t\t} else {\n\t\t\tbox.left = x;\n\t\t\tbox.right = x + box.width;\n\t\t\tbox.top = chartArea.top;\n\t\t\tbox.bottom = chartArea.top + chartArea.h;\n\t\t\tbox.height = box.bottom - box.top;\n\t\t\tx = box.right;\n\t\t}\n\t}\n\n\tchartArea.x = x;\n\tchartArea.y = y;\n}\n\ncore_defaults._set('global', {\n\tlayout: {\n\t\tpadding: {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0\n\t\t}\n\t}\n});\n\n/**\n * @interface ILayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} getPadding -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nvar core_layouts = {\n\tdefaults: {},\n\n\t/**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {ILayoutItem} item - the item to add to be layed out\n\t */\n\taddBox: function(chart, item) {\n\t\tif (!chart.boxes) {\n\t\t\tchart.boxes = [];\n\t\t}\n\n\t\t// initialize item with default values\n\t\titem.fullWidth = item.fullWidth || false;\n\t\titem.position = item.position || 'top';\n\t\titem.weight = item.weight || 0;\n\t\titem._layers = item._layers || function() {\n\t\t\treturn [{\n\t\t\t\tz: 0,\n\t\t\t\tdraw: function() {\n\t\t\t\t\titem.draw.apply(item, arguments);\n\t\t\t\t}\n\t\t\t}];\n\t\t};\n\n\t\tchart.boxes.push(item);\n\t},\n\n\t/**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {ILayoutItem} layoutItem - the item to remove from the layout\n\t */\n\tremoveBox: function(chart, layoutItem) {\n\t\tvar index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\t\tif (index !== -1) {\n\t\t\tchart.boxes.splice(index, 1);\n\t\t}\n\t},\n\n\t/**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {ILayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n\tconfigure: function(chart, item, options) {\n\t\tvar props = ['fullWidth', 'position', 'weight'];\n\t\tvar ilen = props.length;\n\t\tvar i = 0;\n\t\tvar prop;\n\n\t\tfor (; i < ilen; ++i) {\n\t\t\tprop = props[i];\n\t\t\tif (options.hasOwnProperty(prop)) {\n\t\t\t\titem[prop] = options[prop];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n\t */\n\tupdate: function(chart, width, height) {\n\t\tif (!chart) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar layoutOptions = chart.options.layout || {};\n\t\tvar padding = helpers$1.options.toPadding(layoutOptions.padding);\n\n\t\tvar availableWidth = width - padding.width;\n\t\tvar availableHeight = height - padding.height;\n\t\tvar boxes = buildLayoutBoxes(chart.boxes);\n\t\tvar verticalBoxes = boxes.vertical;\n\t\tvar horizontalBoxes = boxes.horizontal;\n\n\t\t// Essentially we now have any number of boxes on each of the 4 sides.\n\t\t// Our canvas looks like the following.\n\t\t// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n\t\t// B1 is the bottom axis\n\t\t// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n\t\t// These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n\t\t// an error will be thrown.\n\t\t//\n\t\t// |----------------------------------------------------|\n\t\t// |                  T1 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t// |    |    |                 T2                  |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    | C1 |                           | C2 |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    |                                     |    |\n\t\t// | L1 | L2 |           ChartArea (C0)            | R1 |\n\t\t// |    |    |                                     |    |\n\t\t// |    |    |----|                           |----|    |\n\t\t// |    |    | C3 |                           | C4 |    |\n\t\t// |    |----|-------------------------------------|----|\n\t\t// |    |    |                 B1                  |    |\n\t\t// |----------------------------------------------------|\n\t\t// |                  B2 (Full Width)                   |\n\t\t// |----------------------------------------------------|\n\t\t//\n\n\t\tvar params = Object.freeze({\n\t\t\touterWidth: width,\n\t\t\touterHeight: height,\n\t\t\tpadding: padding,\n\t\t\tavailableWidth: availableWidth,\n\t\t\tvBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,\n\t\t\thBoxMaxHeight: availableHeight / 2\n\t\t});\n\t\tvar chartArea = extend({\n\t\t\tmaxPadding: extend({}, padding),\n\t\t\tw: availableWidth,\n\t\t\th: availableHeight,\n\t\t\tx: padding.left,\n\t\t\ty: padding.top\n\t\t}, padding);\n\n\t\tsetLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n\t\t// First fit vertical boxes\n\t\tfitBoxes(verticalBoxes, chartArea, params);\n\n\t\t// Then fit horizontal boxes\n\t\tif (fitBoxes(horizontalBoxes, chartArea, params)) {\n\t\t\t// if the area changed, re-fit vertical boxes\n\t\t\tfitBoxes(verticalBoxes, chartArea, params);\n\t\t}\n\n\t\thandleMaxPadding(chartArea);\n\n\t\t// Finally place the boxes to correct coordinates\n\t\tplaceBoxes(boxes.leftAndTop, chartArea, params);\n\n\t\t// Move to opposite side of chart\n\t\tchartArea.x += chartArea.w;\n\t\tchartArea.y += chartArea.h;\n\n\t\tplaceBoxes(boxes.rightAndBottom, chartArea, params);\n\n\t\tchart.chartArea = {\n\t\t\tleft: chartArea.left,\n\t\t\ttop: chartArea.top,\n\t\t\tright: chartArea.left + chartArea.w,\n\t\t\tbottom: chartArea.top + chartArea.h\n\t\t};\n\n\t\t// Finally update boxes in chartArea (radial scale for example)\n\t\thelpers$1.each(boxes.chartArea, function(layout) {\n\t\t\tvar box = layout.box;\n\t\t\textend(box, chart.chartArea);\n\t\t\tbox.update(chartArea.w, chartArea.h);\n\t\t});\n\t}\n};\n\n/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nvar platform_basic = {\n\tacquireContext: function(item) {\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\treturn item && item.getContext('2d') || null;\n\t}\n};\n\nvar platform_dom = \"/*\\n * DOM element rendering detection\\n * https://davidwalsh.name/detect-node-insertion\\n */\\n@keyframes chartjs-render-animation {\\n\\tfrom { opacity: 0.99; }\\n\\tto { opacity: 1; }\\n}\\n\\n.chartjs-render-monitor {\\n\\tanimation: chartjs-render-animation 0.001s;\\n}\\n\\n/*\\n * DOM element resizing detection\\n * https://github.com/marcj/css-element-queries\\n */\\n.chartjs-size-monitor,\\n.chartjs-size-monitor-expand,\\n.chartjs-size-monitor-shrink {\\n\\tposition: absolute;\\n\\tdirection: ltr;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\toverflow: hidden;\\n\\tpointer-events: none;\\n\\tvisibility: hidden;\\n\\tz-index: -1;\\n}\\n\\n.chartjs-size-monitor-expand > div {\\n\\tposition: absolute;\\n\\twidth: 1000000px;\\n\\theight: 1000000px;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\\n.chartjs-size-monitor-shrink > div {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\theight: 200%;\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n\";\n\nvar platform_dom$1 = /*#__PURE__*/Object.freeze({\n__proto__: null,\n'default': platform_dom\n});\n\nvar stylesheet = getCjsExportFromNamespace(platform_dom$1);\n\nvar EXPANDO_KEY = '$chartjs';\nvar CSS_PREFIX = 'chartjs-';\nvar CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';\nvar CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';\nvar CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';\nvar ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nvar EVENT_TYPES = {\n\ttouchstart: 'mousedown',\n\ttouchmove: 'mousemove',\n\ttouchend: 'mouseup',\n\tpointerenter: 'mouseenter',\n\tpointerdown: 'mousedown',\n\tpointermove: 'mousemove',\n\tpointerup: 'mouseup',\n\tpointerleave: 'mouseout',\n\tpointerout: 'mouseout'\n};\n\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns {number} Size in pixels or undefined if unknown.\n */\nfunction readUsedSize(element, property) {\n\tvar value = helpers$1.getStyle(element, property);\n\tvar matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n\treturn matches ? Number(matches[1]) : undefined;\n}\n\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n */\nfunction initCanvas(canvas, config) {\n\tvar style = canvas.style;\n\n\t// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n\t// returns null or '' if no explicit value has been set to the canvas attribute.\n\tvar renderHeight = canvas.getAttribute('height');\n\tvar renderWidth = canvas.getAttribute('width');\n\n\t// Chart.js modifies some canvas values that we want to restore on destroy\n\tcanvas[EXPANDO_KEY] = {\n\t\tinitial: {\n\t\t\theight: renderHeight,\n\t\t\twidth: renderWidth,\n\t\t\tstyle: {\n\t\t\t\tdisplay: style.display,\n\t\t\t\theight: style.height,\n\t\t\t\twidth: style.width\n\t\t\t}\n\t\t}\n\t};\n\n\t// Force canvas to display as block to avoid extra space caused by inline\n\t// elements, which would interfere with the responsive resize process.\n\t// https://github.com/chartjs/Chart.js/issues/2538\n\tstyle.display = style.display || 'block';\n\n\tif (renderWidth === null || renderWidth === '') {\n\t\tvar displayWidth = readUsedSize(canvas, 'width');\n\t\tif (displayWidth !== undefined) {\n\t\t\tcanvas.width = displayWidth;\n\t\t}\n\t}\n\n\tif (renderHeight === null || renderHeight === '') {\n\t\tif (canvas.style.height === '') {\n\t\t\t// If no explicit render height and style height, let's apply the aspect ratio,\n\t\t\t// which one can be specified by the user but also by charts as default option\n\t\t\t// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n\t\t\tcanvas.height = canvas.width / (config.options.aspectRatio || 2);\n\t\t} else {\n\t\t\tvar displayHeight = readUsedSize(canvas, 'height');\n\t\t\tif (displayWidth !== undefined) {\n\t\t\t\tcanvas.height = displayHeight;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn canvas;\n}\n\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */\nvar supportsEventListenerOptions = (function() {\n\tvar supports = false;\n\ttry {\n\t\tvar options = Object.defineProperty({}, 'passive', {\n\t\t\t// eslint-disable-next-line getter-return\n\t\t\tget: function() {\n\t\t\t\tsupports = true;\n\t\t\t}\n\t\t});\n\t\twindow.addEventListener('e', null, options);\n\t} catch (e) {\n\t\t// continue regardless of error\n\t}\n\treturn supports;\n}());\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nvar eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n\tnode.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(node, type, listener) {\n\tnode.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction createEvent(type, chart, x, y, nativeEvent) {\n\treturn {\n\t\ttype: type,\n\t\tchart: chart,\n\t\tnative: nativeEvent || null,\n\t\tx: x !== undefined ? x : null,\n\t\ty: y !== undefined ? y : null,\n\t};\n}\n\nfunction fromNativeEvent(event, chart) {\n\tvar type = EVENT_TYPES[event.type] || event.type;\n\tvar pos = helpers$1.getRelativePosition(event, chart);\n\treturn createEvent(type, chart, pos.x, pos.y, event);\n}\n\nfunction throttled(fn, thisArg) {\n\tvar ticking = false;\n\tvar args = [];\n\n\treturn function() {\n\t\targs = Array.prototype.slice.call(arguments);\n\t\tthisArg = thisArg || this;\n\n\t\tif (!ticking) {\n\t\t\tticking = true;\n\t\t\thelpers$1.requestAnimFrame.call(window, function() {\n\t\t\t\tticking = false;\n\t\t\t\tfn.apply(thisArg, args);\n\t\t\t});\n\t\t}\n\t};\n}\n\nfunction createDiv(cls) {\n\tvar el = document.createElement('div');\n\tel.className = cls || '';\n\treturn el;\n}\n\n// Implementation based on https://github.com/marcj/css-element-queries\nfunction createResizer(handler) {\n\tvar maxSize = 1000000;\n\n\t// NOTE(SB) Don't use innerHTML because it could be considered unsafe.\n\t// https://github.com/chartjs/Chart.js/issues/5902\n\tvar resizer = createDiv(CSS_SIZE_MONITOR);\n\tvar expand = createDiv(CSS_SIZE_MONITOR + '-expand');\n\tvar shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');\n\n\texpand.appendChild(createDiv());\n\tshrink.appendChild(createDiv());\n\n\tresizer.appendChild(expand);\n\tresizer.appendChild(shrink);\n\tresizer._reset = function() {\n\t\texpand.scrollLeft = maxSize;\n\t\texpand.scrollTop = maxSize;\n\t\tshrink.scrollLeft = maxSize;\n\t\tshrink.scrollTop = maxSize;\n\t};\n\n\tvar onScroll = function() {\n\t\tresizer._reset();\n\t\thandler();\n\t};\n\n\taddListener(expand, 'scroll', onScroll.bind(expand, 'expand'));\n\taddListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));\n\n\treturn resizer;\n}\n\n// https://davidwalsh.name/detect-node-insertion\nfunction watchForRender(node, handler) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\tvar proxy = expando.renderProxy = function(e) {\n\t\tif (e.animationName === CSS_RENDER_ANIMATION) {\n\t\t\thandler();\n\t\t}\n\t};\n\n\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\taddListener(node, type, proxy);\n\t});\n\n\t// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class\n\t// is removed then added back immediately (same animation frame?). Accessing the\n\t// `offsetParent` property will force a reflow and re-evaluate the CSS animation.\n\t// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics\n\t// https://github.com/chartjs/Chart.js/issues/4737\n\texpando.reflow = !!node.offsetParent;\n\n\tnode.classList.add(CSS_RENDER_MONITOR);\n}\n\nfunction unwatchForRender(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar proxy = expando.renderProxy;\n\n\tif (proxy) {\n\t\thelpers$1.each(ANIMATION_START_EVENTS, function(type) {\n\t\t\tremoveListener(node, type, proxy);\n\t\t});\n\n\t\tdelete expando.renderProxy;\n\t}\n\n\tnode.classList.remove(CSS_RENDER_MONITOR);\n}\n\nfunction addResizeListener(node, listener, chart) {\n\tvar expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});\n\n\t// Let's keep track of this added resizer and thus avoid DOM query when removing it.\n\tvar resizer = expando.resizer = createResizer(throttled(function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = chart.options.maintainAspectRatio && node.parentNode;\n\t\t\tvar w = container ? container.clientWidth : 0;\n\t\t\tlistener(createEvent('resize', chart));\n\t\t\tif (container && container.clientWidth < w && chart.canvas) {\n\t\t\t\t// If the container size shrank during chart resize, let's assume\n\t\t\t\t// scrollbar appeared. So we resize again with the scrollbar visible -\n\t\t\t\t// effectively making chart smaller and the scrollbar hidden again.\n\t\t\t\t// Because we are inside `throttled`, and currently `ticking`, scroll\n\t\t\t\t// events are ignored during this whole 2 resize process.\n\t\t\t\t// If we assumed wrong and something else happened, we are resizing\n\t\t\t\t// twice in a frame (potential performance issue)\n\t\t\t\tlistener(createEvent('resize', chart));\n\t\t\t}\n\t\t}\n\t}));\n\n\t// The resizer needs to be attached to the node parent, so we first need to be\n\t// sure that `node` is attached to the DOM before injecting the resizer element.\n\twatchForRender(node, function() {\n\t\tif (expando.resizer) {\n\t\t\tvar container = node.parentNode;\n\t\t\tif (container && container !== resizer.parentNode) {\n\t\t\t\tcontainer.insertBefore(resizer, container.firstChild);\n\t\t\t}\n\n\t\t\t// The container size might have changed, let's reset the resizer state.\n\t\t\tresizer._reset();\n\t\t}\n\t});\n}\n\nfunction removeResizeListener(node) {\n\tvar expando = node[EXPANDO_KEY] || {};\n\tvar resizer = expando.resizer;\n\n\tdelete expando.resizer;\n\tunwatchForRender(node);\n\n\tif (resizer && resizer.parentNode) {\n\t\tresizer.parentNode.removeChild(resizer);\n\t}\n}\n\n/**\n * Injects CSS styles inline if the styles are not already present.\n * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.\n * @param {string} css - the CSS to be injected.\n */\nfunction injectCSS(rootNode, css) {\n\t// https://stackoverflow.com/q/3922139\n\tvar expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});\n\tif (!expando.containsStyles) {\n\t\texpando.containsStyles = true;\n\t\tcss = '/* Chart.js */\\n' + css;\n\t\tvar style = document.createElement('style');\n\t\tstyle.setAttribute('type', 'text/css');\n\t\tstyle.appendChild(document.createTextNode(css));\n\t\trootNode.appendChild(style);\n\t}\n}\n\nvar platform_dom$2 = {\n\t/**\n\t * When `true`, prevents the automatic injection of the stylesheet required to\n\t * correctly detect when the chart is added to the DOM and then resized. This\n\t * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)\n\t * to be manually imported to make this library compatible with any CSP.\n\t * See https://github.com/chartjs/Chart.js/issues/5208\n\t */\n\tdisableCSSInjection: false,\n\n\t/**\n\t * This property holds whether this platform is enabled for the current environment.\n\t * Currently used by platform.js to select the proper implementation.\n\t * @private\n\t */\n\t_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',\n\n\t/**\n\t * Initializes resources that depend on platform options.\n\t * @param {HTMLCanvasElement} canvas - The Canvas element.\n\t * @private\n\t */\n\t_ensureLoaded: function(canvas) {\n\t\tif (!this.disableCSSInjection) {\n\t\t\t// If the canvas is in a shadow DOM, then the styles must also be inserted\n\t\t\t// into the same shadow DOM.\n\t\t\t// https://github.com/chartjs/Chart.js/issues/5763\n\t\t\tvar root = canvas.getRootNode ? canvas.getRootNode() : document;\n\t\t\tvar targetNode = root.host ? root : document.head;\n\t\t\tinjectCSS(targetNode, stylesheet);\n\t\t}\n\t},\n\n\tacquireContext: function(item, config) {\n\t\tif (typeof item === 'string') {\n\t\t\titem = document.getElementById(item);\n\t\t} else if (item.length) {\n\t\t\t// Support for array based queries (such as jQuery)\n\t\t\titem = item[0];\n\t\t}\n\n\t\tif (item && item.canvas) {\n\t\t\t// Support for any object associated to a canvas (including a context2d)\n\t\t\titem = item.canvas;\n\t\t}\n\n\t\t// To prevent canvas fingerprinting, some add-ons undefine the getContext\n\t\t// method, for example: https://github.com/kkapsner/CanvasBlocker\n\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\tvar context = item && item.getContext && item.getContext('2d');\n\n\t\t// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is\n\t\t// inside an iframe or when running in a protected environment. We could guess the\n\t\t// types from their toString() value but let's keep things flexible and assume it's\n\t\t// a sufficient condition if the item has a context2D which has item as `canvas`.\n\t\t// https://github.com/chartjs/Chart.js/issues/3887\n\t\t// https://github.com/chartjs/Chart.js/issues/4102\n\t\t// https://github.com/chartjs/Chart.js/issues/4152\n\t\tif (context && context.canvas === item) {\n\t\t\t// Load platform resources on first chart creation, to make it possible to\n\t\t\t// import the library before setting platform options.\n\t\t\tthis._ensureLoaded(item);\n\t\t\tinitCanvas(item, config);\n\t\t\treturn context;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\treleaseContext: function(context) {\n\t\tvar canvas = context.canvas;\n\t\tif (!canvas[EXPANDO_KEY]) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar initial = canvas[EXPANDO_KEY].initial;\n\t\t['height', 'width'].forEach(function(prop) {\n\t\t\tvar value = initial[prop];\n\t\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\t\tcanvas.removeAttribute(prop);\n\t\t\t} else {\n\t\t\t\tcanvas.setAttribute(prop, value);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(initial.style || {}, function(value, key) {\n\t\t\tcanvas.style[key] = value;\n\t\t});\n\n\t\t// The canvas render size might have been changed (and thus the state stack discarded),\n\t\t// we can't use save() and restore() to restore the initial state. So make sure that at\n\t\t// least the canvas context is reset to the default state by setting the canvas width.\n\t\t// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n\t\t// eslint-disable-next-line no-self-assign\n\t\tcanvas.width = canvas.width;\n\n\t\tdelete canvas[EXPANDO_KEY];\n\t},\n\n\taddEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\taddResizeListener(canvas, listener, chart);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});\n\t\tvar proxies = expando.proxies || (expando.proxies = {});\n\t\tvar proxy = proxies[chart.id + '_' + type] = function(event) {\n\t\t\tlistener(fromNativeEvent(event, chart));\n\t\t};\n\n\t\taddListener(canvas, type, proxy);\n\t},\n\n\tremoveEventListener: function(chart, type, listener) {\n\t\tvar canvas = chart.canvas;\n\t\tif (type === 'resize') {\n\t\t\t// Note: the resize event is not supported on all browsers.\n\t\t\tremoveResizeListener(canvas);\n\t\t\treturn;\n\t\t}\n\n\t\tvar expando = listener[EXPANDO_KEY] || {};\n\t\tvar proxies = expando.proxies || {};\n\t\tvar proxy = proxies[chart.id + '_' + type];\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\tremoveListener(canvas, type, proxy);\n\t}\n};\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use EventTarget.addEventListener instead.\n * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n * @function Chart.helpers.addEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.addEvent = addListener;\n\n/**\n * Provided for backward compatibility, use EventTarget.removeEventListener instead.\n * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n * @function Chart.helpers.removeEvent\n * @deprecated since version 2.7.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.removeEvent = removeListener;\n\n// @TODO Make possible to select another platform at build time.\nvar implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;\n\n/**\n * @namespace Chart.platform\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\n * @since 2.4.0\n */\nvar platform = helpers$1.extend({\n\t/**\n\t * @since 2.7.0\n\t */\n\tinitialize: function() {},\n\n\t/**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {*} item - The native item from which to acquire context (platform specific)\n\t * @param {object} options - The chart options\n\t * @returns {CanvasRenderingContext2D} context2d instance\n\t */\n\tacquireContext: function() {},\n\n\t/**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n\treleaseContext: function() {},\n\n\t/**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link IEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link IEvent} interface) when an event of the specified type occurs.\n\t */\n\taddEventListener: function() {},\n\n\t/**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link IEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n\tremoveEventListener: function() {}\n\n}, implementation);\n\ncore_defaults._set('global', {\n\tplugins: {}\n});\n\n/**\n * The plugin service singleton\n * @namespace Chart.plugins\n * @since 2.1.0\n */\nvar core_plugins = {\n\t/**\n\t * Globally registered plugins.\n\t * @private\n\t */\n\t_plugins: [],\n\n\t/**\n\t * This identifier is used to invalidate the descriptors cache attached to each chart\n\t * when a global plugin is registered or unregistered. In this case, the cache ID is\n\t * incremented and descriptors are regenerated during following API calls.\n\t * @private\n\t */\n\t_cacheId: 0,\n\n\t/**\n\t * Registers the given plugin(s) if not already registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tif (p.indexOf(plugin) === -1) {\n\t\t\t\tp.push(plugin);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Unregisters the given plugin(s) only if registered.\n\t * @param {IPlugin[]|IPlugin} plugins plugin instance(s).\n\t */\n\tunregister: function(plugins) {\n\t\tvar p = this._plugins;\n\t\t([]).concat(plugins).forEach(function(plugin) {\n\t\t\tvar idx = p.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\tp.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Remove all registered plugins.\n\t * @since 2.1.5\n\t */\n\tclear: function() {\n\t\tthis._plugins = [];\n\t\tthis._cacheId++;\n\t},\n\n\t/**\n\t * Returns the number of registered plugins?\n\t * @returns {number}\n\t * @since 2.1.5\n\t */\n\tcount: function() {\n\t\treturn this._plugins.length;\n\t},\n\n\t/**\n\t * Returns all registered plugin instances.\n\t * @returns {IPlugin[]} array of plugin objects.\n\t * @since 2.1.5\n\t */\n\tgetAll: function() {\n\t\treturn this._plugins;\n\t},\n\n\t/**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Array} [args] - Extra arguments to apply to the hook call.\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n\tnotify: function(chart, hook, args) {\n\t\tvar descriptors = this.descriptors(chart);\n\t\tvar ilen = descriptors.length;\n\t\tvar i, descriptor, plugin, params, method;\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tdescriptor = descriptors[i];\n\t\t\tplugin = descriptor.plugin;\n\t\t\tmethod = plugin[hook];\n\t\t\tif (typeof method === 'function') {\n\t\t\t\tparams = [chart].concat(args || []);\n\t\t\t\tparams.push(descriptor.options);\n\t\t\t\tif (method.apply(plugin, params) === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * Returns descriptors of enabled plugins for the given chart.\n\t * @returns {object[]} [{ plugin, options }]\n\t * @private\n\t */\n\tdescriptors: function(chart) {\n\t\tvar cache = chart.$plugins || (chart.$plugins = {});\n\t\tif (cache.id === this._cacheId) {\n\t\t\treturn cache.descriptors;\n\t\t}\n\n\t\tvar plugins = [];\n\t\tvar descriptors = [];\n\t\tvar config = (chart && chart.config) || {};\n\t\tvar options = (config.options && config.options.plugins) || {};\n\n\t\tthis._plugins.concat(config.plugins || []).forEach(function(plugin) {\n\t\t\tvar idx = plugins.indexOf(plugin);\n\t\t\tif (idx !== -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar id = plugin.id;\n\t\t\tvar opts = options[id];\n\t\t\tif (opts === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (opts === true) {\n\t\t\t\topts = helpers$1.clone(core_defaults.global.plugins[id]);\n\t\t\t}\n\n\t\t\tplugins.push(plugin);\n\t\t\tdescriptors.push({\n\t\t\t\tplugin: plugin,\n\t\t\t\toptions: opts || {}\n\t\t\t});\n\t\t});\n\n\t\tcache.descriptors = descriptors;\n\t\tcache.id = this._cacheId;\n\t\treturn descriptors;\n\t},\n\n\t/**\n\t * Invalidates cache for the given chart: descriptors hold a reference on plugin option,\n\t * but in some cases, this reference can be changed by the user when updating options.\n\t * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t * @private\n\t */\n\t_invalidate: function(chart) {\n\t\tdelete chart.$plugins;\n\t}\n};\n\nvar core_scaleService = {\n\t// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then\n\t// use the new chart options to grab the correct scale\n\tconstructors: {},\n\t// Use a registration function so that we can move to an ES6 map when we no longer need to support\n\t// old browsers\n\n\t// Scale config defaults\n\tdefaults: {},\n\tregisterScaleType: function(type, scaleConstructor, scaleDefaults) {\n\t\tthis.constructors[type] = scaleConstructor;\n\t\tthis.defaults[type] = helpers$1.clone(scaleDefaults);\n\t},\n\tgetScaleConstructor: function(type) {\n\t\treturn this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;\n\t},\n\tgetScaleDefaults: function(type) {\n\t\t// Return the scale defaults merged with the global settings so that we always use the latest ones\n\t\treturn this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};\n\t},\n\tupdateScaleDefaults: function(type, additions) {\n\t\tvar me = this;\n\t\tif (me.defaults.hasOwnProperty(type)) {\n\t\t\tme.defaults[type] = helpers$1.extend(me.defaults[type], additions);\n\t\t}\n\t},\n\taddScalesToLayout: function(chart) {\n\t\t// Adds each scale to the chart.boxes array to be sized accordingly\n\t\thelpers$1.each(chart.scales, function(scale) {\n\t\t\t// Set ILayoutItem parameters for backwards compatibility\n\t\t\tscale.fullWidth = scale.options.fullWidth;\n\t\t\tscale.position = scale.options.position;\n\t\t\tscale.weight = scale.options.weight;\n\t\t\tcore_layouts.addBox(chart, scale);\n\t\t});\n\t}\n};\n\nvar valueOrDefault$8 = helpers$1.valueOrDefault;\nvar getRtlHelper = helpers$1.rtl.getRtlAdapter;\n\ncore_defaults._set('global', {\n\ttooltips: {\n\t\tenabled: true,\n\t\tcustom: null,\n\t\tmode: 'nearest',\n\t\tposition: 'average',\n\t\tintersect: true,\n\t\tbackgroundColor: 'rgba(0,0,0,0.8)',\n\t\ttitleFontStyle: 'bold',\n\t\ttitleSpacing: 2,\n\t\ttitleMarginBottom: 6,\n\t\ttitleFontColor: '#fff',\n\t\ttitleAlign: 'left',\n\t\tbodySpacing: 2,\n\t\tbodyFontColor: '#fff',\n\t\tbodyAlign: 'left',\n\t\tfooterFontStyle: 'bold',\n\t\tfooterSpacing: 2,\n\t\tfooterMarginTop: 6,\n\t\tfooterFontColor: '#fff',\n\t\tfooterAlign: 'left',\n\t\tyPadding: 6,\n\t\txPadding: 6,\n\t\tcaretPadding: 2,\n\t\tcaretSize: 5,\n\t\tcornerRadius: 6,\n\t\tmultiKeyBackground: '#fff',\n\t\tdisplayColors: true,\n\t\tborderColor: 'rgba(0,0,0,0)',\n\t\tborderWidth: 0,\n\t\tcallbacks: {\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeTitle: helpers$1.noop,\n\t\t\ttitle: function(tooltipItems, data) {\n\t\t\t\tvar title = '';\n\t\t\t\tvar labels = data.labels;\n\t\t\t\tvar labelCount = labels ? labels.length : 0;\n\n\t\t\t\tif (tooltipItems.length > 0) {\n\t\t\t\t\tvar item = tooltipItems[0];\n\t\t\t\t\tif (item.label) {\n\t\t\t\t\t\ttitle = item.label;\n\t\t\t\t\t} else if (item.xLabel) {\n\t\t\t\t\t\ttitle = item.xLabel;\n\t\t\t\t\t} else if (labelCount > 0 && item.index < labelCount) {\n\t\t\t\t\t\ttitle = labels[item.index];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn title;\n\t\t\t},\n\t\t\tafterTitle: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItem, data)\n\t\t\tbeforeLabel: helpers$1.noop,\n\t\t\tlabel: function(tooltipItem, data) {\n\t\t\t\tvar label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel += ': ';\n\t\t\t\t}\n\t\t\t\tif (!helpers$1.isNullOrUndef(tooltipItem.value)) {\n\t\t\t\t\tlabel += tooltipItem.value;\n\t\t\t\t} else {\n\t\t\t\t\tlabel += tooltipItem.yLabel;\n\t\t\t\t}\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tlabelColor: function(tooltipItem, chart) {\n\t\t\t\tvar meta = chart.getDatasetMeta(tooltipItem.datasetIndex);\n\t\t\t\tvar activeElement = meta.data[tooltipItem.index];\n\t\t\t\tvar view = activeElement._view;\n\t\t\t\treturn {\n\t\t\t\t\tborderColor: view.borderColor,\n\t\t\t\t\tbackgroundColor: view.backgroundColor\n\t\t\t\t};\n\t\t\t},\n\t\t\tlabelTextColor: function() {\n\t\t\t\treturn this._options.bodyFontColor;\n\t\t\t},\n\t\t\tafterLabel: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tafterBody: helpers$1.noop,\n\n\t\t\t// Args are: (tooltipItems, data)\n\t\t\tbeforeFooter: helpers$1.noop,\n\t\t\tfooter: helpers$1.noop,\n\t\t\tafterFooter: helpers$1.noop\n\t\t}\n\t}\n});\n\nvar positioners = {\n\t/**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t * @function Chart.Tooltip.positioners.average\n\t * @param elements {ChartElement[]} the elements being displayed in the tooltip\n\t * @returns {object} tooltip position\n\t */\n\taverage: function(elements) {\n\t\tif (!elements.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar i, len;\n\t\tvar x = 0;\n\t\tvar y = 0;\n\t\tvar count = 0;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar pos = el.tooltipPosition();\n\t\t\t\tx += pos.x;\n\t\t\t\ty += pos.y;\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tx: x / count,\n\t\t\ty: y / count\n\t\t};\n\t},\n\n\t/**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t * @function Chart.Tooltip.positioners.nearest\n\t * @param elements {Chart.Element[]} the tooltip elements\n\t * @param eventPosition {object} the position of the event in canvas coordinates\n\t * @returns {object} the tooltip position\n\t */\n\tnearest: function(elements, eventPosition) {\n\t\tvar x = eventPosition.x;\n\t\tvar y = eventPosition.y;\n\t\tvar minDistance = Number.POSITIVE_INFINITY;\n\t\tvar i, len, nearestElement;\n\n\t\tfor (i = 0, len = elements.length; i < len; ++i) {\n\t\t\tvar el = elements[i];\n\t\t\tif (el && el.hasValue()) {\n\t\t\t\tvar center = el.getCenterPoint();\n\t\t\t\tvar d = helpers$1.distanceBetweenPoints(eventPosition, center);\n\n\t\t\t\tif (d < minDistance) {\n\t\t\t\t\tminDistance = d;\n\t\t\t\t\tnearestElement = el;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (nearestElement) {\n\t\t\tvar tp = nearestElement.tooltipPosition();\n\t\t\tx = tp.x;\n\t\t\ty = tp.y;\n\t\t}\n\n\t\treturn {\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\t}\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n\tif (toPush) {\n\t\tif (helpers$1.isArray(toPush)) {\n\t\t\t// base = base.concat(toPush);\n\t\t\tArray.prototype.push.apply(base, toPush);\n\t\t} else {\n\t\t\tbase.push(toPush);\n\t\t}\n\t}\n\n\treturn base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {string} value - The value to split by newline.\n * @returns {string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n\tif ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n\t\treturn str.split('\\n');\n\t}\n\treturn str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param element - the chart element (point, arc, bar) to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(element) {\n\tvar xScale = element._xScale;\n\tvar yScale = element._yScale || element._scale; // handle radar || polarArea charts\n\tvar index = element._index;\n\tvar datasetIndex = element._datasetIndex;\n\tvar controller = element._chart.getDatasetMeta(datasetIndex).controller;\n\tvar indexScale = controller._getIndexScale();\n\tvar valueScale = controller._getValueScale();\n\n\treturn {\n\t\txLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tyLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tlabel: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tvalue: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',\n\t\tindex: index,\n\t\tdatasetIndex: datasetIndex,\n\t\tx: element._model.x,\n\t\ty: element._model.y\n\t};\n}\n\n/**\n * Helper to get the reset model for the tooltip\n * @param tooltipOpts {object} the tooltip options\n */\nfunction getBaseModel(tooltipOpts) {\n\tvar globalDefaults = core_defaults.global;\n\n\treturn {\n\t\t// Positioning\n\t\txPadding: tooltipOpts.xPadding,\n\t\tyPadding: tooltipOpts.yPadding,\n\t\txAlign: tooltipOpts.xAlign,\n\t\tyAlign: tooltipOpts.yAlign,\n\n\t\t// Drawing direction and text direction\n\t\trtl: tooltipOpts.rtl,\n\t\ttextDirection: tooltipOpts.textDirection,\n\n\t\t// Body\n\t\tbodyFontColor: tooltipOpts.bodyFontColor,\n\t\t_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),\n\t\t_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),\n\t\t_bodyAlign: tooltipOpts.bodyAlign,\n\t\tbodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),\n\t\tbodySpacing: tooltipOpts.bodySpacing,\n\n\t\t// Title\n\t\ttitleFontColor: tooltipOpts.titleFontColor,\n\t\t_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),\n\t\t_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),\n\t\ttitleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),\n\t\t_titleAlign: tooltipOpts.titleAlign,\n\t\ttitleSpacing: tooltipOpts.titleSpacing,\n\t\ttitleMarginBottom: tooltipOpts.titleMarginBottom,\n\n\t\t// Footer\n\t\tfooterFontColor: tooltipOpts.footerFontColor,\n\t\t_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),\n\t\t_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),\n\t\tfooterFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),\n\t\t_footerAlign: tooltipOpts.footerAlign,\n\t\tfooterSpacing: tooltipOpts.footerSpacing,\n\t\tfooterMarginTop: tooltipOpts.footerMarginTop,\n\n\t\t// Appearance\n\t\tcaretSize: tooltipOpts.caretSize,\n\t\tcornerRadius: tooltipOpts.cornerRadius,\n\t\tbackgroundColor: tooltipOpts.backgroundColor,\n\t\topacity: 0,\n\t\tlegendColorBackground: tooltipOpts.multiKeyBackground,\n\t\tdisplayColors: tooltipOpts.displayColors,\n\t\tborderColor: tooltipOpts.borderColor,\n\t\tborderWidth: tooltipOpts.borderWidth\n\t};\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, model) {\n\tvar ctx = tooltip._chart.ctx;\n\n\tvar height = model.yPadding * 2; // Tooltip Padding\n\tvar width = 0;\n\n\t// Count of all lines in the body\n\tvar body = model.body;\n\tvar combinedBodyLength = body.reduce(function(count, bodyItem) {\n\t\treturn count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n\t}, 0);\n\tcombinedBodyLength += model.beforeBody.length + model.afterBody.length;\n\n\tvar titleLineCount = model.title.length;\n\tvar footerLineCount = model.footer.length;\n\tvar titleFontSize = model.titleFontSize;\n\tvar bodyFontSize = model.bodyFontSize;\n\tvar footerFontSize = model.footerFontSize;\n\n\theight += titleLineCount * titleFontSize; // Title Lines\n\theight += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing\n\theight += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin\n\theight += combinedBodyLength * bodyFontSize; // Body Lines\n\theight += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing\n\theight += footerLineCount ? model.footerMarginTop : 0; // Footer Margin\n\theight += footerLineCount * (footerFontSize); // Footer Lines\n\theight += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing\n\n\t// Title width\n\tvar widthPadding = 0;\n\tvar maxLineWidth = function(line) {\n\t\twidth = Math.max(width, ctx.measureText(line).width + widthPadding);\n\t};\n\n\tctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);\n\thelpers$1.each(model.title, maxLineWidth);\n\n\t// Body width\n\tctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);\n\thelpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);\n\n\t// Body lines may include some extra width due to the color box\n\twidthPadding = model.displayColors ? (bodyFontSize + 2) : 0;\n\thelpers$1.each(body, function(bodyItem) {\n\t\thelpers$1.each(bodyItem.before, maxLineWidth);\n\t\thelpers$1.each(bodyItem.lines, maxLineWidth);\n\t\thelpers$1.each(bodyItem.after, maxLineWidth);\n\t});\n\n\t// Reset back to 0\n\twidthPadding = 0;\n\n\t// Footer width\n\tctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);\n\thelpers$1.each(model.footer, maxLineWidth);\n\n\t// Add padding\n\twidth += 2 * model.xPadding;\n\n\treturn {\n\t\twidth: width,\n\t\theight: height\n\t};\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(tooltip, size) {\n\tvar model = tooltip._model;\n\tvar chart = tooltip._chart;\n\tvar chartArea = tooltip._chart.chartArea;\n\tvar xAlign = 'center';\n\tvar yAlign = 'center';\n\n\tif (model.y < size.height) {\n\t\tyAlign = 'top';\n\t} else if (model.y > (chart.height - size.height)) {\n\t\tyAlign = 'bottom';\n\t}\n\n\tvar lf, rf; // functions to determine left, right alignment\n\tvar olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart\n\tvar yf; // function to get the y alignment if the tooltip goes outside of the left or right edges\n\tvar midX = (chartArea.left + chartArea.right) / 2;\n\tvar midY = (chartArea.top + chartArea.bottom) / 2;\n\n\tif (yAlign === 'center') {\n\t\tlf = function(x) {\n\t\t\treturn x <= midX;\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x > midX;\n\t\t};\n\t} else {\n\t\tlf = function(x) {\n\t\t\treturn x <= (size.width / 2);\n\t\t};\n\t\trf = function(x) {\n\t\t\treturn x >= (chart.width - (size.width / 2));\n\t\t};\n\t}\n\n\tolf = function(x) {\n\t\treturn x + size.width + model.caretSize + model.caretPadding > chart.width;\n\t};\n\torf = function(x) {\n\t\treturn x - size.width - model.caretSize - model.caretPadding < 0;\n\t};\n\tyf = function(y) {\n\t\treturn y <= midY ? 'top' : 'bottom';\n\t};\n\n\tif (lf(model.x)) {\n\t\txAlign = 'left';\n\n\t\t// Is tooltip too wide and goes over the right side of the chart.?\n\t\tif (olf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t} else if (rf(model.x)) {\n\t\txAlign = 'right';\n\n\t\t// Is tooltip too wide and goes outside left edge of canvas?\n\t\tif (orf(model.x)) {\n\t\t\txAlign = 'center';\n\t\t\tyAlign = yf(model.y);\n\t\t}\n\t}\n\n\tvar opts = tooltip._options;\n\treturn {\n\t\txAlign: opts.xAlign ? opts.xAlign : xAlign,\n\t\tyAlign: opts.yAlign ? opts.yAlign : yAlign\n\t};\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(vm, size, alignment, chart) {\n\t// Background Position\n\tvar x = vm.x;\n\tvar y = vm.y;\n\n\tvar caretSize = vm.caretSize;\n\tvar caretPadding = vm.caretPadding;\n\tvar cornerRadius = vm.cornerRadius;\n\tvar xAlign = alignment.xAlign;\n\tvar yAlign = alignment.yAlign;\n\tvar paddingAndSize = caretSize + caretPadding;\n\tvar radiusAndPadding = cornerRadius + caretPadding;\n\n\tif (xAlign === 'right') {\n\t\tx -= size.width;\n\t} else if (xAlign === 'center') {\n\t\tx -= (size.width / 2);\n\t\tif (x + size.width > chart.width) {\n\t\t\tx = chart.width - size.width;\n\t\t}\n\t\tif (x < 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\n\tif (yAlign === 'top') {\n\t\ty += paddingAndSize;\n\t} else if (yAlign === 'bottom') {\n\t\ty -= size.height + paddingAndSize;\n\t} else {\n\t\ty -= (size.height / 2);\n\t}\n\n\tif (yAlign === 'center') {\n\t\tif (xAlign === 'left') {\n\t\t\tx += paddingAndSize;\n\t\t} else if (xAlign === 'right') {\n\t\t\tx -= paddingAndSize;\n\t\t}\n\t} else if (xAlign === 'left') {\n\t\tx -= radiusAndPadding;\n\t} else if (xAlign === 'right') {\n\t\tx += radiusAndPadding;\n\t}\n\n\treturn {\n\t\tx: x,\n\t\ty: y\n\t};\n}\n\nfunction getAlignedX(vm, align) {\n\treturn align === 'center'\n\t\t? vm.x + vm.width / 2\n\t\t: align === 'right'\n\t\t\t? vm.x + vm.width - vm.xPadding\n\t\t\t: vm.x + vm.xPadding;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n\treturn pushOrConcat([], splitNewlines(callback));\n}\n\nvar exports$4 = core_element.extend({\n\tinitialize: function() {\n\t\tthis._model = getBaseModel(this._options);\n\t\tthis._lastActive = [];\n\t},\n\n\t// Get the title\n\t// Args are: (tooltipItem, data)\n\tgetTitle: function() {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\t\tvar callbacks = opts.callbacks;\n\n\t\tvar beforeTitle = callbacks.beforeTitle.apply(me, arguments);\n\t\tvar title = callbacks.title.apply(me, arguments);\n\t\tvar afterTitle = callbacks.afterTitle.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeTitle));\n\t\tlines = pushOrConcat(lines, splitNewlines(title));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n\t\treturn lines;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBeforeBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetBody: function(tooltipItems, data) {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\t\tvar bodyItems = [];\n\n\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\tvar bodyItem = {\n\t\t\t\tbefore: [],\n\t\t\t\tlines: [],\n\t\t\t\tafter: []\n\t\t\t};\n\t\t\tpushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));\n\t\t\tpushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));\n\t\t\tpushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));\n\n\t\t\tbodyItems.push(bodyItem);\n\t\t});\n\n\t\treturn bodyItems;\n\t},\n\n\t// Args are: (tooltipItem, data)\n\tgetAfterBody: function() {\n\t\treturn getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));\n\t},\n\n\t// Get the footer and beforeFooter and afterFooter lines\n\t// Args are: (tooltipItem, data)\n\tgetFooter: function() {\n\t\tvar me = this;\n\t\tvar callbacks = me._options.callbacks;\n\n\t\tvar beforeFooter = callbacks.beforeFooter.apply(me, arguments);\n\t\tvar footer = callbacks.footer.apply(me, arguments);\n\t\tvar afterFooter = callbacks.afterFooter.apply(me, arguments);\n\n\t\tvar lines = [];\n\t\tlines = pushOrConcat(lines, splitNewlines(beforeFooter));\n\t\tlines = pushOrConcat(lines, splitNewlines(footer));\n\t\tlines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n\t\treturn lines;\n\t},\n\n\tupdate: function(changed) {\n\t\tvar me = this;\n\t\tvar opts = me._options;\n\n\t\t// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition\n\t\t// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time\n\t\t// which breaks any animations.\n\t\tvar existingModel = me._model;\n\t\tvar model = me._model = getBaseModel(opts);\n\t\tvar active = me._active;\n\n\t\tvar data = me._data;\n\n\t\t// In the case where active.length === 0 we need to keep these at existing values for good animations\n\t\tvar alignment = {\n\t\t\txAlign: existingModel.xAlign,\n\t\t\tyAlign: existingModel.yAlign\n\t\t};\n\t\tvar backgroundPoint = {\n\t\t\tx: existingModel.x,\n\t\t\ty: existingModel.y\n\t\t};\n\t\tvar tooltipSize = {\n\t\t\twidth: existingModel.width,\n\t\t\theight: existingModel.height\n\t\t};\n\t\tvar tooltipPosition = {\n\t\t\tx: existingModel.caretX,\n\t\t\ty: existingModel.caretY\n\t\t};\n\n\t\tvar i, len;\n\n\t\tif (active.length) {\n\t\t\tmodel.opacity = 1;\n\n\t\t\tvar labelColors = [];\n\t\t\tvar labelTextColors = [];\n\t\t\ttooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);\n\n\t\t\tvar tooltipItems = [];\n\t\t\tfor (i = 0, len = active.length; i < len; ++i) {\n\t\t\t\ttooltipItems.push(createTooltipItem(active[i]));\n\t\t\t}\n\n\t\t\t// If the user provided a filter function, use it to modify the tooltip items\n\t\t\tif (opts.filter) {\n\t\t\t\ttooltipItems = tooltipItems.filter(function(a) {\n\t\t\t\t\treturn opts.filter(a, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the user provided a sorting function, use it to modify the tooltip items\n\t\t\tif (opts.itemSort) {\n\t\t\t\ttooltipItems = tooltipItems.sort(function(a, b) {\n\t\t\t\t\treturn opts.itemSort(a, b, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Determine colors for boxes\n\t\t\thelpers$1.each(tooltipItems, function(tooltipItem) {\n\t\t\t\tlabelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));\n\t\t\t\tlabelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));\n\t\t\t});\n\n\n\t\t\t// Build the Text Lines\n\t\t\tmodel.title = me.getTitle(tooltipItems, data);\n\t\t\tmodel.beforeBody = me.getBeforeBody(tooltipItems, data);\n\t\t\tmodel.body = me.getBody(tooltipItems, data);\n\t\t\tmodel.afterBody = me.getAfterBody(tooltipItems, data);\n\t\t\tmodel.footer = me.getFooter(tooltipItems, data);\n\n\t\t\t// Initial positioning and colors\n\t\t\tmodel.x = tooltipPosition.x;\n\t\t\tmodel.y = tooltipPosition.y;\n\t\t\tmodel.caretPadding = opts.caretPadding;\n\t\t\tmodel.labelColors = labelColors;\n\t\t\tmodel.labelTextColors = labelTextColors;\n\n\t\t\t// data points\n\t\t\tmodel.dataPoints = tooltipItems;\n\n\t\t\t// We need to determine alignment of the tooltip\n\t\t\ttooltipSize = getTooltipSize(this, model);\n\t\t\talignment = determineAlignment(this, tooltipSize);\n\t\t\t// Final Size and Position\n\t\t\tbackgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);\n\t\t} else {\n\t\t\tmodel.opacity = 0;\n\t\t}\n\n\t\tmodel.xAlign = alignment.xAlign;\n\t\tmodel.yAlign = alignment.yAlign;\n\t\tmodel.x = backgroundPoint.x;\n\t\tmodel.y = backgroundPoint.y;\n\t\tmodel.width = tooltipSize.width;\n\t\tmodel.height = tooltipSize.height;\n\n\t\t// Point where the caret on the tooltip points to\n\t\tmodel.caretX = tooltipPosition.x;\n\t\tmodel.caretY = tooltipPosition.y;\n\n\t\tme._model = model;\n\n\t\tif (changed && opts.custom) {\n\t\t\topts.custom.call(me, model);\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdrawCaret: function(tooltipPoint, size) {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\t\tvar caretPosition = this.getCaretPosition(tooltipPoint, size, vm);\n\n\t\tctx.lineTo(caretPosition.x1, caretPosition.y1);\n\t\tctx.lineTo(caretPosition.x2, caretPosition.y2);\n\t\tctx.lineTo(caretPosition.x3, caretPosition.y3);\n\t},\n\tgetCaretPosition: function(tooltipPoint, size, vm) {\n\t\tvar x1, x2, x3, y1, y2, y3;\n\t\tvar caretSize = vm.caretSize;\n\t\tvar cornerRadius = vm.cornerRadius;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar ptX = tooltipPoint.x;\n\t\tvar ptY = tooltipPoint.y;\n\t\tvar width = size.width;\n\t\tvar height = size.height;\n\n\t\tif (yAlign === 'center') {\n\t\t\ty2 = ptY + (height / 2);\n\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx1 = ptX;\n\t\t\t\tx2 = x1 - caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 + caretSize;\n\t\t\t\ty3 = y2 - caretSize;\n\t\t\t} else {\n\t\t\t\tx1 = ptX + width;\n\t\t\t\tx2 = x1 + caretSize;\n\t\t\t\tx3 = x1;\n\n\t\t\t\ty1 = y2 - caretSize;\n\t\t\t\ty3 = y2 + caretSize;\n\t\t\t}\n\t\t} else {\n\t\t\tif (xAlign === 'left') {\n\t\t\t\tx2 = ptX + cornerRadius + (caretSize);\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else if (xAlign === 'right') {\n\t\t\t\tx2 = ptX + width - cornerRadius - caretSize;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t} else {\n\t\t\t\tx2 = vm.caretX;\n\t\t\t\tx1 = x2 - caretSize;\n\t\t\t\tx3 = x2 + caretSize;\n\t\t\t}\n\t\t\tif (yAlign === 'top') {\n\t\t\t\ty1 = ptY;\n\t\t\t\ty2 = y1 - caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t} else {\n\t\t\t\ty1 = ptY + height;\n\t\t\t\ty2 = y1 + caretSize;\n\t\t\t\ty3 = y1;\n\t\t\t\t// invert drawing order\n\t\t\t\tvar tmp = x3;\n\t\t\t\tx3 = x1;\n\t\t\t\tx1 = tmp;\n\t\t\t}\n\t\t}\n\t\treturn {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};\n\t},\n\n\tdrawTitle: function(pt, vm, ctx) {\n\t\tvar title = vm.title;\n\t\tvar length = title.length;\n\t\tvar titleFontSize, titleSpacing, i;\n\n\t\tif (length) {\n\t\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\t\tpt.x = getAlignedX(vm, vm._titleAlign);\n\n\t\t\tctx.textAlign = rtlHelper.textAlign(vm._titleAlign);\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\ttitleFontSize = vm.titleFontSize;\n\t\t\ttitleSpacing = vm.titleSpacing;\n\n\t\t\tctx.fillStyle = vm.titleFontColor;\n\t\t\tctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);\n\n\t\t\tfor (i = 0; i < length; ++i) {\n\t\t\t\tctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);\n\t\t\t\tpt.y += titleFontSize + titleSpacing; // Line Height and spacing\n\n\t\t\t\tif (i + 1 === length) {\n\t\t\t\t\tpt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBody: function(pt, vm, ctx) {\n\t\tvar bodyFontSize = vm.bodyFontSize;\n\t\tvar bodySpacing = vm.bodySpacing;\n\t\tvar bodyAlign = vm._bodyAlign;\n\t\tvar body = vm.body;\n\t\tvar drawColorBoxes = vm.displayColors;\n\t\tvar xLinePadding = 0;\n\t\tvar colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;\n\n\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\tvar fillLineOfText = function(line) {\n\t\t\tctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);\n\t\t\tpt.y += bodyFontSize + bodySpacing;\n\t\t};\n\n\t\tvar bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;\n\t\tvar bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n\n\t\tctx.textAlign = bodyAlign;\n\t\tctx.textBaseline = 'middle';\n\t\tctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);\n\n\t\tpt.x = getAlignedX(vm, bodyAlignForCalculation);\n\n\t\t// Before body lines\n\t\tctx.fillStyle = vm.bodyFontColor;\n\t\thelpers$1.each(vm.beforeBody, fillLineOfText);\n\n\t\txLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'\n\t\t\t? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)\n\t\t\t: 0;\n\n\t\t// Draw body lines now\n\t\tfor (i = 0, ilen = body.length; i < ilen; ++i) {\n\t\t\tbodyItem = body[i];\n\t\t\ttextColor = vm.labelTextColors[i];\n\t\t\tlabelColors = vm.labelColors[i];\n\n\t\t\tctx.fillStyle = textColor;\n\t\t\thelpers$1.each(bodyItem.before, fillLineOfText);\n\n\t\t\tlines = bodyItem.lines;\n\t\t\tfor (j = 0, jlen = lines.length; j < jlen; ++j) {\n\t\t\t\t// Draw Legend-like boxes if needed\n\t\t\t\tif (drawColorBoxes) {\n\t\t\t\t\tvar rtlColorX = rtlHelper.x(colorX);\n\n\t\t\t\t\t// Fill a white rect so that colours merge nicely if the opacity is < 1\n\t\t\t\t\tctx.fillStyle = vm.legendColorBackground;\n\t\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Border\n\t\t\t\t\tctx.lineWidth = 1;\n\t\t\t\t\tctx.strokeStyle = labelColors.borderColor;\n\t\t\t\t\tctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);\n\n\t\t\t\t\t// Inner square\n\t\t\t\t\tctx.fillStyle = labelColors.backgroundColor;\n\t\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);\n\t\t\t\t\tctx.fillStyle = textColor;\n\t\t\t\t}\n\n\t\t\t\tfillLineOfText(lines[j]);\n\t\t\t}\n\n\t\t\thelpers$1.each(bodyItem.after, fillLineOfText);\n\t\t}\n\n\t\t// Reset back to 0 for after body\n\t\txLinePadding = 0;\n\n\t\t// After body lines\n\t\thelpers$1.each(vm.afterBody, fillLineOfText);\n\t\tpt.y -= bodySpacing; // Remove last body spacing\n\t},\n\n\tdrawFooter: function(pt, vm, ctx) {\n\t\tvar footer = vm.footer;\n\t\tvar length = footer.length;\n\t\tvar footerFontSize, i;\n\n\t\tif (length) {\n\t\t\tvar rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);\n\n\t\t\tpt.x = getAlignedX(vm, vm._footerAlign);\n\t\t\tpt.y += vm.footerMarginTop;\n\n\t\t\tctx.textAlign = rtlHelper.textAlign(vm._footerAlign);\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\tfooterFontSize = vm.footerFontSize;\n\n\t\t\tctx.fillStyle = vm.footerFontColor;\n\t\t\tctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);\n\n\t\t\tfor (i = 0; i < length; ++i) {\n\t\t\t\tctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);\n\t\t\t\tpt.y += footerFontSize + vm.footerSpacing;\n\t\t\t}\n\t\t}\n\t},\n\n\tdrawBackground: function(pt, vm, ctx, tooltipSize) {\n\t\tctx.fillStyle = vm.backgroundColor;\n\t\tctx.strokeStyle = vm.borderColor;\n\t\tctx.lineWidth = vm.borderWidth;\n\t\tvar xAlign = vm.xAlign;\n\t\tvar yAlign = vm.yAlign;\n\t\tvar x = pt.x;\n\t\tvar y = pt.y;\n\t\tvar width = tooltipSize.width;\n\t\tvar height = tooltipSize.height;\n\t\tvar radius = vm.cornerRadius;\n\n\t\tctx.beginPath();\n\t\tctx.moveTo(x + radius, y);\n\t\tif (yAlign === 'top') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width - radius, y);\n\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\tif (yAlign === 'center' && xAlign === 'right') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + width, y + height - radius);\n\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\tif (yAlign === 'bottom') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x + radius, y + height);\n\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\tif (yAlign === 'center' && xAlign === 'left') {\n\t\t\tthis.drawCaret(pt, tooltipSize);\n\t\t}\n\t\tctx.lineTo(x, y + radius);\n\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\tctx.closePath();\n\n\t\tctx.fill();\n\n\t\tif (vm.borderWidth > 0) {\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\tdraw: function() {\n\t\tvar ctx = this._chart.ctx;\n\t\tvar vm = this._view;\n\n\t\tif (vm.opacity === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tooltipSize = {\n\t\t\twidth: vm.width,\n\t\t\theight: vm.height\n\t\t};\n\t\tvar pt = {\n\t\t\tx: vm.x,\n\t\t\ty: vm.y\n\t\t};\n\n\t\t// IE11/Edge does not like very small opacities, so snap to 0\n\t\tvar opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;\n\n\t\t// Truthy/falsey value for empty tooltip\n\t\tvar hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;\n\n\t\tif (this._options.enabled && hasTooltipContent) {\n\t\t\tctx.save();\n\t\t\tctx.globalAlpha = opacity;\n\n\t\t\t// Draw Background\n\t\t\tthis.drawBackground(pt, vm, ctx, tooltipSize);\n\n\t\t\t// Draw Title, Body, and Footer\n\t\t\tpt.y += vm.yPadding;\n\n\t\t\thelpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);\n\n\t\t\t// Titles\n\t\t\tthis.drawTitle(pt, vm, ctx);\n\n\t\t\t// Body\n\t\t\tthis.drawBody(pt, vm, ctx);\n\n\t\t\t// Footer\n\t\t\tthis.drawFooter(pt, vm, ctx);\n\n\t\t\thelpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t * @returns {boolean} true if the tooltip changed\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me._options;\n\t\tvar changed = false;\n\n\t\tme._lastActive = me._lastActive || [];\n\n\t\t// Find Active Elements for tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme._active = [];\n\t\t} else {\n\t\t\tme._active = me._chart.getElementsAtEventForMode(e, options.mode, options);\n\t\t\tif (options.reverse) {\n\t\t\t\tme._active.reverse();\n\t\t\t}\n\t\t}\n\n\t\t// Remember Last Actives\n\t\tchanged = !helpers$1.arrayEquals(me._active, me._lastActive);\n\n\t\t// Only handle target event on tooltip change\n\t\tif (changed) {\n\t\t\tme._lastActive = me._active;\n\n\t\t\tif (options.enabled || options.custom) {\n\t\t\t\tme._eventPosition = {\n\t\t\t\t\tx: e.x,\n\t\t\t\t\ty: e.y\n\t\t\t\t};\n\n\t\t\t\tme.update(true);\n\t\t\t\tme.pivot();\n\t\t\t}\n\t\t}\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * @namespace Chart.Tooltip.positioners\n */\nvar positioners_1 = positioners;\n\nvar core_tooltip = exports$4;\ncore_tooltip.positioners = positioners_1;\n\nvar valueOrDefault$9 = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\telements: {},\n\tevents: [\n\t\t'mousemove',\n\t\t'mouseout',\n\t\t'click',\n\t\t'touchstart',\n\t\t'touchmove'\n\t],\n\thover: {\n\t\tonHover: null,\n\t\tmode: 'nearest',\n\t\tintersect: true,\n\t\tanimationDuration: 400\n\t},\n\tonClick: null,\n\tmaintainAspectRatio: true,\n\tresponsive: true,\n\tresponsiveAnimationDuration: 0\n});\n\n/**\n * Recursively merge the given config objects representing the `scales` option\n * by incorporating scale defaults in `xAxes` and `yAxes` array items, then\n * returns a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeScaleConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tif (key === 'xAxes' || key === 'yAxes') {\n\t\t\t\tvar slen = source[key].length;\n\t\t\t\tvar i, type, scale;\n\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\ttarget[key] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (i = 0; i < slen; ++i) {\n\t\t\t\t\tscale = source[key][i];\n\t\t\t\t\ttype = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');\n\n\t\t\t\t\tif (i >= target[key].length) {\n\t\t\t\t\t\ttarget[key].push({});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {\n\t\t\t\t\t\t// new/untyped scale or type changed: let's apply the new defaults\n\t\t\t\t\t\t// then merge source scale to correctly overwrite the defaults.\n\t\t\t\t\t\thelpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// scales type are the same\n\t\t\t\t\t\thelpers$1.merge(target[key][i], scale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Recursively merge the given config objects as the root options by handling\n * default scale options for the `scales` and `scale` properties, then returns\n * a deep copy of the result, thus doesn't alter inputs.\n */\nfunction mergeConfig(/* config objects ... */) {\n\treturn helpers$1.merge({}, [].slice.call(arguments), {\n\t\tmerger: function(key, target, source, options) {\n\t\t\tvar tval = target[key] || {};\n\t\t\tvar sval = source[key];\n\n\t\t\tif (key === 'scales') {\n\t\t\t\t// scale config merging is complex. Add our own function here for that\n\t\t\t\ttarget[key] = mergeScaleConfig(tval, sval);\n\t\t\t} else if (key === 'scale') {\n\t\t\t\t// used in polar area & radar charts since there is only one scale\n\t\t\t\ttarget[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);\n\t\t\t} else {\n\t\t\t\thelpers$1._merger(key, target, source, options);\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction initConfig(config) {\n\tconfig = config || {};\n\n\t// Do NOT use mergeConfig for the data object because this method merges arrays\n\t// and so would change references to labels and datasets, preventing data updates.\n\tvar data = config.data = config.data || {};\n\tdata.datasets = data.datasets || [];\n\tdata.labels = data.labels || [];\n\n\tconfig.options = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[config.type],\n\t\tconfig.options || {});\n\n\treturn config;\n}\n\nfunction updateConfig(chart) {\n\tvar newOptions = chart.options;\n\n\thelpers$1.each(chart.scales, function(scale) {\n\t\tcore_layouts.removeBox(chart, scale);\n\t});\n\n\tnewOptions = mergeConfig(\n\t\tcore_defaults.global,\n\t\tcore_defaults[chart.config.type],\n\t\tnewOptions);\n\n\tchart.options = chart.config.options = newOptions;\n\tchart.ensureScalesHaveIDs();\n\tchart.buildOrUpdateScales();\n\n\t// Tooltip\n\tchart.tooltip._options = newOptions.tooltips;\n\tchart.tooltip.initialize();\n}\n\nfunction nextAvailableScaleId(axesOpts, prefix, index) {\n\tvar id;\n\tvar hasId = function(obj) {\n\t\treturn obj.id === id;\n\t};\n\n\tdo {\n\t\tid = prefix + index++;\n\t} while (helpers$1.findIndex(axesOpts, hasId) >= 0);\n\n\treturn id;\n}\n\nfunction positionIsHorizontal(position) {\n\treturn position === 'top' || position === 'bottom';\n}\n\nfunction compare2Level(l1, l2) {\n\treturn function(a, b) {\n\t\treturn a[l1] === b[l1]\n\t\t\t? a[l2] - b[l2]\n\t\t\t: a[l1] - b[l1];\n\t};\n}\n\nvar Chart = function(item, config) {\n\tthis.construct(item, config);\n\treturn this;\n};\n\nhelpers$1.extend(Chart.prototype, /** @lends Chart */ {\n\t/**\n\t * @private\n\t */\n\tconstruct: function(item, config) {\n\t\tvar me = this;\n\n\t\tconfig = initConfig(config);\n\n\t\tvar context = platform.acquireContext(item, config);\n\t\tvar canvas = context && context.canvas;\n\t\tvar height = canvas && canvas.height;\n\t\tvar width = canvas && canvas.width;\n\n\t\tme.id = helpers$1.uid();\n\t\tme.ctx = context;\n\t\tme.canvas = canvas;\n\t\tme.config = config;\n\t\tme.width = width;\n\t\tme.height = height;\n\t\tme.aspectRatio = height ? width / height : null;\n\t\tme.options = config.options;\n\t\tme._bufferedRender = false;\n\t\tme._layers = [];\n\n\t\t/**\n\t\t * Provided for backward compatibility, Chart and Chart.Controller have been merged,\n\t\t * the \"instance\" still need to be defined since it might be called from plugins.\n\t\t * @prop Chart#chart\n\t\t * @deprecated since version 2.6.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tme.chart = me;\n\t\tme.controller = me; // chart.chart.controller #inception\n\n\t\t// Add the chart instance to the global namespace\n\t\tChart.instances[me.id] = me;\n\n\t\t// Define alias to the config data: `chart.data === chart.config.data`\n\t\tObject.defineProperty(me, 'data', {\n\t\t\tget: function() {\n\t\t\t\treturn me.config.data;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tme.config.data = value;\n\t\t\t}\n\t\t});\n\n\t\tif (!context || !canvas) {\n\t\t\t// The given item is not a compatible context2d element, let's return before finalizing\n\t\t\t// the chart initialization but after setting basic chart / controller properties that\n\t\t\t// can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n\t\t\t// https://github.com/chartjs/Chart.js/issues/2807\n\t\t\tconsole.error(\"Failed to create chart: can't acquire context from the given item\");\n\t\t\treturn;\n\t\t}\n\n\t\tme.initialize();\n\t\tme.update();\n\t},\n\n\t/**\n\t * @private\n\t */\n\tinitialize: function() {\n\t\tvar me = this;\n\n\t\t// Before init plugin notification\n\t\tcore_plugins.notify(me, 'beforeInit');\n\n\t\thelpers$1.retinaScale(me, me.options.devicePixelRatio);\n\n\t\tme.bindEvents();\n\n\t\tif (me.options.responsive) {\n\t\t\t// Initial resize before chart draws (must be silent to preserve initial animations).\n\t\t\tme.resize(true);\n\t\t}\n\n\t\tme.initToolTip();\n\n\t\t// After init plugin notification\n\t\tcore_plugins.notify(me, 'afterInit');\n\n\t\treturn me;\n\t},\n\n\tclear: function() {\n\t\thelpers$1.canvas.clear(this);\n\t\treturn this;\n\t},\n\n\tstop: function() {\n\t\t// Stops any current animation loop occurring\n\t\tcore_animations.cancelAnimation(this);\n\t\treturn this;\n\t},\n\n\tresize: function(silent) {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar canvas = me.canvas;\n\t\tvar aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;\n\n\t\t// the canvas render width and height will be casted to integers so make sure that\n\t\t// the canvas display style uses the same integer values to avoid blurring effect.\n\n\t\t// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed\n\t\tvar newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));\n\t\tvar newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));\n\n\t\tif (me.width === newWidth && me.height === newHeight) {\n\t\t\treturn;\n\t\t}\n\n\t\tcanvas.width = me.width = newWidth;\n\t\tcanvas.height = me.height = newHeight;\n\t\tcanvas.style.width = newWidth + 'px';\n\t\tcanvas.style.height = newHeight + 'px';\n\n\t\thelpers$1.retinaScale(me, options.devicePixelRatio);\n\n\t\tif (!silent) {\n\t\t\t// Notify any plugins about the resize\n\t\t\tvar newSize = {width: newWidth, height: newHeight};\n\t\t\tcore_plugins.notify(me, 'resize', [newSize]);\n\n\t\t\t// Notify of resize\n\t\t\tif (options.onResize) {\n\t\t\t\toptions.onResize(me, newSize);\n\t\t\t}\n\n\t\t\tme.stop();\n\t\t\tme.update({\n\t\t\t\tduration: options.responsiveAnimationDuration\n\t\t\t});\n\t\t}\n\t},\n\n\tensureScalesHaveIDs: function() {\n\t\tvar options = this.options;\n\t\tvar scalesOptions = options.scales || {};\n\t\tvar scaleOptions = options.scale;\n\n\t\thelpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {\n\t\t\tif (!xAxisOptions.id) {\n\t\t\t\txAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {\n\t\t\tif (!yAxisOptions.id) {\n\t\t\t\tyAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);\n\t\t\t}\n\t\t});\n\n\t\tif (scaleOptions) {\n\t\t\tscaleOptions.id = scaleOptions.id || 'scale';\n\t\t}\n\t},\n\n\t/**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n\tbuildOrUpdateScales: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar scales = me.scales || {};\n\t\tvar items = [];\n\t\tvar updated = Object.keys(scales).reduce(function(obj, id) {\n\t\t\tobj[id] = false;\n\t\t\treturn obj;\n\t\t}, {});\n\n\t\tif (options.scales) {\n\t\t\titems = items.concat(\n\t\t\t\t(options.scales.xAxes || []).map(function(xAxisOptions) {\n\t\t\t\t\treturn {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};\n\t\t\t\t}),\n\t\t\t\t(options.scales.yAxes || []).map(function(yAxisOptions) {\n\t\t\t\t\treturn {options: yAxisOptions, dtype: 'linear', dposition: 'left'};\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (options.scale) {\n\t\t\titems.push({\n\t\t\t\toptions: options.scale,\n\t\t\t\tdtype: 'radialLinear',\n\t\t\t\tisDefault: true,\n\t\t\t\tdposition: 'chartArea'\n\t\t\t});\n\t\t}\n\n\t\thelpers$1.each(items, function(item) {\n\t\t\tvar scaleOptions = item.options;\n\t\t\tvar id = scaleOptions.id;\n\t\t\tvar scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);\n\n\t\t\tif (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {\n\t\t\t\tscaleOptions.position = item.dposition;\n\t\t\t}\n\n\t\t\tupdated[id] = true;\n\t\t\tvar scale = null;\n\t\t\tif (id in scales && scales[id].type === scaleType) {\n\t\t\t\tscale = scales[id];\n\t\t\t\tscale.options = scaleOptions;\n\t\t\t\tscale.ctx = me.ctx;\n\t\t\t\tscale.chart = me;\n\t\t\t} else {\n\t\t\t\tvar scaleClass = core_scaleService.getScaleConstructor(scaleType);\n\t\t\t\tif (!scaleClass) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tscale = new scaleClass({\n\t\t\t\t\tid: id,\n\t\t\t\t\ttype: scaleType,\n\t\t\t\t\toptions: scaleOptions,\n\t\t\t\t\tctx: me.ctx,\n\t\t\t\t\tchart: me\n\t\t\t\t});\n\t\t\t\tscales[scale.id] = scale;\n\t\t\t}\n\n\t\t\tscale.mergeTicksOptions();\n\n\t\t\t// TODO(SB): I think we should be able to remove this custom case (options.scale)\n\t\t\t// and consider it as a regular scale part of the \"scales\"\" map only! This would\n\t\t\t// make the logic easier and remove some useless? custom code.\n\t\t\tif (item.isDefault) {\n\t\t\t\tme.scale = scale;\n\t\t\t}\n\t\t});\n\t\t// clear up discarded scales\n\t\thelpers$1.each(updated, function(hasUpdated, id) {\n\t\t\tif (!hasUpdated) {\n\t\t\t\tdelete scales[id];\n\t\t\t}\n\t\t});\n\n\t\tme.scales = scales;\n\n\t\tcore_scaleService.addScalesToLayout(this);\n\t},\n\n\tbuildOrUpdateControllers: function() {\n\t\tvar me = this;\n\t\tvar newControllers = [];\n\t\tvar datasets = me.data.datasets;\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; i++) {\n\t\t\tvar dataset = datasets[i];\n\t\t\tvar meta = me.getDatasetMeta(i);\n\t\t\tvar type = dataset.type || me.config.type;\n\n\t\t\tif (meta.type && meta.type !== type) {\n\t\t\t\tme.destroyDatasetMeta(i);\n\t\t\t\tmeta = me.getDatasetMeta(i);\n\t\t\t}\n\t\t\tmeta.type = type;\n\t\t\tmeta.order = dataset.order || 0;\n\t\t\tmeta.index = i;\n\n\t\t\tif (meta.controller) {\n\t\t\t\tmeta.controller.updateIndex(i);\n\t\t\t\tmeta.controller.linkScales();\n\t\t\t} else {\n\t\t\t\tvar ControllerClass = controllers[meta.type];\n\t\t\t\tif (ControllerClass === undefined) {\n\t\t\t\t\tthrow new Error('\"' + meta.type + '\" is not a chart type.');\n\t\t\t\t}\n\n\t\t\t\tmeta.controller = new ControllerClass(me, i);\n\t\t\t\tnewControllers.push(meta.controller);\n\t\t\t}\n\t\t}\n\n\t\treturn newControllers;\n\t},\n\n\t/**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n\tresetElements: function() {\n\t\tvar me = this;\n\t\thelpers$1.each(me.data.datasets, function(dataset, datasetIndex) {\n\t\t\tme.getDatasetMeta(datasetIndex).controller.reset();\n\t\t}, me);\n\t},\n\n\t/**\n\t* Resets the chart back to it's state before the initial animation\n\t*/\n\treset: function() {\n\t\tthis.resetElements();\n\t\tthis.tooltip.initialize();\n\t},\n\n\tupdate: function(config) {\n\t\tvar me = this;\n\t\tvar i, ilen;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tupdateConfig(me);\n\n\t\t// plugins options references might have change, let's invalidate the cache\n\t\t// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n\t\tcore_plugins._invalidate(me);\n\n\t\tif (core_plugins.notify(me, 'beforeUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In case the entire data object changed\n\t\tme.tooltip._data = me.data;\n\n\t\t// Make sure dataset controllers are updated and new controllers are reset\n\t\tvar newControllers = me.buildOrUpdateControllers();\n\n\t\t// Make sure all dataset controllers have correct meta data counts\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {\n\t\t\tme.getDatasetMeta(i).controller.buildOrUpdateElements();\n\t\t}\n\n\t\tme.updateLayout();\n\n\t\t// Can only reset the new controllers after the scales have been updated\n\t\tif (me.options.animation && me.options.animation.duration) {\n\t\t\thelpers$1.each(newControllers, function(controller) {\n\t\t\t\tcontroller.reset();\n\t\t\t});\n\t\t}\n\n\t\tme.updateDatasets();\n\n\t\t// Need to reset tooltip in case it is displayed with elements that are removed\n\t\t// after update.\n\t\tme.tooltip.initialize();\n\n\t\t// Last active contains items that were previously in the tooltip.\n\t\t// When we reset the tooltip, we need to clear it\n\t\tme.lastActive = [];\n\n\t\t// Do this before render so that any plugins that need final scale updates can use it\n\t\tcore_plugins.notify(me, 'afterUpdate');\n\n\t\tme._layers.sort(compare2Level('z', '_idx'));\n\n\t\tif (me._bufferedRender) {\n\t\t\tme._bufferedRequest = {\n\t\t\t\tduration: config.duration,\n\t\t\t\teasing: config.easing,\n\t\t\t\tlazy: config.lazy\n\t\t\t};\n\t\t} else {\n\t\t\tme.render(config);\n\t\t}\n\t},\n\n\t/**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n\tupdateLayout: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeLayout') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tcore_layouts.update(this, this.width, this.height);\n\n\t\tme._layers = [];\n\t\thelpers$1.each(me.boxes, function(box) {\n\t\t\t// _configure is called twice, once in core.scale.update and once here.\n\t\t\t// Here the boxes are fully updated and at their final positions.\n\t\t\tif (box._configure) {\n\t\t\t\tbox._configure();\n\t\t\t}\n\t\t\tme._layers.push.apply(me._layers, box._layers());\n\t\t}, me);\n\n\t\tme._layers.forEach(function(item, index) {\n\t\t\titem._idx = index;\n\t\t});\n\n\t\t/**\n\t\t * Provided for backward compatibility, use `afterLayout` instead.\n\t\t * @method IPlugin#afterScaleUpdate\n\t\t * @deprecated since version 2.5.0\n\t\t * @todo remove at version 3\n\t\t * @private\n\t\t */\n\t\tcore_plugins.notify(me, 'afterScaleUpdate');\n\t\tcore_plugins.notify(me, 'afterLayout');\n\t},\n\n\t/**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n\tupdateDatasets: function() {\n\t\tvar me = this;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.updateDataset(i);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsUpdate');\n\t},\n\n\t/**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n\tupdateDataset: function(index) {\n\t\tvar me = this;\n\t\tvar meta = me.getDatasetMeta(index);\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: index\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller._update();\n\n\t\tcore_plugins.notify(me, 'afterDatasetUpdate', [args]);\n\t},\n\n\trender: function(config) {\n\t\tvar me = this;\n\n\t\tif (!config || typeof config !== 'object') {\n\t\t\t// backwards compatibility\n\t\t\tconfig = {\n\t\t\t\tduration: config,\n\t\t\t\tlazy: arguments[1]\n\t\t\t};\n\t\t}\n\n\t\tvar animationOptions = me.options.animation;\n\t\tvar duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);\n\t\tvar lazy = config.lazy;\n\n\t\tif (core_plugins.notify(me, 'beforeRender') === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar onComplete = function(animation) {\n\t\t\tcore_plugins.notify(me, 'afterRender');\n\t\t\thelpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);\n\t\t};\n\n\t\tif (animationOptions && duration) {\n\t\t\tvar animation = new core_animation({\n\t\t\t\tnumSteps: duration / 16.66, // 60 fps\n\t\t\t\teasing: config.easing || animationOptions.easing,\n\n\t\t\t\trender: function(chart, animationObject) {\n\t\t\t\t\tvar easingFunction = helpers$1.easing.effects[animationObject.easing];\n\t\t\t\t\tvar currentStep = animationObject.currentStep;\n\t\t\t\t\tvar stepDecimal = currentStep / animationObject.numSteps;\n\n\t\t\t\t\tchart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);\n\t\t\t\t},\n\n\t\t\t\tonAnimationProgress: animationOptions.onProgress,\n\t\t\t\tonAnimationComplete: onComplete\n\t\t\t});\n\n\t\t\tcore_animations.addAnimation(me, animation, duration, lazy);\n\t\t} else {\n\t\t\tme.draw();\n\n\t\t\t// See https://github.com/chartjs/Chart.js/issues/3781\n\t\t\tonComplete(new core_animation({numSteps: 0, chart: me}));\n\t\t}\n\n\t\treturn me;\n\t},\n\n\tdraw: function(easingValue) {\n\t\tvar me = this;\n\t\tvar i, layers;\n\n\t\tme.clear();\n\n\t\tif (helpers$1.isNullOrUndef(easingValue)) {\n\t\t\teasingValue = 1;\n\t\t}\n\n\t\tme.transition(easingValue);\n\n\t\tif (me.width <= 0 || me.height <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n\t\t// currently be part of layers. Instead, we draw\n\t\t// layers <= 0 before(default, backward compat), and the rest after\n\t\tlayers = me._layers;\n\t\tfor (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n\t\t\tlayers[i].draw(me.chartArea);\n\t\t}\n\n\t\tme.drawDatasets(easingValue);\n\n\t\t// Rest of layers\n\t\tfor (; i < layers.length; ++i) {\n\t\t\tlayers[i].draw(me.chartArea);\n\t\t}\n\n\t\tme._drawTooltip(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDraw', [easingValue]);\n\t},\n\n\t/**\n\t * @private\n\t */\n\ttransition: function(easingValue) {\n\t\tvar me = this;\n\n\t\tfor (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (me.isDatasetVisible(i)) {\n\t\t\t\tme.getDatasetMeta(i).controller.transition(easingValue);\n\t\t\t}\n\t\t}\n\n\t\tme.tooltip.transition(easingValue);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getSortedDatasetMetas: function(filterVisible) {\n\t\tvar me = this;\n\t\tvar datasets = me.data.datasets || [];\n\t\tvar result = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; ++i) {\n\t\t\tif (!filterVisible || me.isDatasetVisible(i)) {\n\t\t\t\tresult.push(me.getDatasetMeta(i));\n\t\t\t}\n\t\t}\n\n\t\tresult.sort(compare2Level('order', 'index'));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getSortedVisibleDatasetMetas: function() {\n\t\treturn this._getSortedDatasetMetas(true);\n\t},\n\n\t/**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n\tdrawDatasets: function(easingValue) {\n\t\tvar me = this;\n\t\tvar metasets, i;\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmetasets = me._getSortedVisibleDatasetMetas();\n\t\tfor (i = metasets.length - 1; i >= 0; --i) {\n\t\t\tme.drawDataset(metasets[i], easingValue);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);\n\t},\n\n\t/**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n\tdrawDataset: function(meta, easingValue) {\n\t\tvar me = this;\n\t\tvar args = {\n\t\t\tmeta: meta,\n\t\t\tindex: meta.index,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tmeta.controller.draw(easingValue);\n\n\t\tcore_plugins.notify(me, 'afterDatasetDraw', [args]);\n\t},\n\n\t/**\n\t * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`\n\t * hook, in which case, plugins will not be called on `afterTooltipDraw`.\n\t * @private\n\t */\n\t_drawTooltip: function(easingValue) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\t\tvar args = {\n\t\t\ttooltip: tooltip,\n\t\t\teasingValue: easingValue\n\t\t};\n\n\t\tif (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\ttooltip.draw();\n\n\t\tcore_plugins.notify(me, 'afterTooltipDraw', [args]);\n\t},\n\n\t/**\n\t * Get the single element that was clicked on\n\t * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw\n\t */\n\tgetElementAtEvent: function(e) {\n\t\treturn core_interaction.modes.single(this, e);\n\t},\n\n\tgetElementsAtEvent: function(e) {\n\t\treturn core_interaction.modes.label(this, e, {intersect: true});\n\t},\n\n\tgetElementsAtXAxis: function(e) {\n\t\treturn core_interaction.modes['x-axis'](this, e, {intersect: true});\n\t},\n\n\tgetElementsAtEventForMode: function(e, mode, options) {\n\t\tvar method = core_interaction.modes[mode];\n\t\tif (typeof method === 'function') {\n\t\t\treturn method(this, e, options);\n\t\t}\n\n\t\treturn [];\n\t},\n\n\tgetDatasetAtEvent: function(e) {\n\t\treturn core_interaction.modes.dataset(this, e, {intersect: true});\n\t},\n\n\tgetDatasetMeta: function(datasetIndex) {\n\t\tvar me = this;\n\t\tvar dataset = me.data.datasets[datasetIndex];\n\t\tif (!dataset._meta) {\n\t\t\tdataset._meta = {};\n\t\t}\n\n\t\tvar meta = dataset._meta[me.id];\n\t\tif (!meta) {\n\t\t\tmeta = dataset._meta[me.id] = {\n\t\t\t\ttype: null,\n\t\t\t\tdata: [],\n\t\t\t\tdataset: null,\n\t\t\t\tcontroller: null,\n\t\t\t\thidden: null,\t\t\t// See isDatasetVisible() comment\n\t\t\t\txAxisID: null,\n\t\t\t\tyAxisID: null,\n\t\t\t\torder: dataset.order || 0,\n\t\t\t\tindex: datasetIndex\n\t\t\t};\n\t\t}\n\n\t\treturn meta;\n\t},\n\n\tgetVisibleDatasetCount: function() {\n\t\tvar count = 0;\n\t\tfor (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (this.isDatasetVisible(i)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\n\tisDatasetVisible: function(datasetIndex) {\n\t\tvar meta = this.getDatasetMeta(datasetIndex);\n\n\t\t// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n\t\t// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n\t\treturn typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;\n\t},\n\n\tgenerateLegend: function() {\n\t\treturn this.options.legendCallback(this);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tdestroyDatasetMeta: function(datasetIndex) {\n\t\tvar id = this.id;\n\t\tvar dataset = this.data.datasets[datasetIndex];\n\t\tvar meta = dataset._meta && dataset._meta[id];\n\n\t\tif (meta) {\n\t\t\tmeta.controller.destroy();\n\t\t\tdelete dataset._meta[id];\n\t\t}\n\t},\n\n\tdestroy: function() {\n\t\tvar me = this;\n\t\tvar canvas = me.canvas;\n\t\tvar i, ilen;\n\n\t\tme.stop();\n\n\t\t// dataset controllers need to cleanup associated data\n\t\tfor (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n\t\t\tme.destroyDatasetMeta(i);\n\t\t}\n\n\t\tif (canvas) {\n\t\t\tme.unbindEvents();\n\t\t\thelpers$1.canvas.clear(me);\n\t\t\tplatform.releaseContext(me.ctx);\n\t\t\tme.canvas = null;\n\t\t\tme.ctx = null;\n\t\t}\n\n\t\tcore_plugins.notify(me, 'destroy');\n\n\t\tdelete Chart.instances[me.id];\n\t},\n\n\ttoBase64Image: function() {\n\t\treturn this.canvas.toDataURL.apply(this.canvas, arguments);\n\t},\n\n\tinitToolTip: function() {\n\t\tvar me = this;\n\t\tme.tooltip = new core_tooltip({\n\t\t\t_chart: me,\n\t\t\t_chartInstance: me, // deprecated, backward compatibility\n\t\t\t_data: me.data,\n\t\t\t_options: me.options.tooltips\n\t\t}, me);\n\t},\n\n\t/**\n\t * @private\n\t */\n\tbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners = {};\n\t\tvar listener = function() {\n\t\t\tme.eventHandler.apply(me, arguments);\n\t\t};\n\n\t\thelpers$1.each(me.options.events, function(type) {\n\t\t\tplatform.addEventListener(me, type, listener);\n\t\t\tlisteners[type] = listener;\n\t\t});\n\n\t\t// Elements used to detect size change should not be injected for non responsive charts.\n\t\t// See https://github.com/chartjs/Chart.js/issues/2210\n\t\tif (me.options.responsive) {\n\t\t\tlistener = function() {\n\t\t\t\tme.resize();\n\t\t\t};\n\n\t\t\tplatform.addEventListener(me, 'resize', listener);\n\t\t\tlisteners.resize = listener;\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\tunbindEvents: function() {\n\t\tvar me = this;\n\t\tvar listeners = me._listeners;\n\t\tif (!listeners) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete me._listeners;\n\t\thelpers$1.each(listeners, function(listener, type) {\n\t\t\tplatform.removeEventListener(me, type, listener);\n\t\t});\n\t},\n\n\tupdateHoverStyle: function(elements, mode, enabled) {\n\t\tvar prefix = enabled ? 'set' : 'remove';\n\t\tvar element, i, ilen;\n\n\t\tfor (i = 0, ilen = elements.length; i < ilen; ++i) {\n\t\t\telement = elements[i];\n\t\t\tif (element) {\n\t\t\t\tthis.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);\n\t\t\t}\n\t\t}\n\n\t\tif (mode === 'dataset') {\n\t\t\tthis.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\teventHandler: function(e) {\n\t\tvar me = this;\n\t\tvar tooltip = me.tooltip;\n\n\t\tif (core_plugins.notify(me, 'beforeEvent', [e]) === false) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Buffer any update calls so that renders do not occur\n\t\tme._bufferedRender = true;\n\t\tme._bufferedRequest = null;\n\n\t\tvar changed = me.handleEvent(e);\n\t\t// for smooth tooltip animations issue #4989\n\t\t// the tooltip should be the source of change\n\t\t// Animation check workaround:\n\t\t// tooltip._start will be null when tooltip isn't animating\n\t\tif (tooltip) {\n\t\t\tchanged = tooltip._start\n\t\t\t\t? tooltip.handleEvent(e)\n\t\t\t\t: changed | tooltip.handleEvent(e);\n\t\t}\n\n\t\tcore_plugins.notify(me, 'afterEvent', [e]);\n\n\t\tvar bufferedRequest = me._bufferedRequest;\n\t\tif (bufferedRequest) {\n\t\t\t// If we have an update that was triggered, we need to do a normal render\n\t\t\tme.render(bufferedRequest);\n\t\t} else if (changed && !me.animating) {\n\t\t\t// If entering, leaving, or changing elements, animate the change via pivot\n\t\t\tme.stop();\n\n\t\t\t// We only need to render at this point. Updating will cause scales to be\n\t\t\t// recomputed generating flicker & using more memory than necessary.\n\t\t\tme.render({\n\t\t\t\tduration: me.options.hover.animationDuration,\n\t\t\t\tlazy: true\n\t\t\t});\n\t\t}\n\n\t\tme._bufferedRender = false;\n\t\tme._bufferedRequest = null;\n\n\t\treturn me;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event the event to handle\n\t * @return {boolean} true if the chart needs to re-render\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar options = me.options || {};\n\t\tvar hoverOptions = options.hover;\n\t\tvar changed = false;\n\n\t\tme.lastActive = me.lastActive || [];\n\n\t\t// Find Active Elements for hover and tooltips\n\t\tif (e.type === 'mouseout') {\n\t\t\tme.active = [];\n\t\t} else {\n\t\t\tme.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);\n\t\t}\n\n\t\t// Invoke onHover hook\n\t\t// Need to call with native event here to not break backwards compatibility\n\t\thelpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);\n\n\t\tif (e.type === 'mouseup' || e.type === 'click') {\n\t\t\tif (options.onClick) {\n\t\t\t\t// Use e.native here for backwards compatibility\n\t\t\t\toptions.onClick.call(me, e.native, me.active);\n\t\t\t}\n\t\t}\n\n\t\t// Remove styling for last active (even if it may still be active)\n\t\tif (me.lastActive.length) {\n\t\t\tme.updateHoverStyle(me.lastActive, hoverOptions.mode, false);\n\t\t}\n\n\t\t// Built in hover styling\n\t\tif (me.active.length && hoverOptions.mode) {\n\t\t\tme.updateHoverStyle(me.active, hoverOptions.mode, true);\n\t\t}\n\n\t\tchanged = !helpers$1.arrayEquals(me.active, me.lastActive);\n\n\t\t// Remember Last Actives\n\t\tme.lastActive = me.active;\n\n\t\treturn changed;\n\t}\n});\n\n/**\n * NOTE(SB) We actually don't use this container anymore but we need to keep it\n * for backward compatibility. Though, it can still be useful for plugins that\n * would need to work on multiple charts?!\n */\nChart.instances = {};\n\nvar core_controller = Chart;\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, use Chart instead.\n * @class Chart.Controller\n * @deprecated since version 2.6\n * @todo remove at version 3\n * @private\n */\nChart.Controller = Chart;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\nChart.types = {};\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.configMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.configMerge = mergeConfig;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.helpers.scaleMerge\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\nhelpers$1.scaleMerge = mergeScaleConfig;\n\nvar core_helpers = function() {\n\n\t// -- Basic js utility methods\n\n\thelpers$1.where = function(collection, filterCallback) {\n\t\tif (helpers$1.isArray(collection) && Array.prototype.filter) {\n\t\t\treturn collection.filter(filterCallback);\n\t\t}\n\t\tvar filtered = [];\n\n\t\thelpers$1.each(collection, function(item) {\n\t\t\tif (filterCallback(item)) {\n\t\t\t\tfiltered.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn filtered;\n\t};\n\thelpers$1.findIndex = Array.prototype.findIndex ?\n\t\tfunction(array, callback, scope) {\n\t\t\treturn array.findIndex(callback, scope);\n\t\t} :\n\t\tfunction(array, callback, scope) {\n\t\t\tscope = scope === undefined ? array : scope;\n\t\t\tfor (var i = 0, ilen = array.length; i < ilen; ++i) {\n\t\t\t\tif (callback.call(scope, array[i], i, array)) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t};\n\thelpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to start of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = -1;\n\t\t}\n\t\tfor (var i = startIndex + 1; i < arrayToSearch.length; i++) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {\n\t\t// Default to end of the array\n\t\tif (helpers$1.isNullOrUndef(startIndex)) {\n\t\t\tstartIndex = arrayToSearch.length;\n\t\t}\n\t\tfor (var i = startIndex - 1; i >= 0; i--) {\n\t\t\tvar currentItem = arrayToSearch[i];\n\t\t\tif (filterCallback(currentItem)) {\n\t\t\t\treturn currentItem;\n\t\t\t}\n\t\t}\n\t};\n\n\t// -- Math methods\n\thelpers$1.isNumber = function(n) {\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n);\n\t};\n\thelpers$1.almostEquals = function(x, y, epsilon) {\n\t\treturn Math.abs(x - y) < epsilon;\n\t};\n\thelpers$1.almostWhole = function(x, epsilon) {\n\t\tvar rounded = Math.round(x);\n\t\treturn ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n\t};\n\thelpers$1.max = function(array) {\n\t\treturn array.reduce(function(max, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.max(max, value);\n\t\t\t}\n\t\t\treturn max;\n\t\t}, Number.NEGATIVE_INFINITY);\n\t};\n\thelpers$1.min = function(array) {\n\t\treturn array.reduce(function(min, value) {\n\t\t\tif (!isNaN(value)) {\n\t\t\t\treturn Math.min(min, value);\n\t\t\t}\n\t\t\treturn min;\n\t\t}, Number.POSITIVE_INFINITY);\n\t};\n\thelpers$1.sign = Math.sign ?\n\t\tfunction(x) {\n\t\t\treturn Math.sign(x);\n\t\t} :\n\t\tfunction(x) {\n\t\t\tx = +x; // convert to a number\n\t\t\tif (x === 0 || isNaN(x)) {\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\treturn x > 0 ? 1 : -1;\n\t\t};\n\thelpers$1.toRadians = function(degrees) {\n\t\treturn degrees * (Math.PI / 180);\n\t};\n\thelpers$1.toDegrees = function(radians) {\n\t\treturn radians * (180 / Math.PI);\n\t};\n\n\t/**\n\t * Returns the number of decimal places\n\t * i.e. the number of digits after the decimal point, of the value of this Number.\n\t * @param {number} x - A number.\n\t * @returns {number} The number of decimal places.\n\t * @private\n\t */\n\thelpers$1._decimalPlaces = function(x) {\n\t\tif (!helpers$1.isFinite(x)) {\n\t\t\treturn;\n\t\t}\n\t\tvar e = 1;\n\t\tvar p = 0;\n\t\twhile (Math.round(x * e) / e !== x) {\n\t\t\te *= 10;\n\t\t\tp++;\n\t\t}\n\t\treturn p;\n\t};\n\n\t// Gets the angle from vertical upright to the point about a centre.\n\thelpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {\n\t\tvar distanceFromXCenter = anglePoint.x - centrePoint.x;\n\t\tvar distanceFromYCenter = anglePoint.y - centrePoint.y;\n\t\tvar radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n\n\t\tvar angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n\n\t\tif (angle < (-0.5 * Math.PI)) {\n\t\t\tangle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n\t\t}\n\n\t\treturn {\n\t\t\tangle: angle,\n\t\t\tdistance: radialDistanceFromCenter\n\t\t};\n\t};\n\thelpers$1.distanceBetweenPoints = function(pt1, pt2) {\n\t\treturn Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n\t};\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.helpers.aliasPixel\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\thelpers$1.aliasPixel = function(pixelWidth) {\n\t\treturn (pixelWidth % 2 === 0) ? 0 : 0.5;\n\t};\n\n\t/**\n\t * Returns the aligned pixel value to avoid anti-aliasing blur\n\t * @param {Chart} chart - The chart instance.\n\t * @param {number} pixel - A pixel value.\n\t * @param {number} width - The width of the element.\n\t * @returns {number} The aligned pixel value.\n\t * @private\n\t */\n\thelpers$1._alignPixel = function(chart, pixel, width) {\n\t\tvar devicePixelRatio = chart.currentDevicePixelRatio;\n\t\tvar halfWidth = width / 2;\n\t\treturn Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n\t};\n\n\thelpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {\n\t\t// Props to Rob Spencer at scaled innovation for his post on splining between points\n\t\t// http://scaledinnovation.com/analytics/splines/aboutSplines.html\n\n\t\t// This function must also respect \"skipped\" points\n\n\t\tvar previous = firstPoint.skip ? middlePoint : firstPoint;\n\t\tvar current = middlePoint;\n\t\tvar next = afterPoint.skip ? middlePoint : afterPoint;\n\n\t\tvar d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));\n\t\tvar d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));\n\n\t\tvar s01 = d01 / (d01 + d12);\n\t\tvar s12 = d12 / (d01 + d12);\n\n\t\t// If all points are the same, s01 & s02 will be inf\n\t\ts01 = isNaN(s01) ? 0 : s01;\n\t\ts12 = isNaN(s12) ? 0 : s12;\n\n\t\tvar fa = t * s01; // scaling factor for triangle Ta\n\t\tvar fb = t * s12;\n\n\t\treturn {\n\t\t\tprevious: {\n\t\t\t\tx: current.x - fa * (next.x - previous.x),\n\t\t\t\ty: current.y - fa * (next.y - previous.y)\n\t\t\t},\n\t\t\tnext: {\n\t\t\t\tx: current.x + fb * (next.x - previous.x),\n\t\t\t\ty: current.y + fb * (next.y - previous.y)\n\t\t\t}\n\t\t};\n\t};\n\thelpers$1.EPSILON = Number.EPSILON || 1e-14;\n\thelpers$1.splineCurveMonotone = function(points) {\n\t\t// This function calculates Bézier control points in a similar way than |splineCurve|,\n\t\t// but preserves monotonicity of the provided data and ensures no local extremums are added\n\t\t// between the dataset discrete points due to the interpolation.\n\t\t// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n\n\t\tvar pointsWithTangents = (points || []).map(function(point) {\n\t\t\treturn {\n\t\t\t\tmodel: point._model,\n\t\t\t\tdeltaK: 0,\n\t\t\t\tmK: 0\n\t\t\t};\n\t\t});\n\n\t\t// Calculate slopes (deltaK) and initialize tangents (mK)\n\t\tvar pointsLen = pointsWithTangents.length;\n\t\tvar i, pointBefore, pointCurrent, pointAfter;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tvar slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);\n\n\t\t\t\t// In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n\t\t\t\tpointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;\n\t\t\t}\n\n\t\t\tif (!pointBefore || pointBefore.model.skip) {\n\t\t\t\tpointCurrent.mK = pointCurrent.deltaK;\n\t\t\t} else if (!pointAfter || pointAfter.model.skip) {\n\t\t\t\tpointCurrent.mK = pointBefore.deltaK;\n\t\t\t} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {\n\t\t\t\tpointCurrent.mK = 0;\n\t\t\t} else {\n\t\t\t\tpointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust tangents to ensure monotonic properties\n\t\tvar alphaK, betaK, tauK, squaredMagnitude;\n\t\tfor (i = 0; i < pointsLen - 1; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tpointAfter = pointsWithTangents[i + 1];\n\t\t\tif (pointCurrent.model.skip || pointAfter.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {\n\t\t\t\tpointCurrent.mK = pointAfter.mK = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talphaK = pointCurrent.mK / pointCurrent.deltaK;\n\t\t\tbetaK = pointAfter.mK / pointCurrent.deltaK;\n\t\t\tsquaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n\t\t\tif (squaredMagnitude <= 9) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttauK = 3 / Math.sqrt(squaredMagnitude);\n\t\t\tpointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;\n\t\t\tpointAfter.mK = betaK * tauK * pointCurrent.deltaK;\n\t\t}\n\n\t\t// Compute control points\n\t\tvar deltaX;\n\t\tfor (i = 0; i < pointsLen; ++i) {\n\t\t\tpointCurrent = pointsWithTangents[i];\n\t\t\tif (pointCurrent.model.skip) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpointBefore = i > 0 ? pointsWithTangents[i - 1] : null;\n\t\t\tpointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;\n\t\t\tif (pointBefore && !pointBefore.model.skip) {\n\t\t\t\tdeltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;\n\t\t\t\tpointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t\tif (pointAfter && !pointAfter.model.skip) {\n\t\t\t\tdeltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;\n\t\t\t\tpointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;\n\t\t\t\tpointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;\n\t\t\t}\n\t\t}\n\t};\n\thelpers$1.nextItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index >= collection.length - 1 ? collection[0] : collection[index + 1];\n\t\t}\n\t\treturn index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];\n\t};\n\thelpers$1.previousItem = function(collection, index, loop) {\n\t\tif (loop) {\n\t\t\treturn index <= 0 ? collection[collection.length - 1] : collection[index - 1];\n\t\t}\n\t\treturn index <= 0 ? collection[0] : collection[index - 1];\n\t};\n\t// Implementation of the nice number algorithm used in determining where axis labels will go\n\thelpers$1.niceNum = function(range, round) {\n\t\tvar exponent = Math.floor(helpers$1.log10(range));\n\t\tvar fraction = range / Math.pow(10, exponent);\n\t\tvar niceFraction;\n\n\t\tif (round) {\n\t\t\tif (fraction < 1.5) {\n\t\t\t\tniceFraction = 1;\n\t\t\t} else if (fraction < 3) {\n\t\t\t\tniceFraction = 2;\n\t\t\t} else if (fraction < 7) {\n\t\t\t\tniceFraction = 5;\n\t\t\t} else {\n\t\t\t\tniceFraction = 10;\n\t\t\t}\n\t\t} else if (fraction <= 1.0) {\n\t\t\tniceFraction = 1;\n\t\t} else if (fraction <= 2) {\n\t\t\tniceFraction = 2;\n\t\t} else if (fraction <= 5) {\n\t\t\tniceFraction = 5;\n\t\t} else {\n\t\t\tniceFraction = 10;\n\t\t}\n\n\t\treturn niceFraction * Math.pow(10, exponent);\n\t};\n\t// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n\thelpers$1.requestAnimFrame = (function() {\n\t\tif (typeof window === 'undefined') {\n\t\t\treturn function(callback) {\n\t\t\t\tcallback();\n\t\t\t};\n\t\t}\n\t\treturn window.requestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\twindow.mozRequestAnimationFrame ||\n\t\t\twindow.oRequestAnimationFrame ||\n\t\t\twindow.msRequestAnimationFrame ||\n\t\t\tfunction(callback) {\n\t\t\t\treturn window.setTimeout(callback, 1000 / 60);\n\t\t\t};\n\t}());\n\t// -- DOM methods\n\thelpers$1.getRelativePosition = function(evt, chart) {\n\t\tvar mouseX, mouseY;\n\t\tvar e = evt.originalEvent || evt;\n\t\tvar canvas = evt.target || evt.srcElement;\n\t\tvar boundingRect = canvas.getBoundingClientRect();\n\n\t\tvar touches = e.touches;\n\t\tif (touches && touches.length > 0) {\n\t\t\tmouseX = touches[0].clientX;\n\t\t\tmouseY = touches[0].clientY;\n\n\t\t} else {\n\t\t\tmouseX = e.clientX;\n\t\t\tmouseY = e.clientY;\n\t\t}\n\n\t\t// Scale mouse coordinates into canvas coordinates\n\t\t// by following the pattern laid out by 'jerryj' in the comments of\n\t\t// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/\n\t\tvar paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));\n\t\tvar paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));\n\t\tvar paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));\n\t\tvar paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));\n\t\tvar width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;\n\t\tvar height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;\n\n\t\t// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However\n\t\t// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here\n\t\tmouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);\n\t\tmouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);\n\n\t\treturn {\n\t\t\tx: mouseX,\n\t\t\ty: mouseY\n\t\t};\n\n\t};\n\n\t// Private helper function to convert max-width/max-height values that may be percentages into a number\n\tfunction parseMaxStyle(styleValue, node, parentProperty) {\n\t\tvar valueInPixels;\n\t\tif (typeof styleValue === 'string') {\n\t\t\tvalueInPixels = parseInt(styleValue, 10);\n\n\t\t\tif (styleValue.indexOf('%') !== -1) {\n\t\t\t\t// percentage * size in dimension\n\t\t\t\tvalueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n\t\t\t}\n\t\t} else {\n\t\t\tvalueInPixels = styleValue;\n\t\t}\n\n\t\treturn valueInPixels;\n\t}\n\n\t/**\n\t * Returns if the given value contains an effective constraint.\n\t * @private\n\t */\n\tfunction isConstrainedValue(value) {\n\t\treturn value !== undefined && value !== null && value !== 'none';\n\t}\n\n\t/**\n\t * Returns the max width or height of the given DOM node in a cross-browser compatible fashion\n\t * @param {HTMLElement} domNode - the node to check the constraint on\n\t * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')\n\t * @param {string} percentageProperty - property of parent to use when calculating width as a percentage\n\t * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}\n\t */\n\tfunction getConstraintDimension(domNode, maxStyle, percentageProperty) {\n\t\tvar view = document.defaultView;\n\t\tvar parentNode = helpers$1._getParentNode(domNode);\n\t\tvar constrainedNode = view.getComputedStyle(domNode)[maxStyle];\n\t\tvar constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];\n\t\tvar hasCNode = isConstrainedValue(constrainedNode);\n\t\tvar hasCContainer = isConstrainedValue(constrainedContainer);\n\t\tvar infinity = Number.POSITIVE_INFINITY;\n\n\t\tif (hasCNode || hasCContainer) {\n\t\t\treturn Math.min(\n\t\t\t\thasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,\n\t\t\t\thasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);\n\t\t}\n\n\t\treturn 'none';\n\t}\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintWidth = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-width', 'clientWidth');\n\t};\n\t// returns Number or undefined if no constraint\n\thelpers$1.getConstraintHeight = function(domNode) {\n\t\treturn getConstraintDimension(domNode, 'max-height', 'clientHeight');\n\t};\n\t/**\n\t * @private\n \t */\n\thelpers$1._calculatePadding = function(container, padding, parentDimension) {\n\t\tpadding = helpers$1.getStyle(container, padding);\n\n\t\treturn padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);\n\t};\n\t/**\n\t * @private\n\t */\n\thelpers$1._getParentNode = function(domNode) {\n\t\tvar parent = domNode.parentNode;\n\t\tif (parent && parent.toString() === '[object ShadowRoot]') {\n\t\t\tparent = parent.host;\n\t\t}\n\t\treturn parent;\n\t};\n\thelpers$1.getMaximumWidth = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientWidth;\n\t\t}\n\n\t\tvar clientWidth = container.clientWidth;\n\t\tvar paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);\n\t\tvar paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);\n\n\t\tvar w = clientWidth - paddingLeft - paddingRight;\n\t\tvar cw = helpers$1.getConstraintWidth(domNode);\n\t\treturn isNaN(cw) ? w : Math.min(w, cw);\n\t};\n\thelpers$1.getMaximumHeight = function(domNode) {\n\t\tvar container = helpers$1._getParentNode(domNode);\n\t\tif (!container) {\n\t\t\treturn domNode.clientHeight;\n\t\t}\n\n\t\tvar clientHeight = container.clientHeight;\n\t\tvar paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);\n\t\tvar paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);\n\n\t\tvar h = clientHeight - paddingTop - paddingBottom;\n\t\tvar ch = helpers$1.getConstraintHeight(domNode);\n\t\treturn isNaN(ch) ? h : Math.min(h, ch);\n\t};\n\thelpers$1.getStyle = function(el, property) {\n\t\treturn el.currentStyle ?\n\t\t\tel.currentStyle[property] :\n\t\t\tdocument.defaultView.getComputedStyle(el, null).getPropertyValue(property);\n\t};\n\thelpers$1.retinaScale = function(chart, forceRatio) {\n\t\tvar pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\t\tif (pixelRatio === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar canvas = chart.canvas;\n\t\tvar height = chart.height;\n\t\tvar width = chart.width;\n\n\t\tcanvas.height = height * pixelRatio;\n\t\tcanvas.width = width * pixelRatio;\n\t\tchart.ctx.scale(pixelRatio, pixelRatio);\n\n\t\t// If no style has been set on the canvas, the render size is used as display size,\n\t\t// making the chart visually bigger, so let's enforce it to the \"correct\" values.\n\t\t// See https://github.com/chartjs/Chart.js/issues/3575\n\t\tif (!canvas.style.height && !canvas.style.width) {\n\t\t\tcanvas.style.height = height + 'px';\n\t\t\tcanvas.style.width = width + 'px';\n\t\t}\n\t};\n\t// -- Canvas methods\n\thelpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {\n\t\treturn fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n\t};\n\thelpers$1.longestText = function(ctx, font, arrayOfThings, cache) {\n\t\tcache = cache || {};\n\t\tvar data = cache.data = cache.data || {};\n\t\tvar gc = cache.garbageCollect = cache.garbageCollect || [];\n\n\t\tif (cache.font !== font) {\n\t\t\tdata = cache.data = {};\n\t\t\tgc = cache.garbageCollect = [];\n\t\t\tcache.font = font;\n\t\t}\n\n\t\tctx.font = font;\n\t\tvar longest = 0;\n\t\tvar ilen = arrayOfThings.length;\n\t\tvar i, j, jlen, thing, nestedThing;\n\t\tfor (i = 0; i < ilen; i++) {\n\t\t\tthing = arrayOfThings[i];\n\n\t\t\t// Undefined strings and arrays should not be measured\n\t\t\tif (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {\n\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, thing);\n\t\t\t} else if (helpers$1.isArray(thing)) {\n\t\t\t\t// if it is an array lets measure each element\n\t\t\t\t// to do maybe simplify this function a bit so we can do this more recursively?\n\t\t\t\tfor (j = 0, jlen = thing.length; j < jlen; j++) {\n\t\t\t\t\tnestedThing = thing[j];\n\t\t\t\t\t// Undefined strings and arrays should not be measured\n\t\t\t\t\tif (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {\n\t\t\t\t\t\tlongest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar gcLen = gc.length / 2;\n\t\tif (gcLen > arrayOfThings.length) {\n\t\t\tfor (i = 0; i < gcLen; i++) {\n\t\t\t\tdelete data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t\treturn longest;\n\t};\n\thelpers$1.measureText = function(ctx, data, gc, longest, string) {\n\t\tvar textWidth = data[string];\n\t\tif (!textWidth) {\n\t\t\ttextWidth = data[string] = ctx.measureText(string).width;\n\t\t\tgc.push(string);\n\t\t}\n\t\tif (textWidth > longest) {\n\t\t\tlongest = textWidth;\n\t\t}\n\t\treturn longest;\n\t};\n\n\t/**\n\t * @deprecated\n\t */\n\thelpers$1.numberOfLabelLines = function(arrayOfThings) {\n\t\tvar numberOfLines = 1;\n\t\thelpers$1.each(arrayOfThings, function(thing) {\n\t\t\tif (helpers$1.isArray(thing)) {\n\t\t\t\tif (thing.length > numberOfLines) {\n\t\t\t\t\tnumberOfLines = thing.length;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn numberOfLines;\n\t};\n\n\thelpers$1.color = !chartjsColor ?\n\t\tfunction(value) {\n\t\t\tconsole.error('Color.js not found!');\n\t\t\treturn value;\n\t\t} :\n\t\tfunction(value) {\n\t\t\t/* global CanvasGradient */\n\t\t\tif (value instanceof CanvasGradient) {\n\t\t\t\tvalue = core_defaults.global.defaultColor;\n\t\t\t}\n\n\t\t\treturn chartjsColor(value);\n\t\t};\n\n\thelpers$1.getHoverColor = function(colorValue) {\n\t\t/* global CanvasPattern */\n\t\treturn (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?\n\t\t\tcolorValue :\n\t\t\thelpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();\n\t};\n};\n\nfunction abstract() {\n\tthrow new Error(\n\t\t'This method is not implemented: either no adapter can ' +\n\t\t'be found or an incomplete integration was provided.'\n\t);\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\n\n/**\n * Currently supported unit string values.\n * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}\n * @memberof Chart._adapters._date\n * @name Unit\n */\n\n/**\n * @class\n */\nfunction DateAdapter(options) {\n\tthis.options = options || {};\n}\n\nhelpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {\n\t/**\n\t * Returns a map of time formats for the supported formatting units defined\n\t * in Unit as well as 'datetime' representing a detailed date/time string.\n\t * @returns {{string: string}}\n\t */\n\tformats: abstract,\n\n\t/**\n\t * Parses the given `value` and return the associated timestamp.\n\t * @param {any} value - the value to parse (usually comes from the data)\n\t * @param {string} [format] - the expected data format\n\t * @returns {(number|null)}\n\t * @function\n\t */\n\tparse: abstract,\n\n\t/**\n\t * Returns the formatted date in the specified `format` for a given `timestamp`.\n\t * @param {number} timestamp - the timestamp to format\n\t * @param {string} format - the date/time token\n\t * @return {string}\n\t * @function\n\t */\n\tformat: abstract,\n\n\t/**\n\t * Adds the specified `amount` of `unit` to the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {number} amount - the amount to add\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tadd: abstract,\n\n\t/**\n\t * Returns the number of `unit` between the given timestamps.\n\t * @param {number} max - the input timestamp (reference)\n\t * @param {number} min - the timestamp to substract\n\t * @param {Unit} unit - the unit as string\n\t * @return {number}\n\t * @function\n\t */\n\tdiff: abstract,\n\n\t/**\n\t * Returns start of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @param {number} [weekday] - the ISO day of the week with 1 being Monday\n\t * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n\t * @function\n\t */\n\tstartOf: abstract,\n\n\t/**\n\t * Returns end of `unit` for the given `timestamp`.\n\t * @param {number} timestamp - the input timestamp\n\t * @param {Unit} unit - the unit as string\n\t * @function\n\t */\n\tendOf: abstract,\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility for scale.getValueForPixel(),\n\t * this method should be overridden only by the moment adapter.\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(value) {\n\t\treturn value;\n\t}\n});\n\nDateAdapter.override = function(members) {\n\thelpers$1.extend(DateAdapter.prototype, members);\n};\n\nvar _date = DateAdapter;\n\nvar core_adapters = {\n\t_date: _date\n};\n\n/**\n * Namespace to hold static tick generation functions\n * @namespace Chart.Ticks\n */\nvar core_ticks = {\n\t/**\n\t * Namespace to hold formatters for different types of ticks\n\t * @namespace Chart.Ticks.formatters\n\t */\n\tformatters: {\n\t\t/**\n\t\t * Formatter for value labels\n\t\t * @method Chart.Ticks.formatters.values\n\t\t * @param value the value to display\n\t\t * @return {string|string[]} the label to display\n\t\t */\n\t\tvalues: function(value) {\n\t\t\treturn helpers$1.isArray(value) ? value : '' + value;\n\t\t},\n\n\t\t/**\n\t\t * Formatter for linear numeric ticks\n\t\t * @method Chart.Ticks.formatters.linear\n\t\t * @param tickValue {number} the value to be formatted\n\t\t * @param index {number} the position of the tickValue parameter in the ticks array\n\t\t * @param ticks {number[]} the list of ticks being converted\n\t\t * @return {string} string representation of the tickValue parameter\n\t\t */\n\t\tlinear: function(tickValue, index, ticks) {\n\t\t\t// If we have lots of ticks, don't use the ones\n\t\t\tvar delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];\n\n\t\t\t// If we have a number like 2.5 as the delta, figure out how many decimal places we need\n\t\t\tif (Math.abs(delta) > 1) {\n\t\t\t\tif (tickValue !== Math.floor(tickValue)) {\n\t\t\t\t\t// not an integer\n\t\t\t\t\tdelta = tickValue - Math.floor(tickValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar logDelta = helpers$1.log10(Math.abs(delta));\n\t\t\tvar tickString = '';\n\n\t\t\tif (tickValue !== 0) {\n\t\t\t\tvar maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));\n\t\t\t\tif (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation\n\t\t\t\t\tvar logTick = helpers$1.log10(Math.abs(tickValue));\n\t\t\t\t\tvar numExponential = Math.floor(logTick) - Math.floor(logDelta);\n\t\t\t\t\tnumExponential = Math.max(Math.min(numExponential, 20), 0);\n\t\t\t\t\ttickString = tickValue.toExponential(numExponential);\n\t\t\t\t} else {\n\t\t\t\t\tvar numDecimal = -1 * Math.floor(logDelta);\n\t\t\t\t\tnumDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places\n\t\t\t\t\ttickString = tickValue.toFixed(numDecimal);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttickString = '0'; // never show decimal places for 0\n\t\t\t}\n\n\t\t\treturn tickString;\n\t\t},\n\n\t\tlogarithmic: function(tickValue, index, ticks) {\n\t\t\tvar remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));\n\n\t\t\tif (tickValue === 0) {\n\t\t\t\treturn '0';\n\t\t\t} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {\n\t\t\t\treturn tickValue.toExponential();\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n};\n\nvar isArray = helpers$1.isArray;\nvar isNullOrUndef = helpers$1.isNullOrUndef;\nvar valueOrDefault$a = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;\n\ncore_defaults._set('scale', {\n\tdisplay: true,\n\tposition: 'left',\n\toffset: false,\n\n\t// grid line settings\n\tgridLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0,0,0,0.1)',\n\t\tlineWidth: 1,\n\t\tdrawBorder: true,\n\t\tdrawOnChartArea: true,\n\t\tdrawTicks: true,\n\t\ttickMarkLength: 10,\n\t\tzeroLineWidth: 1,\n\t\tzeroLineColor: 'rgba(0,0,0,0.25)',\n\t\tzeroLineBorderDash: [],\n\t\tzeroLineBorderDashOffset: 0.0,\n\t\toffsetGridLines: false,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\t// scale label\n\tscaleLabel: {\n\t\t// display property\n\t\tdisplay: false,\n\n\t\t// actual label\n\t\tlabelString: '',\n\n\t\t// top/bottom padding\n\t\tpadding: {\n\t\t\ttop: 4,\n\t\t\tbottom: 4\n\t\t}\n\t},\n\n\t// label settings\n\tticks: {\n\t\tbeginAtZero: false,\n\t\tminRotation: 0,\n\t\tmaxRotation: 50,\n\t\tmirror: false,\n\t\tpadding: 0,\n\t\treverse: false,\n\t\tdisplay: true,\n\t\tautoSkip: true,\n\t\tautoSkipPadding: 0,\n\t\tlabelOffset: 0,\n\t\t// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.\n\t\tcallback: core_ticks.formatters.values,\n\t\tminor: {},\n\t\tmajor: {}\n\t}\n});\n\n/** Returns a new array containing numItems from arr */\nfunction sample(arr, numItems) {\n\tvar result = [];\n\tvar increment = arr.length / numItems;\n\tvar i = 0;\n\tvar len = arr.length;\n\n\tfor (; i < len; i += increment) {\n\t\tresult.push(arr[Math.floor(i)]);\n\t}\n\treturn result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n\tvar length = scale.getTicks().length;\n\tvar validIndex = Math.min(index, length - 1);\n\tvar lineValue = scale.getPixelForTick(validIndex);\n\tvar start = scale._startPixel;\n\tvar end = scale._endPixel;\n\tvar epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n\tvar offset;\n\n\tif (offsetGridLines) {\n\t\tif (length === 1) {\n\t\t\toffset = Math.max(lineValue - start, end - lineValue);\n\t\t} else if (index === 0) {\n\t\t\toffset = (scale.getPixelForTick(1) - lineValue) / 2;\n\t\t} else {\n\t\t\toffset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n\t\t}\n\t\tlineValue += validIndex < index ? offset : -offset;\n\n\t\t// Return undefined if the pixel is out of the range\n\t\tif (lineValue < start - epsilon || lineValue > end + epsilon) {\n\t\t\treturn;\n\t\t}\n\t}\n\treturn lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n\thelpers$1.each(caches, function(cache) {\n\t\tvar gc = cache.gc;\n\t\tvar gcLen = gc.length / 2;\n\t\tvar i;\n\t\tif (gcLen > length) {\n\t\t\tfor (i = 0; i < gcLen; ++i) {\n\t\t\t\tdelete cache.data[gc[i]];\n\t\t\t}\n\t\t\tgc.splice(0, gcLen);\n\t\t}\n\t});\n}\n\n/**\n * Returns {width, height, offset} objects for the first, last, widest, highest tick\n * labels where offset indicates the anchor point offset from the top in pixels.\n */\nfunction computeLabelSizes(ctx, tickFonts, ticks, caches) {\n\tvar length = ticks.length;\n\tvar widths = [];\n\tvar heights = [];\n\tvar offsets = [];\n\tvar i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;\n\n\tfor (i = 0; i < length; ++i) {\n\t\tlabel = ticks[i].label;\n\t\ttickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;\n\t\tctx.font = fontString = tickFont.string;\n\t\tcache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n\t\tlineHeight = tickFont.lineHeight;\n\t\twidth = height = 0;\n\t\t// Undefined labels and arrays should not be measured\n\t\tif (!isNullOrUndef(label) && !isArray(label)) {\n\t\t\twidth = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);\n\t\t\theight = lineHeight;\n\t\t} else if (isArray(label)) {\n\t\t\t// if it is an array let's measure each element\n\t\t\tfor (j = 0, jlen = label.length; j < jlen; ++j) {\n\t\t\t\tnestedLabel = label[j];\n\t\t\t\t// Undefined labels and arrays should not be measured\n\t\t\t\tif (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n\t\t\t\t\twidth = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n\t\t\t\t\theight += lineHeight;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twidths.push(width);\n\t\theights.push(height);\n\t\toffsets.push(lineHeight / 2);\n\t}\n\tgarbageCollect(caches, length);\n\n\twidest = widths.indexOf(Math.max.apply(null, widths));\n\thighest = heights.indexOf(Math.max.apply(null, heights));\n\n\tfunction valueAt(idx) {\n\t\treturn {\n\t\t\twidth: widths[idx] || 0,\n\t\t\theight: heights[idx] || 0,\n\t\t\toffset: offsets[idx] || 0\n\t\t};\n\t}\n\n\treturn {\n\t\tfirst: valueAt(0),\n\t\tlast: valueAt(length - 1),\n\t\twidest: valueAt(widest),\n\t\thighest: valueAt(highest)\n\t};\n}\n\nfunction getTickMarkLength(options) {\n\treturn options.drawTicks ? options.tickMarkLength : 0;\n}\n\nfunction getScaleLabelHeight(options) {\n\tvar font, padding;\n\n\tif (!options.display) {\n\t\treturn 0;\n\t}\n\n\tfont = helpers$1.options._parseFont(options);\n\tpadding = helpers$1.options.toPadding(options.padding);\n\n\treturn font.lineHeight + padding.height;\n}\n\nfunction parseFontOptions(options, nestedOpts) {\n\treturn helpers$1.extend(helpers$1.options._parseFont({\n\t\tfontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),\n\t\tfontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),\n\t\tfontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),\n\t\tlineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)\n\t}), {\n\t\tcolor: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])\n\t});\n}\n\nfunction parseTickFontOptions(options) {\n\tvar minor = parseFontOptions(options, options.minor);\n\tvar major = options.major.enabled ? parseFontOptions(options, options.major) : minor;\n\n\treturn {minor: minor, major: major};\n}\n\nfunction nonSkipped(ticksToFilter) {\n\tvar filtered = [];\n\tvar item, index, len;\n\tfor (index = 0, len = ticksToFilter.length; index < len; ++index) {\n\t\titem = ticksToFilter[index];\n\t\tif (typeof item._index !== 'undefined') {\n\t\t\tfiltered.push(item);\n\t\t}\n\t}\n\treturn filtered;\n}\n\nfunction getEvenSpacing(arr) {\n\tvar len = arr.length;\n\tvar i, diff;\n\n\tif (len < 2) {\n\t\treturn false;\n\t}\n\n\tfor (diff = arr[0], i = 1; i < len; ++i) {\n\t\tif (arr[i] - arr[i - 1] !== diff) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn diff;\n}\n\nfunction calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {\n\tvar evenMajorSpacing = getEvenSpacing(majorIndices);\n\tvar spacing = (ticks.length - 1) / ticksLimit;\n\tvar factors, factor, i, ilen;\n\n\t// If the major ticks are evenly spaced apart, place the minor ticks\n\t// so that they divide the major ticks into even chunks\n\tif (!evenMajorSpacing) {\n\t\treturn Math.max(spacing, 1);\n\t}\n\n\tfactors = helpers$1.math._factorize(evenMajorSpacing);\n\tfor (i = 0, ilen = factors.length - 1; i < ilen; i++) {\n\t\tfactor = factors[i];\n\t\tif (factor > spacing) {\n\t\t\treturn factor;\n\t\t}\n\t}\n\treturn Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n\tvar result = [];\n\tvar i, ilen;\n\tfor (i = 0, ilen = ticks.length; i < ilen; i++) {\n\t\tif (ticks[i].major) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction skipMajors(ticks, majorIndices, spacing) {\n\tvar count = 0;\n\tvar next = majorIndices[0];\n\tvar i, tick;\n\n\tspacing = Math.ceil(spacing);\n\tfor (i = 0; i < ticks.length; i++) {\n\t\ttick = ticks[i];\n\t\tif (i === next) {\n\t\t\ttick._index = i;\n\t\t\tcount++;\n\t\t\tnext = majorIndices[count * spacing];\n\t\t} else {\n\t\t\tdelete tick.label;\n\t\t}\n\t}\n}\n\nfunction skip(ticks, spacing, majorStart, majorEnd) {\n\tvar start = valueOrDefault$a(majorStart, 0);\n\tvar end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);\n\tvar count = 0;\n\tvar length, i, tick, next;\n\n\tspacing = Math.ceil(spacing);\n\tif (majorEnd) {\n\t\tlength = majorEnd - majorStart;\n\t\tspacing = length / Math.floor(length / spacing);\n\t}\n\n\tnext = start;\n\n\twhile (next < 0) {\n\t\tcount++;\n\t\tnext = Math.round(start + count * spacing);\n\t}\n\n\tfor (i = Math.max(start, 0); i < end; i++) {\n\t\ttick = ticks[i];\n\t\tif (i === next) {\n\t\t\ttick._index = i;\n\t\t\tcount++;\n\t\t\tnext = Math.round(start + count * spacing);\n\t\t} else {\n\t\t\tdelete tick.label;\n\t\t}\n\t}\n}\n\nvar Scale = core_element.extend({\n\n\tzeroLineIndex: 0,\n\n\t/**\n\t * Get the padding needed for the scale\n\t * @method getPadding\n\t * @private\n\t * @returns {Padding} the necessary padding\n\t */\n\tgetPadding: function() {\n\t\tvar me = this;\n\t\treturn {\n\t\t\tleft: me.paddingLeft || 0,\n\t\t\ttop: me.paddingTop || 0,\n\t\t\tright: me.paddingRight || 0,\n\t\t\tbottom: me.paddingBottom || 0\n\t\t};\n\t},\n\n\t/**\n\t * Returns the scale tick objects ({label, major})\n\t * @since 2.7\n\t */\n\tgetTicks: function() {\n\t\treturn this._ticks;\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_getLabels: function() {\n\t\tvar data = this.chart.data;\n\t\treturn this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n\t},\n\n\t// These methods are ordered by lifecyle. Utilities then follow.\n\t// Any function defined here is inherited by all scale types.\n\t// Any function can be extended by the scale type\n\n\t/**\n\t * Provided for backward compatibility, not available anymore\n\t * @function Chart.Scale.mergeTicksOptions\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t */\n\tmergeTicksOptions: function() {\n\t\t// noop\n\t},\n\n\tbeforeUpdate: function() {\n\t\thelpers$1.callback(this.options.beforeUpdate, [this]);\n\t},\n\n\t/**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {object} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar sampleSize = tickOpts.sampleSize;\n\t\tvar i, ilen, labels, ticks, samplingEnabled;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = helpers$1.extend({\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\ttop: 0,\n\t\t\tbottom: 0\n\t\t}, margins);\n\n\t\tme._ticks = null;\n\t\tme.ticks = null;\n\t\tme._labelSizes = null;\n\t\tme._maxLabelLines = 0;\n\t\tme.longestLabelWidth = 0;\n\t\tme.longestTextCache = me.longestTextCache || {};\n\t\tme._gridLineItems = null;\n\t\tme._labelItems = null;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\n\t\t// Data min/max\n\t\tme.beforeDataLimits();\n\t\tme.determineDataLimits();\n\t\tme.afterDataLimits();\n\n\t\t// Ticks - `this.ticks` is now DEPRECATED!\n\t\t// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member\n\t\t// and must not be accessed directly from outside this class. `this.ticks` being\n\t\t// around for long time and not marked as private, we can't change its structure\n\t\t// without unexpected breaking changes. If you need to access the scale ticks,\n\t\t// use scale.getTicks() instead.\n\n\t\tme.beforeBuildTicks();\n\n\t\t// New implementations should return an array of objects but for BACKWARD COMPAT,\n\t\t// we still support no return (`this.ticks` internally set by calling this method).\n\t\tticks = me.buildTicks() || [];\n\n\t\t// Allow modification of ticks in callback.\n\t\tticks = me.afterBuildTicks(ticks) || ticks;\n\n\t\t// Ensure ticks contains ticks in new tick format\n\t\tif ((!ticks || !ticks.length) && me.ticks) {\n\t\t\tticks = [];\n\t\t\tfor (i = 0, ilen = me.ticks.length; i < ilen; ++i) {\n\t\t\t\tticks.push({\n\t\t\t\t\tvalue: me.ticks[i],\n\t\t\t\t\tmajor: false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tme._ticks = ticks;\n\n\t\t// Compute tick rotation and fit using a sampled subset of labels\n\t\t// We generally don't need to compute the size of every single label for determining scale size\n\t\tsamplingEnabled = sampleSize < ticks.length;\n\t\tlabels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);\n\n\t\t// _configure is called twice, once here, once from core.controller.updateLayout.\n\t\t// Here we haven't been positioned yet, but dimensions are correct.\n\t\t// Variables set in _configure are needed for calculateTickRotation, and\n\t\t// it's ok that coordinates are not correct there, only dimensions matter.\n\t\tme._configure();\n\n\t\t// Tick Rotation\n\t\tme.beforeCalculateTickRotation();\n\t\tme.calculateTickRotation();\n\t\tme.afterCalculateTickRotation();\n\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\n\t\t// Auto-skip\n\t\tme._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;\n\n\t\tif (samplingEnabled) {\n\t\t\t// Generate labels using all non-skipped ticks\n\t\t\tlabels = me._convertTicksToLabels(me._ticksToDraw);\n\t\t}\n\n\t\tme.ticks = labels;   // BACKWARD COMPATIBILITY\n\n\t\t// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n\t\tme.afterUpdate();\n\n\t\t// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused\n\t\t// make maxWidth and maxHeight private\n\t\treturn me.minSize;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar reversePixels = me.options.ticks.reverse;\n\t\tvar startPixel, endPixel;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tstartPixel = me.left;\n\t\t\tendPixel = me.right;\n\t\t} else {\n\t\t\tstartPixel = me.top;\n\t\t\tendPixel = me.bottom;\n\t\t\t// by default vertical scales are from bottom to top, so pixels are reversed\n\t\t\treversePixels = !reversePixels;\n\t\t}\n\t\tme._startPixel = startPixel;\n\t\tme._endPixel = endPixel;\n\t\tme._reversePixels = reversePixels;\n\t\tme._length = endPixel - startPixel;\n\t},\n\n\tafterUpdate: function() {\n\t\thelpers$1.callback(this.options.afterUpdate, [this]);\n\t},\n\n\t//\n\n\tbeforeSetDimensions: function() {\n\t\thelpers$1.callback(this.options.beforeSetDimensions, [this]);\n\t},\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\t},\n\tafterSetDimensions: function() {\n\t\thelpers$1.callback(this.options.afterSetDimensions, [this]);\n\t},\n\n\t// Data limits\n\tbeforeDataLimits: function() {\n\t\thelpers$1.callback(this.options.beforeDataLimits, [this]);\n\t},\n\tdetermineDataLimits: helpers$1.noop,\n\tafterDataLimits: function() {\n\t\thelpers$1.callback(this.options.afterDataLimits, [this]);\n\t},\n\n\t//\n\tbeforeBuildTicks: function() {\n\t\thelpers$1.callback(this.options.beforeBuildTicks, [this]);\n\t},\n\tbuildTicks: helpers$1.noop,\n\tafterBuildTicks: function(ticks) {\n\t\tvar me = this;\n\t\t// ticks is empty for old axis implementations here\n\t\tif (isArray(ticks) && ticks.length) {\n\t\t\treturn helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);\n\t\t}\n\t\t// Support old implementations (that modified `this.ticks` directly in buildTicks)\n\t\tme.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;\n\t\treturn ticks;\n\t},\n\n\tbeforeTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.beforeTickToLabelConversion, [this]);\n\t},\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\t// Convert ticks to strings\n\t\tvar tickOpts = me.options.ticks;\n\t\tme.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);\n\t},\n\tafterTickToLabelConversion: function() {\n\t\thelpers$1.callback(this.options.afterTickToLabelConversion, [this]);\n\t},\n\n\t//\n\n\tbeforeCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.beforeCalculateTickRotation, [this]);\n\t},\n\tcalculateTickRotation: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar tickOpts = options.ticks;\n\t\tvar numTicks = me.getTicks().length;\n\t\tvar minRotation = tickOpts.minRotation || 0;\n\t\tvar maxRotation = tickOpts.maxRotation;\n\t\tvar labelRotation = minRotation;\n\t\tvar labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;\n\n\t\tif (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {\n\t\t\tme.labelRotation = minRotation;\n\t\t\treturn;\n\t\t}\n\n\t\tlabelSizes = me._getLabelSizes();\n\t\tmaxLabelWidth = labelSizes.widest.width;\n\t\tmaxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;\n\n\t\t// Estimate the width of each grid based on the canvas width, the maximum\n\t\t// label width and the number of tick intervals\n\t\tmaxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);\n\t\ttickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n\t\t// Allow 3 pixels x2 padding either side for label readability\n\t\tif (maxLabelWidth + 6 > tickWidth) {\n\t\t\ttickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n\t\t\tmaxHeight = me.maxHeight - getTickMarkLength(options.gridLines)\n\t\t\t\t- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);\n\t\t\tmaxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n\t\t\tlabelRotation = helpers$1.toDegrees(Math.min(\n\t\t\t\tMath.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),\n\t\t\t\tMath.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)\n\t\t\t));\n\t\t\tlabelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n\t\t}\n\n\t\tme.labelRotation = labelRotation;\n\t},\n\tafterCalculateTickRotation: function() {\n\t\thelpers$1.callback(this.options.afterCalculateTickRotation, [this]);\n\t},\n\n\t//\n\n\tbeforeFit: function() {\n\t\thelpers$1.callback(this.options.beforeFit, [this]);\n\t},\n\tfit: function() {\n\t\tvar me = this;\n\t\t// Reset\n\t\tvar minSize = me.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\n\t\tvar chart = me.chart;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\t\tvar scaleLabelOpts = opts.scaleLabel;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar display = me._isVisible();\n\t\tvar isBottom = opts.position === 'bottom';\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\t// Width\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth;\n\t\t} else if (display) {\n\t\t\tminSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);\n\t\t}\n\n\t\t// height\n\t\tif (!isHorizontal) {\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t} else if (display) {\n\t\t\tminSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);\n\t\t}\n\n\t\t// Don't bother fitting the ticks if we are not showing the labels\n\t\tif (tickOpts.display && display) {\n\t\t\tvar tickFonts = parseTickFontOptions(tickOpts);\n\t\t\tvar labelSizes = me._getLabelSizes();\n\t\t\tvar firstLabelSize = labelSizes.first;\n\t\t\tvar lastLabelSize = labelSizes.last;\n\t\t\tvar widestLabelSize = labelSizes.widest;\n\t\t\tvar highestLabelSize = labelSizes.highest;\n\t\t\tvar lineSpace = tickFonts.minor.lineHeight * 0.4;\n\t\t\tvar tickPadding = tickOpts.padding;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\t// A horizontal axis is more constrained by the height.\n\t\t\t\tvar isRotated = me.labelRotation !== 0;\n\t\t\t\tvar angleRadians = helpers$1.toRadians(me.labelRotation);\n\t\t\t\tvar cosRotation = Math.cos(angleRadians);\n\t\t\t\tvar sinRotation = Math.sin(angleRadians);\n\n\t\t\t\tvar labelHeight = sinRotation * widestLabelSize.width\n\t\t\t\t\t+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))\n\t\t\t\t\t+ (isRotated ? 0 : lineSpace); // padding\n\n\t\t\t\tminSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n\n\t\t\t\tvar offsetLeft = me.getPixelForTick(0) - me.left;\n\t\t\t\tvar offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);\n\t\t\t\tvar paddingLeft, paddingRight;\n\n\t\t\t\t// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n\t\t\t\t// which means that the right padding is dominated by the font height\n\t\t\t\tif (isRotated) {\n\t\t\t\t\tpaddingLeft = isBottom ?\n\t\t\t\t\t\tcosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :\n\t\t\t\t\t\tsinRotation * (firstLabelSize.height - firstLabelSize.offset);\n\t\t\t\t\tpaddingRight = isBottom ?\n\t\t\t\t\t\tsinRotation * (lastLabelSize.height - lastLabelSize.offset) :\n\t\t\t\t\t\tcosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;\n\t\t\t\t} else {\n\t\t\t\t\tpaddingLeft = firstLabelSize.width / 2;\n\t\t\t\t\tpaddingRight = lastLabelSize.width / 2;\n\t\t\t\t}\n\n\t\t\t\t// Adjust padding taking into account changes in offsets\n\t\t\t\t// and add 3 px to move away from canvas edges\n\t\t\t\tme.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;\n\t\t\t\tme.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;\n\t\t\t} else {\n\t\t\t\t// A vertical axis is more constrained by the width. Labels are the\n\t\t\t\t// dominant factor here, so get that length first and account for padding\n\t\t\t\tvar labelWidth = tickOpts.mirror ? 0 :\n\t\t\t\t\t// use lineSpace for consistency with horizontal axis\n\t\t\t\t\t// tickPadding is not implemented for horizontal\n\t\t\t\t\twidestLabelSize.width + tickPadding + lineSpace;\n\n\t\t\t\tminSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);\n\n\t\t\t\tme.paddingTop = firstLabelSize.height / 2;\n\t\t\t\tme.paddingBottom = lastLabelSize.height / 2;\n\t\t\t}\n\t\t}\n\n\t\tme.handleMargins();\n\n\t\tif (isHorizontal) {\n\t\t\tme.width = me._length = chart.width - me.margins.left - me.margins.right;\n\t\t\tme.height = minSize.height;\n\t\t} else {\n\t\t\tme.width = minSize.width;\n\t\t\tme.height = me._length = chart.height - me.margins.top - me.margins.bottom;\n\t\t}\n\t},\n\n\t/**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n\thandleMargins: function() {\n\t\tvar me = this;\n\t\tif (me.margins) {\n\t\t\tme.margins.left = Math.max(me.paddingLeft, me.margins.left);\n\t\t\tme.margins.top = Math.max(me.paddingTop, me.margins.top);\n\t\t\tme.margins.right = Math.max(me.paddingRight, me.margins.right);\n\t\t\tme.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);\n\t\t}\n\t},\n\n\tafterFit: function() {\n\t\thelpers$1.callback(this.options.afterFit, [this]);\n\t},\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\tisFullWidth: function() {\n\t\treturn this.options.fullWidth;\n\t},\n\n\t// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not\n\tgetRightValue: function(rawValue) {\n\t\t// Null and undefined values first\n\t\tif (isNullOrUndef(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\t\t// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values\n\t\tif ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\t// If it is in fact an object, dive in one more level\n\t\tif (rawValue) {\n\t\t\tif (this.isHorizontal()) {\n\t\t\t\tif (rawValue.x !== undefined) {\n\t\t\t\t\treturn this.getRightValue(rawValue.x);\n\t\t\t\t}\n\t\t\t} else if (rawValue.y !== undefined) {\n\t\t\t\treturn this.getRightValue(rawValue.y);\n\t\t\t}\n\t\t}\n\n\t\t// Value is good, return it\n\t\treturn rawValue;\n\t},\n\n\t_convertTicksToLabels: function(ticks) {\n\t\tvar me = this;\n\t\tvar labels, i, ilen;\n\n\t\tme.ticks = ticks.map(function(tick) {\n\t\t\treturn tick.value;\n\t\t});\n\n\t\tme.beforeTickToLabelConversion();\n\n\t\t// New implementations should return the formatted tick labels but for BACKWARD\n\t\t// COMPAT, we still support no return (`this.ticks` internally changed by calling\n\t\t// this method and supposed to contain only string values).\n\t\tlabels = me.convertTicksToLabels(ticks) || me.ticks;\n\n\t\tme.afterTickToLabelConversion();\n\n\t\t// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tticks[i].label = labels[i];\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLabelSizes: function() {\n\t\tvar me = this;\n\t\tvar labelSizes = me._labelSizes;\n\n\t\tif (!labelSizes) {\n\t\t\tme._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);\n\t\t\tme.longestLabelWidth = labelSizes.widest.width;\n\t\t}\n\n\t\treturn labelSizes;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_parseValue: function(value) {\n\t\tvar start, end, min, max;\n\n\t\tif (isArray(value)) {\n\t\t\tstart = +this.getRightValue(value[0]);\n\t\t\tend = +this.getRightValue(value[1]);\n\t\t\tmin = Math.min(start, end);\n\t\t\tmax = Math.max(start, end);\n\t\t} else {\n\t\t\tvalue = +this.getRightValue(value);\n\t\t\tstart = undefined;\n\t\t\tend = value;\n\t\t\tmin = value;\n\t\t\tmax = value;\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max,\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t},\n\n\t/**\n\t* @private\n\t*/\n\t_getScaleLabel: function(rawValue) {\n\t\tvar v = this._parseValue(rawValue);\n\t\tif (v.start !== undefined) {\n\t\t\treturn '[' + v.start + ', ' + v.end + ']';\n\t\t}\n\n\t\treturn +this.getRightValue(rawValue);\n\t},\n\n\t/**\n\t * Used to get the value to display in the tooltip for the data at the given index\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetLabelForIndex: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param value\n\t * @param index\n\t * @param datasetIndex\n\t */\n\tgetPixelForValue: helpers$1.noop,\n\n\t/**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param pixel\n\t */\n\tgetValueForPixel: helpers$1.noop,\n\n\t/**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForTick: function(index) {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar numTicks = me._ticks.length;\n\t\tvar tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);\n\n\t\treturn index < 0 || index > numTicks - 1\n\t\t\t? null\n\t\t\t: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));\n\t},\n\n\t/**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetPixelForDecimal: function(decimal) {\n\t\tvar me = this;\n\n\t\tif (me._reversePixels) {\n\t\t\tdecimal = 1 - decimal;\n\t\t}\n\n\t\treturn me._startPixel + decimal * me._length;\n\t},\n\n\tgetDecimalForPixel: function(pixel) {\n\t\tvar decimal = (pixel - this._startPixel) / this._length;\n\t\treturn this._reversePixels ? 1 - decimal : decimal;\n\t},\n\n\t/**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t */\n\tgetBasePixel: function() {\n\t\treturn this.getPixelForValue(this.getBaseValue());\n\t},\n\n\tgetBaseValue: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0;\n\t},\n\n\t/**\n\t * Returns a subset of ticks to be plotted to avoid overlapping labels.\n\t * @private\n\t */\n\t_autoSkip: function(ticks) {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar axisLength = me._length;\n\t\tvar ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;\n\t\tvar majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n\t\tvar numMajorIndices = majorIndices.length;\n\t\tvar first = majorIndices[0];\n\t\tvar last = majorIndices[numMajorIndices - 1];\n\t\tvar i, ilen, spacing, avgMajorSpacing;\n\n\t\t// If there are too many major ticks to display them all\n\t\tif (numMajorIndices > ticksLimit) {\n\t\t\tskipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);\n\t\t\treturn nonSkipped(ticks);\n\t\t}\n\n\t\tspacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);\n\n\t\tif (numMajorIndices > 0) {\n\t\t\tfor (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n\t\t\t\tskip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);\n\t\t\t}\n\t\t\tavgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;\n\t\t\tskip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\t\t\tskip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n\t\t\treturn nonSkipped(ticks);\n\t\t}\n\t\tskip(ticks, spacing);\n\t\treturn nonSkipped(ticks);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_tickSize: function() {\n\t\tvar me = this;\n\t\tvar optionTicks = me.options.ticks;\n\n\t\t// Calculate space needed by label in axis direction.\n\t\tvar rot = helpers$1.toRadians(me.labelRotation);\n\t\tvar cos = Math.abs(Math.cos(rot));\n\t\tvar sin = Math.abs(Math.sin(rot));\n\n\t\tvar labelSizes = me._getLabelSizes();\n\t\tvar padding = optionTicks.autoSkipPadding || 0;\n\t\tvar w = labelSizes ? labelSizes.widest.width + padding : 0;\n\t\tvar h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n\t\t// Calculate space needed for 1 tick in axis direction.\n\t\treturn me.isHorizontal()\n\t\t\t? h * cos > w * sin ? w / cos : h / sin\n\t\t\t: h * sin < w * cos ? h / cos : w / sin;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_isVisible: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar display = me.options.display;\n\t\tvar i, ilen, meta;\n\n\t\tif (display !== 'auto') {\n\t\t\treturn !!display;\n\t\t}\n\n\t\t// When 'auto', the scale is visible if at least one associated dataset is visible.\n\t\tfor (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\t\tif (meta.xAxisID === me.id || meta.yAxisID === me.id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeGridLineItems: function(chartArea) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar options = me.options;\n\t\tvar gridLines = options.gridLines;\n\t\tvar position = options.position;\n\t\tvar offsetGridLines = gridLines.offsetGridLines;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar ticks = me._ticksToDraw;\n\t\tvar ticksLength = ticks.length + (offsetGridLines ? 1 : 0);\n\n\t\tvar tl = getTickMarkLength(gridLines);\n\t\tvar items = [];\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar axisHalfWidth = axisWidth / 2;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar alignBorderValue = function(pixel) {\n\t\t\treturn alignPixel(chart, pixel, axisWidth);\n\t\t};\n\t\tvar borderValue, i, tick, lineValue, alignedLineValue;\n\t\tvar tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;\n\n\t\tif (position === 'top') {\n\t\t\tborderValue = alignBorderValue(me.bottom);\n\t\t\tty1 = me.bottom - tl;\n\t\t\tty2 = borderValue - axisHalfWidth;\n\t\t\ty1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n\t\t\ty2 = chartArea.bottom;\n\t\t} else if (position === 'bottom') {\n\t\t\tborderValue = alignBorderValue(me.top);\n\t\t\ty1 = chartArea.top;\n\t\t\ty2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n\t\t\tty1 = borderValue + axisHalfWidth;\n\t\t\tty2 = me.top + tl;\n\t\t} else if (position === 'left') {\n\t\t\tborderValue = alignBorderValue(me.right);\n\t\t\ttx1 = me.right - tl;\n\t\t\ttx2 = borderValue - axisHalfWidth;\n\t\t\tx1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n\t\t\tx2 = chartArea.right;\n\t\t} else {\n\t\t\tborderValue = alignBorderValue(me.left);\n\t\t\tx1 = chartArea.left;\n\t\t\tx2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n\t\t\ttx1 = borderValue + axisHalfWidth;\n\t\t\ttx2 = me.left + tl;\n\t\t}\n\n\t\tfor (i = 0; i < ticksLength; ++i) {\n\t\t\ttick = ticks[i] || {};\n\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (isNullOrUndef(tick.label) && i < ticks.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (i === me.zeroLineIndex && options.offset === offsetGridLines) {\n\t\t\t\t// Draw the first index specially\n\t\t\t\tlineWidth = gridLines.zeroLineWidth;\n\t\t\t\tlineColor = gridLines.zeroLineColor;\n\t\t\t\tborderDash = gridLines.zeroLineBorderDash || [];\n\t\t\t\tborderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;\n\t\t\t} else {\n\t\t\t\tlineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);\n\t\t\t\tlineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');\n\t\t\t\tborderDash = gridLines.borderDash || [];\n\t\t\t\tborderDashOffset = gridLines.borderDashOffset || 0.0;\n\t\t\t}\n\n\t\t\tlineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);\n\n\t\t\t// Skip if the pixel is out of the range\n\t\t\tif (lineValue === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\talignedLineValue = alignPixel(chart, lineValue, lineWidth);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\ttx1 = tx2 = x1 = x2 = alignedLineValue;\n\t\t\t} else {\n\t\t\t\tty1 = ty2 = y1 = y2 = alignedLineValue;\n\t\t\t}\n\n\t\t\titems.push({\n\t\t\t\ttx1: tx1,\n\t\t\t\tty1: ty1,\n\t\t\t\ttx2: tx2,\n\t\t\t\tty2: ty2,\n\t\t\t\tx1: x1,\n\t\t\t\ty1: y1,\n\t\t\t\tx2: x2,\n\t\t\t\ty2: y2,\n\t\t\t\twidth: lineWidth,\n\t\t\t\tcolor: lineColor,\n\t\t\t\tborderDash: borderDash,\n\t\t\t\tborderDashOffset: borderDashOffset,\n\t\t\t});\n\t\t}\n\n\t\titems.ticksLength = ticksLength;\n\t\titems.borderValue = borderValue;\n\n\t\treturn items;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_computeLabelItems: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar optionTicks = options.ticks;\n\t\tvar position = options.position;\n\t\tvar isMirrored = optionTicks.mirror;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar ticks = me._ticksToDraw;\n\t\tvar fonts = parseTickFontOptions(optionTicks);\n\t\tvar tickPadding = optionTicks.padding;\n\t\tvar tl = getTickMarkLength(options.gridLines);\n\t\tvar rotation = -helpers$1.toRadians(me.labelRotation);\n\t\tvar items = [];\n\t\tvar i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n\n\t\tif (position === 'top') {\n\t\t\ty = me.bottom - tl - tickPadding;\n\t\t\ttextAlign = !rotation ? 'center' : 'left';\n\t\t} else if (position === 'bottom') {\n\t\t\ty = me.top + tl + tickPadding;\n\t\t\ttextAlign = !rotation ? 'center' : 'right';\n\t\t} else if (position === 'left') {\n\t\t\tx = me.right - (isMirrored ? 0 : tl) - tickPadding;\n\t\t\ttextAlign = isMirrored ? 'left' : 'right';\n\t\t} else {\n\t\t\tx = me.left + (isMirrored ? 0 : tl) + tickPadding;\n\t\t\ttextAlign = isMirrored ? 'right' : 'left';\n\t\t}\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\ttick = ticks[i];\n\t\t\tlabel = tick.label;\n\n\t\t\t// autoskipper skipped this tick (#4635)\n\t\t\tif (isNullOrUndef(label)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tpixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;\n\t\t\tfont = tick.major ? fonts.major : fonts.minor;\n\t\t\tlineHeight = font.lineHeight;\n\t\t\tlineCount = isArray(label) ? label.length : 1;\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tx = pixel;\n\t\t\t\ttextOffset = position === 'top'\n\t\t\t\t\t? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight\n\t\t\t\t\t: (!rotation ? 0.5 : 0) * lineHeight;\n\t\t\t} else {\n\t\t\t\ty = pixel;\n\t\t\t\ttextOffset = (1 - lineCount) * lineHeight / 2;\n\t\t\t}\n\n\t\t\titems.push({\n\t\t\t\tx: x,\n\t\t\t\ty: y,\n\t\t\t\trotation: rotation,\n\t\t\t\tlabel: label,\n\t\t\t\tfont: font,\n\t\t\t\ttextOffset: textOffset,\n\t\t\t\ttextAlign: textAlign\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawGrid: function(chartArea) {\n\t\tvar me = this;\n\t\tvar gridLines = me.options.gridLines;\n\n\t\tif (!gridLines.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = me.ctx;\n\t\tvar chart = me.chart;\n\t\tvar alignPixel = helpers$1._alignPixel;\n\t\tvar axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;\n\t\tvar items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));\n\t\tvar width, color, i, ilen, item;\n\n\t\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\t\titem = items[i];\n\t\t\twidth = item.width;\n\t\t\tcolor = item.color;\n\n\t\t\tif (width && color) {\n\t\t\t\tctx.save();\n\t\t\t\tctx.lineWidth = width;\n\t\t\t\tctx.strokeStyle = color;\n\t\t\t\tif (ctx.setLineDash) {\n\t\t\t\t\tctx.setLineDash(item.borderDash);\n\t\t\t\t\tctx.lineDashOffset = item.borderDashOffset;\n\t\t\t\t}\n\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tif (gridLines.drawTicks) {\n\t\t\t\t\tctx.moveTo(item.tx1, item.ty1);\n\t\t\t\t\tctx.lineTo(item.tx2, item.ty2);\n\t\t\t\t}\n\n\t\t\t\tif (gridLines.drawOnChartArea) {\n\t\t\t\t\tctx.moveTo(item.x1, item.y1);\n\t\t\t\t\tctx.lineTo(item.x2, item.y2);\n\t\t\t\t}\n\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.restore();\n\t\t\t}\n\t\t}\n\n\t\tif (axisWidth) {\n\t\t\t// Draw the line at the edge of the axis\n\t\t\tvar firstLineWidth = axisWidth;\n\t\t\tvar lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);\n\t\t\tvar borderValue = items.borderValue;\n\t\t\tvar x1, x2, y1, y2;\n\n\t\t\tif (me.isHorizontal()) {\n\t\t\t\tx1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\tx2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\ty1 = y2 = borderValue;\n\t\t\t} else {\n\t\t\t\ty1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;\n\t\t\t\ty2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n\t\t\t\tx1 = x2 = borderValue;\n\t\t\t}\n\n\t\t\tctx.lineWidth = axisWidth;\n\t\t\tctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(x1, y1);\n\t\t\tctx.lineTo(x2, y2);\n\t\t\tctx.stroke();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawLabels: function() {\n\t\tvar me = this;\n\t\tvar optionTicks = me.options.ticks;\n\n\t\tif (!optionTicks.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar ctx = me.ctx;\n\t\tvar items = me._labelItems || (me._labelItems = me._computeLabelItems());\n\t\tvar i, j, ilen, jlen, item, tickFont, label, y;\n\n\t\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\t\titem = items[i];\n\t\t\ttickFont = item.font;\n\n\t\t\t// Make sure we draw text in the correct color and font\n\t\t\tctx.save();\n\t\t\tctx.translate(item.x, item.y);\n\t\t\tctx.rotate(item.rotation);\n\t\t\tctx.font = tickFont.string;\n\t\t\tctx.fillStyle = tickFont.color;\n\t\t\tctx.textBaseline = 'middle';\n\t\t\tctx.textAlign = item.textAlign;\n\n\t\t\tlabel = item.label;\n\t\t\ty = item.textOffset;\n\t\t\tif (isArray(label)) {\n\t\t\t\tfor (j = 0, jlen = label.length; j < jlen; ++j) {\n\t\t\t\t\t// We just make sure the multiline element is a string here..\n\t\t\t\t\tctx.fillText('' + label[j], 0, y);\n\t\t\t\t\ty += tickFont.lineHeight;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tctx.fillText(label, 0, y);\n\t\t\t}\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawTitle: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar options = me.options;\n\t\tvar scaleLabel = options.scaleLabel;\n\n\t\tif (!scaleLabel.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);\n\t\tvar scaleLabelFont = helpers$1.options._parseFont(scaleLabel);\n\t\tvar scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);\n\t\tvar halfLineHeight = scaleLabelFont.lineHeight / 2;\n\t\tvar position = options.position;\n\t\tvar rotation = 0;\n\t\tvar scaleLabelX, scaleLabelY;\n\n\t\tif (me.isHorizontal()) {\n\t\t\tscaleLabelX = me.left + me.width / 2; // midpoint of the width\n\t\t\tscaleLabelY = position === 'bottom'\n\t\t\t\t? me.bottom - halfLineHeight - scaleLabelPadding.bottom\n\t\t\t\t: me.top + halfLineHeight + scaleLabelPadding.top;\n\t\t} else {\n\t\t\tvar isLeft = position === 'left';\n\t\t\tscaleLabelX = isLeft\n\t\t\t\t? me.left + halfLineHeight + scaleLabelPadding.top\n\t\t\t\t: me.right - halfLineHeight - scaleLabelPadding.top;\n\t\t\tscaleLabelY = me.top + me.height / 2;\n\t\t\trotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;\n\t\t}\n\n\t\tctx.save();\n\t\tctx.translate(scaleLabelX, scaleLabelY);\n\t\tctx.rotate(rotation);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\t\tctx.fillStyle = scaleLabelFontColor; // render in correct colour\n\t\tctx.font = scaleLabelFont.string;\n\t\tctx.fillText(scaleLabel.labelString, 0, 0);\n\t\tctx.restore();\n\t},\n\n\tdraw: function(chartArea) {\n\t\tvar me = this;\n\n\t\tif (!me._isVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\tme._drawGrid(chartArea);\n\t\tme._drawTitle();\n\t\tme._drawLabels();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_layers: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tz = opts.ticks && opts.ticks.z || 0;\n\t\tvar gz = opts.gridLines && opts.gridLines.z || 0;\n\n\t\tif (!me._isVisible() || tz === gz || me.draw !== me._draw) {\n\t\t\t// backward compatibility: draw has been overridden by custom scale\n\t\t\treturn [{\n\t\t\t\tz: tz,\n\t\t\t\tdraw: function() {\n\t\t\t\t\tme.draw.apply(me, arguments);\n\t\t\t\t}\n\t\t\t}];\n\t\t}\n\n\t\treturn [{\n\t\t\tz: gz,\n\t\t\tdraw: function() {\n\t\t\t\tme._drawGrid.apply(me, arguments);\n\t\t\t\tme._drawTitle.apply(me, arguments);\n\t\t\t}\n\t\t}, {\n\t\t\tz: tz,\n\t\t\tdraw: function() {\n\t\t\t\tme._drawLabels.apply(me, arguments);\n\t\t\t}\n\t\t}];\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getMatchingVisibleMetas: function(type) {\n\t\tvar me = this;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\treturn me.chart._getSortedVisibleDatasetMetas()\n\t\t\t.filter(function(meta) {\n\t\t\t\treturn (!type || meta.type === type)\n\t\t\t\t\t&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);\n\t\t\t});\n\t}\n});\n\nScale.prototype._draw = Scale.prototype.draw;\n\nvar core_scale = Scale;\n\nvar isNullOrUndef$1 = helpers$1.isNullOrUndef;\n\nvar defaultConfig = {\n\tposition: 'bottom'\n};\n\nvar scale_category = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar labels = me._getLabels();\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar min = ticksOpts.min;\n\t\tvar max = ticksOpts.max;\n\t\tvar minIndex = 0;\n\t\tvar maxIndex = labels.length - 1;\n\t\tvar findIndex;\n\n\t\tif (min !== undefined) {\n\t\t\t// user specified min value\n\t\t\tfindIndex = labels.indexOf(min);\n\t\t\tif (findIndex >= 0) {\n\t\t\t\tminIndex = findIndex;\n\t\t\t}\n\t\t}\n\n\t\tif (max !== undefined) {\n\t\t\t// user specified max value\n\t\t\tfindIndex = labels.indexOf(max);\n\t\t\tif (findIndex >= 0) {\n\t\t\t\tmaxIndex = findIndex;\n\t\t\t}\n\t\t}\n\n\t\tme.minIndex = minIndex;\n\t\tme.maxIndex = maxIndex;\n\t\tme.min = labels[minIndex];\n\t\tme.max = labels[maxIndex];\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar labels = me._getLabels();\n\t\tvar minIndex = me.minIndex;\n\t\tvar maxIndex = me.maxIndex;\n\n\t\t// If we are viewing some subset of labels, slice the original array\n\t\tme.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\n\t\tif (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {\n\t\t\treturn me.getRightValue(chart.data.datasets[datasetIndex].data[index]);\n\t\t}\n\n\t\treturn me._getLabels()[index];\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar offset = me.options.offset;\n\t\tvar ticks = me.ticks;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (!me.isHorizontal()) {\n\t\t\t// For backward compatibility, vertical category scale reverse is inverted.\n\t\t\tme._reversePixels = !me._reversePixels;\n\t\t}\n\n\t\tif (!ticks) {\n\t\t\treturn;\n\t\t}\n\n\t\tme._startValue = me.minIndex - (offset ? 0.5 : 0);\n\t\tme._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);\n\t},\n\n\t// Used to get data value locations.  Value can either be an index or a numerical value\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar valueCategory, labels, idx;\n\n\t\tif (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {\n\t\t\tvalue = me.chart.data.datasets[datasetIndex].data[index];\n\t\t}\n\n\t\t// If value is a data object, then index is the index in the data array,\n\t\t// not the index of the scale. We need to change that.\n\t\tif (!isNullOrUndef$1(value)) {\n\t\t\tvalueCategory = me.isHorizontal() ? value.x : value.y;\n\t\t}\n\t\tif (valueCategory !== undefined || (value !== undefined && isNaN(index))) {\n\t\t\tlabels = me._getLabels();\n\t\t\tvalue = helpers$1.valueOrDefault(valueCategory, value);\n\t\t\tidx = labels.indexOf(value);\n\t\t\tindex = idx !== -1 ? idx : index;\n\t\t\tif (isNaN(index)) {\n\t\t\t\tindex = value;\n\t\t\t}\n\t\t}\n\t\treturn me.getPixelForDecimal((index - me._startValue) / me._valueRange);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.ticks;\n\t\treturn index < 0 || index > ticks.length - 1\n\t\t\t? null\n\t\t\t: this.getPixelForValue(ticks[index], index + this.minIndex);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);\n\t\treturn Math.min(Math.max(value, 0), me.ticks.length - 1);\n\t},\n\n\tgetBasePixel: function() {\n\t\treturn this.bottom;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults = defaultConfig;\nscale_category._defaults = _defaults;\n\nvar noop = helpers$1.noop;\nvar isNullOrUndef$2 = helpers$1.isNullOrUndef;\n\n/**\n * Generate a set of linear ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks(generationOptions, dataRange) {\n\tvar ticks = [];\n\t// To get a \"nice\" value for the tick spacing, we will use the appropriately named\n\t// \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n\t// for details.\n\n\tvar MIN_SPACING = 1e-14;\n\tvar stepSize = generationOptions.stepSize;\n\tvar unit = stepSize || 1;\n\tvar maxNumSpaces = generationOptions.maxTicks - 1;\n\tvar min = generationOptions.min;\n\tvar max = generationOptions.max;\n\tvar precision = generationOptions.precision;\n\tvar rmin = dataRange.min;\n\tvar rmax = dataRange.max;\n\tvar spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;\n\tvar factor, niceMin, niceMax, numSpaces;\n\n\t// Beyond MIN_SPACING floating point numbers being to lose precision\n\t// such that we can't do the math necessary to generate ticks\n\tif (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {\n\t\treturn [rmin, rmax];\n\t}\n\n\tnumSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\tif (numSpaces > maxNumSpaces) {\n\t\t// If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n\t\tspacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;\n\t}\n\n\tif (stepSize || isNullOrUndef$2(precision)) {\n\t\t// If a precision is not specified, calculate factor based on spacing\n\t\tfactor = Math.pow(10, helpers$1._decimalPlaces(spacing));\n\t} else {\n\t\t// If the user specified a precision, round to that number of decimal places\n\t\tfactor = Math.pow(10, precision);\n\t\tspacing = Math.ceil(spacing * factor) / factor;\n\t}\n\n\tniceMin = Math.floor(rmin / spacing) * spacing;\n\tniceMax = Math.ceil(rmax / spacing) * spacing;\n\n\t// If min, max and stepSize is set and they make an evenly spaced scale use it.\n\tif (stepSize) {\n\t\t// If very close to our whole number, use it.\n\t\tif (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {\n\t\t\tniceMin = min;\n\t\t}\n\t\tif (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {\n\t\t\tniceMax = max;\n\t\t}\n\t}\n\n\tnumSpaces = (niceMax - niceMin) / spacing;\n\t// If very close to our rounded value, use it.\n\tif (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n\t\tnumSpaces = Math.round(numSpaces);\n\t} else {\n\t\tnumSpaces = Math.ceil(numSpaces);\n\t}\n\n\tniceMin = Math.round(niceMin * factor) / factor;\n\tniceMax = Math.round(niceMax * factor) / factor;\n\tticks.push(isNullOrUndef$2(min) ? niceMin : min);\n\tfor (var j = 1; j < numSpaces; ++j) {\n\t\tticks.push(Math.round((niceMin + j * spacing) * factor) / factor);\n\t}\n\tticks.push(isNullOrUndef$2(max) ? niceMax : max);\n\n\treturn ticks;\n}\n\nvar scale_linearbase = core_scale.extend({\n\tgetRightValue: function(value) {\n\t\tif (typeof value === 'string') {\n\t\t\treturn +value;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, value);\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,\n\t\t// do nothing since that would make the chart weird. If the user really wants a weird chart\n\t\t// axis, they can manually override it\n\t\tif (tickOpts.beginAtZero) {\n\t\t\tvar minSign = helpers$1.sign(me.min);\n\t\t\tvar maxSign = helpers$1.sign(me.max);\n\n\t\t\tif (minSign < 0 && maxSign < 0) {\n\t\t\t\t// move the top up to 0\n\t\t\t\tme.max = 0;\n\t\t\t} else if (minSign > 0 && maxSign > 0) {\n\t\t\t\t// move the bottom down to 0\n\t\t\t\tme.min = 0;\n\t\t\t}\n\t\t}\n\n\t\tvar setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;\n\t\tvar setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;\n\n\t\tif (tickOpts.min !== undefined) {\n\t\t\tme.min = tickOpts.min;\n\t\t} else if (tickOpts.suggestedMin !== undefined) {\n\t\t\tif (me.min === null) {\n\t\t\t\tme.min = tickOpts.suggestedMin;\n\t\t\t} else {\n\t\t\t\tme.min = Math.min(me.min, tickOpts.suggestedMin);\n\t\t\t}\n\t\t}\n\n\t\tif (tickOpts.max !== undefined) {\n\t\t\tme.max = tickOpts.max;\n\t\t} else if (tickOpts.suggestedMax !== undefined) {\n\t\t\tif (me.max === null) {\n\t\t\t\tme.max = tickOpts.suggestedMax;\n\t\t\t} else {\n\t\t\t\tme.max = Math.max(me.max, tickOpts.suggestedMax);\n\t\t\t}\n\t\t}\n\n\t\tif (setMin !== setMax) {\n\t\t\t// We set the min or the max but not both.\n\t\t\t// So ensure that our range is good\n\t\t\t// Inverted or 0 length range can happen when\n\t\t\t// ticks.min is set, and no datasets are visible\n\t\t\tif (me.min >= me.max) {\n\t\t\t\tif (setMin) {\n\t\t\t\t\tme.max = me.min + 1;\n\t\t\t\t} else {\n\t\t\t\t\tme.min = me.max - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (me.min === me.max) {\n\t\t\tme.max++;\n\n\t\t\tif (!tickOpts.beginAtZero) {\n\t\t\t\tme.min--;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar stepSize = tickOpts.stepSize;\n\t\tvar maxTicksLimit = tickOpts.maxTicksLimit;\n\t\tvar maxTicks;\n\n\t\tif (stepSize) {\n\t\t\tmaxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n\t\t} else {\n\t\t\tmaxTicks = me._computeTickLimit();\n\t\t\tmaxTicksLimit = maxTicksLimit || 11;\n\t\t}\n\n\t\tif (maxTicksLimit) {\n\t\t\tmaxTicks = Math.min(maxTicksLimit, maxTicks);\n\t\t}\n\n\t\treturn maxTicks;\n\t},\n\n\t_computeTickLimit: function() {\n\t\treturn Number.POSITIVE_INFINITY;\n\t},\n\n\thandleDirectionalChanges: noop,\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\t// Figure out what the max number of ticks we can support it is based on the size of\n\t\t// the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n\t\t// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n\t\t// the graph. Make sure we always have at least 2 ticks\n\t\tvar maxTicks = me.getTickLimit();\n\t\tmaxTicks = Math.max(2, maxTicks);\n\n\t\tvar numericGeneratorOptions = {\n\t\t\tmaxTicks: maxTicks,\n\t\t\tmin: tickOpts.min,\n\t\t\tmax: tickOpts.max,\n\t\t\tprecision: tickOpts.precision,\n\t\t\tstepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks(numericGeneratorOptions, me);\n\n\t\tme.handleDirectionalChanges();\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\t\tme.ticksAsNumbers = me.ticks.slice();\n\t\tme.zeroLineIndex = me.ticks.indexOf(0);\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(me);\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar ticks = me.getTicks();\n\t\tvar start = me.min;\n\t\tvar end = me.max;\n\t\tvar offset;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (me.options.offset && ticks.length) {\n\t\t\toffset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n\t\t\tstart -= offset;\n\t\t\tend += offset;\n\t\t}\n\t\tme._startValue = start;\n\t\tme._endValue = end;\n\t\tme._valueRange = end - start;\n\t}\n});\n\nvar defaultConfig$1 = {\n\tposition: 'left',\n\tticks: {\n\t\tcallback: core_ticks.formatters.linear\n\t}\n};\n\nvar DEFAULT_MIN = 0;\nvar DEFAULT_MAX = 1;\n\nfunction getOrCreateStack(stacks, stacked, meta) {\n\tvar key = [\n\t\tmeta.type,\n\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\tstacked === undefined && meta.stack === undefined ? meta.index : '',\n\t\tmeta.stack\n\t].join('.');\n\n\tif (stacks[key] === undefined) {\n\t\tstacks[key] = {\n\t\t\tpos: [],\n\t\t\tneg: []\n\t\t};\n\t}\n\n\treturn stacks[key];\n}\n\nfunction stackData(scale, stacks, meta, data) {\n\tvar opts = scale.options;\n\tvar stacked = opts.stacked;\n\tvar stack = getOrCreateStack(stacks, stacked, meta);\n\tvar pos = stack.pos;\n\tvar neg = stack.neg;\n\tvar ilen = data.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = scale._parseValue(data[i]);\n\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tpos[i] = pos[i] || 0;\n\t\tneg[i] = neg[i] || 0;\n\n\t\tif (opts.relativePoints) {\n\t\t\tpos[i] = 100;\n\t\t} else if (value.min < 0 || value.max < 0) {\n\t\t\tneg[i] += value.min;\n\t\t} else {\n\t\t\tpos[i] += value.max;\n\t\t}\n\t}\n}\n\nfunction updateMinMax(scale, meta, data) {\n\tvar ilen = data.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = scale._parseValue(data[i]);\n\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tscale.min = Math.min(scale.min, value.min);\n\t\tscale.max = Math.max(scale.max, value.max);\n\t}\n}\n\nvar scale_linear = scale_linearbase.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar metasets = me._getMatchingVisibleMetas();\n\t\tvar hasStacks = opts.stacked;\n\t\tvar stacks = {};\n\t\tvar ilen = metasets.length;\n\t\tvar i, meta, data, values;\n\n\t\tme.min = Number.POSITIVE_INFINITY;\n\t\tme.max = Number.NEGATIVE_INFINITY;\n\n\t\tif (hasStacks === undefined) {\n\t\t\tfor (i = 0; !hasStacks && i < ilen; ++i) {\n\t\t\t\tmeta = metasets[i];\n\t\t\t\thasStacks = meta.stack !== undefined;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < ilen; ++i) {\n\t\t\tmeta = metasets[i];\n\t\t\tdata = datasets[meta.index].data;\n\t\t\tif (hasStacks) {\n\t\t\t\tstackData(me, stacks, meta, data);\n\t\t\t} else {\n\t\t\t\tupdateMinMax(me, meta, data);\n\t\t\t}\n\t\t}\n\n\t\thelpers$1.each(stacks, function(stackValues) {\n\t\t\tvalues = stackValues.pos.concat(stackValues.neg);\n\t\t\tme.min = Math.min(me.min, helpers$1.min(values));\n\t\t\tme.max = Math.max(me.max, helpers$1.max(values));\n\t\t});\n\n\t\tme.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;\n\t\tme.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\tvar me = this;\n\t\tvar tickFont;\n\n\t\tif (me.isHorizontal()) {\n\t\t\treturn Math.ceil(me.width / 40);\n\t\t}\n\t\ttickFont = helpers$1.options._parseFont(me.options.ticks);\n\t\treturn Math.ceil(me.height / tickFont.lineHeight);\n\t},\n\n\t// Called after the ticks are built. We need\n\thandleDirectionalChanges: function() {\n\t\tif (!this.isHorizontal()) {\n\t\t\t// We are in a vertical orientation. The top value is the highest. So reverse the array\n\t\t\tthis.ticks.reverse();\n\t\t}\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\t// Utils\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\treturn me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\treturn this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.ticksAsNumbers;\n\t\tif (index < 0 || index > ticks.length - 1) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.getPixelForValue(ticks[index]);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$1 = defaultConfig$1;\nscale_linear._defaults = _defaults$1;\n\nvar valueOrDefault$b = helpers$1.valueOrDefault;\nvar log10 = helpers$1.math.log10;\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {number[]} array of tick values\n */\nfunction generateTicks$1(generationOptions, dataRange) {\n\tvar ticks = [];\n\n\tvar tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n\n\tvar endExp = Math.floor(log10(dataRange.max));\n\tvar endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n\tvar exp, significand;\n\n\tif (tickVal === 0) {\n\t\texp = Math.floor(log10(dataRange.minNotZero));\n\t\tsignificand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));\n\n\t\tticks.push(tickVal);\n\t\ttickVal = significand * Math.pow(10, exp);\n\t} else {\n\t\texp = Math.floor(log10(tickVal));\n\t\tsignificand = Math.floor(tickVal / Math.pow(10, exp));\n\t}\n\tvar precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n\n\tdo {\n\t\tticks.push(tickVal);\n\n\t\t++significand;\n\t\tif (significand === 10) {\n\t\t\tsignificand = 1;\n\t\t\t++exp;\n\t\t\tprecision = exp >= 0 ? 1 : precision;\n\t\t}\n\n\t\ttickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n\t} while (exp < endExp || (exp === endExp && significand < endSignificand));\n\n\tvar lastTick = valueOrDefault$b(generationOptions.max, tickVal);\n\tticks.push(lastTick);\n\n\treturn ticks;\n}\n\nvar defaultConfig$2 = {\n\tposition: 'left',\n\n\t// label settings\n\tticks: {\n\t\tcallback: core_ticks.formatters.logarithmic\n\t}\n};\n\n// TODO(v3): change this to positiveOrDefault\nfunction nonNegativeOrDefault(value, defaultValue) {\n\treturn helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;\n}\n\nvar scale_logarithmic = core_scale.extend({\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar chart = me.chart;\n\t\tvar datasets = chart.data.datasets;\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tfunction IDMatches(meta) {\n\t\t\treturn isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;\n\t\t}\n\t\tvar datasetIndex, meta, value, data, i, ilen;\n\n\t\t// Calculate Range\n\t\tme.min = Number.POSITIVE_INFINITY;\n\t\tme.max = Number.NEGATIVE_INFINITY;\n\t\tme.minNotZero = Number.POSITIVE_INFINITY;\n\n\t\tvar hasStacks = opts.stacked;\n\t\tif (hasStacks === undefined) {\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&\n\t\t\t\t\tmeta.stack !== undefined) {\n\t\t\t\t\thasStacks = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.stacked || hasStacks) {\n\t\t\tvar valuesPerStack = {};\n\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tvar key = [\n\t\t\t\t\tmeta.type,\n\t\t\t\t\t// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined\n\t\t\t\t\t((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),\n\t\t\t\t\tmeta.stack\n\t\t\t\t].join('.');\n\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tif (valuesPerStack[key] === undefined) {\n\t\t\t\t\t\tvaluesPerStack[key] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tdata = datasets[datasetIndex].data;\n\t\t\t\t\tfor (i = 0, ilen = data.length; i < ilen; i++) {\n\t\t\t\t\t\tvar values = valuesPerStack[key];\n\t\t\t\t\t\tvalue = me._parseValue(data[i]);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvalues[i] = values[i] || 0;\n\t\t\t\t\t\tvalues[i] += value.max;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thelpers$1.each(valuesPerStack, function(valuesForType) {\n\t\t\t\tif (valuesForType.length > 0) {\n\t\t\t\t\tvar minVal = helpers$1.min(valuesForType);\n\t\t\t\t\tvar maxVal = helpers$1.max(valuesForType);\n\t\t\t\t\tme.min = Math.min(me.min, minVal);\n\t\t\t\t\tme.max = Math.max(me.max, maxVal);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\tfor (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {\n\t\t\t\tmeta = chart.getDatasetMeta(datasetIndex);\n\t\t\t\tif (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {\n\t\t\t\t\tdata = datasets[datasetIndex].data;\n\t\t\t\t\tfor (i = 0, ilen = data.length; i < ilen; i++) {\n\t\t\t\t\t\tvalue = me._parseValue(data[i]);\n\t\t\t\t\t\t// invalid, hidden and negative values are ignored\n\t\t\t\t\t\tif (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tme.min = Math.min(value.min, me.min);\n\t\t\t\t\t\tme.max = Math.max(value.max, me.max);\n\n\t\t\t\t\t\tif (value.min !== 0) {\n\t\t\t\t\t\t\tme.minNotZero = Math.min(value.min, me.minNotZero);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tme.min = helpers$1.isFinite(me.min) ? me.min : null;\n\t\tme.max = helpers$1.isFinite(me.max) ? me.max : null;\n\t\tme.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;\n\n\t\t// Common base implementation to handle ticks.min, ticks.max\n\t\tthis.handleTickRangeOptions();\n\t},\n\n\thandleTickRangeOptions: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar DEFAULT_MIN = 1;\n\t\tvar DEFAULT_MAX = 10;\n\n\t\tme.min = nonNegativeOrDefault(tickOpts.min, me.min);\n\t\tme.max = nonNegativeOrDefault(tickOpts.max, me.max);\n\n\t\tif (me.min === me.max) {\n\t\t\tif (me.min !== 0 && me.min !== null) {\n\t\t\t\tme.min = Math.pow(10, Math.floor(log10(me.min)) - 1);\n\t\t\t\tme.max = Math.pow(10, Math.floor(log10(me.max)) + 1);\n\t\t\t} else {\n\t\t\t\tme.min = DEFAULT_MIN;\n\t\t\t\tme.max = DEFAULT_MAX;\n\t\t\t}\n\t\t}\n\t\tif (me.min === null) {\n\t\t\tme.min = Math.pow(10, Math.floor(log10(me.max)) - 1);\n\t\t}\n\t\tif (me.max === null) {\n\t\t\tme.max = me.min !== 0\n\t\t\t\t? Math.pow(10, Math.floor(log10(me.min)) + 1)\n\t\t\t\t: DEFAULT_MAX;\n\t\t}\n\t\tif (me.minNotZero === null) {\n\t\t\tif (me.min > 0) {\n\t\t\t\tme.minNotZero = me.min;\n\t\t\t} else if (me.max < 1) {\n\t\t\t\tme.minNotZero = Math.pow(10, Math.floor(log10(me.max)));\n\t\t\t} else {\n\t\t\t\tme.minNotZero = DEFAULT_MIN;\n\t\t\t}\n\t\t}\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar tickOpts = me.options.ticks;\n\t\tvar reverse = !me.isHorizontal();\n\n\t\tvar generationOptions = {\n\t\t\tmin: nonNegativeOrDefault(tickOpts.min),\n\t\t\tmax: nonNegativeOrDefault(tickOpts.max)\n\t\t};\n\t\tvar ticks = me.ticks = generateTicks$1(generationOptions, me);\n\n\t\t// At this point, we need to update our max and min given the tick values since we have expanded the\n\t\t// range of the scale\n\t\tme.max = helpers$1.max(ticks);\n\t\tme.min = helpers$1.min(ticks);\n\n\t\tif (tickOpts.reverse) {\n\t\t\treverse = !reverse;\n\t\t\tme.start = me.max;\n\t\t\tme.end = me.min;\n\t\t} else {\n\t\t\tme.start = me.min;\n\t\t\tme.end = me.max;\n\t\t}\n\t\tif (reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tthis.tickValues = this.ticks.slice();\n\n\t\tcore_scale.prototype.convertTicksToLabels.call(this);\n\t},\n\n\t// Get the correct tooltip label\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.tickValues;\n\t\tif (index < 0 || index > ticks.length - 1) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.getPixelForValue(ticks[index]);\n\t},\n\n\t/**\n\t * Returns the value of the first tick.\n\t * @param {number} value - The minimum not zero value.\n\t * @return {number} The first tick value.\n\t * @private\n\t */\n\t_getFirstTickValue: function(value) {\n\t\tvar exp = Math.floor(log10(value));\n\t\tvar significand = Math.floor(value / Math.pow(10, exp));\n\n\t\treturn significand * Math.pow(10, exp);\n\t},\n\n\t_configure: function() {\n\t\tvar me = this;\n\t\tvar start = me.min;\n\t\tvar offset = 0;\n\n\t\tcore_scale.prototype._configure.call(me);\n\n\t\tif (start === 0) {\n\t\t\tstart = me._getFirstTickValue(me.minNotZero);\n\t\t\toffset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;\n\t\t}\n\n\t\tme._startValue = log10(start);\n\t\tme._valueOffset = offset;\n\t\tme._valueRange = (log10(me.max) - log10(start)) / (1 - offset);\n\t},\n\n\tgetPixelForValue: function(value) {\n\t\tvar me = this;\n\t\tvar decimal = 0;\n\n\t\tvalue = +me.getRightValue(value);\n\n\t\tif (value > me.min && value > 0) {\n\t\t\tdecimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;\n\t\t}\n\t\treturn me.getPixelForDecimal(decimal);\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar decimal = me.getDecimalForPixel(pixel);\n\t\treturn decimal === 0 && me.min === 0\n\t\t\t? 0\n\t\t\t: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$2 = defaultConfig$2;\nscale_logarithmic._defaults = _defaults$2;\n\nvar valueOrDefault$c = helpers$1.valueOrDefault;\nvar valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;\nvar resolve$4 = helpers$1.options.resolve;\n\nvar defaultConfig$3 = {\n\tdisplay: true,\n\n\t// Boolean - Whether to animate scaling the chart from the centre\n\tanimate: true,\n\tposition: 'chartArea',\n\n\tangleLines: {\n\t\tdisplay: true,\n\t\tcolor: 'rgba(0,0,0,0.1)',\n\t\tlineWidth: 1,\n\t\tborderDash: [],\n\t\tborderDashOffset: 0.0\n\t},\n\n\tgridLines: {\n\t\tcircular: false\n\t},\n\n\t// label settings\n\tticks: {\n\t\t// Boolean - Show a backdrop to the scale label\n\t\tshowLabelBackdrop: true,\n\n\t\t// String - The colour of the label backdrop\n\t\tbackdropColor: 'rgba(255,255,255,0.75)',\n\n\t\t// Number - The backdrop padding above & below the label in pixels\n\t\tbackdropPaddingY: 2,\n\n\t\t// Number - The backdrop padding to the side of the label in pixels\n\t\tbackdropPaddingX: 2,\n\n\t\tcallback: core_ticks.formatters.linear\n\t},\n\n\tpointLabels: {\n\t\t// Boolean - if true, show point labels\n\t\tdisplay: true,\n\n\t\t// Number - Point label font size in pixels\n\t\tfontSize: 10,\n\n\t\t// Function - Used to convert point labels\n\t\tcallback: function(label) {\n\t\t\treturn label;\n\t\t}\n\t}\n};\n\nfunction getTickBackdropHeight(opts) {\n\tvar tickOpts = opts.ticks;\n\n\tif (tickOpts.display && opts.display) {\n\t\treturn valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;\n\t}\n\treturn 0;\n}\n\nfunction measureLabelSize(ctx, lineHeight, label) {\n\tif (helpers$1.isArray(label)) {\n\t\treturn {\n\t\t\tw: helpers$1.longestText(ctx, ctx.font, label),\n\t\t\th: label.length * lineHeight\n\t\t};\n\t}\n\n\treturn {\n\t\tw: ctx.measureText(label).width,\n\t\th: lineHeight\n\t};\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n\tif (angle === min || angle === max) {\n\t\treturn {\n\t\t\tstart: pos - (size / 2),\n\t\t\tend: pos + (size / 2)\n\t\t};\n\t} else if (angle < min || angle > max) {\n\t\treturn {\n\t\t\tstart: pos - size,\n\t\t\tend: pos\n\t\t};\n\t}\n\n\treturn {\n\t\tstart: pos,\n\t\tend: pos + size\n\t};\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n\t// Right, this is really confusing and there is a lot of maths going on here\n\t// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n\t//\n\t// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n\t//\n\t// Solution:\n\t//\n\t// We assume the radius of the polygon is half the size of the canvas at first\n\t// at each index we check if the text overlaps.\n\t//\n\t// Where it does, we store that angle and that index.\n\t//\n\t// After finding the largest index and angle we calculate how much we need to remove\n\t// from the shape radius to move the point inwards by that x.\n\t//\n\t// We average the left and right distances to get the maximum shape radius that can fit in the box\n\t// along with labels.\n\t//\n\t// Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n\t// on each side, removing that from the size, halving it and adding the left x protrusion width.\n\t//\n\t// This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n\t// and position it in the most space efficient manner\n\t//\n\t// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n\tvar plFont = helpers$1.options._parseFont(scale.options.pointLabels);\n\n\t// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n\t// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n\tvar furthestLimits = {\n\t\tl: 0,\n\t\tr: scale.width,\n\t\tt: 0,\n\t\tb: scale.height - scale.paddingTop\n\t};\n\tvar furthestAngles = {};\n\tvar i, textSize, pointPosition;\n\n\tscale.ctx.font = plFont.string;\n\tscale._pointLabelSizes = [];\n\n\tvar valueCount = scale.chart.data.labels.length;\n\tfor (i = 0; i < valueCount; i++) {\n\t\tpointPosition = scale.getPointPosition(i, scale.drawingArea + 5);\n\t\ttextSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);\n\t\tscale._pointLabelSizes[i] = textSize;\n\n\t\t// Add quarter circle to make degree 0 mean top of circle\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians) % 360;\n\t\tvar hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n\t\tvar vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n\n\t\tif (hLimits.start < furthestLimits.l) {\n\t\t\tfurthestLimits.l = hLimits.start;\n\t\t\tfurthestAngles.l = angleRadians;\n\t\t}\n\n\t\tif (hLimits.end > furthestLimits.r) {\n\t\t\tfurthestLimits.r = hLimits.end;\n\t\t\tfurthestAngles.r = angleRadians;\n\t\t}\n\n\t\tif (vLimits.start < furthestLimits.t) {\n\t\t\tfurthestLimits.t = vLimits.start;\n\t\t\tfurthestAngles.t = angleRadians;\n\t\t}\n\n\t\tif (vLimits.end > furthestLimits.b) {\n\t\t\tfurthestLimits.b = vLimits.end;\n\t\t\tfurthestAngles.b = angleRadians;\n\t\t}\n\t}\n\n\tscale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n}\n\nfunction getTextAlignForAngle(angle) {\n\tif (angle === 0 || angle === 180) {\n\t\treturn 'center';\n\t} else if (angle < 180) {\n\t\treturn 'left';\n\t}\n\n\treturn 'right';\n}\n\nfunction fillText(ctx, text, position, lineHeight) {\n\tvar y = position.y + lineHeight / 2;\n\tvar i, ilen;\n\n\tif (helpers$1.isArray(text)) {\n\t\tfor (i = 0, ilen = text.length; i < ilen; ++i) {\n\t\t\tctx.fillText(text[i], position.x, y);\n\t\t\ty += lineHeight;\n\t\t}\n\t} else {\n\t\tctx.fillText(text, position.x, y);\n\t}\n}\n\nfunction adjustPointPositionForLabelHeight(angle, textSize, position) {\n\tif (angle === 90 || angle === 270) {\n\t\tposition.y -= (textSize.h / 2);\n\t} else if (angle > 270 || angle < 90) {\n\t\tposition.y -= textSize.h;\n\t}\n}\n\nfunction drawPointLabels(scale) {\n\tvar ctx = scale.ctx;\n\tvar opts = scale.options;\n\tvar pointLabelOpts = opts.pointLabels;\n\tvar tickBackdropHeight = getTickBackdropHeight(opts);\n\tvar outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n\tvar plFont = helpers$1.options._parseFont(pointLabelOpts);\n\n\tctx.save();\n\n\tctx.font = plFont.string;\n\tctx.textBaseline = 'middle';\n\n\tfor (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {\n\t\t// Extra pixels out for some label spacing\n\t\tvar extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n\t\tvar pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);\n\n\t\t// Keep this in loop since we may support array properties here\n\t\tvar pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);\n\t\tctx.fillStyle = pointLabelFontColor;\n\n\t\tvar angleRadians = scale.getIndexAngle(i);\n\t\tvar angle = helpers$1.toDegrees(angleRadians);\n\t\tctx.textAlign = getTextAlignForAngle(angle);\n\t\tadjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);\n\t\tfillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);\n\t}\n\tctx.restore();\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, index) {\n\tvar ctx = scale.ctx;\n\tvar circular = gridLineOpts.circular;\n\tvar valueCount = scale.chart.data.labels.length;\n\tvar lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);\n\tvar lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);\n\tvar pointPosition;\n\n\tif ((!circular && !valueCount) || !lineColor || !lineWidth) {\n\t\treturn;\n\t}\n\n\tctx.save();\n\tctx.strokeStyle = lineColor;\n\tctx.lineWidth = lineWidth;\n\tif (ctx.setLineDash) {\n\t\tctx.setLineDash(gridLineOpts.borderDash || []);\n\t\tctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;\n\t}\n\n\tctx.beginPath();\n\tif (circular) {\n\t\t// Draw circular arcs between the points\n\t\tctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);\n\t} else {\n\t\t// Draw straight lines connecting each index\n\t\tpointPosition = scale.getPointPosition(0, radius);\n\t\tctx.moveTo(pointPosition.x, pointPosition.y);\n\n\t\tfor (var i = 1; i < valueCount; i++) {\n\t\t\tpointPosition = scale.getPointPosition(i, radius);\n\t\t\tctx.lineTo(pointPosition.x, pointPosition.y);\n\t\t}\n\t}\n\tctx.closePath();\n\tctx.stroke();\n\tctx.restore();\n}\n\nfunction numberOrZero(param) {\n\treturn helpers$1.isNumber(param) ? param : 0;\n}\n\nvar scale_radialLinear = scale_linearbase.extend({\n\tsetDimensions: function() {\n\t\tvar me = this;\n\n\t\t// Set the unconstrained dimension before label rotation\n\t\tme.width = me.maxWidth;\n\t\tme.height = me.maxHeight;\n\t\tme.paddingTop = getTickBackdropHeight(me.options) / 2;\n\t\tme.xCenter = Math.floor(me.width / 2);\n\t\tme.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n\t\tme.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar min = Number.POSITIVE_INFINITY;\n\t\tvar max = Number.NEGATIVE_INFINITY;\n\n\t\thelpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {\n\t\t\tif (chart.isDatasetVisible(datasetIndex)) {\n\t\t\t\tvar meta = chart.getDatasetMeta(datasetIndex);\n\n\t\t\t\thelpers$1.each(dataset.data, function(rawValue, index) {\n\t\t\t\t\tvar value = +me.getRightValue(rawValue);\n\t\t\t\t\tif (isNaN(value) || meta.data[index].hidden) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmin = Math.min(value, min);\n\t\t\t\t\tmax = Math.max(value, max);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tme.min = (min === Number.POSITIVE_INFINITY ? 0 : min);\n\t\tme.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);\n\n\t\t// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero\n\t\tme.handleTickRangeOptions();\n\t},\n\n\t// Returns the maximum number of ticks based on the scale dimension\n\t_computeTickLimit: function() {\n\t\treturn Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n\t},\n\n\tconvertTicksToLabels: function() {\n\t\tvar me = this;\n\n\t\tscale_linearbase.prototype.convertTicksToLabels.call(me);\n\n\t\t// Point labels\n\t\tme.pointLabels = me.chart.data.labels.map(function() {\n\t\t\tvar label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);\n\t\t\treturn label || label === 0 ? label : '';\n\t\t});\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\treturn +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);\n\t},\n\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\n\t\tif (opts.display && opts.pointLabels.display) {\n\t\t\tfitWithPointLabels(me);\n\t\t} else {\n\t\t\tme.setCenterPoint(0, 0, 0, 0);\n\t\t}\n\t},\n\n\t/**\n\t * Set radius reductions and determine new radius and center point\n\t * @private\n\t */\n\tsetReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {\n\t\tvar me = this;\n\t\tvar radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n\t\tvar radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n\t\tvar radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n\t\tvar radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n\n\t\tradiusReductionLeft = numberOrZero(radiusReductionLeft);\n\t\tradiusReductionRight = numberOrZero(radiusReductionRight);\n\t\tradiusReductionTop = numberOrZero(radiusReductionTop);\n\t\tradiusReductionBottom = numberOrZero(radiusReductionBottom);\n\n\t\tme.drawingArea = Math.min(\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n\t\t\tMath.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));\n\t\tme.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n\t},\n\n\tsetCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {\n\t\tvar me = this;\n\t\tvar maxRight = me.width - rightMovement - me.drawingArea;\n\t\tvar maxLeft = leftMovement + me.drawingArea;\n\t\tvar maxTop = topMovement + me.drawingArea;\n\t\tvar maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n\n\t\tme.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n\t\tme.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n\t},\n\n\tgetIndexAngle: function(index) {\n\t\tvar chart = this.chart;\n\t\tvar angleMultiplier = 360 / chart.data.labels.length;\n\t\tvar options = chart.options || {};\n\t\tvar startAngle = options.startAngle || 0;\n\n\t\t// Start from the top instead of right, so remove a quarter of the circle\n\t\tvar angle = (index * angleMultiplier + startAngle) % 360;\n\n\t\treturn (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;\n\t},\n\n\tgetDistanceFromCenterForValue: function(value) {\n\t\tvar me = this;\n\n\t\tif (helpers$1.isNullOrUndef(value)) {\n\t\t\treturn NaN;\n\t\t}\n\n\t\t// Take into account half font size + the yPadding of the top value\n\t\tvar scalingFactor = me.drawingArea / (me.max - me.min);\n\t\tif (me.options.ticks.reverse) {\n\t\t\treturn (me.max - value) * scalingFactor;\n\t\t}\n\t\treturn (value - me.min) * scalingFactor;\n\t},\n\n\tgetPointPosition: function(index, distanceFromCenter) {\n\t\tvar me = this;\n\t\tvar thisAngle = me.getIndexAngle(index) - (Math.PI / 2);\n\t\treturn {\n\t\t\tx: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,\n\t\t\ty: Math.sin(thisAngle) * distanceFromCenter + me.yCenter\n\t\t};\n\t},\n\n\tgetPointPositionForValue: function(index, value) {\n\t\treturn this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n\t},\n\n\tgetBasePosition: function(index) {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\n\t\treturn me.getPointPositionForValue(index || 0,\n\t\t\tme.beginAtZero ? 0 :\n\t\t\tmin < 0 && max < 0 ? max :\n\t\t\tmin > 0 && max > 0 ? min :\n\t\t\t0);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawGrid: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\t\tvar gridLineOpts = opts.gridLines;\n\t\tvar angleLineOpts = opts.angleLines;\n\t\tvar lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);\n\t\tvar lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);\n\t\tvar i, offset, position;\n\n\t\tif (opts.pointLabels.display) {\n\t\t\tdrawPointLabels(me);\n\t\t}\n\n\t\tif (gridLineOpts.display) {\n\t\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\t\tif (index !== 0) {\n\t\t\t\t\toffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\t\t\t\t\tdrawRadiusLine(me, gridLineOpts, offset, index);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (angleLineOpts.display && lineWidth && lineColor) {\n\t\t\tctx.save();\n\t\t\tctx.lineWidth = lineWidth;\n\t\t\tctx.strokeStyle = lineColor;\n\t\t\tif (ctx.setLineDash) {\n\t\t\t\tctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));\n\t\t\t\tctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);\n\t\t\t}\n\n\t\t\tfor (i = me.chart.data.labels.length - 1; i >= 0; i--) {\n\t\t\t\toffset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);\n\t\t\t\tposition = me.getPointPosition(i, offset);\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.moveTo(me.xCenter, me.yCenter);\n\t\t\t\tctx.lineTo(position.x, position.y);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t}\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawLabels: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\t\tvar tickOpts = opts.ticks;\n\n\t\tif (!tickOpts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar startAngle = me.getIndexAngle(0);\n\t\tvar tickFont = helpers$1.options._parseFont(tickOpts);\n\t\tvar tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);\n\t\tvar offset, width;\n\n\t\tctx.save();\n\t\tctx.font = tickFont.string;\n\t\tctx.translate(me.xCenter, me.yCenter);\n\t\tctx.rotate(startAngle);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\n\t\thelpers$1.each(me.ticks, function(label, index) {\n\t\t\tif (index === 0 && !tickOpts.reverse) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\toffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);\n\n\t\t\tif (tickOpts.showLabelBackdrop) {\n\t\t\t\twidth = ctx.measureText(label).width;\n\t\t\t\tctx.fillStyle = tickOpts.backdropColor;\n\n\t\t\t\tctx.fillRect(\n\t\t\t\t\t-width / 2 - tickOpts.backdropPaddingX,\n\t\t\t\t\t-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,\n\t\t\t\t\twidth + tickOpts.backdropPaddingX * 2,\n\t\t\t\t\ttickFont.size + tickOpts.backdropPaddingY * 2\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tctx.fillStyle = tickFontColor;\n\t\t\tctx.fillText(label, 0, -offset);\n\t\t});\n\n\t\tctx.restore();\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_drawTitle: helpers$1.noop\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$3 = defaultConfig$3;\nscale_radialLinear._defaults = _defaults$3;\n\nvar deprecated$1 = helpers$1._deprecated;\nvar resolve$5 = helpers$1.options.resolve;\nvar valueOrDefault$d = helpers$1.valueOrDefault;\n\n// Integer constants are from the ES6 spec.\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n\nvar INTERVALS = {\n\tmillisecond: {\n\t\tcommon: true,\n\t\tsize: 1,\n\t\tsteps: 1000\n\t},\n\tsecond: {\n\t\tcommon: true,\n\t\tsize: 1000,\n\t\tsteps: 60\n\t},\n\tminute: {\n\t\tcommon: true,\n\t\tsize: 60000,\n\t\tsteps: 60\n\t},\n\thour: {\n\t\tcommon: true,\n\t\tsize: 3600000,\n\t\tsteps: 24\n\t},\n\tday: {\n\t\tcommon: true,\n\t\tsize: 86400000,\n\t\tsteps: 30\n\t},\n\tweek: {\n\t\tcommon: false,\n\t\tsize: 604800000,\n\t\tsteps: 4\n\t},\n\tmonth: {\n\t\tcommon: true,\n\t\tsize: 2.628e9,\n\t\tsteps: 12\n\t},\n\tquarter: {\n\t\tcommon: false,\n\t\tsize: 7.884e9,\n\t\tsteps: 4\n\t},\n\tyear: {\n\t\tcommon: true,\n\t\tsize: 3.154e10\n\t}\n};\n\nvar UNITS = Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n\treturn a - b;\n}\n\nfunction arrayUnique(items) {\n\tvar hash = {};\n\tvar out = [];\n\tvar i, ilen, item;\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\titem = items[i];\n\t\tif (!hash[item]) {\n\t\t\thash[item] = true;\n\t\t\tout.push(item);\n\t\t}\n\t}\n\n\treturn out;\n}\n\nfunction getMin(options) {\n\treturn helpers$1.valueOrDefault(options.time.min, options.ticks.min);\n}\n\nfunction getMax(options) {\n\treturn helpers$1.valueOrDefault(options.time.max, options.ticks.max);\n}\n\n/**\n * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n * extremity (left + width or top + height). Note that it would be more optimized to directly\n * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n *\n * @param {number[]} timestamps - timestamps sorted from lowest to highest.\n * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min\n * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.\n * If 'series', timestamps will be positioned at the same distance from each other. In this\n * case, only timestamps that break the time linearity are registered, meaning that in the\n * best case, all timestamps are linear, the table contains only min and max.\n */\nfunction buildLookupTable(timestamps, min, max, distribution) {\n\tif (distribution === 'linear' || !timestamps.length) {\n\t\treturn [\n\t\t\t{time: min, pos: 0},\n\t\t\t{time: max, pos: 1}\n\t\t];\n\t}\n\n\tvar table = [];\n\tvar items = [min];\n\tvar i, ilen, prev, curr, next;\n\n\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\tcurr = timestamps[i];\n\t\tif (curr > min && curr < max) {\n\t\t\titems.push(curr);\n\t\t}\n\t}\n\n\titems.push(max);\n\n\tfor (i = 0, ilen = items.length; i < ilen; ++i) {\n\t\tnext = items[i + 1];\n\t\tprev = items[i - 1];\n\t\tcurr = items[i];\n\n\t\t// only add points that breaks the scale linearity\n\t\tif (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {\n\t\t\ttable.push({time: curr, pos: i / (ilen - 1)});\n\t\t}\n\t}\n\n\treturn table;\n}\n\n// @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/\nfunction lookup(table, key, value) {\n\tvar lo = 0;\n\tvar hi = table.length - 1;\n\tvar mid, i0, i1;\n\n\twhile (lo >= 0 && lo <= hi) {\n\t\tmid = (lo + hi) >> 1;\n\t\ti0 = table[mid - 1] || null;\n\t\ti1 = table[mid];\n\n\t\tif (!i0) {\n\t\t\t// given value is outside table (before first item)\n\t\t\treturn {lo: null, hi: i1};\n\t\t} else if (i1[key] < value) {\n\t\t\tlo = mid + 1;\n\t\t} else if (i0[key] > value) {\n\t\t\thi = mid - 1;\n\t\t} else {\n\t\t\treturn {lo: i0, hi: i1};\n\t\t}\n\t}\n\n\t// given value is outside table (after last item)\n\treturn {lo: i1, hi: null};\n}\n\n/**\n * Linearly interpolates the given source `value` using the table items `skey` values and\n * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')\n * returns the position for a timestamp equal to 42. If value is out of bounds, values at\n * index [0, 1] or [n - 1, n] are used for the interpolation.\n */\nfunction interpolate$1(table, skey, sval, tkey) {\n\tvar range = lookup(table, skey, sval);\n\n\t// Note: the lookup table ALWAYS contains at least 2 items (min and max)\n\tvar prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;\n\tvar next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;\n\n\tvar span = next[skey] - prev[skey];\n\tvar ratio = span ? (sval - prev[skey]) / span : 0;\n\tvar offset = (next[tkey] - prev[tkey]) * ratio;\n\n\treturn prev[tkey] + offset;\n}\n\nfunction toTimestamp(scale, input) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options.time;\n\tvar parser = options.parser;\n\tvar format = parser || options.format;\n\tvar value = input;\n\n\tif (typeof parser === 'function') {\n\t\tvalue = parser(value);\n\t}\n\n\t// Only parse if its not a timestamp already\n\tif (!helpers$1.isFinite(value)) {\n\t\tvalue = typeof format === 'string'\n\t\t\t? adapter.parse(value, format)\n\t\t\t: adapter.parse(value);\n\t}\n\n\tif (value !== null) {\n\t\treturn +value;\n\t}\n\n\t// Labels are in an incompatible format and no `parser` has been provided.\n\t// The user might still use the deprecated `format` option for parsing.\n\tif (!parser && typeof format === 'function') {\n\t\tvalue = format(input);\n\n\t\t// `format` could return something else than a timestamp, if so, parse it\n\t\tif (!helpers$1.isFinite(value)) {\n\t\t\tvalue = adapter.parse(value);\n\t\t}\n\t}\n\n\treturn value;\n}\n\nfunction parse(scale, input) {\n\tif (helpers$1.isNullOrUndef(input)) {\n\t\treturn null;\n\t}\n\n\tvar options = scale.options.time;\n\tvar value = toTimestamp(scale, scale.getRightValue(input));\n\tif (value === null) {\n\t\treturn value;\n\t}\n\n\tif (options.round) {\n\t\tvalue = +scale._adapter.startOf(value, options.round);\n\t}\n\n\treturn value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n\tvar ilen = UNITS.length;\n\tvar i, interval, factor;\n\n\tfor (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n\t\tinterval = INTERVALS[UNITS[i]];\n\t\tfactor = interval.steps ? interval.steps : MAX_INTEGER;\n\n\t\tif (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n\n\treturn UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n\tvar i, unit;\n\n\tfor (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n\t\tunit = UNITS[i];\n\t\tif (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n\t\t\treturn unit;\n\t\t}\n\t}\n\n\treturn UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n\tfor (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n\t\tif (INTERVALS[UNITS[i]].common) {\n\t\t\treturn UNITS[i];\n\t\t}\n\t}\n}\n\n/**\n * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n * `minor` unit using the given scale time `options`.\n * Important: this method can return ticks outside the min and max range, it's the\n * responsibility of the calling code to clamp values if needed.\n */\nfunction generate(scale, min, max, capacity) {\n\tvar adapter = scale._adapter;\n\tvar options = scale.options;\n\tvar timeOpts = options.time;\n\tvar minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);\n\tvar stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);\n\tvar weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n\tvar first = min;\n\tvar ticks = [];\n\tvar time;\n\n\t// For 'week' unit, handle the first day of week option\n\tif (weekday) {\n\t\tfirst = +adapter.startOf(first, 'isoWeek', weekday);\n\t}\n\n\t// Align first ticks on unit\n\tfirst = +adapter.startOf(first, weekday ? 'day' : minor);\n\n\t// Prevent browser from freezing in case user options request millions of milliseconds\n\tif (adapter.diff(max, min, minor) > 100000 * stepSize) {\n\t\tthrow min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;\n\t}\n\n\tfor (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {\n\t\tticks.push(time);\n\t}\n\n\tif (time === max || options.bounds === 'ticks') {\n\t\tticks.push(time);\n\t}\n\n\treturn ticks;\n}\n\n/**\n * Returns the start and end offsets from edges in the form of {start, end}\n * where each value is a relative width to the scale and ranges between 0 and 1.\n * They add extra margins on the both sides by scaling down the original scale.\n * Offsets are added when the `offset` option is true.\n */\nfunction computeOffsets(table, ticks, min, max, options) {\n\tvar start = 0;\n\tvar end = 0;\n\tvar first, last;\n\n\tif (options.offset && ticks.length) {\n\t\tfirst = interpolate$1(table, 'time', ticks[0], 'pos');\n\t\tif (ticks.length === 1) {\n\t\t\tstart = 1 - first;\n\t\t} else {\n\t\t\tstart = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;\n\t\t}\n\t\tlast = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');\n\t\tif (ticks.length === 1) {\n\t\t\tend = last;\n\t\t} else {\n\t\t\tend = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;\n\t\t}\n\t}\n\n\treturn {start: start, end: end, factor: 1 / (start + 1 + end)};\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n\tvar adapter = scale._adapter;\n\tvar first = +adapter.startOf(ticks[0].value, majorUnit);\n\tvar last = ticks[ticks.length - 1].value;\n\tvar major, index;\n\n\tfor (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n\t\tindex = map[major];\n\t\tif (index >= 0) {\n\t\t\tticks[index].major = true;\n\t\t}\n\t}\n\treturn ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n\tvar ticks = [];\n\tvar map = {};\n\tvar ilen = values.length;\n\tvar i, value;\n\n\tfor (i = 0; i < ilen; ++i) {\n\t\tvalue = values[i];\n\t\tmap[value] = i;\n\n\t\tticks.push({\n\t\t\tvalue: value,\n\t\t\tmajor: false\n\t\t});\n\t}\n\n\t// We set the major ticks separately from the above loop because calling startOf for every tick\n\t// is expensive when there is a large number of ticks\n\treturn (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nvar defaultConfig$4 = {\n\tposition: 'bottom',\n\n\t/**\n\t * Data distribution along the scale:\n\t * - 'linear': data are spread according to their time (distances can vary),\n\t * - 'series': data are spread at the same distance from each other.\n\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t * @since 2.7.0\n\t */\n\tdistribution: 'linear',\n\n\t/**\n\t * Scale boundary strategy (bypassed by min/max time options)\n\t * - `data`: make sure data are fully visible, ticks outside are removed\n\t * - `ticks`: make sure ticks are fully visible, data outside are truncated\n\t * @see https://github.com/chartjs/Chart.js/pull/4556\n\t * @since 2.7.0\n\t */\n\tbounds: 'data',\n\n\tadapters: {},\n\ttime: {\n\t\tparser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment\n\t\tunit: false, // false == automatic or override with week, month, year, etc.\n\t\tround: false, // none, or override with week, month, year, etc.\n\t\tdisplayFormat: false, // DEPRECATED\n\t\tisoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/\n\t\tminUnit: 'millisecond',\n\t\tdisplayFormats: {}\n\t},\n\tticks: {\n\t\tautoSkip: false,\n\n\t\t/**\n\t\t * Ticks generation input values:\n\t\t * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n\t\t * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n\t\t * - 'labels': generates ticks from user given `data.labels` values ONLY.\n\t\t * @see https://github.com/chartjs/Chart.js/pull/4507\n\t\t * @since 2.7.0\n\t\t */\n\t\tsource: 'auto',\n\n\t\tmajor: {\n\t\t\tenabled: false\n\t\t}\n\t}\n};\n\nvar scale_time = core_scale.extend({\n\tinitialize: function() {\n\t\tthis.mergeTicksOptions();\n\t\tcore_scale.prototype.initialize.call(this);\n\t},\n\n\tupdate: function() {\n\t\tvar me = this;\n\t\tvar options = me.options;\n\t\tvar time = options.time || (options.time = {});\n\t\tvar adapter = me._adapter = new core_adapters._date(options.adapters.date);\n\n\t\t// DEPRECATIONS: output a message only one time per update\n\t\tdeprecated$1('time scale', time.format, 'time.format', 'time.parser');\n\t\tdeprecated$1('time scale', time.min, 'time.min', 'ticks.min');\n\t\tdeprecated$1('time scale', time.max, 'time.max', 'ticks.max');\n\n\t\t// Backward compatibility: before introducing adapter, `displayFormats` was\n\t\t// supposed to contain *all* unit/string pairs but this can't be resolved\n\t\t// when loading the scale (adapters are loaded afterward), so let's populate\n\t\t// missing formats on update\n\t\thelpers$1.mergeIf(time.displayFormats, adapter.formats());\n\n\t\treturn core_scale.prototype.update.apply(me, arguments);\n\t},\n\n\t/**\n\t * Allows data to be referenced via 't' attribute\n\t */\n\tgetRightValue: function(rawValue) {\n\t\tif (rawValue && rawValue.t !== undefined) {\n\t\t\trawValue = rawValue.t;\n\t\t}\n\t\treturn core_scale.prototype.getRightValue.call(this, rawValue);\n\t},\n\n\tdetermineDataLimits: function() {\n\t\tvar me = this;\n\t\tvar chart = me.chart;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar unit = options.time.unit || 'day';\n\t\tvar min = MAX_INTEGER;\n\t\tvar max = MIN_INTEGER;\n\t\tvar timestamps = [];\n\t\tvar datasets = [];\n\t\tvar labels = [];\n\t\tvar i, j, ilen, jlen, data, timestamp, labelsAdded;\n\t\tvar dataLabels = me._getLabels();\n\n\t\tfor (i = 0, ilen = dataLabels.length; i < ilen; ++i) {\n\t\t\tlabels.push(parse(me, dataLabels[i]));\n\t\t}\n\n\t\tfor (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {\n\t\t\tif (chart.isDatasetVisible(i)) {\n\t\t\t\tdata = chart.data.datasets[i].data;\n\n\t\t\t\t// Let's consider that all data have the same format.\n\t\t\t\tif (helpers$1.isObject(data[0])) {\n\t\t\t\t\tdatasets[i] = [];\n\n\t\t\t\t\tfor (j = 0, jlen = data.length; j < jlen; ++j) {\n\t\t\t\t\t\ttimestamp = parse(me, data[j]);\n\t\t\t\t\t\ttimestamps.push(timestamp);\n\t\t\t\t\t\tdatasets[i][j] = timestamp;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdatasets[i] = labels.slice(0);\n\t\t\t\t\tif (!labelsAdded) {\n\t\t\t\t\t\ttimestamps = timestamps.concat(labels);\n\t\t\t\t\t\tlabelsAdded = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdatasets[i] = [];\n\t\t\t}\n\t\t}\n\n\t\tif (labels.length) {\n\t\t\tmin = Math.min(min, labels[0]);\n\t\t\tmax = Math.max(max, labels[labels.length - 1]);\n\t\t}\n\n\t\tif (timestamps.length) {\n\t\t\ttimestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);\n\t\t\tmin = Math.min(min, timestamps[0]);\n\t\t\tmax = Math.max(max, timestamps[timestamps.length - 1]);\n\t\t}\n\n\t\tmin = parse(me, getMin(options)) || min;\n\t\tmax = parse(me, getMax(options)) || max;\n\n\t\t// In case there is no valid min/max, set limits based on unit time option\n\t\tmin = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;\n\t\tmax = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;\n\n\t\t// Make sure that max is strictly higher than min (required by the lookup table)\n\t\tme.min = Math.min(min, max);\n\t\tme.max = Math.max(min + 1, max);\n\n\t\t// PRIVATE\n\t\tme._table = [];\n\t\tme._timestamps = {\n\t\t\tdata: timestamps,\n\t\t\tdatasets: datasets,\n\t\t\tlabels: labels\n\t\t};\n\t},\n\n\tbuildTicks: function() {\n\t\tvar me = this;\n\t\tvar min = me.min;\n\t\tvar max = me.max;\n\t\tvar options = me.options;\n\t\tvar tickOpts = options.ticks;\n\t\tvar timeOpts = options.time;\n\t\tvar timestamps = me._timestamps;\n\t\tvar ticks = [];\n\t\tvar capacity = me.getLabelCapacity(min);\n\t\tvar source = tickOpts.source;\n\t\tvar distribution = options.distribution;\n\t\tvar i, ilen, timestamp;\n\n\t\tif (source === 'data' || (source === 'auto' && distribution === 'series')) {\n\t\t\ttimestamps = timestamps.data;\n\t\t} else if (source === 'labels') {\n\t\t\ttimestamps = timestamps.labels;\n\t\t} else {\n\t\t\ttimestamps = generate(me, min, max, capacity);\n\t\t}\n\n\t\tif (options.bounds === 'ticks' && timestamps.length) {\n\t\t\tmin = timestamps[0];\n\t\t\tmax = timestamps[timestamps.length - 1];\n\t\t}\n\n\t\t// Enforce limits with user min/max options\n\t\tmin = parse(me, getMin(options)) || min;\n\t\tmax = parse(me, getMax(options)) || max;\n\n\t\t// Remove ticks outside the min/max range\n\t\tfor (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n\t\t\ttimestamp = timestamps[i];\n\t\t\tif (timestamp >= min && timestamp <= max) {\n\t\t\t\tticks.push(timestamp);\n\t\t\t}\n\t\t}\n\n\t\tme.min = min;\n\t\tme.max = max;\n\n\t\t// PRIVATE\n\t\t// determineUnitForFormatting relies on the number of ticks so we don't use it when\n\t\t// autoSkip is enabled because we don't yet know what the final number of ticks will be\n\t\tme._unit = timeOpts.unit || (tickOpts.autoSkip\n\t\t\t? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)\n\t\t\t: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));\n\t\tme._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined\n\t\t\t: determineMajorUnit(me._unit);\n\t\tme._table = buildLookupTable(me._timestamps.data, min, max, distribution);\n\t\tme._offsets = computeOffsets(me._table, ticks, min, max, options);\n\n\t\tif (tickOpts.reverse) {\n\t\t\tticks.reverse();\n\t\t}\n\n\t\treturn ticksFromTimestamps(me, ticks, me._majorUnit);\n\t},\n\n\tgetLabelForIndex: function(index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar data = me.chart.data;\n\t\tvar timeOpts = me.options.time;\n\t\tvar label = data.labels && index < data.labels.length ? data.labels[index] : '';\n\t\tvar value = data.datasets[datasetIndex].data[index];\n\n\t\tif (helpers$1.isObject(value)) {\n\t\t\tlabel = me.getRightValue(value);\n\t\t}\n\t\tif (timeOpts.tooltipFormat) {\n\t\t\treturn adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);\n\t\t}\n\t\tif (typeof label === 'string') {\n\t\t\treturn label;\n\t\t}\n\t\treturn adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);\n\t},\n\n\t/**\n\t * Function to format an individual tick mark\n\t * @private\n\t */\n\ttickFormatFunction: function(time, index, ticks, format) {\n\t\tvar me = this;\n\t\tvar adapter = me._adapter;\n\t\tvar options = me.options;\n\t\tvar formats = options.time.displayFormats;\n\t\tvar minorFormat = formats[me._unit];\n\t\tvar majorUnit = me._majorUnit;\n\t\tvar majorFormat = formats[majorUnit];\n\t\tvar tick = ticks[index];\n\t\tvar tickOpts = options.ticks;\n\t\tvar major = majorUnit && majorFormat && tick && tick.major;\n\t\tvar label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);\n\t\tvar nestedTickOpts = major ? tickOpts.major : tickOpts.minor;\n\t\tvar formatter = resolve$5([\n\t\t\tnestedTickOpts.callback,\n\t\t\tnestedTickOpts.userCallback,\n\t\t\ttickOpts.callback,\n\t\t\ttickOpts.userCallback\n\t\t]);\n\n\t\treturn formatter ? formatter(label, index, ticks) : label;\n\t},\n\n\tconvertTicksToLabels: function(ticks) {\n\t\tvar labels = [];\n\t\tvar i, ilen;\n\n\t\tfor (i = 0, ilen = ticks.length; i < ilen; ++i) {\n\t\t\tlabels.push(this.tickFormatFunction(ticks[i].value, i, ticks));\n\t\t}\n\n\t\treturn labels;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetPixelForOffset: function(time) {\n\t\tvar me = this;\n\t\tvar offsets = me._offsets;\n\t\tvar pos = interpolate$1(me._table, 'time', time, 'pos');\n\t\treturn me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n\t},\n\n\tgetPixelForValue: function(value, index, datasetIndex) {\n\t\tvar me = this;\n\t\tvar time = null;\n\n\t\tif (index !== undefined && datasetIndex !== undefined) {\n\t\t\ttime = me._timestamps.datasets[datasetIndex][index];\n\t\t}\n\n\t\tif (time === null) {\n\t\t\ttime = parse(me, value);\n\t\t}\n\n\t\tif (time !== null) {\n\t\t\treturn me.getPixelForOffset(time);\n\t\t}\n\t},\n\n\tgetPixelForTick: function(index) {\n\t\tvar ticks = this.getTicks();\n\t\treturn index >= 0 && index < ticks.length ?\n\t\t\tthis.getPixelForOffset(ticks[index].value) :\n\t\t\tnull;\n\t},\n\n\tgetValueForPixel: function(pixel) {\n\t\tvar me = this;\n\t\tvar offsets = me._offsets;\n\t\tvar pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n\t\tvar time = interpolate$1(me._table, 'pos', pos, 'time');\n\n\t\t// DEPRECATION, we should return time directly\n\t\treturn me._adapter._create(time);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLabelSize: function(label) {\n\t\tvar me = this;\n\t\tvar ticksOpts = me.options.ticks;\n\t\tvar tickLabelWidth = me.ctx.measureText(label).width;\n\t\tvar angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n\t\tvar cosRotation = Math.cos(angle);\n\t\tvar sinRotation = Math.sin(angle);\n\t\tvar tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);\n\n\t\treturn {\n\t\t\tw: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n\t\t\th: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n\t\t};\n\t},\n\n\t/**\n\t * Crude approximation of what the label width might be\n\t * @private\n\t */\n\tgetLabelWidth: function(label) {\n\t\treturn this._getLabelSize(label).w;\n\t},\n\n\t/**\n\t * @private\n\t */\n\tgetLabelCapacity: function(exampleTime) {\n\t\tvar me = this;\n\t\tvar timeOpts = me.options.time;\n\t\tvar displayFormats = timeOpts.displayFormats;\n\n\t\t// pick the longest format (milliseconds) for guestimation\n\t\tvar format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\t\tvar exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);\n\t\tvar size = me._getLabelSize(exampleLabel);\n\t\tvar capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);\n\n\t\tif (me.options.offset) {\n\t\t\tcapacity--;\n\t\t}\n\n\t\treturn capacity > 0 ? capacity : 1;\n\t}\n});\n\n// INTERNAL: static default options, registered in src/index.js\nvar _defaults$4 = defaultConfig$4;\nscale_time._defaults = _defaults$4;\n\nvar scales = {\n\tcategory: scale_category,\n\tlinear: scale_linear,\n\tlogarithmic: scale_logarithmic,\n\tradialLinear: scale_radialLinear,\n\ttime: scale_time\n};\n\nvar FORMATS = {\n\tdatetime: 'MMM D, YYYY, h:mm:ss a',\n\tmillisecond: 'h:mm:ss.SSS a',\n\tsecond: 'h:mm:ss a',\n\tminute: 'h:mm a',\n\thour: 'hA',\n\tday: 'MMM D',\n\tweek: 'll',\n\tmonth: 'MMM YYYY',\n\tquarter: '[Q]Q - YYYY',\n\tyear: 'YYYY'\n};\n\ncore_adapters._date.override(typeof moment === 'function' ? {\n\t_id: 'moment', // DEBUG ONLY\n\n\tformats: function() {\n\t\treturn FORMATS;\n\t},\n\n\tparse: function(value, format) {\n\t\tif (typeof value === 'string' && typeof format === 'string') {\n\t\t\tvalue = moment(value, format);\n\t\t} else if (!(value instanceof moment)) {\n\t\t\tvalue = moment(value);\n\t\t}\n\t\treturn value.isValid() ? value.valueOf() : null;\n\t},\n\n\tformat: function(time, format) {\n\t\treturn moment(time).format(format);\n\t},\n\n\tadd: function(time, amount, unit) {\n\t\treturn moment(time).add(amount, unit).valueOf();\n\t},\n\n\tdiff: function(max, min, unit) {\n\t\treturn moment(max).diff(moment(min), unit);\n\t},\n\n\tstartOf: function(time, unit, weekday) {\n\t\ttime = moment(time);\n\t\tif (unit === 'isoWeek') {\n\t\t\treturn time.isoWeekday(weekday).valueOf();\n\t\t}\n\t\treturn time.startOf(unit).valueOf();\n\t},\n\n\tendOf: function(time, unit) {\n\t\treturn moment(time).endOf(unit).valueOf();\n\t},\n\n\t// DEPRECATIONS\n\n\t/**\n\t * Provided for backward compatibility with scale.getValueForPixel().\n\t * @deprecated since version 2.8.0\n\t * @todo remove at version 3\n\t * @private\n\t */\n\t_create: function(time) {\n\t\treturn moment(time);\n\t},\n} : {});\n\ncore_defaults._set('global', {\n\tplugins: {\n\t\tfiller: {\n\t\t\tpropagate: true\n\t\t}\n\t}\n});\n\nvar mappers = {\n\tdataset: function(source) {\n\t\tvar index = source.fill;\n\t\tvar chart = source.chart;\n\t\tvar meta = chart.getDatasetMeta(index);\n\t\tvar visible = meta && chart.isDatasetVisible(index);\n\t\tvar points = (visible && meta.dataset._children) || [];\n\t\tvar length = points.length || 0;\n\n\t\treturn !length ? null : function(point, i) {\n\t\t\treturn (i < length && points[i]._view) || null;\n\t\t};\n\t},\n\n\tboundary: function(source) {\n\t\tvar boundary = source.boundary;\n\t\tvar x = boundary ? boundary.x : null;\n\t\tvar y = boundary ? boundary.y : null;\n\n\t\tif (helpers$1.isArray(boundary)) {\n\t\t\treturn function(point, i) {\n\t\t\t\treturn boundary[i];\n\t\t\t};\n\t\t}\n\n\t\treturn function(point) {\n\t\t\treturn {\n\t\t\t\tx: x === null ? point.x : x,\n\t\t\t\ty: y === null ? point.y : y,\n\t\t\t};\n\t\t};\n\t}\n};\n\n// @todo if (fill[0] === '#')\nfunction decodeFill(el, index, count) {\n\tvar model = el._model || {};\n\tvar fill = model.fill;\n\tvar target;\n\n\tif (fill === undefined) {\n\t\tfill = !!model.backgroundColor;\n\t}\n\n\tif (fill === false || fill === null) {\n\t\treturn false;\n\t}\n\n\tif (fill === true) {\n\t\treturn 'origin';\n\t}\n\n\ttarget = parseFloat(fill, 10);\n\tif (isFinite(target) && Math.floor(target) === target) {\n\t\tif (fill[0] === '-' || fill[0] === '+') {\n\t\t\ttarget = index + target;\n\t\t}\n\n\t\tif (target === index || target < 0 || target >= count) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tswitch (fill) {\n\t// compatibility\n\tcase 'bottom':\n\t\treturn 'start';\n\tcase 'top':\n\t\treturn 'end';\n\tcase 'zero':\n\t\treturn 'origin';\n\t// supported boundaries\n\tcase 'origin':\n\tcase 'start':\n\tcase 'end':\n\t\treturn fill;\n\t// invalid fill values\n\tdefault:\n\t\treturn false;\n\t}\n}\n\nfunction computeLinearBoundary(source) {\n\tvar model = source.el._model || {};\n\tvar scale = source.el._scale || {};\n\tvar fill = source.fill;\n\tvar target = null;\n\tvar horizontal;\n\n\tif (isFinite(fill)) {\n\t\treturn null;\n\t}\n\n\t// Backward compatibility: until v3, we still need to support boundary values set on\n\t// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and\n\t// controllers might still use it (e.g. the Smith chart).\n\n\tif (fill === 'start') {\n\t\ttarget = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;\n\t} else if (fill === 'end') {\n\t\ttarget = model.scaleTop === undefined ? scale.top : model.scaleTop;\n\t} else if (model.scaleZero !== undefined) {\n\t\ttarget = model.scaleZero;\n\t} else if (scale.getBasePixel) {\n\t\ttarget = scale.getBasePixel();\n\t}\n\n\tif (target !== undefined && target !== null) {\n\t\tif (target.x !== undefined && target.y !== undefined) {\n\t\t\treturn target;\n\t\t}\n\n\t\tif (helpers$1.isFinite(target)) {\n\t\t\thorizontal = scale.isHorizontal();\n\t\t\treturn {\n\t\t\t\tx: horizontal ? target : null,\n\t\t\t\ty: horizontal ? null : target\n\t\t\t};\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction computeCircularBoundary(source) {\n\tvar scale = source.el._scale;\n\tvar options = scale.options;\n\tvar length = scale.chart.data.labels.length;\n\tvar fill = source.fill;\n\tvar target = [];\n\tvar start, end, center, i, point;\n\n\tif (!length) {\n\t\treturn null;\n\t}\n\n\tstart = options.ticks.reverse ? scale.max : scale.min;\n\tend = options.ticks.reverse ? scale.min : scale.max;\n\tcenter = scale.getPointPositionForValue(0, start);\n\tfor (i = 0; i < length; ++i) {\n\t\tpoint = fill === 'start' || fill === 'end'\n\t\t\t? scale.getPointPositionForValue(i, fill === 'start' ? start : end)\n\t\t\t: scale.getBasePosition(i);\n\t\tif (options.gridLines.circular) {\n\t\t\tpoint.cx = center.x;\n\t\t\tpoint.cy = center.y;\n\t\t\tpoint.angle = scale.getIndexAngle(i) - Math.PI / 2;\n\t\t}\n\t\ttarget.push(point);\n\t}\n\treturn target;\n}\n\nfunction computeBoundary(source) {\n\tvar scale = source.el._scale || {};\n\n\tif (scale.getPointPositionForValue) {\n\t\treturn computeCircularBoundary(source);\n\t}\n\treturn computeLinearBoundary(source);\n}\n\nfunction resolveTarget(sources, index, propagate) {\n\tvar source = sources[index];\n\tvar fill = source.fill;\n\tvar visited = [index];\n\tvar target;\n\n\tif (!propagate) {\n\t\treturn fill;\n\t}\n\n\twhile (fill !== false && visited.indexOf(fill) === -1) {\n\t\tif (!isFinite(fill)) {\n\t\t\treturn fill;\n\t\t}\n\n\t\ttarget = sources[fill];\n\t\tif (!target) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (target.visible) {\n\t\t\treturn fill;\n\t\t}\n\n\t\tvisited.push(fill);\n\t\tfill = target.fill;\n\t}\n\n\treturn false;\n}\n\nfunction createMapper(source) {\n\tvar fill = source.fill;\n\tvar type = 'dataset';\n\n\tif (fill === false) {\n\t\treturn null;\n\t}\n\n\tif (!isFinite(fill)) {\n\t\ttype = 'boundary';\n\t}\n\n\treturn mappers[type](source);\n}\n\nfunction isDrawable(point) {\n\treturn point && !point.skip;\n}\n\nfunction drawArea(ctx, curve0, curve1, len0, len1) {\n\tvar i, cx, cy, r;\n\n\tif (!len0 || !len1) {\n\t\treturn;\n\t}\n\n\t// building first area curve (normal)\n\tctx.moveTo(curve0[0].x, curve0[0].y);\n\tfor (i = 1; i < len0; ++i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);\n\t}\n\n\tif (curve1[0].angle !== undefined) {\n\t\tcx = curve1[0].cx;\n\t\tcy = curve1[0].cy;\n\t\tr = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));\n\t\tfor (i = len1 - 1; i > 0; --i) {\n\t\t\tctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);\n\t\t}\n\t\treturn;\n\t}\n\n\t// joining the two area curves\n\tctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);\n\n\t// building opposite area curve (reverse)\n\tfor (i = len1 - 1; i > 0; --i) {\n\t\thelpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);\n\t}\n}\n\nfunction doFill(ctx, points, mapper, view, color, loop) {\n\tvar count = points.length;\n\tvar span = view.spanGaps;\n\tvar curve0 = [];\n\tvar curve1 = [];\n\tvar len0 = 0;\n\tvar len1 = 0;\n\tvar i, ilen, index, p0, p1, d0, d1, loopOffset;\n\n\tctx.beginPath();\n\n\tfor (i = 0, ilen = count; i < ilen; ++i) {\n\t\tindex = i % count;\n\t\tp0 = points[index]._view;\n\t\tp1 = mapper(p0, index, view);\n\t\td0 = isDrawable(p0);\n\t\td1 = isDrawable(p1);\n\n\t\tif (loop && loopOffset === undefined && d0) {\n\t\t\tloopOffset = i + 1;\n\t\t\tilen = count + loopOffset;\n\t\t}\n\n\t\tif (d0 && d1) {\n\t\t\tlen0 = curve0.push(p0);\n\t\t\tlen1 = curve1.push(p1);\n\t\t} else if (len0 && len1) {\n\t\t\tif (!span) {\n\t\t\t\tdrawArea(ctx, curve0, curve1, len0, len1);\n\t\t\t\tlen0 = len1 = 0;\n\t\t\t\tcurve0 = [];\n\t\t\t\tcurve1 = [];\n\t\t\t} else {\n\t\t\t\tif (d0) {\n\t\t\t\t\tcurve0.push(p0);\n\t\t\t\t}\n\t\t\t\tif (d1) {\n\t\t\t\t\tcurve1.push(p1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdrawArea(ctx, curve0, curve1, len0, len1);\n\n\tctx.closePath();\n\tctx.fillStyle = color;\n\tctx.fill();\n}\n\nvar plugin_filler = {\n\tid: 'filler',\n\n\tafterDatasetsUpdate: function(chart, options) {\n\t\tvar count = (chart.data.datasets || []).length;\n\t\tvar propagate = options.propagate;\n\t\tvar sources = [];\n\t\tvar meta, i, el, source;\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tmeta = chart.getDatasetMeta(i);\n\t\t\tel = meta.dataset;\n\t\t\tsource = null;\n\n\t\t\tif (el && el._model && el instanceof elements.Line) {\n\t\t\t\tsource = {\n\t\t\t\t\tvisible: chart.isDatasetVisible(i),\n\t\t\t\t\tfill: decodeFill(el, i, count),\n\t\t\t\t\tchart: chart,\n\t\t\t\t\tel: el\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tmeta.$filler = source;\n\t\t\tsources.push(source);\n\t\t}\n\n\t\tfor (i = 0; i < count; ++i) {\n\t\t\tsource = sources[i];\n\t\t\tif (!source) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsource.fill = resolveTarget(sources, i, propagate);\n\t\t\tsource.boundary = computeBoundary(source);\n\t\t\tsource.mapper = createMapper(source);\n\t\t}\n\t},\n\n\tbeforeDatasetsDraw: function(chart) {\n\t\tvar metasets = chart._getSortedVisibleDatasetMetas();\n\t\tvar ctx = chart.ctx;\n\t\tvar meta, i, el, view, points, mapper, color;\n\n\t\tfor (i = metasets.length - 1; i >= 0; --i) {\n\t\t\tmeta = metasets[i].$filler;\n\n\t\t\tif (!meta || !meta.visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tel = meta.el;\n\t\t\tview = el._view;\n\t\t\tpoints = el._children || [];\n\t\t\tmapper = meta.mapper;\n\t\t\tcolor = view.backgroundColor || core_defaults.global.defaultColor;\n\n\t\t\tif (mapper && color && points.length) {\n\t\t\t\thelpers$1.canvas.clipArea(ctx, chart.chartArea);\n\t\t\t\tdoFill(ctx, points, mapper, view, color, el._loop);\n\t\t\t\thelpers$1.canvas.unclipArea(ctx);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;\nvar noop$1 = helpers$1.noop;\nvar valueOrDefault$e = helpers$1.valueOrDefault;\n\ncore_defaults._set('global', {\n\tlegend: {\n\t\tdisplay: true,\n\t\tposition: 'top',\n\t\talign: 'center',\n\t\tfullWidth: true,\n\t\treverse: false,\n\t\tweight: 1000,\n\n\t\t// a callback that will handle\n\t\tonClick: function(e, legendItem) {\n\t\t\tvar index = legendItem.datasetIndex;\n\t\t\tvar ci = this.chart;\n\t\t\tvar meta = ci.getDatasetMeta(index);\n\n\t\t\t// See controller.isDatasetVisible comment\n\t\t\tmeta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;\n\n\t\t\t// We hid a dataset ... rerender the chart\n\t\t\tci.update();\n\t\t},\n\n\t\tonHover: null,\n\t\tonLeave: null,\n\n\t\tlabels: {\n\t\t\tboxWidth: 40,\n\t\t\tpadding: 10,\n\t\t\t// Generates labels shown in the legend\n\t\t\t// Valid properties to return:\n\t\t\t// text : text to display\n\t\t\t// fillStyle : fill of coloured box\n\t\t\t// strokeStyle: stroke of coloured box\n\t\t\t// hidden : if this legend item refers to a hidden item\n\t\t\t// lineCap : cap style for line\n\t\t\t// lineDash\n\t\t\t// lineDashOffset :\n\t\t\t// lineJoin :\n\t\t\t// lineWidth :\n\t\t\tgenerateLabels: function(chart) {\n\t\t\t\tvar datasets = chart.data.datasets;\n\t\t\t\tvar options = chart.options.legend || {};\n\t\t\t\tvar usePointStyle = options.labels && options.labels.usePointStyle;\n\n\t\t\t\treturn chart._getSortedDatasetMetas().map(function(meta) {\n\t\t\t\t\tvar style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: datasets[meta.index].label,\n\t\t\t\t\t\tfillStyle: style.backgroundColor,\n\t\t\t\t\t\thidden: !chart.isDatasetVisible(meta.index),\n\t\t\t\t\t\tlineCap: style.borderCapStyle,\n\t\t\t\t\t\tlineDash: style.borderDash,\n\t\t\t\t\t\tlineDashOffset: style.borderDashOffset,\n\t\t\t\t\t\tlineJoin: style.borderJoinStyle,\n\t\t\t\t\t\tlineWidth: style.borderWidth,\n\t\t\t\t\t\tstrokeStyle: style.borderColor,\n\t\t\t\t\t\tpointStyle: style.pointStyle,\n\t\t\t\t\t\trotation: style.rotation,\n\n\t\t\t\t\t\t// Below is extra data used for toggling the datasets\n\t\t\t\t\t\tdatasetIndex: meta.index\n\t\t\t\t\t};\n\t\t\t\t}, this);\n\t\t\t}\n\t\t}\n\t},\n\n\tlegendCallback: function(chart) {\n\t\tvar list = document.createElement('ul');\n\t\tvar datasets = chart.data.datasets;\n\t\tvar i, ilen, listItem, listItemSpan;\n\n\t\tlist.setAttribute('class', chart.id + '-legend');\n\n\t\tfor (i = 0, ilen = datasets.length; i < ilen; i++) {\n\t\t\tlistItem = list.appendChild(document.createElement('li'));\n\t\t\tlistItemSpan = listItem.appendChild(document.createElement('span'));\n\t\t\tlistItemSpan.style.backgroundColor = datasets[i].backgroundColor;\n\t\t\tif (datasets[i].label) {\n\t\t\t\tlistItem.appendChild(document.createTextNode(datasets[i].label));\n\t\t\t}\n\t\t}\n\n\t\treturn list.outerHTML;\n\t}\n});\n\n/**\n * Helper function to get the box width based on the usePointStyle option\n * @param {object} labelopts - the label options on the legend\n * @param {number} fontSize - the label font size\n * @return {number} width of the color box area\n */\nfunction getBoxWidth(labelOpts, fontSize) {\n\treturn labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?\n\t\tfontSize :\n\t\tlabelOpts.boxWidth;\n}\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Legend = core_element.extend({\n\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\n\t\t/**\n \t\t * @private\n \t\t */\n\t\tme._hoveredItem = null;\n\n\t\t// Are we in doughnut mode which has a different data type\n\t\tme.doughnutMode = false;\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\t// Any function defined here is inherited by all legend types.\n\t// Any function can be extended by the legend type\n\n\tbeforeUpdate: noop$1,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\t},\n\tafterUpdate: noop$1,\n\n\t//\n\n\tbeforeSetDimensions: noop$1,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$1,\n\n\t//\n\n\tbeforeBuildLabels: noop$1,\n\tbuildLabels: function() {\n\t\tvar me = this;\n\t\tvar labelOpts = me.options.labels || {};\n\t\tvar legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];\n\n\t\tif (labelOpts.filter) {\n\t\t\tlegendItems = legendItems.filter(function(item) {\n\t\t\t\treturn labelOpts.filter(item, me.chart.data);\n\t\t\t});\n\t\t}\n\n\t\tif (me.options.reverse) {\n\t\t\tlegendItems.reverse();\n\t\t}\n\n\t\tme.legendItems = legendItems;\n\t},\n\tafterBuildLabels: noop$1,\n\n\t//\n\n\tbeforeFit: noop$1,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar display = opts.display;\n\n\t\tvar ctx = me.ctx;\n\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\n\t\t// Reset hit boxes\n\t\tvar hitboxes = me.legendHitBoxes = [];\n\n\t\tvar minSize = me.minSize;\n\t\tvar isHorizontal = me.isHorizontal();\n\n\t\tif (isHorizontal) {\n\t\t\tminSize.width = me.maxWidth; // fill all the width\n\t\t\tminSize.height = display ? 10 : 0;\n\t\t} else {\n\t\t\tminSize.width = display ? 10 : 0;\n\t\t\tminSize.height = me.maxHeight; // fill all the height\n\t\t}\n\n\t\t// Increase sizes here\n\t\tif (!display) {\n\t\t\tme.width = minSize.width = me.height = minSize.height = 0;\n\t\t\treturn;\n\t\t}\n\t\tctx.font = labelFont.string;\n\n\t\tif (isHorizontal) {\n\t\t\t// Labels\n\n\t\t\t// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n\t\t\tvar lineWidths = me.lineWidths = [0];\n\t\t\tvar totalHeight = 0;\n\n\t\t\tctx.textAlign = 'left';\n\t\t\tctx.textBaseline = 'middle';\n\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\tvar width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\tif (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {\n\t\t\t\t\ttotalHeight += fontSize + labelOpts.padding;\n\t\t\t\t\tlineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n\t\t\t\t}\n\n\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\thitboxes[i] = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: fontSize\n\t\t\t\t};\n\n\t\t\t\tlineWidths[lineWidths.length - 1] += width + labelOpts.padding;\n\t\t\t});\n\n\t\t\tminSize.height += totalHeight;\n\n\t\t} else {\n\t\t\tvar vPadding = labelOpts.padding;\n\t\t\tvar columnWidths = me.columnWidths = [];\n\t\t\tvar columnHeights = me.columnHeights = [];\n\t\t\tvar totalWidth = labelOpts.padding;\n\t\t\tvar currentColWidth = 0;\n\t\t\tvar currentColHeight = 0;\n\n\t\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\t\t\tvar itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n\t\t\t\t// If too tall, go to new column\n\t\t\t\tif (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {\n\t\t\t\t\ttotalWidth += currentColWidth + labelOpts.padding;\n\t\t\t\t\tcolumnWidths.push(currentColWidth); // previous column width\n\t\t\t\t\tcolumnHeights.push(currentColHeight);\n\t\t\t\t\tcurrentColWidth = 0;\n\t\t\t\t\tcurrentColHeight = 0;\n\t\t\t\t}\n\n\t\t\t\t// Get max width\n\t\t\t\tcurrentColWidth = Math.max(currentColWidth, itemWidth);\n\t\t\t\tcurrentColHeight += fontSize + vPadding;\n\n\t\t\t\t// Store the hitbox width and height here. Final position will be updated in `draw`\n\t\t\t\thitboxes[i] = {\n\t\t\t\t\tleft: 0,\n\t\t\t\t\ttop: 0,\n\t\t\t\t\twidth: itemWidth,\n\t\t\t\t\theight: fontSize\n\t\t\t\t};\n\t\t\t});\n\n\t\t\ttotalWidth += currentColWidth;\n\t\t\tcolumnWidths.push(currentColWidth);\n\t\t\tcolumnHeights.push(currentColHeight);\n\t\t\tminSize.width += totalWidth;\n\t\t}\n\n\t\tme.width = minSize.width;\n\t\tme.height = minSize.height;\n\t},\n\tafterFit: noop$1,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\treturn this.options.position === 'top' || this.options.position === 'bottom';\n\t},\n\n\t// Actually draw the legend on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar labelOpts = opts.labels;\n\t\tvar globalDefaults = core_defaults.global;\n\t\tvar defaultColor = globalDefaults.defaultColor;\n\t\tvar lineDefault = globalDefaults.elements.line;\n\t\tvar legendHeight = me.height;\n\t\tvar columnHeights = me.columnHeights;\n\t\tvar legendWidth = me.width;\n\t\tvar lineWidths = me.lineWidths;\n\n\t\tif (!opts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);\n\t\tvar ctx = me.ctx;\n\t\tvar fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);\n\t\tvar labelFont = helpers$1.options._parseFont(labelOpts);\n\t\tvar fontSize = labelFont.size;\n\t\tvar cursor;\n\n\t\t// Canvas setup\n\t\tctx.textAlign = rtlHelper.textAlign('left');\n\t\tctx.textBaseline = 'middle';\n\t\tctx.lineWidth = 0.5;\n\t\tctx.strokeStyle = fontColor; // for strikethrough effect\n\t\tctx.fillStyle = fontColor; // render in correct colour\n\t\tctx.font = labelFont.string;\n\n\t\tvar boxWidth = getBoxWidth(labelOpts, fontSize);\n\t\tvar hitboxes = me.legendHitBoxes;\n\n\t\t// current position\n\t\tvar drawLegendBox = function(x, y, legendItem) {\n\t\t\tif (isNaN(boxWidth) || boxWidth <= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the ctx for the box\n\t\t\tctx.save();\n\n\t\t\tvar lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);\n\t\t\tctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);\n\t\t\tctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);\n\t\t\tctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);\n\t\t\tctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);\n\t\t\tctx.lineWidth = lineWidth;\n\t\t\tctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);\n\n\t\t\tif (ctx.setLineDash) {\n\t\t\t\t// IE 9 and 10 do not support line dash\n\t\t\t\tctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));\n\t\t\t}\n\n\t\t\tif (labelOpts && labelOpts.usePointStyle) {\n\t\t\t\t// Recalculate x and y for drawPoint() because its expecting\n\t\t\t\t// x and y to be center of figure (instead of top left)\n\t\t\t\tvar radius = boxWidth * Math.SQRT2 / 2;\n\t\t\t\tvar centerX = rtlHelper.xPlus(x, boxWidth / 2);\n\t\t\t\tvar centerY = y + fontSize / 2;\n\n\t\t\t\t// Draw pointStyle as legend symbol\n\t\t\t\thelpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);\n\t\t\t} else {\n\t\t\t\t// Draw box as legend symbol\n\t\t\t\tctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);\n\t\t\t\tif (lineWidth !== 0) {\n\t\t\t\t\tctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tctx.restore();\n\t\t};\n\n\t\tvar fillText = function(x, y, legendItem, textWidth) {\n\t\t\tvar halfFontSize = fontSize / 2;\n\t\t\tvar xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);\n\t\t\tvar yMiddle = y + halfFontSize;\n\n\t\t\tctx.fillText(legendItem.text, xLeft, yMiddle);\n\n\t\t\tif (legendItem.hidden) {\n\t\t\t\t// Strikethrough the text if hidden\n\t\t\t\tctx.beginPath();\n\t\t\t\tctx.lineWidth = 2;\n\t\t\t\tctx.moveTo(xLeft, yMiddle);\n\t\t\t\tctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);\n\t\t\t\tctx.stroke();\n\t\t\t}\n\t\t};\n\n\t\tvar alignmentOffset = function(dimension, blockSize) {\n\t\t\tswitch (opts.align) {\n\t\t\tcase 'start':\n\t\t\t\treturn labelOpts.padding;\n\t\t\tcase 'end':\n\t\t\t\treturn dimension - blockSize;\n\t\t\tdefault: // center\n\t\t\t\treturn (dimension - blockSize + labelOpts.padding) / 2;\n\t\t\t}\n\t\t};\n\n\t\t// Horizontal\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tif (isHorizontal) {\n\t\t\tcursor = {\n\t\t\t\tx: me.left + alignmentOffset(legendWidth, lineWidths[0]),\n\t\t\t\ty: me.top + labelOpts.padding,\n\t\t\t\tline: 0\n\t\t\t};\n\t\t} else {\n\t\t\tcursor = {\n\t\t\t\tx: me.left + labelOpts.padding,\n\t\t\t\ty: me.top + alignmentOffset(legendHeight, columnHeights[0]),\n\t\t\t\tline: 0\n\t\t\t};\n\t\t}\n\n\t\thelpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);\n\n\t\tvar itemHeight = fontSize + labelOpts.padding;\n\t\thelpers$1.each(me.legendItems, function(legendItem, i) {\n\t\t\tvar textWidth = ctx.measureText(legendItem.text).width;\n\t\t\tvar width = boxWidth + (fontSize / 2) + textWidth;\n\t\t\tvar x = cursor.x;\n\t\t\tvar y = cursor.y;\n\n\t\t\trtlHelper.setWidth(me.minSize.width);\n\n\t\t\t// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)\n\t\t\t// instead of me.right and me.bottom because me.width and me.height\n\t\t\t// may have been changed since me.minSize was calculated\n\t\t\tif (isHorizontal) {\n\t\t\t\tif (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {\n\t\t\t\t\ty = cursor.y += itemHeight;\n\t\t\t\t\tcursor.line++;\n\t\t\t\t\tx = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);\n\t\t\t\t}\n\t\t\t} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {\n\t\t\t\tx = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;\n\t\t\t\tcursor.line++;\n\t\t\t\ty = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);\n\t\t\t}\n\n\t\t\tvar realX = rtlHelper.x(x);\n\n\t\t\tdrawLegendBox(realX, y, legendItem);\n\n\t\t\thitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);\n\t\t\thitboxes[i].top = y;\n\n\t\t\t// Fill the actual label\n\t\t\tfillText(realX, y, legendItem, textWidth);\n\n\t\t\tif (isHorizontal) {\n\t\t\t\tcursor.x += width + labelOpts.padding;\n\t\t\t} else {\n\t\t\t\tcursor.y += itemHeight;\n\t\t\t}\n\t\t});\n\n\t\thelpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);\n\t},\n\n\t/**\n\t * @private\n\t */\n\t_getLegendItemAt: function(x, y) {\n\t\tvar me = this;\n\t\tvar i, hitBox, lh;\n\n\t\tif (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n\t\t\t// See if we are touching one of the dataset boxes\n\t\t\tlh = me.legendHitBoxes;\n\t\t\tfor (i = 0; i < lh.length; ++i) {\n\t\t\t\thitBox = lh[i];\n\n\t\t\t\tif (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n\t\t\t\t\t// Touching an element\n\t\t\t\t\treturn me.legendItems[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Handle an event\n\t * @private\n\t * @param {IEvent} event - The event to handle\n\t */\n\thandleEvent: function(e) {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar type = e.type === 'mouseup' ? 'click' : e.type;\n\t\tvar hoveredItem;\n\n\t\tif (type === 'mousemove') {\n\t\t\tif (!opts.onHover && !opts.onLeave) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (type === 'click') {\n\t\t\tif (!opts.onClick) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Chart event already has relative position in it\n\t\thoveredItem = me._getLegendItemAt(e.x, e.y);\n\n\t\tif (type === 'click') {\n\t\t\tif (hoveredItem && opts.onClick) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onClick.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t} else {\n\t\t\tif (opts.onLeave && hoveredItem !== me._hoveredItem) {\n\t\t\t\tif (me._hoveredItem) {\n\t\t\t\t\topts.onLeave.call(me, e.native, me._hoveredItem);\n\t\t\t\t}\n\t\t\t\tme._hoveredItem = hoveredItem;\n\t\t\t}\n\n\t\t\tif (opts.onHover && hoveredItem) {\n\t\t\t\t// use e.native for backwards compatibility\n\t\t\t\topts.onHover.call(me, e.native, hoveredItem);\n\t\t\t}\n\t\t}\n\t}\n});\n\nfunction createNewLegendAndAttach(chart, legendOpts) {\n\tvar legend = new Legend({\n\t\tctx: chart.ctx,\n\t\toptions: legendOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, legend, legendOpts);\n\tcore_layouts.addBox(chart, legend);\n\tchart.legend = legend;\n}\n\nvar plugin_legend = {\n\tid: 'legend',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making\n\t * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Legend,\n\n\tbeforeInit: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\n\t\tif (legendOpts) {\n\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar legendOpts = chart.options.legend;\n\t\tvar legend = chart.legend;\n\n\t\tif (legendOpts) {\n\t\t\thelpers$1.mergeIf(legendOpts, core_defaults.global.legend);\n\n\t\t\tif (legend) {\n\t\t\t\tcore_layouts.configure(chart, legend, legendOpts);\n\t\t\t\tlegend.options = legendOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewLegendAndAttach(chart, legendOpts);\n\t\t\t}\n\t\t} else if (legend) {\n\t\t\tcore_layouts.removeBox(chart, legend);\n\t\t\tdelete chart.legend;\n\t\t}\n\t},\n\n\tafterEvent: function(chart, e) {\n\t\tvar legend = chart.legend;\n\t\tif (legend) {\n\t\t\tlegend.handleEvent(e);\n\t\t}\n\t}\n};\n\nvar noop$2 = helpers$1.noop;\n\ncore_defaults._set('global', {\n\ttitle: {\n\t\tdisplay: false,\n\t\tfontStyle: 'bold',\n\t\tfullWidth: true,\n\t\tpadding: 10,\n\t\tposition: 'top',\n\t\ttext: '',\n\t\tweight: 2000         // by default greater than legend (1000) to be above\n\t}\n});\n\n/**\n * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!\n */\nvar Title = core_element.extend({\n\tinitialize: function(config) {\n\t\tvar me = this;\n\t\thelpers$1.extend(me, config);\n\n\t\t// Contains hit boxes for each dataset (in dataset order)\n\t\tme.legendHitBoxes = [];\n\t},\n\n\t// These methods are ordered by lifecycle. Utilities then follow.\n\n\tbeforeUpdate: noop$2,\n\tupdate: function(maxWidth, maxHeight, margins) {\n\t\tvar me = this;\n\n\t\t// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n\t\tme.beforeUpdate();\n\n\t\t// Absorb the master measurements\n\t\tme.maxWidth = maxWidth;\n\t\tme.maxHeight = maxHeight;\n\t\tme.margins = margins;\n\n\t\t// Dimensions\n\t\tme.beforeSetDimensions();\n\t\tme.setDimensions();\n\t\tme.afterSetDimensions();\n\t\t// Labels\n\t\tme.beforeBuildLabels();\n\t\tme.buildLabels();\n\t\tme.afterBuildLabels();\n\n\t\t// Fit\n\t\tme.beforeFit();\n\t\tme.fit();\n\t\tme.afterFit();\n\t\t//\n\t\tme.afterUpdate();\n\n\t\treturn me.minSize;\n\n\t},\n\tafterUpdate: noop$2,\n\n\t//\n\n\tbeforeSetDimensions: noop$2,\n\tsetDimensions: function() {\n\t\tvar me = this;\n\t\t// Set the unconstrained dimension before label rotation\n\t\tif (me.isHorizontal()) {\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.width = me.maxWidth;\n\t\t\tme.left = 0;\n\t\t\tme.right = me.width;\n\t\t} else {\n\t\t\tme.height = me.maxHeight;\n\n\t\t\t// Reset position before calculating rotation\n\t\t\tme.top = 0;\n\t\t\tme.bottom = me.height;\n\t\t}\n\n\t\t// Reset padding\n\t\tme.paddingLeft = 0;\n\t\tme.paddingTop = 0;\n\t\tme.paddingRight = 0;\n\t\tme.paddingBottom = 0;\n\n\t\t// Reset minSize\n\t\tme.minSize = {\n\t\t\twidth: 0,\n\t\t\theight: 0\n\t\t};\n\t},\n\tafterSetDimensions: noop$2,\n\n\t//\n\n\tbeforeBuildLabels: noop$2,\n\tbuildLabels: noop$2,\n\tafterBuildLabels: noop$2,\n\n\t//\n\n\tbeforeFit: noop$2,\n\tfit: function() {\n\t\tvar me = this;\n\t\tvar opts = me.options;\n\t\tvar minSize = me.minSize = {};\n\t\tvar isHorizontal = me.isHorizontal();\n\t\tvar lineCount, textSize;\n\n\t\tif (!opts.display) {\n\t\t\tme.width = minSize.width = me.height = minSize.height = 0;\n\t\t\treturn;\n\t\t}\n\n\t\tlineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;\n\t\ttextSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;\n\n\t\tme.width = minSize.width = isHorizontal ? me.maxWidth : textSize;\n\t\tme.height = minSize.height = isHorizontal ? textSize : me.maxHeight;\n\t},\n\tafterFit: noop$2,\n\n\t// Shared Methods\n\tisHorizontal: function() {\n\t\tvar pos = this.options.position;\n\t\treturn pos === 'top' || pos === 'bottom';\n\t},\n\n\t// Actually draw the title block on the canvas\n\tdraw: function() {\n\t\tvar me = this;\n\t\tvar ctx = me.ctx;\n\t\tvar opts = me.options;\n\n\t\tif (!opts.display) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar fontOpts = helpers$1.options._parseFont(opts);\n\t\tvar lineHeight = fontOpts.lineHeight;\n\t\tvar offset = lineHeight / 2 + opts.padding;\n\t\tvar rotation = 0;\n\t\tvar top = me.top;\n\t\tvar left = me.left;\n\t\tvar bottom = me.bottom;\n\t\tvar right = me.right;\n\t\tvar maxWidth, titleX, titleY;\n\n\t\tctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour\n\t\tctx.font = fontOpts.string;\n\n\t\t// Horizontal\n\t\tif (me.isHorizontal()) {\n\t\t\ttitleX = left + ((right - left) / 2); // midpoint of the width\n\t\t\ttitleY = top + offset;\n\t\t\tmaxWidth = right - left;\n\t\t} else {\n\t\t\ttitleX = opts.position === 'left' ? left + offset : right - offset;\n\t\t\ttitleY = top + ((bottom - top) / 2);\n\t\t\tmaxWidth = bottom - top;\n\t\t\trotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);\n\t\t}\n\n\t\tctx.save();\n\t\tctx.translate(titleX, titleY);\n\t\tctx.rotate(rotation);\n\t\tctx.textAlign = 'center';\n\t\tctx.textBaseline = 'middle';\n\n\t\tvar text = opts.text;\n\t\tif (helpers$1.isArray(text)) {\n\t\t\tvar y = 0;\n\t\t\tfor (var i = 0; i < text.length; ++i) {\n\t\t\t\tctx.fillText(text[i], 0, y, maxWidth);\n\t\t\t\ty += lineHeight;\n\t\t\t}\n\t\t} else {\n\t\t\tctx.fillText(text, 0, 0, maxWidth);\n\t\t}\n\n\t\tctx.restore();\n\t}\n});\n\nfunction createNewTitleBlockAndAttach(chart, titleOpts) {\n\tvar title = new Title({\n\t\tctx: chart.ctx,\n\t\toptions: titleOpts,\n\t\tchart: chart\n\t});\n\n\tcore_layouts.configure(chart, title, titleOpts);\n\tcore_layouts.addBox(chart, title);\n\tchart.titleBlock = title;\n}\n\nvar plugin_title = {\n\tid: 'title',\n\n\t/**\n\t * Backward compatibility: since 2.1.5, the title is registered as a plugin, making\n\t * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of\n\t * the plugin, which one will be re-exposed in the chart.js file.\n\t * https://github.com/chartjs/Chart.js/pull/2640\n\t * @private\n\t */\n\t_element: Title,\n\n\tbeforeInit: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\n\t\tif (titleOpts) {\n\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t}\n\t},\n\n\tbeforeUpdate: function(chart) {\n\t\tvar titleOpts = chart.options.title;\n\t\tvar titleBlock = chart.titleBlock;\n\n\t\tif (titleOpts) {\n\t\t\thelpers$1.mergeIf(titleOpts, core_defaults.global.title);\n\n\t\t\tif (titleBlock) {\n\t\t\t\tcore_layouts.configure(chart, titleBlock, titleOpts);\n\t\t\t\ttitleBlock.options = titleOpts;\n\t\t\t} else {\n\t\t\t\tcreateNewTitleBlockAndAttach(chart, titleOpts);\n\t\t\t}\n\t\t} else if (titleBlock) {\n\t\t\tcore_layouts.removeBox(chart, titleBlock);\n\t\t\tdelete chart.titleBlock;\n\t\t}\n\t}\n};\n\nvar plugins = {};\nvar filler = plugin_filler;\nvar legend = plugin_legend;\nvar title = plugin_title;\nplugins.filler = filler;\nplugins.legend = legend;\nplugins.title = title;\n\n/**\n * @namespace Chart\n */\n\n\ncore_controller.helpers = helpers$1;\n\n// @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!\ncore_helpers();\n\ncore_controller._adapters = core_adapters;\ncore_controller.Animation = core_animation;\ncore_controller.animationService = core_animations;\ncore_controller.controllers = controllers;\ncore_controller.DatasetController = core_datasetController;\ncore_controller.defaults = core_defaults;\ncore_controller.Element = core_element;\ncore_controller.elements = elements;\ncore_controller.Interaction = core_interaction;\ncore_controller.layouts = core_layouts;\ncore_controller.platform = platform;\ncore_controller.plugins = core_plugins;\ncore_controller.Scale = core_scale;\ncore_controller.scaleService = core_scaleService;\ncore_controller.Ticks = core_ticks;\ncore_controller.Tooltip = core_tooltip;\n\n// Register built-in scales\n\ncore_controller.helpers.each(scales, function(scale, type) {\n\tcore_controller.scaleService.registerScaleType(type, scale, scale._defaults);\n});\n\n// Load to register built-in adapters (as side effects)\n\n\n// Loading built-in plugins\n\nfor (var k in plugins) {\n\tif (plugins.hasOwnProperty(k)) {\n\t\tcore_controller.plugins.register(plugins[k]);\n\t}\n}\n\ncore_controller.platform.initialize();\n\nvar src = core_controller;\nif (typeof window !== 'undefined') {\n\twindow.Chart = core_controller;\n}\n\n// DEPRECATIONS\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Chart\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.Chart = core_controller;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Legend\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Legend = plugins.legend._element;\n\n/**\n * Provided for backward compatibility, not available anymore\n * @namespace Chart.Title\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.Title = plugins.title._element;\n\n/**\n * Provided for backward compatibility, use Chart.plugins instead\n * @namespace Chart.pluginService\n * @deprecated since version 2.1.5\n * @todo remove at version 3\n * @private\n */\ncore_controller.pluginService = core_controller.plugins;\n\n/**\n * Provided for backward compatibility, inheriting from Chart.PlugingBase has no\n * effect, instead simply create/register plugins via plain JavaScript objects.\n * @interface Chart.PluginBase\n * @deprecated since version 2.5.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.PluginBase = core_controller.Element.extend({});\n\n/**\n * Provided for backward compatibility, use Chart.helpers.canvas instead.\n * @namespace Chart.canvasHelpers\n * @deprecated since version 2.6.0\n * @todo remove at version 3\n * @private\n */\ncore_controller.canvasHelpers = core_controller.helpers.canvas;\n\n/**\n * Provided for backward compatibility, use Chart.layouts instead.\n * @namespace Chart.layoutService\n * @deprecated since version 2.7.3\n * @todo remove at version 3\n * @private\n */\ncore_controller.layoutService = core_controller.layouts;\n\n/**\n * Provided for backward compatibility, not available anymore.\n * @namespace Chart.LinearScaleBase\n * @deprecated since version 2.8\n * @todo remove at version 3\n * @private\n */\ncore_controller.LinearScaleBase = scale_linearbase;\n\n/**\n * Provided for backward compatibility, instead we should create a new Chart\n * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).\n * @deprecated since version 2.8.0\n * @todo remove at version 3\n */\ncore_controller.helpers.each(\n\t[\n\t\t'Bar',\n\t\t'Bubble',\n\t\t'Doughnut',\n\t\t'Line',\n\t\t'PolarArea',\n\t\t'Radar',\n\t\t'Scatter'\n\t],\n\tfunction(klass) {\n\t\tcore_controller[klass] = function(ctx, cfg) {\n\t\t\treturn new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {\n\t\t\t\ttype: klass.charAt(0).toLowerCase() + klass.slice(1)\n\t\t\t}));\n\t\t};\n\t}\n);\n\nreturn src;\n\n})));\n","//! moment.js\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            var args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays (ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        var weekdays = isArray(this._weekdays) ? this._weekdays :\n            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];\n        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)\n            : (m) ? weekdays[m.day()] : weekdays;\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                aliasedRequire('./locale/' + name);\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000;\n    var MS_PER_MINUTE = 60 * MS_PER_SECOND;\n    var MS_PER_HOUR = 60 * MS_PER_MINUTE;\n    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return (dividend % divisor + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':   return months;\n                case 'quarter': return months / 3;\n                case 'year':    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asQuarters     = makeAs('Q');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asQuarters     = asQuarters;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.24.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n","var $ = jQuery;\r\nvar Chart = require('chart.js');\r\n\r\n$(function () {\r\n\r\n  window.chartColors = {\r\n    red: \"rgb(255, 99, 132)\",\r\n    orange: \"rgb(255, 159, 64)\",\r\n    yellow: \"rgb(255, 205, 86)\",\r\n    green: \"rgb(75, 192, 192)\",\r\n    blue: \"rgb(54, 162, 235)\",\r\n    purple: \"rgb(153, 102, 255)\",\r\n    grey: \"rgb(201, 203, 207)\"\r\n  };\r\n\r\n  var colorsToAssign = [\r\n    window.chartColors.blue,\r\n    window.chartColors.green,\r\n    window.chartColors.yellow,\r\n    window.chartColors.red\r\n  ]\r\n\r\n  if (summaryChartData) {\r\n\r\n    var summaryChartDatasetsWithColors = summaryChartData.datasets.map(\r\n      (d, i) => {\r\n        var d2 = { ...d }\r\n        d2.backgroundColor = colorsToAssign[i]\r\n        console.log(d2);\r\n        return d2\r\n      });\r\n    summaryChartData.datasets = summaryChartDatasetsWithColors;\r\n    console.log(summaryChartData)\r\n\r\n    var leaderboard = new Chart(\r\n      document.getElementById(\"FishFryLeaderboard\"), {\r\n        type: \"bar\",\r\n        data: summaryChartData,\r\n        options: {\r\n          title: {\r\n            display: false,\r\n          },\r\n          tooltips: {\r\n            mode: 'index',\r\n            intersect: false\r\n          },\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }\r\n      }\r\n    );\r\n  } else {\r\n    console.log(\"No stats\");\r\n    $('#LeaderBoardAlert').show();\r\n  }\r\n\r\n})"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}